'use strict';

var baseApp = angular.module('BaseApp', ['ui.router', 'ngSocket', 'ngAnimate', 'ui.sortable', 'ui.bootstrap', 'ngSanitize', 'ui.select', 'ngCookies', 'monospaced.elastic', 'yaru22.angularjs-timeago', 'angularFileUpload', 'hc.marked', 'ui.calendar', 'angulartics', 'dndLists', 'angulartics.google.analytics', 'ngColorThief', 'appController', 'angular-medium-editor', 'mentio', 'minicolors', 'ui.ace', 'angular-redactor']);
baseApp.provider('environment', function () {
  var _environments = {
    local: {
      host: 'localhost:8080',
      config: {
        socketUrl: 'http://localhost:8089'
      }
    },
    dev: {
      host: 'test.sys.breezy.hr',
      config: {
        socketUrl: 'https://sockets-ws-secure.breezy.hr'
      }
    },
    prod: {
      host: 'breezy.hr',
      config: {
        socketUrl: 'https://sockets-ws-secure.breezy.hr'
      }
    },
    prod_app: {
      host: 'app.breezy.hr',
      config: {
        socketUrl: 'https://sockets-ws-secure.breezy.hr'
      }
    }
  },
      _environment;

  this.getEnvironment = function () {
    var host = window.location.host;

    if (_environment) {
      return _environment;
    }

    for (var environment in _environments) {
      if (_environments[environment].host === host) {
        _environment = environment;
        return _environment;
      }
    }

    return null;
  };

  this.get = function (property) {
    if (!_environments[this.getEnvironment()]) {
      _environments[this.getEnvironment()] = _environments.dev;
    }

    if (property === 'host') return _environments[this.getEnvironment()].host;
    return _environments[this.getEnvironment()].config[property];
  };

  this.$get = function () {
    return {
      get: this.get,
      getEnvironment: this.getEnvironment
    };
  };
});
baseApp.config(['markedProvider', function (markedProvider) {
  markedProvider.setOptions({
    gfm: true,
    tables: false,
    breaks: true,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    smartypants: false
  });
}]);
baseApp.config(['$compileProvider', function ($compileProvider) {
  $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension|skype|tel):/); // Angular before v1.2 uses $compileProvider.urlSanitizationWhitelist(...)
}]);
baseApp.config(['$socketProvider', 'environmentProvider', function ($socketProvider, environmentProvider) {
  $socketProvider.setUrl(environmentProvider.get('socketUrl'));
}]);
baseApp.config(['$uibModalProvider', function ($uibModalProvider) {
  $uibModalProvider.options.backdrop = "static";
}]);
baseApp.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'BETA', function ($stateProvider, $urlRouterProvider, $locationProvider, BETA) {
  /* initializes user, companies ect before controller loads */
  function validateAppState($q, AppClient, $rootScope, $stateParams) {
    var deferred = $q.defer();
    AppClient.validateAppState($rootScope, $rootScope, $stateParams, function () {
      deferred.resolve();
    });
    return deferred.promise;
  }

  function validateInitAppState($q, AppClient, $rootScope) {
    var deferred = $q.defer();
    AppClient.validateInitAppState($rootScope, $rootScope, function () {
      deferred.resolve();
    });
    return deferred.promise;
  }

  $locationProvider.html5Mode({
    enabled: true,
    requireBase: false
  });
  $stateProvider.state('signin', {
    url: '/signin',
    templateUrl: '/templates/v2/app/signin.html',
    controller: 'SigninViewCtrl'
  }).state('signup', {
    url: '/signup',
    templateUrl: '/templates/app/signup.html',
    controller: 'SignupViewCtrl'
  }).state('signout', {
    url: '/signout',
    controller: 'SignoutViewCtrl'
  }).state('invite', {
    url: '/invite/:inviteId',
    templateUrl: '/templates/v2/app/company_invite.html',
    controller: 'InviteViewCtrl'
  }).state('initialize', {
    url: '/app/initialize',
    templateUrl: '/templates/v2/app/initialize.html',
    controller: 'InitializeViewCtrl',
    resolve: {
      validateInitAppState: validateInitAppState
    }
  }).state('companies', {
    url: '/app/companies',
    templateUrl: '/templates/v2/app/companies.html',
    controller: 'CompaniesViewCtrl',
    resolve: {
      validateInitAppState: validateInitAppState
    }
  }).state('candidate-video-interview', {
    url: '/app/c/:companyFriendlyId/p/:positionId/candidates/:candidateId/video/:interviewId',
    templateUrl: '/templates/v2/app/video_interview.html',
    controller: 'VideoInterviewInternalViewCtrl',
    resolve: {
      validateAppState: validateAppState,
      // waits for validateAppState to finish
      initialize: function initialize(validateAppState, SharedData, $stateParams, BETA, AppClient) {
        var companyFriendlyId = $stateParams.companyFriendlyId;
        SharedData.activeCompany = SharedData.companies[companyFriendlyId];
        SharedData.beta = BETA.indexOf(companyFriendlyId) >= 0;

        if (!SharedData.activeCompany) {
          return AppClient.navigateTo('companies');
        }
      },
      // waits for initializeActiveCompany to finish
      initializeMyPositions: function initializeMyPositions(initialize, sharedDataUtils) {
        sharedDataUtils.initializeMyPositions();
      },
      // waits for initializeMyPositions to finish
      initializeAllPositions: function initializeAllPositions(initializeMyPositions, SharedData) {
        var allPositions = SharedData.activeCompany.positions; //angular.copy($scope.shared.activeCompany.positions)

        SharedData.positions = {};
        angular.forEach(allPositions, function (position) {
          if (!SharedData.positions[position.state]) {
            SharedData.positions[position.state] = [];
          }

          SharedData.positions[position.state].push(position);
        });
      },
      getCandidate: function getCandidate(initialize, SharedData, $stateParams, $q, AppClient) {
        var deferred = $q.defer();
        AppClient.getCandidate(SharedData.activeCompany.company._id, $stateParams.positionId, $stateParams.candidateId, function (error, candidate) {
          deferred.resolve(candidate);
        });
        return deferred.promise;
      },
      getCandidateMetadata: function getCandidateMetadata(getCandidate, $q, AppClient, $stateParams) {
        var deferred = $q.defer();
        AppClient.getCandidateMetadata(getCandidate.company_id, $stateParams.positionId, $stateParams.candidateId, function (error, metadata) {
          deferred.resolve(metadata);
        });
        return deferred.promise;
      },
      getInterview: function getInterview(validateAppState, $q, AppClient, $stateParams) {
        var deferred = $q.defer();
        AppClient.getInterview($stateParams.interviewId, function (error, interview) {
          deferred.resolve(interview);
        });
        return deferred.promise;
      },
      getVideoToken: function getVideoToken(validateAppState, $q, AppClient, $stateParams) {
        var deferred = $q.defer();
        AppClient.getVideoToken($stateParams.interviewId, function (error, token) {
          deferred.resolve(token);
        });
        return deferred.promise;
      },
      isAppInitialized: function isAppInitialized(validateAppState, getCandidate, getCandidateMetadata, getInterview, getVideoToken, SharedData) {
        SharedData.isAppInitialized = true;
      }
    }
  }).state('candidate-interview', {
    url: '/app/c/:companyFriendlyId/p/:positionId/candidates/:candidateId/interview/:interviewId',
    templateUrl: '/templates/v2/app/interview.html',
    controller: 'InterviewInternalViewCtrl',
    resolve: {
      validateAppState: validateAppState,
      // waits for validateAppState to finish
      initialize: function initialize(validateAppState, SharedData, $stateParams, BETA, AppClient) {
        var companyFriendlyId = $stateParams.companyFriendlyId;
        SharedData.activeCompany = SharedData.companies[companyFriendlyId];
        SharedData.beta = BETA.indexOf(companyFriendlyId) >= 0;

        if (!SharedData.activeCompany) {
          return AppClient.navigateTo('companies');
        }
      },
      // waits for initializeActiveCompany to finish
      initializeMyPositions: function initializeMyPositions(initialize, sharedDataUtils) {
        sharedDataUtils.initializeMyPositions();
      },
      // waits for initializeMyPositions to finish
      initializeAllPositions: function initializeAllPositions(initializeMyPositions, SharedData) {
        var allPositions = SharedData.activeCompany.positions; //angular.copy($scope.shared.activeCompany.positions)

        SharedData.positions = {};
        angular.forEach(allPositions, function (position) {
          if (!SharedData.positions[position.state]) {
            SharedData.positions[position.state] = [];
          }

          SharedData.positions[position.state].push(position);
        });
      },
      getCandidate: function getCandidate(initialize, SharedData, $stateParams, $q, AppClient) {
        var deferred = $q.defer();
        AppClient.getCandidate(SharedData.activeCompany.company._id, $stateParams.positionId, $stateParams.candidateId, function (error, candidate) {
          deferred.resolve(candidate);
        });
        return deferred.promise;
      },
      getCandidateMetadata: function getCandidateMetadata(getCandidate, $q, AppClient, $stateParams) {
        var deferred = $q.defer();
        AppClient.getCandidateMetadata(getCandidate.company_id, $stateParams.positionId, $stateParams.candidateId, function (error, metadata) {
          deferred.resolve(metadata);
        });
        return deferred.promise;
      },
      getInterview: function getInterview(validateAppState, $q, AppClient, $stateParams) {
        var deferred = $q.defer();
        AppClient.getInterview($stateParams.interviewId, function (error, interview) {
          deferred.resolve(interview);
        });
        return deferred.promise;
      },
      isAppInitialized: function isAppInitialized(validateAppState, getCandidate, getCandidateMetadata, getInterview, SharedData) {
        SharedData.isAppInitialized = true;
      }
    }
  }).state('company', {
    url: '/app/c/:companyFriendlyId',
    templateUrl: '/templates/v2/app/index.html',
    controller: 'CompanyViewCtrl',
    resolve: {
      validateAppState: validateAppState,
      // inits activeCompany, beta, Bugsnag.company
      // waits for validateAppState to finish
      initialize: function initialize(validateAppState, SharedData, $state, $stateParams, BETA, PUBLICBETA, PUBLICBETAUSERS, AppClient) {
        var companyFriendlyId = $stateParams.companyFriendlyId;
        SharedData.activeCompany = SharedData.companies[companyFriendlyId];

        if (SharedData.activeCompany.company.settings.ats.enforceauth && SharedData.activeCompany.company.settings.ats.enforceauth.enabled === true) {
          // default to google for now
          if (!SharedData.user.auth_by || SharedData.user.auth_by.source !== 'google') {
            if (SharedData.user.auth_by) {
              console.log('Signin is not google: ' + SharedData.user.auth_by.source);
            } else {
              console.log('Signin has no auth_by');
            }

            return window.location = '/signin/' + SharedData.activeCompany.company.friendly_id + '?auth-required=true';
          }

          var emailDomain = SharedData.user.auth_by.source_user_id.toLowerCase().trim().replace(/^.*\@/, "");
          console.log('email domain: ' + emailDomain); // Check domain list.

          if (SharedData.activeCompany.company.settings.ats.enforceauth.domains) {
            var domainValid = false;
            SharedData.activeCompany.company.settings.ats.enforceauth.domains.forEach(function (domain) {
              console.log('Checking: ' + emailDomain + ' against ' + domain);
              if (emailDomain === domain) domainValid = true;
            });

            if (domainValid === false) {
              console.log('Forcing reauth. Google email domain not authorized');
              return window.location = '/signin/' + SharedData.activeCompany.company.friendly_id + '?auth-required=true';
            }
          }
        }

        SharedData.beta = BETA.indexOf(companyFriendlyId) >= 0;
        var public_beta_ids = BETA.concat(PUBLICBETA);
        var public_beta_users = PUBLICBETAUSERS;
        SharedData.public_beta = public_beta_ids.indexOf(companyFriendlyId) >= 0 || public_beta_users.indexOf(SharedData.user._id) >= 0;
        /*SharedData.activeCompany.company.subscriptions = {
            sms: {
                plan: {
                    id: 'sms_v1_domestic_monthly',
                    name: 'SMS Domestic Monthly',
                    limit: 5000,
                    period: 30,
                    period_unit: 'day',
                    monthly_cost: '500',
                    billing_cycle: 'monthly'
                },
                ssid: 'sub_djfdlkjdjd'
            }
        };*/

        if (!SharedData.activeCompany) {
          return AppClient.navigateTo('companies');
        }

        $(".loader-container").removeClass("hide-quote");
        Bugsnag.metaData = {
          company: SharedData.activeCompany.company.name
        };
      },
      // waits for initializeActiveCompany to finish
      initializeMyPositions: function initializeMyPositions(initialize, sharedDataUtils) {
        sharedDataUtils.initializeMyPositions();
      },
      // waits for initializeMyPositions to finish
      initializeAllPositions: function initializeAllPositions(initializeMyPositions, SharedData) {
        var allPositions = SharedData.activeCompany.positions; //angular.copy($scope.shared.activeCompany.positions)

        SharedData.positions = {};
        angular.forEach(allPositions, function (position) {
          if (!SharedData.positions[position.state]) {
            SharedData.positions[position.state] = [];
          }

          SharedData.positions[position.state].push(position);
        });
      },
      initializeProductUpdates: function initializeProductUpdates($q, $cookieStore, AppClient) {
        var deferred = $q.defer();
        var productUpdatesViewed = $cookieStore.get('ProductUpdatesViewed'); // $scope.productUpdatesViewed = $cookieStore.get('ProductUpdatesViewed');

        AppClient.getProductUpdates(function (error, results) {
          setTimeout(function () {
            deferred.resolve({
              productUpdatesViewed: productUpdatesViewed,
              updates: results
            });
          }, 3000);
        });
        return deferred.promise;
      },
      isAppInitialized: function isAppInitialized(validateAppState, initialize, initializeMyPositions, initializeAllPositions, initializeProductUpdates, SharedData) {
        SharedData.isAppInitialized = true;
      },
      shared: function shared(isAppInitialized, SharedData) {
        return SharedData;
      }
    }
  }).state('company.plans', {
    url: '/plans',
    templateUrl: '/templates/v2/app/company_settings/plans.html',
    controller: 'CompanyPlansCtrl',
    resolve: {
      plans: function plans(isAppInitialized, FeaturesService) {
        return FeaturesService.actions.plans();
      }
    }
  }).state('company.expired', {
    url: '/expired',
    templateUrl: '/templates/v2/app/company/trial.expired.v7.html',
    controller: 'CompanyPlansCtrl',
    params: {
      blockNav: true
    },
    resolve: {
      plans: function plans(isAppInitialized, FeaturesService) {
        return FeaturesService.actions.plans();
      }
    }
  }).state('company.home', {
    url: '/home',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.tasks', {
    url: '/tasks',
    templateUrl: '/templates/v2/app/tasks/tasks.html',
    controller: 'CompanyTasksViewCtrl'
    /*resolve: {
        tasks: function(isAppInitialized, SharedData, TasksService) {
            return TasksService.getTasks("member");
        },
    }*/

  }).state('company.task', {
    url: '/tasks/:taskId?status&type',
    templateUrl: '/templates/v2/app/tasks/tasks.html',
    controller: 'CompanyTasksViewCtrl'
    /*resolve: {
        tasks: function(isAppInitialized, SharedData, TasksService) {
            return TasksService.getTasks("member");
        },
    }*/

  }).state('company.candidates', {
    url: '/candidates',
    params: {
      searchTerm: null,
      filters: null
    },
    templateUrl: '/templates/v2/app/candidates/candidates_grid.html',
    controller: 'CompanyCandidatesGridViewCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      },
      categories: function categories(isAppInitialized, SharedData, PositionsService) {
        return PositionsService.remote.getCategories();
      }
    }
  }).state('company.candidate-sourcing', {
    url: '/sourcing',
    templateUrl: '/templates/v2/app/candidates_sourcing/candidates_sourcing_grid.html',
    controller: 'CandidatesSourcingCtrl',
    resolve: {
      degrees: function degrees(CandidatesSourcingService) {
        return CandidatesSourcingService.degrees;
      },
      majors: function majors(CandidatesSourcingService) {
        return CandidatesSourcingService.majors;
      },
      industries: function industries(CandidatesSourcingService) {
        return CandidatesSourcingService.industries;
      }
    }
  }).state('company.positions', {
    url: '/positions',
    templateUrl: '/templates/v2/app/positions/positions.grid.html',
    controller: 'CompanyPositionsGridViewCtrl',
    resolve: {
      categories: function categories(isAppInitialized, SharedData, PositionsService) {
        return PositionsService.remote.getCategories();
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.user-settings', {
    url: '/company/user/:userSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.section', {
    url: '/company/:section',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.messenger', {
    url: '/company/messenger/:messengerSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.new-pool-section', {
    url: '/pools/:type/description',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.new-position-section', {
    url: '/positions/:type/description',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      position: function position(isAppInitialized, SharedData, PositionsService, $stateParams) {
        return $stateParams.type !== 'new' ? PositionsService.local.getPositionDetail(SharedData.activeCompany.company._id, $stateParams.positionId) : null;
      },
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }) // DEPRECATED
  .state('company.approve-position', {
    url: '/positions/:positionId/approve',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.position-approval', {
    url: '/positions/:positionId/approval/:token',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.edit-position-section', {
    url: '/positions/:positionId/:type/:section',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      position: function position(isAppInitialized, SharedData, PositionsService, $stateParams) {
        return PositionsService.local.getPositionDetail(SharedData.activeCompany.company._id, $stateParams.positionId);
      },
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.calendar', {
    url: '/calendar',
    templateUrl: '/templates/v2/app/company/company.calendar.html',
    controller: 'CompanyCalendarViewCtrl',
    resolve: {
      schedule: function schedule(isAppInitialized, shared, AppClient) {
        return AppClient.getUserCalendar(shared.activeCompany.company._id, null);
      }
    }
  }).state('company.inbox', {
    url: '/inbox',
    templateUrl: '/templates/v2/app/company/company.inbox.html',
    controller: 'CompanyInboxViewCtrl',
    resolve: {
      conversations: function conversations(isAppInitialized, shared, AppClient) {
        return AppClient.getCompanyInbox(shared.activeCompany.company._id, null, 'candidate');
      }
    }
  }).state('company.position', {
    abstract: true,
    url: '/p/:positionId',
    templateUrl: '/templates/v2/app/position/position.html',
    controller: 'PositionViewCtrl',
    resolve: {
      position: function position(isAppInitialized, AppClient, SharedData, PositionsService, $stateParams) {
        //return PositionsService.getPositionDetail(SharedData.activeCompany.company._id, $stateParams.positionId);
        var p = SharedData.activeCompany.positions[$stateParams.positionId];
        if (p) return SharedData.activeCompany.positions[$stateParams.positionId];else AppClient.getPosition($scope.positionId, function (error, result) {
          return result;
        });
      },
      pipeline: function pipeline(isAppInitialized, SharedData, PipelinesService, position) {
        var pipeline = PipelinesService.local.getPipelineByPosition(position);
        return pipeline;
      }
    }
  }).state('company.position.pipeline', {
    url: '/pipeline',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.pipeline.html',
        controller: 'PositionPipelineViewCtrl'
      }
    },
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.position.candidates', {
    url: '/candidates',
    params: {
      searchTerm: null,
      filters: null
    },
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.candidates.html',
        controller: 'PositionCandidatesGridViewCtrl'
      }
    },
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.position.tasks', {
    url: '/tasks',
    views: {
      position: {
        templateUrl: '/templates/v2/app/tasks/tasks.html',
        controller: 'CompanyTasksViewCtrl'
      }
    }
  }).state('company.position.task', {
    url: '/tasks/:taskId',
    views: {
      position: {
        templateUrl: '/templates/v2/app/tasks/tasks.html',
        controller: 'CompanyTasksViewCtrl'
      }
    }
  }).state('company.position.inbox', {
    url: '/inbox',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.inbox.html',
        controller: 'PositionInboxViewCtrl'
      }
    },
    resolve: {
      conversations: function conversations(isAppInitialized, SharedData, AppClient, $stateParams) {
        return AppClient.getPositionInbox(SharedData.activeCompany.company._id, $stateParams.positionId, null, 'candidate');
      }
    }
  }).state('company.position.activity', {
    url: '/activity',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.activity.html',
        controller: 'PositionActivityViewCtrl'
      }
    }
  }).state('company.position.calendar', {
    url: '/calendar',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.calendar.html',
        controller: 'PositionCalendarViewCtrl'
      }
    }
  }).state('company.position.calendar2', {
    url: '/calendarv2',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.calendar_v2.html',
        controller: 'PositionCalendarViewCtrl'
      }
    }
  }).state('company.position.analytics', {
    abstract: true,
    url: '/analytics',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.analytics.html',
        controller: 'PositionAnalyticsViewCtrl'
      }
    }
  }).state('company.position.analytics.overview', {
    url: '/overview',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.overview.html',
        controller: 'AnalyticsOverviewViewCtrl'
      }
    }
  }).state('company.position.analytics.sources', {
    url: '/sources',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.sources.html',
        controller: 'AnalyticsSourcesViewCtrl'
      }
    }
  }).state('company.position.analytics.sourced', {
    url: '/sourced',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.sourced.html',
        controller: 'AnalyticsSourcedViewCtrl'
      }
    }
  }).state('company.position.analytics.referred', {
    url: '/referred',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.referred.html',
        controller: 'AnalyticsReferredViewCtrl'
      }
    }
  }).state('company.position.analytics.recruited', {
    url: '/recruited',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.recruited.html',
        controller: 'AnalyticsRecruitedViewCtrl'
      }
    }
  }).state('company.position.analytics.pipeline', {
    url: '/pipeline',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.pipeline.html',
        controller: 'AnalyticsPipelineViewCtrl'
      }
    }
  }).state('company.position.analytics.messaging', {
    url: '/messaging',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.messaging.html',
        controller: 'AnalyticsMessagingViewCtrl'
      }
    }
  }).state('company.position.analytics.questionnaires', {
    url: '/questionnaires',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.questionnaires.html',
        controller: 'AnalyticsQuestionnairesViewCtrl'
      }
    }
  }).state('company.position.analytics.eeoc', {
    url: '/eeoc',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.eeoc.html',
        controller: 'AnalyticsEEOCViewCtrl'
      }
    }
  }).state('company.position.analytics.dispositions', {
    url: '/dispositions',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.dispositions.html',
        controller: 'AnalyticsDispositionsViewCtrl'
      }
    }
  }).state('company.position.candidate', {
    url: '/candidates/:candidateId/:section',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.pipeline.html',
        controller: 'PositionPipelineViewCtrl'
      }
    },
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.position.candidate-full', {
    url: '/candidates/:candidateId/full/:section',
    views: {
      position: {
        templateUrl: '/templates/v2/app/position/position.candidate_full.html',
        controller: 'PositionPipelineViewCtrl'
      }
    },
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.analytics', {
    abstract: true,
    url: '/analytics',
    templateUrl: '/templates/v2/app/company/company.analytics.html',
    controller: 'CompanyAnalyticsViewCtrl'
  }).state('company.analytics.overview', {
    url: '/overview',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.overview.html',
        controller: 'AnalyticsOverviewViewCtrl'
      }
    }
  }).state('company.analytics.sources', {
    url: '/sources',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.sources.html',
        controller: 'AnalyticsSourcesViewCtrl'
      }
    }
  }).state('company.analytics.sourced', {
    url: '/sourced',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.sourced.html',
        controller: 'AnalyticsSourcedViewCtrl'
      }
    }
  }).state('company.analytics.source', {
    url: '/sources/:sourceId',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.source.html',
        controller: 'AnalyticsSourceViewCtrl'
      }
    }
  }).state('company.analytics.user', {
    url: '/user/:userId',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.user.html',
        controller: 'AnalyticsUserViewCtrl'
      }
    }
  }).state('company.analytics.referred', {
    url: '/referred',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.referred.html',
        controller: 'AnalyticsReferredViewCtrl'
      }
    }
  }).state('company.analytics.recruited', {
    url: '/recruited',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.recruited.html',
        controller: 'AnalyticsRecruitedViewCtrl'
      }
    }
  }).state('company.analytics.messaging', {
    url: '/messaging',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.messaging.html',
        controller: 'AnalyticsMessagingViewCtrl'
      }
    }
  }).state('company.analytics.questionnaires', {
    url: '/questionnaires',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.questionnaires.html',
        controller: 'AnalyticsQuestionnairesViewCtrl'
      }
    }
  }).state('company.analytics.timeinstage', {
    url: '/pipeline-performance',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.timeinstage.html',
        controller: 'AnalyticsTimeInStageViewCtrl'
      }
    }
  }).state('company.analytics.timetofill', {
    url: '/time-to-fill',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.timetofill.html',
        controller: 'AnalyticsTimeToFillViewCtrl'
      }
    }
  }).state('company.analytics.openpositions', {
    url: '/open-positions',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.openpositions.html',
        controller: 'AnalyticsOpenPositionsViewCtrl'
      }
    }
  }).state('company.analytics.eeoc', {
    url: '/eeoc',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.eeoc.html',
        controller: 'AnalyticsEEOCViewCtrl'
      }
    }
  }).state('company.analytics.dispositions', {
    url: '/dispositions',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.dispositions.html',
        controller: 'AnalyticsDispositionsViewCtrl'
      }
    }
  }).state('company.analytics.gdpr', {
    url: '/gdpr',
    views: {
      report: {
        templateUrl: '/templates/v2/app/analytics_views/analytics.gdpr.html',
        controller: 'AnalyticsGDPRViewCtrl'
      }
    }
  }).state('company.position-analytics-overview', {
    url: '/p/:positionId/analytics/overview',
    templateUrl: '/templates/v2/app/position/position.analytics_overview.html',
    controller: 'PositionAnalyticsOverviewViewCtrl'
  }).state('company.referral-portal-section', {
    url: '/referral-portal/:referralPortalSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.messenger-section', {
    url: '/messenger/:messengerSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.settings-section', {
    url: '/company/settings/:settingsSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.portal-section', {
    url: '/portal/:portalSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('company.welcome-video', {
    url: '/welcome/:welcomeSection',
    templateUrl: '/templates/v2/app/home/index.html',
    controller: 'CompanyHomeCtrl',
    resolve: {
      metadata: function metadata(isAppInitialized, SharedData, CandidatesFilterService) {
        return CandidatesFilterService.getMetadata(SharedData.activeCompany.company._id);
      },
      tags: function tags(isAppInitialized, SharedData, TaggingService) {
        return TaggingService.get(SharedData.activeCompany.company._id);
      }
    }
  }).state('index', {
    url: '/',
    templateUrl: '/templates/index.html',
    controller: function controller() {
      window.location = '/404';
    }
  });
}]);
baseApp.constant("BETA", ['eeoc-company', 'ace', 'zenefits-demo', 'acme-local', 'tasktester', 'acme-clone', 'acme', 'eventhash', 'jeezy-hr', 'boxtro', 'clone-company-test', 'replication-station', 'jobs']);
baseApp.constant("PUBLICBETA", []);
baseApp.constant("PUBLICBETAUSERS", ['a2e8385755de', 'a2e8385755de', '8f8feba718fa', '3b401ae59571', '521083e28997', 'e1b574774a92', '10505264617b', '68b553b6d5dc', '10505264617b', '1a8aefc21b1f', 'd8a206588533', 'd8a206588533', 'fca59fe96f04', 'ddc5ae855a10', 'c2b0d9b37b53', 'd8a206588533', 'af21fa4fba80', 'f536c9c84f42', '9691e1bd63f9', 'f495cffbefc7', '440d5602be57', '83f97ce043e9', 'b49f26a74334', '1bc3fea8fd72', '45a16db82ea8', '2ef4524860a5', '8d41fe3e91b8', '9694ce50bdb9', 'af94a34790e2', 'dd65a2d4ee11', 'a2e8385755de']); // constant delay times... controllers/directives should modify text and add null if they need it

baseApp.constant('DELAY_SEND_TIMES', [{
  text: '1 hour',
  delay: 3600000
}, {
  text: '4 hours',
  delay: 14400000
}, {
  text: '1 day',
  delay: 86400000
}, {
  text: '2 days',
  delay: 172800000
}, {
  text: '3 days',
  delay: 259200000
}, {
  text: '1 week',
  delay: 604800000
}, {
  text: '2 weeks',
  delay: 1209600000
}, {
  text: '1 month',
  delay: 2419200000
}, {
  text: '6 months',
  delay: 14515200000
}]);
/** Log angular errors to bugsnag */

baseApp.config(function ($provide) {
  $provide.decorator("$exceptionHandler", function ($delegate, $injector) {
    return function (exception, cause) {
      if (Bugsnag.apiKey) {
        Bugsnag.notifyException(exception, {
          diagnostics: {
            cause: cause
          }
        });
      }

      $delegate(exception, cause);
    };
  });
});
baseApp.run(function ($rootScope, SharedData, $location, $uibModal, $state) {
  /* Hides breezy loader when route finishes loading unless shared.showLoader flag is set */
  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    if (!SharedData.showLoader) {
      var loader = $(".loader-container");
      loader.removeClass("initializing");
      loader.removeClass("hide-quote");
      window.setTimeout(function () {
        loader.addClass("initialized");
      }, 300);
    }

    if (SharedData.activeCompany) {
      var plan = SharedData.activeCompany.company.plan;

      if (plan.id == "freebie") {
        var now = new Date();
        var trialEnds = new Date(SharedData.activeCompany.company.trial_expiry_date);

        if (trialEnds.getTime() < now.getTime()) {
          if (toState.name === 'company.expired') return;
          setTimeout(function () {
            $state.go('company.expired', {
              blockNav: true
            });
          }, 3000);
        }
      }
    }
  });
  /* jshint -W030 */

  function getWatchCount() {
    function e(e) {
      var o = angular.element(e);
      o.hasClass("ng-isolate-scope") && o.isolateScope && a(o.isolateScope()), o.hasClass("ng-scope") && a(o.scope());
    }

    function a(e) {
      n.hasOwnProperty(e.$id) || (n[e.$id] = !0, e.$$watchers && (o += e.$$watchers.length));
    }

    var o = 0,
        n = {};
    return angular.forEach(document.querySelectorAll(".ng-scope , .ng-isolate-scope"), e);
  }

  if ($location.$$host === 'localhost' && $location.$$search.watcher) {
    var watcher = document.createElement('div');
    watcher.classList.add('watcher');
    document.body.appendChild(watcher);
    console.log('watching the watchers');
    window.setInterval(function () {
      //console.log(`watchers: ${getWatchCount()}`);
      watcher.innerText = getWatchCount();
    }, 500);
  }
});
'use strict';

angular.module('appController', []).controller('SignoutViewCtrl', ['$scope', '$stateParams', '$http', '$location', 'SharedData', 'AppClient', function ($scope, $stateParams, $http, $location, SharedData, AppClient) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.appClient.signout(function () {
    window.location.href = "/?signed-out";
  });
}]).controller('InitializeViewCtrl', ['$scope', '$rootScope', '$stateParams', '$http', '$location', 'SharedData', 'AppClient', function ($scope, $rootScope, $stateParams, $http, $location, SharedData, AppClient) {
  console.log('InitializeViewCtrl');
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  var welcome = $location.search().welcome;
  $scope.welcome = welcome;

  var keyCount = function keyCount(obj) {
    try {
      var k = Object.keys(obj).length;
      return k;
    } catch (e) {}

    return 0;
  };

  if (!$scope.shared.companies || keyCount($scope.shared.companies) !== 1) {
    return $scope.appClient.navigateTo('companies');
  }

  var keys = Object.keys($scope.shared.companies);
  $scope.shared.activeCompany = $scope.shared.companies[keys[0]];

  if (!$scope.shared.user.tz_offset) {
    $scope.shared.user.tz_offset = new Date().getTimezoneOffset();
    $scope.appClient.updateUser($scope.shared.user, function (error, result) {});
  }

  if (welcome) {
    if ($scope.shared.activeCompany.company.creator_id === $scope.shared.user._id) {
      try {
        ga('send', 'event', 'CompanyCreate', $scope.shared.activeCompany.company.friendly_id, 1);
      } catch (e) {}

      try {
        fbq('track', 'CompanyCreate');
      } catch (e) {}

      try {
        window.uetq = window.uetq || [];
        window.uetq.push({
          'ec': 'CompanyCreate'
        });
      } catch (e) {}

      try {
        twttr.conversion.trackPid('o1cct', {
          tw_sale_amount: 0,
          tw_order_quantity: 0
        });
      } catch (e) {}

      try {
        qp('track', 'CompleteRegistration');
      } catch (e) {}

      try {
        growsumo.data.name = $scope.shared.user.name;
        growsumo.data.email = $scope.shared.user.email_address;
        growsumo.data.customer_key = $scope.shared.activeCompany.company.friendly_id;
        growsumo.createSignup(function () {
          $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/home?welcome=true");
        });
      } catch (e) {
        $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/home?welcome=true");
      }
    }
  } else {
    $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/home");
  }
}]).filter('orderSidebarPositions', function () {
  function getChromeVersion() {
    var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
    return raw ? parseInt(raw[2], 10) : false;
  }

  var sortMethod = 'sort';

  if (getChromeVersion() && getChromeVersion() <= 69) {
    sortMethod = 'stableSort';
  } //console.log('sortMethod = ' + sortMethod)


  return function (positions) {
    positions[sortMethod](function (a, b) {
      if (a.is_starred !== b.is_starred) return b.is_starred - a.is_starred;
      if (a.is_starred && b.is_starred) return a.name - b.name;
      if (a.last_view_date < b.last_view_date) return 1;
      if (a.last_view_date > b.last_view_date) return -1;
      if (a.state !== b.state) return b.state - a.state;
      return 0;
    });
    positions = _.take(positions, 10);
    positions[sortMethod](function (a, b) {
      if (a.is_starred !== b.is_starred) return b.is_starred - a.is_starred;

      if (a.last_view_date > -1 && b.last_view_date > -1) {
        if (a.name > b.name) return 1;
        if (a.name < b.name) return -1;
      }

      return 0;
    });
    return positions;
  };
}).controller('CompaniesViewCtrl', ['$scope', '$rootScope', '$stateParams', '$http', '$socket', '$location', '$window', '$uibModal', 'SharedData', 'AppClient', function ($scope, $rootScope, $stateParams, $http, $socket, $location, $window, $uibModal, SharedData, AppClient) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.shared.showLoader = false;

  if (!$scope.shared.companies || Object.keys($scope.shared.companies).length === 0) {
    $scope.noCompanies = true;
  }

  $scope.goToCompany = function (company) {
    $scope.shared.showLoader = true;
    window.location.href = "/app/c/" + company.friendly_id + "/home";
  };

  $scope.openAddCompany = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company/company_new_modal.html',
      controller: 'CompanyAddModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };
}]).controller('CompanyViewCtrl', ['$scope', '$rootScope', '$timeout', '$cookieStore', '$state', '$stateParams', '$sce', '$socket', '$location', '$window', '$uibModal', 'shared', 'AppClient', 'BETA', 'initializeProductUpdates', 'sharedDataUtils', 'dialog', 'PositionsService', 'ModalService', 'FeaturesService', 'CompanyService', '$filter', function ($scope, $rootScope, $timeout, $cookieStore, $state, $stateParams, $sce, $socket, $location, $window, $uibModal, shared, AppClient, BETA, initializeProductUpdates, sharedDataUtils, dialog, PositionsService, ModalService, FeaturesService, CompanyService, $filter) {
  /**** SHORT CUTS *****/
  function isTextSelected() {
    var text = "";

    if (typeof window.getSelection != "undefined") {
      text = window.getSelection().toString();
    } else if (typeof document.selection != "undefined" && document.selection.type == "Text") {
      text = document.selection.createRange().text;
    }

    return text.length > 0;
  }

  function initialieWootric() {
    var creationDate;

    if (shared.user.creation_date) {
      creationDate = new Date(shared.user.creation_date); //console.log('Wootric: User has creation date: ' + creationDate.toString());
    } else {
      creationDate = new Date("2016-9-1"); //console.log('Wootric: User does not have creation date (adding): ' + creationDate.toString());
    } //window.wootric_survey_immediately = true; // Shows survey immediately for testing purposes. TODO: Comment out for production.


    window.wootricSettings = {
      email: shared.user.email_address,
      // TODO: Required to uniquely identify a user. Email is recommended but this can be any unique identifier.
      // external_id: 'abc123', // TODO: Reference field for external integrations only. Send it along with email. OPTIONAL
      created_at: Math.round(creationDate.getTime() / 1000).toString(),
      account_token: 'NPS-2ccd06ef',
      // This is your unique account token.
      product_name: 'Breezy',
      properties: {
        role: shared.activeCompany.company.user_role.id,
        pricing_plan: shared.activeCompany.company.plan.id
      }
    };
    if (window.wootric) window.wootric('run');
  }

  var initializeKeyBindings = function initializeKeyBindings() {
    // ? : Shortcuts
    Mousetrap.bind('?', function () {
      ModalService.openShortcuts();
    }); // , : Open User Settings

    Mousetrap.bind(',', function () {
      $scope.userSettings();
    }); // ⌘ shift q : Modal to confirm signout

    /*Mousetrap.bind('command+shift+q', () => {
        dialog.confirm({title: "Sign out", message:"Are you sure you would like to sign out?"}, function (result) {
            if(result === true) {
                window.location = '/signout';
            }
        });
    });*/
    // ⌘ p : Recent Positions / Pools

    Mousetrap.bind(['command+p', 'ctrl+p'], function () {
      ModalService.openRecentlyViewed('position').then(function () {
        console.log($state);
      }, function () {
        console.log($state);
      });
      return false;
    }); // ⌘ shift p : Recent Positions / Pools

    Mousetrap.bind(['command+shift+p', 'ctrl+shift+p'], function () {
      $scope.editPosition();
      return false;
    }); // ⌘ c : Recent Positions / Pools

    Mousetrap.bind(['command+c', 'ctrl+c'], function () {
      if (isTextSelected()) return;
      ModalService.openRecentlyViewed('candidate').then(function () {
        console.log($state);
      }, function () {
        console.log($state);
      });
    }); // ⌘ c : Recent Positions / Pools

    Mousetrap.bind('/', function () {
      ModalService.openCandidateSearch().then(function () {});
    });

    if (shared.activeCompany.company.is_admin) {
      // ⌘ shift c : Add Candidate
      Mousetrap.bind(['command+shift+c', 'ctrl+shift+c'], function () {
        $scope.uploadCandidate();
        return false;
      }); // ⌘ shift m : Settings / User Management

      /* Mousetrap.bind(['command+shift+m', 'ctrl+shift+m'], () => {
          $scope.companySettings('users');
          return false;
      });
      // ⌘ shift t : Settings / Teams Management
      Mousetrap.bind('command+shift+t', () => {
          $scope.companySettings('teams');
          return false;
      });
      // ⌘ shift q : Settings / Questionnaires
      Mousetrap.bind(['command+shift+q', 'ctrl+shift+q'], () => {
          $scope.accountSettings('questionnaires');
          return false;
      });
      // ⌘ shift e : Settings / Email Templates
      Mousetrap.bind(['command+shift+e', 'ctrl+shift+e'], () => {
          $scope.accountSettings('templates');
          return false;
      });
      // ⌘ shift s : Settings / Scorecards
      Mousetrap.bind(['command+shift+s', 'ctrl+shift+s'], () => {
          $scope.accountSettings('scorecards');
          return false;
      });*/
    }
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  }); // Only run on paid accounts

  if (shared.activeCompany.company.user_role && shared.activeCompany.company.user_role.id === 'company_admin' && shared.activeCompany.company.plan && shared.activeCompany.company.plan.id && shared.activeCompany.company.plan.id !== "freebie" && shared.activeCompany.company.plan.id !== "v7_bootstrap" && shared.activeCompany.company.plan.id.indexOf('uno') === -1) {
    initialieWootric();
  }

  $scope.appClient = AppClient;
  $scope.shared = shared;
  $scope.candy = $location.search().candy;
  $scope.welcome = $location.search().welcome;
  $scope.published = $location.search().published;
  $scope.positions = PositionsService.local.getMyMemberPositions();
  $scope.sidebarPositions = []; //console.log($scope.positions)

  $scope.generateSidebarPositions = function () {
    var sidebarPositions = $scope.positions.map(function (position) {
      return {
        _id: position._id,
        name: position.name,
        is_starred: position.is_starred,
        last_view_date: position.last_view_date,
        state: position.state
      };
    });
    $scope.sidebarPositions = $filter('orderSidebarPositions')(sidebarPositions);
  };

  $scope.generateSidebarPositions();
  $scope.openShortcuts = ModalService.openShortcuts; //$scope.pools = PositionsService.local.getMyMemberPositions().filter((position) => (position.org_type === "pool"));

  $scope.keyCount = function (obj) {
    try {
      var k = Object.keys(obj).length;
      return k;
    } catch (e) {//console.log('Key count: ' + e);
    }

    return 0;
  };

  var sidebarMaximized = $cookieStore.get("sidebarMaximized");
  $scope.sidebar = {
    isMaximized: $(window).width() > 900 ? typeof sidebarMaximized !== 'undefined' ? sidebarMaximized : true : false,
    companiesTop: '-' + $scope.keyCount($scope.shared.companies) * 24 + 'px !important;'
  };
  $scope.countdown = {
    time: [],
    message: '',
    display: false,
    dismissable: true
  };
  var countdownDismissed = localStorage.getItem('countdownDismissed') || false;

  if (countdownDismissed) {
    countdownDismissed = JSON.parse(countdownDismissed);
  }

  var countdownTick = function countdownTick() {
    // Get todays date and time
    var now = new Date().getTime(); // Find the distance between now and the count down date

    var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds

    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));
    var seconds = Math.floor(distance % (1000 * 60) / 1000);
    $scope.countdown.time = [];
    $scope.countdown.time.push("".concat(days, "d"));
    $scope.countdown.time.push("".concat(hours, "h"));
    $scope.countdown.time.push("".concat(minutes, "m"));
    $scope.countdown.time.push("".concat(seconds, "s"));

    if (days > 0) {
      $scope.countdown.message = "".concat(days, " day").concat(days > 1 ? 's' : '', " and ").concat(hours, " hour").concat(hours > 1 ? 's' : '');
    } else if (hours > 0) {
      $scope.countdown.message = "".concat(hours, " hour").concat(hours > 1 ? 's' : '');
    } // If the count down is finished, write some text


    if (distance < 0) {
      clearInterval(x);
      $scope.countdown.display = false; //document.getElementById("demo").innerHTML = "EXPIRED";
    } else if (distance < 86400000) {
      $scope.countdown.display = true;
      $scope.countdown.dismissable = false;
    }
  };

  $scope.countdownDismiss = function () {
    $scope.countdown.display = false;
    countdownDismissed = true;
    localStorage.setItem('countdownDismissed', JSON.stringify(countdownDismissed));
  };

  var plan = $scope.shared.activeCompany.company.plan;
  var countDownDate;

  if (plan.id == 'freebie') {
    var now = new Date();
    var trialEnds = new Date($scope.shared.activeCompany.company.trial_expiry_date); // uncomment this to show the banner
    //var trialEnds = new Date(2019, 0, 18, 13, 21, 1);

    var timeLeft = trialEnds.getTime() - now.getTime();

    if (timeLeft < 345600000 && timeLeft > 0) {
      // 345600000 = 4 days
      countDownDate = trialEnds.getTime(); // Update the count down every 1 second

      var x = setInterval(countdownTick, 1000);
      countdownTick();

      if (timeLeft < 86400000) {
        $scope.countdown.dismissable = false;
      }

      if (!countdownDismissed || timeLeft < 86400000) {
        // 86400000 = 1 day
        $scope.countdown.display = true;
      }
    }
  }

  $scope.reviewablePositions = [];
  $scope.$on('positions:updated', function () {
    $scope.reviewablePositions = PositionsService.local.getReviewablePositions();
    $scope.positions = PositionsService.local.getMyMemberPositions();
    $scope.generateSidebarPositions();
  });

  $scope.getMember = function (memberId) {
    return $scope.appClient.getMemberById(memberId);
  };

  $scope.toggleNavSidebar = function () {
    $scope.sidebar.isMaximized = !$scope.sidebar.isMaximized;
    $cookieStore.put("sidebarMaximized", $scope.sidebar.isMaximized);
  };

  $scope.toggleSidebar = function () {
    $scope.sidebarOpen = !$scope.sidebarOpen;
  };

  $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
    $scope.navState = toState.name;
  });
  $scope.navState = $state.current.name;

  $scope.checkFeatureAvailability = function (feature, e) {
    if (FeaturesService.actions.block(feature)) {
      e.preventDefault();
      return;
    }
  };

  $scope.productUpdatesViewed = initializeProductUpdates.productUpdatesViewed;
  $scope.updates = initializeProductUpdates.updates;
  var companyFriendlyId = $stateParams.companyFriendlyId;
  $scope.search = {};
  $scope.resourceSearch = {};
  $scope.sidebarOpen = false;

  var checkShowInbox = function checkShowInbox() {
    var show = false;

    if ($scope.shared.activeCompany.company.is_admin) {
      return true;
    }

    for (var group in $scope.shared.positions) {
      if (group !== 'archived') {
        for (var position in $scope.shared.positions[group]) {
          if ($scope.shared.positions[group][position].is_admin) {
            show = true;
          }
        }
      }
    }

    return show;
  };

  $scope.showInbox = checkShowInbox();

  $scope.positionLocation = function () {
    var location = '';

    if (this.position.location) {
      if (this.position.location.is_remote) {
        location = 'Remote';
      } else if (!this.position.location.name && !this.position.location.is_remote) {
        location = 'No Location';
      } else {
        location = this.position.location.name;
      }
    }

    return location;
  };

  $scope.showNotificationType = {
    'mentions': false
  };

  $scope.toggleShowNotificationType = function (type) {
    if ($scope.showNotificationType.mentions && type === 'user') return;
    if (!$scope.showNotificationType.mentions && type === 'candidate') return;
    $scope.showNotificationType.mentions = !$scope.showNotificationType.mentions;
  };

  $scope.searchFocused = false;

  $scope.searchFocus = function (state) {
    if (state == 1) {
      $scope.searchFocused = true;
    } else {
      setTimeout(function () {
        $scope.searchFocused = false;
      }, 100);
    }
  };

  $scope.searchResourcesFocused = false;

  $scope.searchResourcesFocus = function (state) {
    if (state == 1) {
      $scope.searchResourcesFocused = true;
    } else {
      setTimeout(function () {
        $scope.searchResourcesFocused = false;
      }, 100);
    }
  };

  var timeoutPromise;
  var delayInMs = 700;
  $scope.$watch('resourceSearch.searchTerm', function (text, prevText) {
    if (!$scope.resourceSearch.searchTerm) {
      $scope.resourceSearch.searching = false;
      $scope.resourceSearch.results = null;
      return;
    }

    $timeout.cancel(timeoutPromise); //does nothing, if timeout alrdy done

    timeoutPromise = $timeout(function () {
      //Set timeout
      $scope.resourceSearch.results = [];
      $scope.resourceSearch.searching = true;
      $scope.appClient.searchResources($scope.resourceSearch.searchTerm, function (error, results) {
        $scope.resourceSearch.results = results;
        $scope.resourceSearch.searching = false;
      });
    }, delayInMs);
  });
  $scope.gaEventTracker = $scope.appClient.gaEventTracker;

  $scope.showReferralCTA = function (type) {
    var lastViewed = $cookieStore.get("ReferralHeart");

    if (!lastViewed) {
      return true;
    }

    return false;
  };

  $scope.referralCTAToggle = function (type) {
    $cookieStore.put("ReferralHeart", new Date());
  };

  $scope.getReferralURL = function () {
    var url = "https://breezyhr.links.growsumo.com?iframe&email=" + $scope.shared.user.email_address;
    return $sce.trustAsResourceUrl(url);
  };

  $scope.showNotificationUnread = function (type) {
    try {
      var lastViewed = $cookieStore.get("Notifications_" + type);
      var lastNotification = $scope.shared.activeCompany.notifications[type][0].timestamp;

      if (type === "candidate_message") {}

      if (lastNotification && !lastViewed || lastNotification && Date.parse(lastNotification) > Date.parse(lastViewed)) {
        return true;
      }
    } catch (e) {
      return false;
    }
  };

  $scope.notificationToggle = function (type) {
    if (!type) {
      type = $scope.showNotificationType.mentions ? 'user' : 'candidate';
    }

    $cookieStore.remove('Notifications_' + type);
    $cookieStore.put("Notifications_" + type, new Date());
  };

  $scope.getShowReminder = function (reminder) {
    if (!reminder) {
      return false;
    }

    var startTime = new Date(reminder.date);

    if (new Date().getTime() > startTime.getTime()) {
      return false;
    }

    return true;
  };

  $scope.getShowInterview = function (action) {
    if (!action) {
      return false;
    }

    var startTime = new Date(Date.parse(action.start_time));

    if (new Date().getTime() > startTime.getTime()) {
      return false;
    }

    return true;
  };

  $scope.$watch('search.searchTerm', function (text, prevText) {
    if (!$scope.search.searchTerm) {
      $scope.search.searching = false;
      $scope.search.results = [];
      return;
    }

    $timeout.cancel(timeoutPromise); //does nothing, if timeout alrdy done

    timeoutPromise = $timeout(function () {
      //Set timeout
      $scope.search.results = [];
      $scope.search.searching = true;
      $scope.appClient.searchCandidates($scope.search.searchTerm + "*", $scope.shared.activeCompany.company._id, function (error, results) {
        $scope.search.results = results;
        $scope.search.searching = false;
      });
    }, delayInMs);
  });

  $scope.openWindow = function (title, url, h, w) {
    var left = screen.width / 2 - w / 2;
    var top = screen.height / 2 - h / 2;
    return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
  };

  $scope.showProductUpdatesCTA = function () {
    try {
      var lastViewed = $cookieStore.get('ProductUpdatesViewed');
      var latestProductUpdate = $scope.updates[0].timestamp;

      if (latestProductUpdate && !lastViewed || latestProductUpdate && Date.parse(latestProductUpdate) > Date.parse(lastViewed)) {
        return true;
      }
    } catch (e) {
      return false;
    }
  };

  $scope.openFeatureRequests = function () {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/updates/feature_requests.html',
      controller: 'ProductFeatureRequestsModalInstanceCtrl',
      size: 'feature-requests',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.productUpdates = function () {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/updates/updates.html',
      controller: 'ProductUpdatesModalInstanceCtrl',
      size: 'md',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  var initializeTodo = function initializeTodo() {
    $scope.todo = {};
    var positionCount = Object.keys($scope.shared.activeCompany.positions).length;

    if ($scope.shared.activeCompany.company.is_admin && positionCount === 0) {
      $scope.todo.post_position = true;
    }

    if ($scope.shared.activeCompany.company.is_admin && $scope.shared.activeCompany.portal.layout.type == "bold" && !$scope.shared.activeCompany.portal.appearance.logo_url) {
      $scope.todo.portal_logo = true;
    }

    if ($scope.shared.activeCompany.company.is_admin && !$cookieStore.get("CompanyMemberInvited") && $scope.shared.activeCompany.members.length == 1) {
      $scope.todo.invite_team = true;
    }

    $scope.watchedIntroVideo = false;

    if ($cookieStore.get("WatchIntroVideo")) {
      $scope.watchedIntroVideo = true;
    }
  };

  var initializePlanState = function initializePlanState() {
    var plan = $scope.shared.activeCompany.company.plan;

    if (plan.id == "freebie") {
      $scope.trialPlan = true;
      var now = new Date();
      var trialEnds = new Date($scope.shared.activeCompany.company.trial_expiry_date);
      $scope.trialDaysLeft = Math.round((trialEnds.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      console.log(trialEnds.getTime() - +now.getTime());

      if ($scope.trialDaysLeft < 0) {
        $scope.trialDaysLeft = 0;
      }

      console.log('Trial ends: ' + trialEnds);
      console.log('Trial days left: ' + $scope.trialDaysLeft);
    }
  };

  $scope.openInterviewDetail = function (_interview, _position, callback) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/interview/interview_detail_modal.html',
      controller: 'InterviewDetailModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview: function interview() {
          return _interview;
        },
        position: function position() {
          return _position;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (callback) callback(result);
    }, function () {});
  };

  $scope.openAlert = function (_alert) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/dialog/alert.html',
      controller: function controller($scope, $uibModalInstance, alert) {
        $scope.alert = alert;
        $scope.alert.button = $scope.alert.button || 'Okay';

        $scope.okay = function () {
          $uibModalInstance.close();
        };
      },
      size: 'sm',
      resolve: {
        alert: function alert() {
          return _alert;
        }
      }
    });
  };

  $scope.openConfirm = function (_header, _message, callback) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/confirm/index.html',
      controller: 'ConfirmModalInstanceCtrl',
      size: 'sm',
      resolve: {
        header: function header() {
          return _header;
        },
        message: function message() {
          return _message;
        }
      }
    });
    modalInstance.result.then(function (result) {
      callback(result);
    }, function () {});
  };

  $scope.openCandidateShare = function (_candidate) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_share_modal.html',
      controller: 'CandidateShareModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {}, function () {});
  };

  $scope.openCandidateScorecard = function (_scorecard, _candidate2) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/scorecard/scorecard_modal.html',
      controller: 'CandidateScorecardModalInstanceCtrl',
      size: 'sm',
      resolve: {
        scorecard: function scorecard() {
          return _scorecard;
        },
        candidate: function candidate() {
          return _candidate2;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.feedbackWorkflowModal = function (_position2, _candidate3) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/feedback/index.html',
      controller: 'FeedbackModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position2;
        },
        candidate: function candidate() {
          return _candidate3;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.offerWorkflowModal = function (_position3, _candidate4) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/offer/index.html',
      controller: 'OfferModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position3;
        },
        candidate: function candidate() {
          return _candidate4;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.interviewWorkflowModal = function (_position4, _candidate5) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/prompt/index.html',
      controller: 'CandidateWorkflowModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position4;
        },
        candidate: function candidate() {
          return _candidate5;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.shareModal = function (_position5) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/share/index.html',
      controller: 'ShareModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position5;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.publishedModal = function (_position6) {
    if (_position6.org_type) {
      return;
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/index.html',
      controller: 'PublishedModalInstanceCtrl',
      size: 'sm',
      backdrop: true,
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position6;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.videoIntroModal = function () {
    $cookieStore.put("WatchIntroVideo", 1);
    $rootScope.$broadcast('watchIntroVideo', {});
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/onboarding/intro_video.html',
      controller: 'IntroVideoModalInstanceCtrl',
      size: 'welcome',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
    $scope.gaEventTracker("VideoIntroView");
  };

  var welcomeModal = function welcomeModal() {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/onboarding/index.html',
      controller: 'WelcomeModalInstanceCtrl',
      size: 'welcome',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.viewPosition = function (position) {
    var url = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/p/' + position.friendly_id + '?state=' + position.state;
    var win = window.open(url, '_blank');
    win.focus();
  };

  $scope.openCopyCandidateToCompany = function (_candidate6) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/company_copy/index.html',
      controller: 'CopyCompanyCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate6;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
  };

  $scope.reviewPosition = function (_position7) {
    var currentStateData = {
      'name': 'company.positions',
      'params': {}
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/review_publish_request.html',
      controller: 'ReviewPublishRequestInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position7;
        },
        approval: function approval() {
          return null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.editPosition = function (_position8, tab) {
    if (!tab) {
      tab = 'description';
    }

    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var templateUrl = '/templates/v2/app/position/new/new.html';

    if (_position8 && _position8.org_type) {
      templateUrl = '/templates/v2/app/position/new/new_pool.html';
    }

    var modalInstance = $uibModal.open({
      templateUrl: templateUrl,
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position8 && _position8._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position8._id) : null;
        },
        orgType: function orgType() {
          return _position8 ? _position8.org_type : null;
        },
        clonePosition: function clonePosition() {
          return null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      $scope.updatePosition(position);
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.uploadCandidate = function (position, stage) {
    ModalService.openAddCandidate(position, stage).then(function () {// do nothing
    });
  };

  $scope.newTask = function (_position9, _candidate7) {
    if (FeaturesService.actions.block('tasks')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/task/index.html',
      controller: 'TaskCreateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position9;
        },
        candidate: function candidate() {
          return _candidate7;
        },
        task: function task() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (task) {
      if (task) {//initializeNewCandidates();
      }
    }, function () {});
  };

  $scope.newPool = function (_position10, _clonePosition, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };

    if (!tab) {
      tab = "description";
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new_pool.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position10 && _position10._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position10._id) : null;
        },
        orgType: function orgType() {
          return "pool";
        },
        clonePosition: function clonePosition() {
          return _clonePosition && _clonePosition._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      $scope.updatePosition(position);
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.newPosition = function (_position11, _clonePosition2, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };

    if (!tab) {
      tab = "description";
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position11 && _position11._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position11._id) : null;
        },
        orgType: function orgType() {
          return null;
        },
        clonePosition: function clonePosition() {
          return _clonePosition2 && _clonePosition2._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition2._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      },
      windowClass: _position11 && _position11._id ? '' : 'new-position-modal'
    });
    modalInstance.result.then(function (position) {
      $scope.updatePosition(position);
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.userSettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/user_settings/settings.html',
      controller: 'UserSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.messengerSettings = function (tab) {
    if (FeaturesService.actions.block('hello_messenger')) return;
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/messenger/settings.html',
      controller: 'MessengerSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        },
        messenger: function messenger($q, AppClient) {
          var deferred = $q.defer();
          AppClient.getMessenger($scope.shared.activeCompany.company._id, function (error, result) {
            deferred.resolve(result);
          });
          return deferred.promise;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.companySettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/settings.html',
      controller: 'CompanySettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.accountSettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/settings.html',
      controller: 'AccountSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.openAddCompany = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company/company_new_modal.html',
      controller: 'CompanyAddModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.employeeReferralSettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/employee-referral/settings.html',
      controller: 'EmployeeReferralSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.referralPortalSettings = function (tab) {
    if (FeaturesService.actions.block('employee_portal')) return;
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/referral_portal/settings.html',
      controller: 'ReferralPortalSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.jobPortalSettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/portal/settings.html',
      controller: 'JobPortalSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.setCandidateStatus = function (candidate, status) {
    candidate.status = status;
    $scope.appClient.setCandidateStatus($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, status, function (error, result) {});
  };

  $scope.navigateTo = function (dest, options) {
    if (!options) options = {};
    $state.go(dest, options);
  };

  $scope.navigateToSearchResults = function (term) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/candidates?q=" + encodeURIComponent(term));
  };

  $scope.navigateToPosition = function (position) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/pipeline');
  };

  $scope.navigateToCandidates = function (position) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/candidates');
  };

  $scope.navigateToAnalyticsSection = function (section) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/analytics/" + section);
  };

  $scope.navigateToPositionAnalytics = function (position) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/analytics');
  };

  $scope.navigateToPositionAnalyticsSection = function (position, section) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/analytics/' + section);
  };

  $scope.navigateToPositionCalendar = function (position) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/calendar');
  };

  $scope.navigateToPositionActivity = function (position) {
    return $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + position._id + '/activity');
  };

  $scope.navigateToCandidateKeys = function (candidateId, positionId, candidates, index, tab) {
    //console.log(candidateId, positionId);
    ModalService.openCandidateModal(positionId, candidateId, candidates, index, tab).then(function () {});
  };

  $scope.navigateToCandidate = function (_candidateId, _positionId, tab) {
    var templateUrl = '/templates/v2/app/candidate/candidate_modal_v3.html';
    var modalSize = 'lg';
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: templateUrl,
      controller: 'CandidateModalInstanceCtrl',
      size: 'full',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        positionId: function positionId() {
          return _positionId;
        },
        candidateId: function candidateId() {
          return _candidateId;
        },
        candidates: function candidates() {
          return null;
        },
        currentIndex: function currentIndex() {
          return null;
        },
        defaultTab: function defaultTab() {
          return tab;
        }
      }
    });
    modalInstance.result.then(function (candidate) {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    }, function () {});
  };

  $scope.getDesktopNotificationState = function () {
    return $scope.appClient.getDesktopNotificationState();
  };

  $scope.requestDesktopNotificationPermission = function () {
    $scope.appClient.requestDesktopNotificationPermission();
  };

  $scope.movePosition = function (position, startState, endState) {
    if (!$scope.shared.positions[endState]) {
      $scope.shared.positions[endState] = [];
    }

    var index = -1;

    for (var i = 0; i < $scope.shared.positions[startState].length; i++) {
      if ($scope.shared.positions[startState][i]._id == position._id) {
        index = i;
        break;
      }
    }

    if (index > -1) {
      var old_position = $scope.shared.positions[startState].splice(index, 1)[0];
      position.state = endState;
      position.is_admin = old_position.is_admin;
      position.is_member = old_position.is_member;
      position.postPageLoad = true;
      $scope.shared.positions[endState].unshift(position);
    }
  };

  $scope.updatePosition = function (position) {
    for (var i = 0; i < $scope.shared.positions[position.state].length; i++) {
      if ($scope.shared.positions[position.state][i]._id == position._id) {
        $scope.shared.positions[position.state][i] = position;
      }
    }

    $scope.shared.activeCompany.positions[position._id] = position;

    for (var j = 0; j < $scope.shared.user.positions.length; j++) {
      var p = $scope.shared.user.positions[j];

      if (p._id == position._id) {
        p = position;
      }
    }

    if (!$scope.$$phase) {
      $scope.$apply();
    }
  };

  initializeTodo();
  initializePlanState();

  if ($scope.welcome && !$scope.shared.activeCompany.company.is_admin) {
    welcomeModal();
  } else if ($scope.welcome) {}

  if ($scope.published) {
    $scope.publishedModal();
  }

  if ($scope.candy) {
    $scope.interviewWorkflowModal();
  }

  $scope.$on('candidateMoved', function (event, data) {
    var idx = $scope.shared.activeCompany.starred_candidates.data.findIndex(function (candidate) {
      return candidate._id === data.object.candidate_id;
    });
    if (idx > -1) $scope.shared.activeCompany.starred_candidates.data[idx].position_id = data.object.position_id;
  });
  $rootScope.$on('toggleStarCandidate', function (event, data) {
    var idx = $scope.shared.activeCompany.starred_candidates.data.findIndex(function (candidate) {
      return candidate._id === data._id;
    });
    if (idx === -1) $scope.shared.activeCompany.starred_candidates.data.push(data);else $scope.shared.activeCompany.starred_candidates.data.splice(idx, 1);
  });
  $rootScope.$on('forcedRefresh', function (event, data) {
    location.reload();
  });
  $rootScope.$on('forcedLogout', function (event, data) {
    window.location.href = "/signout";
  });
  $rootScope.$on('taskCompleted', function (event, data) {
    var taskId = data.task_id;

    var getIdx = function getIdx(arr, taskId) {
      var idx;

      for (var i in arr) {
        if (arr._id === taskId) {
          idx = i;
          break;
        }
      }

      return idx;
    };

    var idx = getIdx($scope.shared.activeCompany.tasks.overdue, taskId);

    if (idx) {
      $scope.shared.activeCompany.tasks.overdue.splice(idx, 1);
      return;
    }

    idx = getIdx($scope.shared.activeCompany.tasks.upcoming, taskId);

    if (idx) {
      $scope.shared.activeCompany.tasks.upcoming.splice(idx, 1);
      return;
    }
  });
  $rootScope.$on('backendError', function (event, data) {
    if (data.error.type === "duplicateCandidate") {
      dialog.alert({
        title: "Error adding Candidate",
        message: data.error.message
      }, function (result) {});
    } else {
      dialog.alert({
        message: data.error.message
      }, function (result) {});
    }
  });
  $rootScope.$on('userUpdated', function (event, data) {
    initializeTodo();
  });
  $rootScope.$on('updatePortalAppearance', function (event, data) {
    initializeTodo();
  });
  $rootScope.$on('companyUpdated', function (event, data) {
    initializeTodo();
  });
  $rootScope.$on('companyTeamsChanged', function (event) {
    console.log('Refreshing teams');
    $scope.appClient.getTeams(function (error, teams) {
      if (teams) $scope.shared.activeCompany.teams = teams;
    });
  });
  $rootScope.$on('companyMemberInvited', function (event, data) {
    initializeTodo();
  });
  $rootScope.$on('watchIntroVideo', function (event, data) {
    initializeTodo();
  });
  $rootScope.$on('positionStateUpdated', function (event, data) {
    sharedDataUtils.initializeMyPositions();
    $scope.positions = PositionsService.local.getMyMemberPositions().filter(function (position) {
      return position.org_type !== "pool";
    });
    $scope.pool = PositionsService.local.getMyMemberPositions().filter(function (position) {
      return position.org_type !== "pool";
    });
  });
  $rootScope.$on('companyScorecardAdded', function (event, data) {
    var idx;

    for (var i in $scope.shared.activeCompany.scorecards) {
      var scorecard = $scope.shared.activeCompany.scorecards[i];

      if (scorecard._id === data._id) {
        idx = i;
      }
    }

    if (!idx) {
      $scope.shared.activeCompany.scorecards.push(data);
    }
  });
  $rootScope.$on('companyScorecardUpdated', function (event, data) {
    var idx;

    for (var i in $scope.shared.activeCompany.scorecards) {
      var scorecard = $scope.shared.activeCompany.scorecards[i];

      if (scorecard._id === data._id) {
        idx = i;
      }
    }

    if (idx > -1) {
      $scope.shared.activeCompany.scorecards[idx] = data;
    }
  });
  $rootScope.$on('companyScorecardDeleted', function (event, data) {
    var idx;

    for (var i in $scope.shared.activeCompany.scorecards) {
      var scorecard = $scope.shared.activeCompany.scorecards[i];

      if (scorecard._id === data._id) {
        idx = i;
      }
    }

    if (idx > -1) {
      $scope.shared.activeCompany.scorecards.splice(idx, 1);
    }
  });
  $rootScope.$on('positionTeamMemberRoleUpdated', function (event, data) {
    if ($scope.shared.activeCompany.positions.hasOwnProperty(data.object.position_id)) {
      $scope.shared.activeCompany.positions[data.object.position_id].admins = data.object.admins;
      $scope.shared.activeCompany.positions[data.object.position_id].users = data.object.users;
      $scope.shared.activeCompany.positions[data.object.position_id].all_admins = data.object.all_admins;
      $scope.shared.activeCompany.positions[data.object.position_id].all_users = data.object.all_users;
    }
  });
  $rootScope.$on('positionTeamRoleUpdated', function (event, data) {
    if (data.object && $scope.shared.activeCompany.positions.hasOwnProperty(data.object.position_id)) {
      $scope.shared.activeCompany.positions[data.object.positionId].all_admins = data.object.all_admins;
      $scope.shared.activeCompany.positions[data.object.positionId].all_users = data.object.all_users;
    }

    if (data.position_id && $scope.shared.activeCompany.positions.hasOwnProperty(data.position_id)) {
      $scope.shared.activeCompany.positions[data.position_id].all_admins = data.all_admins;
      $scope.shared.activeCompany.positions[data.position_id].all_users = data.all_users;
    }
  });
  $rootScope.$on('subscriptionPlanUpdated', function (event, data) {
    $scope.appClient.initializeCompany($scope.shared.activeCompany.company._id, $scope.shared.activeCompany.company.friendly_id, function (error, result) {
      if (error) {
        console.log('error happened initializing company');
      } else {
        $scope.shared.activeCompany.company = result[$scope.shared.activeCompany.company.friendly_id].company;
        FeaturesService.mutations.updatePlan($scope.shared.activeCompany.company.plan);
      }
    });
  });
  $rootScope.$on('positionStateUpdated', function (event, data) {
    var startState = data.object.state_was;
    var endState = data.object.state_is;
    $scope.movePosition(data.object.position, startState, endState);
  });
  /*$rootScope.$on('positionAdded', function (event, data) {
      initializeTodo();
      sharedDataUtils.initializeMyPositions();
      $scope.positions = PositionsService.local.getMyMemberPositions();
      //$scope.pools = PositionsService.local.getMyMemberPositions().filter((position) => (position.org_type === "pool"));
  });*/

  $rootScope.$on('positionAdded', function (event, data) {
    data.postPageLoad = true;

    if (!$scope.shared.positions[data.state]) {
      $scope.shared.positions[data.state] = [];
    }

    if (!PositionsService.local.getPositionById(data._id)) {
      $scope.shared.positions[data.state].push(data);
    } else {}

    initializeTodo();
    $scope.shared.activeCompany.positions[data._id] = data;
    sharedDataUtils.initializeMyPositions();
    $scope.positions = PositionsService.local.getMyMemberPositions();
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    $scope.updatePosition(data);
  });
  $rootScope.$on('pipelineUpdated', function (event, data) {
    dialog.confirm({
      title: "Pipeline Updated",
      message: "Your recruiting pipeline has been updated. Would you like to reload?"
    }, function (result) {
      if (result === true) {
        location.reload();
      }
    });
  });
  $rootScope.$on('versionUpdated', function (event, data) {
    dialog.confirm({
      title: "Breezy Update",
      message: "A new version of Breezy is available. Would you like to reload?"
    }, function (result) {
      if (result === true) {
        location.reload();
      }
    });
  });
  $rootScope.$on('positionApprovalRequested', function (event, data) {
    //console.log('positionApprovalRequested', data);
    data.object.position.is_reviewable = PositionsService.local.isPositionReviewable(data.object.company_admins);
    $rootScope.$broadcast('positionUpdated', data.object.position); //-$scope.updatePosition(data.object.position);
  });
  $rootScope.$on('positionApprovalUpdated', function (event, data) {
    $rootScope.$broadcast('positionUpdated', data.object.position); //$scope.updatePosition(data.object.position);

    $scope.$broadcast('positions:updated');
  });
  $scope.$on('$destroy', function (event) {
    $socket.removeAllListeners();
  });

  var getAppStatus = function getAppStatus() {
    console.log("Verifying app status");
    $scope.appClient.getAppStatus(function (error, response) {
      if (error && error === "Unauthorized") {
        dialog.alert({
          title: "Signin Required",
          message: "Oops, it doesn't look like you're still signed in."
        }, function (result) {
          console.log("Redirecting to signin page");
          window.location.href = "/signin";
        });
      } else {
        if (response && response.app_version) {
          if ($scope.shared.health.version) {
            if ($scope.shared.health.version !== response.app_version) {
              if (!$scope.shared.health.refreshBroadcast) {
                $rootScope.$broadcast('versionUpdated', response);
                $scope.shared.health.refreshBroadcast = true;
              } else {
                $scope.shared.health.refreshRequired = true;
              }
            }
          } else {
            $scope.shared.health.version = response.app_version;
          }
        }

        setTimeout(getAppStatus, 30000);
      }
    });
  };

  getAppStatus();
}]).controller('WelcomeModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', function ($scope, $uibModalInstance, $parentScope) {
  $scope.todo = [{}];
  $scope.completed = [];
  $scope.clickedDone = false;
  $scope.step = 0;

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.close();
  };

  $scope.editPosition = function () {
    $parentScope.editPosition();
    closeModal();
  };

  $scope.newPosition = function () {
    $parentScope.newPosition();
    closeModal();
  };

  $scope.videoIntro = function () {
    $parentScope.videoIntroModal();
    closeModal();
  };

  $scope.companySettings = function (tab) {
    $parentScope.companySettings(tab);
    closeModal();
  };

  $scope.accountSettings = function (tab) {
    $parentScope.accountSettings(tab);
    closeModal();
  };

  $scope.userSettings = function (tab) {
    $parentScope.userSettings(tab);
    closeModal();
  };

  $scope.jobPortalSettings = function (tab) {
    $parentScope.jobPortalSettings("appearance");
    closeModal();
  };

  $scope.employeeReferralSettings = function (tab) {
    $parentScope.employeeReferralSettings("main");
    closeModal();
  };

  $scope.start = function () {
    setTimeout(function () {
      $parentScope.gaEventTracker("QuickStartStep0Complete");
      $scope.step = 1;
    }, 100);
  };

  $scope.clicked = function () {
    $parentScope.gaEventTracker("QuickStartStep1Complete");
    $scope.clickedDone = true;
    setTimeout(function () {
      $scope.step = 2;
    }, 600);
  };

  $scope.onDrop = function (stageId, index, data) {
    $parentScope.gaEventTracker("QuickStartStep2Complete");
    $scope.todo.splice(0, 1);
    $scope.completed.unshift(data);
    setTimeout(function () {
      $scope.step = 3;
    }, 600);
  };

  $scope.lastStep = function (stageId, index, data) {
    $parentScope.gaEventTracker("QuickStartStep3Complete");
    setTimeout(function () {
      if ($parentScope.shared.activeCompany.company.is_admin) {
        $scope.step = 4;
      } else {
        closeModal();
      }
    }, 600);
  };
}]).controller('IntroVideoModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', function ($scope, $uibModalInstance, $parentScope) {
  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]).controller('ShareModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', 'AppClient', 'SharedData', 'position', function ($scope, $uibModalInstance, $parentScope, AppClient, SharedData, position) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };
}]).controller('PublishedModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', 'AppClient', 'SharedData', 'PositionsService', 'position', function ($scope, $uibModalInstance, $parentScope, AppClient, SharedData, PositionsService, position) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.activePositions = PositionsService.local.getMyMemberPositions().filter(function (p) {
    return p._id !== $scope.position._id && p.state === "published" && p.org_type !== "pool";
  });

  if ($scope.shared.activeCompany.company.plan.id === "freebie") {
    $scope.shared.displayConfetti = $scope.activePositions.length == 0;
  }

  var TWO_PI = Math.PI * 2;
  var HALF_PI = Math.PI * 0.5; // canvas settings

  var drawingCanvas = document.getElementById("confetti_canvas");
  var viewWidth = window.innerWidth || 1000,
      viewHeight = window.innerHeight || 700,
      ctx,
      timeStep = 1 / 60;

  var Point = function Point(x, y) {
    this.x = x || 0;
    this.y = y || 0;
  };

  var Particle = function Particle(p0, p1, p2, p3) {
    this.p0 = p0;
    this.p1 = p1;
    this.p2 = p2;
    this.p3 = p3;
    this.time = 0;
    this.duration = 3 + Math.random() * 2;
    this.color = '#' + Math.floor(Math.random() * 0xffffff).toString(16);
    this.w = 10;
    this.h = 8;
    this.complete = false;
  };

  Particle.prototype = {
    update: function update() {
      this.time = Math.min(this.duration, this.time + timeStep);
      var f = Ease.outCubic(this.time, 0, 1, this.duration);
      var p = cubeBezier(this.p0, this.p1, this.p2, this.p3, f);
      var dx = p.x - this.x;
      var dy = p.y - this.y;
      this.r = Math.atan2(dy, dx) + HALF_PI;
      this.sy = Math.sin(Math.PI * f * 10);
      this.x = p.x;
      this.y = p.y;
      this.complete = this.time === this.duration;
    },
    draw: function draw() {
      ctx.save();
      ctx.translate(this.x, this.y);
      ctx.rotate(this.r);
      ctx.scale(1, this.sy);
      ctx.fillStyle = this.color;
      ctx.fillRect(-this.w * 0.5, -this.h * 0.5, this.w, this.h);
      ctx.restore();
    }
  };

  var Loader = function Loader(x, y) {
    this.x = x;
    this.y = y;
    this.r = 24;
    this._progress = 100;
    this.complete = false;
  };

  Loader.prototype = {
    reset: function reset() {
      this._progress = 0;
      this.complete = false;
    },

    set progress(p) {
      this._progress = p < 0 ? 0 : p > 1 ? 1 : p;
      this.complete = this._progress === 1;
    },

    get progress() {
      return this._progress;
    },

    draw: function draw() {
      ctx.fillStyle = 'rgba(0,0,0,0)';
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.r, -HALF_PI, TWO_PI * this._progress - HALF_PI);
      ctx.lineTo(this.x, this.y);
      ctx.closePath();
      ctx.fill();
    }
  }; // pun intended

  var Exploader = function Exploader(x, y) {
    this.x = x;
    this.y = y;
    this.startRadius = 24;
    this.time = 0;
    this.duration = 0.4;
    this.progress = 0;
    this.complete = false;
  };

  Exploader.prototype = {
    reset: function reset() {
      this.time = 0;
      this.progress = 0;
      this.complete = false;
    },
    update: function update() {
      this.time = Math.min(this.duration, this.time + timeStep);
      this.progress = Ease.inBack(this.time, 0, 1, this.duration);
      this.complete = this.time === this.duration;
    },
    draw: function draw() {
      ctx.fillStyle = 'rgba(0,0,0,0)';
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.startRadius * (1 - this.progress), 0, TWO_PI);
      ctx.fill();
    }
  };
  var particles = [],
      loader,
      exploader,
      phase = 0;

  function initDrawingCanvas() {
    drawingCanvas.width = viewWidth;
    drawingCanvas.height = viewHeight;
    ctx = drawingCanvas.getContext('2d'); //createLoader();

    createExploader();
    createParticles();
  }

  function createLoader() {
    loader = new Loader(viewWidth * 0.5, viewHeight * 0.5);
  }

  function createExploader() {
    exploader = new Exploader(viewWidth * 0.5, viewHeight);
  }

  function createParticles() {
    for (var i = 0; i < 128; i++) {
      var p0 = new Point(viewWidth * 0.5, viewHeight * 0.1);
      var p1 = new Point(Math.random() * viewWidth, Math.random() * viewHeight);
      var p2 = new Point(Math.random() * viewWidth, Math.random() * viewHeight);
      var p3 = new Point(Math.random() * viewWidth, viewHeight + 64);
      particles.push(new Particle(p0, p1, p2, p3));
    }
  }

  function update() {
    switch (phase) {
      case 0:
        //loader.progress += (1/45);
        break;

      case 1:
        exploader.update();
        break;

      case 2:
        particles.forEach(function (p) {
          p.update();
        });
        break;
    }
  }

  function draw() {
    ctx.clearRect(0, 0, viewWidth, viewHeight);

    switch (phase) {
      case 0:
        //loader.draw();
        break;

      case 1:
        exploader.draw();
        break;

      case 2:
        particles.forEach(function (p) {
          p.draw();
        });
        break;
    }
  }

  function loop() {
    update();
    draw();

    if (phase === 0) {
      phase = 1;
    } else if (phase === 1 && exploader.complete) {
      phase = 2;
    } else if (phase === 2 && checkParticlesComplete()) {
      // reset
      //phase = 0;
      ///loader.reset();
      //exploader.reset();
      //particles.length = 0;
      //createParticles();
      delete $scope.shared.displayConfetti;
    }

    requestAnimationFrame(loop);
  }

  function checkParticlesComplete() {
    for (var i = 0; i < particles.length; i++) {
      if (particles[i].complete === false) return false;
    }

    return true;
  } // math and stuff

  /**
   * easing equations from http://gizma.com/easing/
   * t = current time
   * b = start value
   * c = delta value
   * d = duration
   */


  var Ease = {
    inCubic: function inCubic(t, b, c, d) {
      t /= d;
      return c * t * t * t + b;
    },
    outCubic: function outCubic(t, b, c, d) {
      t /= d;
      t--;
      return c * (t * t * t + 1) + b;
    },
    inOutCubic: function inOutCubic(t, b, c, d) {
      t /= d / 2;
      if (t < 1) return c / 2 * t * t * t + b;
      t -= 2;
      return c / 2 * (t * t * t + 2) + b;
    },
    inBack: function inBack(t, b, c, d, s) {
      s = s || 1.70158;
      return c * (t /= d) * t * ((s + 1) * t - s) + b;
    }
  };

  function cubeBezier(p0, c0, c1, p1, t) {
    var p = new Point();
    var nt = 1 - t;
    p.x = nt * nt * nt * p0.x + 3 * nt * nt * t * c0.x + 3 * nt * t * t * c1.x + t * t * t * p1.x;
    p.y = nt * nt * nt * p0.y + 3 * nt * nt * t * c0.y + 3 * nt * t * t * c1.y + t * t * t * p1.y;
    return p;
  }

  setTimeout(function () {
    initDrawingCanvas();
    requestAnimationFrame(loop);
  }, 500); //delete $scope.shared.displayConfetti;

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };
}]).controller('OfferModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', '$upload', '$uibModal', 'AppClient', 'SharedData', 'position', 'candidate', function ($scope, $uibModalInstance, $parentScope, $upload, $uibModal, AppClient, SharedData, position, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.candidate = candidate;
  $scope.offer = {};

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.yes = function () {
    console.log('Offer letter request');
    $scope.prepOffer = true;
  };

  $scope.no = function () {
    closeModal();
  };

  $scope.sendOffer = function () {
    if (!$scope.offer.url) {
      return;
    }

    $scope.appClient.sendOfferLetter($scope.offer, $scope.shared.activeCompany.company._id, position._id, candidate._id, function (error, result) {
      $scope.offerSent = true;
      setTimeout(function () {
        closeModal();
      }, 1500);
    });
  };

  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#offer-attachment');
    chooser.addEventListener("change", function (e) {
      console.log(this.value);
    }, false);
    chooser.click();
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.offer = {
          'file_name': file.name,
          'url': data.url
        };
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading offer letter....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/stream/upload',
        method: 'POST',
        //, data: { myObj: $scope.somevar },
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };
}]).controller('AddReferenceModalInstanceCtrl', ['$scope', '$http', '$uibModalInstance', '$parentScope', 'AppClient', 'SharedData', 'candidate', 'reference', function ($scope, $http, $uibModalInstance, $parentScope, AppClient, SharedData, candidate, reference) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = candidate; //angular.copy(candidate);
  // $scope.reference = reference; //angular.copy(reference);

  $scope.reference = angular.copy(reference);

  if (!$scope.reference) {
    $scope.reference = {};
  }

  $scope.editing = false;

  if ($scope.reference.hasOwnProperty('_id')) {
    $scope.editing = true;
  }

  $scope.showResponses = {
    val: false
  };

  $scope.closeModal = function (data) {
    $uibModalInstance.close(data);
  };

  $scope.referenceQuestionTypes = [{
    'id': 'text',
    'name': 'Text'
  }, {
    'id': 'paragraph',
    'name': 'Paragraph'
  }, {
    'id': 'multiplechoice',
    'name': 'Multiple Choice'
  }, {
    'id': 'checkboxes',
    'name': 'Checkboxes'
  }];

  $scope.toggleType = function (item, question, $model) {
    if (item.id == "multiplechoice" || item.id == "checkboxes") {
      $scope.addOption(question);
    } else {
      delete question.options;
    }
  };

  $scope.checkReferenceQuestionnaire = function (question) {
    //console.log($scope.referenceQuestionnaires.DefaultPersonalReferenceQuestionnaire);
    if (!$scope.reference.hasOwnProperty('reference_questionnaire')) {
      $scope.reference.reference_questionnaire = $scope.referenceQuestionnaires.DefaultPersonalReferenceQuestionnaire;
    }
  };

  $scope.addReferenceQuestion = function (question) {
    $scope.reference.reference_questionnaire.questions.push({});
  };

  $scope.removeReferenceQuestion = function (index) {
    $scope.reference.reference_questionnaire.questions.splice(index, 1);
  };

  $scope.addOption = function (question, q) {
    if (!question.options) {
      question.options = [];
    }

    var option = {
      'text': 'Option ' + (question.options.length + 1)
    };
    question.options.push(option);
  };

  $scope.removeOption = function (question, $index) {
    question.options.splice($index, 1);
  };

  $scope.addReference = function () {
    $scope.sending = true;

    if ($scope.reference._id) {
      $scope.appClient.updateReference($scope.candidate.company_id, $scope.candidate.position_id, $scope.candidate._id, $scope.reference, function (result) {
        $scope.closeModal(result);
      });
    } else {
      $scope.appClient.addReference($scope.candidate.company_id, $scope.candidate.position_id, $scope.candidate._id, $scope.reference, function (result) {
        $scope.closeModal(result);
      });
    }
  };

  var initialize = function initialize() {
    $http.get('/data/referenceQuestionnaires.json').success(function (data) {
      $scope.referenceQuestionnaires = data;
    }).error(function (error) {
      console.log('Error fetching reference questionnaires JSON!: ' + error);
    });
  };

  initialize();
}]).controller('CopyCompanyCandidateModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', '$uibModal', 'AppClient', 'SharedData', 'candidate', function ($scope, $uibModalInstance, $parentScope, $uibModal, AppClient, SharedData, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = angular.copy(candidate);
  $scope.company = undefined;
  $scope.positions = undefined;
  $scope.selectedPosition = undefined;
  $scope.step = "chooseCompany";

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.upgrade = function () {
    closeModal();
    $parentScope.companySettings("plan");
  };

  $scope.setPosition = function (position) {
    $scope.selectedPosition = position;
  };

  $scope.setCompany = function (company, positions) {
    $scope.company = company;
    $scope.positions = positions;
    $scope.appClient.getCompanyDetail(company._id, function (error, results) {
      $scope.positions = results[$scope.company.friendly_id].positions;
      $scope.step = "choosePosition";
    });
  };

  $scope.back = function () {
    $scope.company = undefined;
    $scope.positions = undefined;
    $scope.selectedPosition = undefined;
    $scope.step = "chooseCompany";
  };

  $scope.copyCandidate = function () {
    delete $scope.candidate.status;
    delete $scope.candidate.stage;
    delete $scope.candidate.source;
    delete $scope.candidate.consent;
    delete $scope.candidate.other_positions;
    $scope.appClient.addCandidate($scope.candidate, $scope.company._id, $scope.selectedPosition._id, function () {
      $scope.step = "complete";
    });
  };

  $scope.cancel = function () {
    closeModal();
  };
}]).controller('ConfirmModalInstanceCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'AppClient', 'SharedData', 'header', 'message', function ($scope, $uibModalInstance, $uibModal, AppClient, SharedData, header, message) {
  $scope.header = header;
  $scope.message = message;

  $scope.yes = function () {
    $uibModalInstance.close(true);
  };

  $scope.no = function () {
    $uibModalInstance.close(false);
  };
}]).controller('FeedbackModalInstanceCtrl', ['$scope', '$uibModalInstance', '$parentScope', '$uibModal', 'AppClient', 'SharedData', 'position', 'candidate', function ($scope, $uibModalInstance, $parentScope, $uibModal, AppClient, SharedData, position, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.candidate = candidate;

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.yes = function () {
    console.log('Feedback request');
    $scope.appClient.sendFeedbackRequest(null
    /* msgbody */
    , $scope.shared.activeCompany.company._id, position._id, candidate._id, function (error, result) {
      $scope.feedbackRequested = true;
      setTimeout(function () {
        closeModal();
      }, 1500);
    });
  };

  $scope.no = function () {
    closeModal();
  };
}]).controller('AddSegmentModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'segmentData', 'type', function ($scope, $uibModalInstance, AppClient, SharedData, segmentData, type) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.segment = {
    filters: segmentData
  };

  if (type) {
    $scope.segment.type = type;
  }

  $scope.messageStatus = '';

  $scope.save = function () {
    if (!$scope.segment.name) {
      return;
    }

    $scope.messageStatus = "Saving...";
    $scope.segment.company_id = $scope.shared.activeCompany.company._id;
    $scope.appClient.addSegment($scope.segment, function (error, result) {
      if (error) {
        return;
      }

      setTimeout(function () {
        $scope.messageStatus = '';
        $uibModalInstance.close(result);
      }, 500);
    });
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]).controller('ProductFeatureRequestsModalInstanceCtrl', ['$scope', '$uibModalInstance', '$cookieStore', '$parentScope', 'AppClient', 'SharedData', function ($scope, $uibModalInstance, $cookieStore, $parentScope, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]).controller('ProductUpdatesModalInstanceCtrl', ['$scope', '$uibModalInstance', '$cookieStore', '$parentScope', 'AppClient', 'SharedData', function ($scope, $uibModalInstance, $cookieStore, $parentScope, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.updates = $parentScope.updates;
  $parentScope.productUpdatesViewed = new Date();
  $cookieStore.put("ProductUpdatesViewed", $parentScope.productUpdatesViewed);
  $parentScope.gaEventTracker("ProductUpdatesViewed");

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
"use strict";

angular.module('BaseApp').factory('AppClient', function ($q, $http, $state, $upload, $location, $anchorScroll, SharedData, RESTClient, SocketClient, HTML5NotifyClient) {
  var html5notify = HTML5NotifyClient;
  var restClient = RESTClient;
  var socketClient = SocketClient;
  var shared = SharedData;
  var $scope;

  var gaEventTracker = function gaEventTracker(type) {
    console.info("GA Event: " + type);
    ga('send', 'event', type, 'click', 1);
  };

  var getFriendlyRelativeDay = function getFriendlyRelativeDay(date) {
    var dow = date.getDay();
    var now = new Date();

    if (dow === 0) {
      return "Jan";
    }

    if (dow === 1) {
      return "Feb";
    }

    if (dow === 2) {
      return "Mar";
    }

    if (dow === 3) {
      return "Apr";
    }

    if (dow === 4) {
      return "May";
    }

    if (dow === 5) {
      return "Jun";
    }

    if (dow === 6) {
      return "Jul";
    }
  };

  var getMonth = function getMonth(monthId) {
    if (monthId === 0) {
      return "Jan";
    }

    if (monthId === 1) {
      return "Feb";
    }

    if (monthId === 2) {
      return "Mar";
    }

    if (monthId === 3) {
      return "Apr";
    }

    if (monthId === 4) {
      return "May";
    }

    if (monthId === 5) {
      return "Jun";
    }

    if (monthId === 6) {
      return "Jul";
    }

    if (monthId === 7) {
      return "Aug";
    }

    if (monthId === 8) {
      return "Sep";
    }

    if (monthId === 9) {
      return "Oct";
    }

    if (monthId === 10) {
      return "Nov";
    }

    if (monthId === 11) {
      return "Dec";
    }

    return "";
  };

  var replaceTemplateVariables = function replaceTemplateVariables(body, data) {
    body = replaceCandidateName(body, data.candidate);
    body = replaceCandidateFirstName(body, data.candidate);
    body = replaceCandidateEmailAddress(body, data.candidate);
    body = replacePositionLink(body, data.position, data.company);
    body = replaceCompanyUser(body, data.sender);
    body = replaceCompanyUserFirstName(body, data.sender);
    body = replaceCompanyName(body, data.company);
    body = replacePositionTitle(body, data.position); //console.log(body);

    return body;
  };

  var replaceCandidateName = function replaceCandidateName(body, candidate) {
    body = body.replace(/\[\[candidate_name\]\]/g, candidate.name);
    return body;
  };

  var replaceCandidateEmailAddress = function replaceCandidateEmailAddress(body, candidate) {
    body = body.replace(/\[\[candidate_email_address\]\]/g, candidate.email_address);
    return body;
  };

  var replaceCandidateFirstName = function replaceCandidateFirstName(body, candidate) {
    body = body.replace(/\[\[candidate_first_name\]\]/g, candidate.name.split(' ')[0]);
    return body;
  };

  var replaceCompanyUserFirstName = function replaceCompanyUserFirstName(body, candidate) {
    body = body.replace(/\[\[company_user_first_name\]\]/g, candidate.name.split(' ')[0]);
    return body;
  };

  var replaceCompanyUser = function replaceCompanyUser(body, sender) {
    body = body.replace(/\[\[company_user\]\]/g, sender.name);
    return body;
  };

  var replacePositionLink = function replacePositionLink(body, position, company) {
    body = body.replace(/\[\[position_link\]\]/g, "https://" + company.friendly_id + '.breezy.hr/p/' + position._id);
    return body;
  };

  var replacePositionTitle = function replacePositionTitle(body, position) {
    body = body.replace(/\[\[position_title\]\]/g, position.name);
    return body;
  };

  var replaceCompanyName = function replaceCompanyName(body, company) {
    body = body.replace(/\[\[company_name\]\]/g, company.name);
    return body;
  };

  return {
    /*
    INITIALIZATION
     */
    validateInitAppState: function validateInitAppState($s, $rs, callback) {
      var that = this;

      if (!shared.isAppPreInit) {
        console.log('app not initialized');
        that.initApp(function () {
          if (!shared.user) {
            that.signout();
          }

          shared.isAppPreInit = true;
          return callback();
        });
        $scope = $s;
      } else {
        console.log('app initialized');
        if (!shared.user) that.signout();
        return callback();
      }
    },
    validateAppState: function validateAppState($s, $rs, $p, callback) {
      var that = this;

      if (!shared.isAppInitialized) {
        console.log('app not initialized');
        that.initializeApp($p, function () {
          if (!shared.user) {
            that.signout();
          }

          shared.isAppInitialized = true;
          socketClient.initialize($s, $rs, that, function () {});
          html5notify.initialize($s, $location);
          return callback();
        });
        $scope = $s;
      } else {
        console.log('app initialized');

        if (!shared.user) {
          that.signout();
        }

        return callback();
      }
    },
    initApp: function initApp(callback) {
      var that = this;
      async.parallel([function (callback) {
        that.initializeUser(function (error, user) {
          return callback(error, user);
        });
      }, function (callback) {
        //only get metadata for companies (company select screen)
        that.initializeCompaniesMeta(function (error, results) {
          return callback(error, results);
        });
      }], function (error, results) {
        that.initializeIntercom(shared.user);
        return callback();
      });
    },
    initializeApp: function initializeApp(stateParams, callback) {
      var that = this;
      async.parallel([function (callback) {
        that.initializeUser(function (error, user) {
          return callback(error, user);
        });
      }, function (callback) {
        //get metadata for all user companies (sidebar) and full data for current company.
        that.initializeCompaniesMeta(function (error, results) {
          if (results[stateParams.companyFriendlyId]) {
            that.initializeCompany(results[stateParams.companyFriendlyId].company._id, stateParams.companyFriendlyId, function (error, results) {
              return callback(error, results);
            });
          } else {
            return callback(error, results);
          }
        });
      }, function (callback) {
        that.initializeJobBoards(function (error, results) {
          return callback(error, results);
        });
      }], function (error, results) {
        that.initializeIntercom(shared.user);
        if (!shared.companies[stateParams.companyFriendlyId]) window.location = '/app/companies';
        that.initializeCanny(shared.user, shared.companies[stateParams.companyFriendlyId].company);
        that.initializeAutopilot(shared.user, shared.companies[stateParams.companyFriendlyId].company);
        if (shared.companies[stateParams.companyFriendlyId]) that.initializeUserCues(shared.companies[stateParams.companyFriendlyId].company._id);
        return callback();
      });
    },
    initializeCanny: function initializeCanny(user, company) {
      // Canny
      Canny('identify', {
        appID: '5a0c99144c8d527ed403295a',
        user: {
          email: user.email_address,
          id: user._id,
          name: user.name,
          avatarURL: user.profile_photo_url,
          companies: [{
            id: company._id,
            name: company.name,
            monthlySpend: company.plan.monthly_cost
          }]
        }
      });
    },
    initializeAutopilot: function initializeAutopilot(user, company) {
      Autopilot.run("associate", {
        Email: user.email_address,
        FirstName: user.name.split(" ")[0],
        LastName: user.name.split(" ").length > 1 ? user.name.split(" ")[1] : "",
        Company: company.name
      });
    },
    initializeIntercom: function initializeIntercom(user) {
      if (typeof FS != "undefined") {
        console.log("init fullstory");
        FS.identify(user._id, {
          displayName: user.name,
          email: user.email_address
        });
      }

      if (window.Intercom) {
        console.log('init intercom');
        window.Intercom('boot', {
          app_id: '66gd1nx3',
          email: user.email_address,
          user_id: user._id
        });
      }
    },
    initializeUser: function initializeUser(callback) {
      var that = this;
      restClient.getUser(function (error, user) {
        if (user) {
          shared.user = user;
        }

        restClient.getUserReferralUrl(function (error, data) {
          if (data) {
            user.referral_url = data.url;
            shared.user.referral_url = user.referral_url;
          }
        });
        return callback(error, user);
      });
    },
    initializeUserCues: function initializeUserCues(companyId) {
      var that = this;
      restClient.getUserCues(companyId, function (error, cues) {
        if (cues) {
          shared.user_cues = cues;
        }
      });
    },
    initializeJobBoards: function initializeJobBoards(callback) {
      var that = this;
      restClient.getJobBoards(function (error, jobboards) {
        if (jobboards) {
          shared.job_boards = jobboards;
        }

        return callback(error, jobboards);
      });
    },
    initializeCompanies: function initializeCompanies(callback) {
      var that = this;
      restClient.getUserCompaniesDetail(function (error, results) {
        shared.companies = results;
        return callback(error, results);
      });
    },
    initializeCompany: function initializeCompany(companyId, friendlyId, callback) {
      var that = this;
      restClient.getCompanyDetail(companyId, function (error, results) {
        // remove gdpr templates
        results[friendlyId].templates = results[friendlyId].templates.filter(function (template) {
          return template.type.indexOf('gdpr') === -1;
        });
        shared.companies[friendlyId] = results[friendlyId];
        return callback(error, results);
      });
    },
    initializeCompaniesMeta: function initializeCompaniesMeta(callback) {
      var that = this;
      restClient.getUserCompaniesMeta(function (error, results) {
        shared.companies = results;
        return callback(error, results);
      });
    },
    processTemplate: function processTemplate(body, data) {
      return replaceTemplateVariables(body, data);
    },
    getCompanyDetail: function getCompanyDetail(companyId, callback) {
      restClient.getCompanyDetail(companyId, function (error, results) {
        return callback(error, results);
      });
    },

    /*
    AUTH
     */
    reload: function reload() {
      return window.location.reload(true);
    },
    signin: function signin(email, password, callback) {
      var that = this;
      gaEventTracker("signin");
      restClient.signin({
        "email": email,
        "password": password
      }, function (error, user) {
        if (user) {
          shared.user = user;
        }

        return callback(error, user);
      });
    },
    signout: function signout() {
      var that = this;
      gaEventTracker("signout");
      restClient.signout(function () {
        delete shared.user;
        window.location.href = '/signout';
      });
    },
    requestQuote: function requestQuote(data, callback) {
      var that = this;
      gaEventTracker("requestQuote");
      restClient.requestQuote(data, function (error, data) {
        return callback(error, data);
      });
    },
    getAppStatus: function getAppStatus(callback) {
      restClient.getAppStatus(callback);
    },
    getUserCues: function getUserCues(callback) {
      var that = this;
      restClient.getUserCues(shared.activeCompany.company._id, function (error, data) {
        return callback(error, data);
      });
    },
    setUserCue: function setUserCue(cueKey, callback) {
      var that = this;
      restClient.setUserCue(shared.activeCompany.company._id, cueKey, function (error, data) {
        return callback(error, data);
      });
    },
    emailVerifyAndCreateAccount: function emailVerifyAndCreateAccount(tokenId, callback) {
      restClient.emailVerifyAndCreateAccount(tokenId, function (error, user) {
        shared.user = user;
        return callback(error, user);
      });
    },
    getUserSocketToken: function getUserSocketToken(callback) {
      return restClient.getUserSocketToken(callback);
    },

    /*
    PORTAL
     */
    updatePortal: function updatePortal(portalSection, companyId, data, callback) {
      gaEventTracker("updatePortal" + portalSection.charAt(0).toUpperCase() + portalSection.slice(1));
      restClient.updatePortal(portalSection, companyId, data, callback);
    },
    updatePortalLayout: function updatePortalLayout(companyId, layout, callback) {
      var that = this;
      gaEventTracker("updatePortalLayout");
      restClient.updatePortalLayout(companyId, layout, callback);
    },
    updatePortalAppearance: function updatePortalAppearance(companyId, appearance, callback) {
      var that = this;
      gaEventTracker("updatePortalAppearance");
      restClient.updatePortalAppearance(companyId, appearance, callback);
    },
    updatePortalEmployees: function updatePortalEmployees(companyId, employees, callback) {
      var that = this;
      gaEventTracker("updatePortalEmployees");
      restClient.updatePortalEmployees(companyId, employees, callback);
    },
    updatePortalTestimonials: function updatePortalTestimonials(companyId, testimonials, callback) {
      var that = this;
      gaEventTracker("updatePortalTestimonials");
      restClient.updatePortalTestimonials(companyId, testimonials, callback);
    },
    updatePortalMedia: function updatePortalMedia(companyId, media, callback) {
      var that = this;
      gaEventTracker("updatePortalMedia");
      restClient.updatePortalMedia(companyId, media, callback);
    },
    updateMessenger: function updateMessenger(companyId, messenger, callback) {
      var that = this;
      gaEventTracker("updatePortalWidget");
      restClient.updateMessenger(companyId, messenger, callback);
    },
    addWidgetTemplate: function addWidgetTemplate(companyId, template, callback) {
      restClient.addWidgetTemplate(companyId, template, callback);
    },
    getMessenger: function getMessenger(companyId, callback) {
      restClient.getMessenger(companyId, callback);
    },
    updateWidgetTemplate: function updateWidgetTemplate(companyId, template, callback) {
      restClient.updateWidgetTemplate(companyId, template, callback);
    },
    deleteWidgetTemplate: function deleteWidgetTemplate(companyId, templateId, callback) {
      restClient.deleteWidgetTemplate(companyId, templateId, callback);
    },
    updatePortalPerks: function updatePortalPerks(companyId, perks, callback) {
      var that = this;
      gaEventTracker("updatePortalPerks");
      restClient.updatePortalPerks(companyId, perks, callback);
    },
    updatePortalSocial: function updatePortalSocial(companyId, social, callback) {
      var that = this;
      gaEventTracker("updatePortalSocial");
      restClient.updatePortalSocial(companyId, social, callback);
    },
    updateReferralPortal: function updateReferralPortal(companyId, referral, callback) {
      var that = this;
      gaEventTracker("updatePortalReferral");
      restClient.updatePortalReferral(companyId, referral, callback);
    },
    updatePortalMessaging: function updatePortalMessaging(companyId, messaging, callback) {
      var that = this;
      gaEventTracker("updatePortalMessaging");
      restClient.updatePortalMessaging(companyId, messaging, callback);
    },

    /*
    TASKS
    */
    createTask: function createTask(data, companyId, callback) {
      var that = this;
      gaEventTracker("createTask");
      restClient.createTask(data, companyId, callback);
    },
    markTaskComplete: function markTaskComplete(companyId, taskId, callback) {
      var that = this;
      restClient.markTaskComplete(companyId, taskId, callback);
    },
    getTasks: function getTasks(options, params, companyId, callback) {
      console.log('getting tasks');
      restClient.getTasks(options, params, companyId, callback);
    },
    getTaskMetadata: function getTaskMetadata(companyId, taskId, callback) {
      restClient.getTaskMetadata(companyId, taskId, callback);
    },

    /*
    USER
     */
    getNotificationSettings: function getNotificationSettings(callback) {
      var that = this;
      restClient.getNotificationSettings(callback);
    },
    updateNotificationSettings: function updateNotificationSettings(settings, callback) {
      var that = this;
      gaEventTracker("updateNotificationSettings");
      restClient.updateNotificationSettings(settings, callback);
    },
    getUserCalendar: function getUserCalendar(companyId, callback) {
      var that = this;

      if (callback) {
        restClient.getUserCalendar(companyId, callback);
      } else {
        var deferred = $q.defer();
        restClient.getUserCalendar(companyId, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },
    getGoogleFreebusy: function getGoogleFreebusy(companyId, additionalParticipants) {
      return restClient.getGoogleFreebusy(companyId, additionalParticipants);
    },
    getOutlookFreebusy: function getOutlookFreebusy(companyId, additionalParticipants) {
      return restClient.getOutlookFreebusy(companyId, additionalParticipants);
    },
    updateUser: function updateUser(user, callback) {
      var that = this;
      gaEventTracker("updateUser");
      restClient.updateUser(user, callback);
    },
    getUser: function getUser(userId, callback) {
      restClient.getUser(callback);
    },
    getUserById: function getUserById(userId, callback) {
      restClient.getUserById(userId, callback);
    },
    getProductUpdates: function getProductUpdates(callback) {
      restClient.getProductUpdates(callback);
    },

    /*
    ANALYTICS
     */
    getReport: function getReport(reportType, companyId, positionId, filter, callback) {
      if (!reportType) {
        return callback({
          error: 'no report type'
        });
      }

      restClient.getReport(reportType, companyId, positionId, filter, callback);
    },
    getReportExport: function getReportExport(reportType, companyId, positionId, filter, callback) {
      if (!reportType) {
        return callback({
          error: 'no report type'
        });
      }

      restClient.getReportExport(reportType, companyId, positionId, filter, callback);
    },

    /*
    COMPANY
     */
    cancelSubscription: function cancelSubscription(companyId, feedback, callback) {
      console.log(feedback);
      restClient.cancelSubscription(companyId, feedback, callback);
    },
    closeCompanyAccount: function closeCompanyAccount(companyId, feedback, callback) {
      console.log(feedback);
      restClient.closeCompanyAccount(companyId, feedback, callback);
    },
    addCompany: function addCompany(companyData, callback) {
      var that = this;
      gaEventTracker("addCompany");

      if (!companyData.name) {
        return callback({
          "error": "Company name is required"
        });
      }

      restClient.addCompany(companyData, callback);
    },
    updateCompany: function updateCompany(companyId, companyData, callback) {
      var that = this;
      gaEventTracker("updateCompany");
      restClient.updateCompany(companyId, companyData, callback);
    },
    setApprovalWorkflow: function setApprovalWorkflow(companyId, data, callback) {
      restClient.setApprovalWorkflow(companyId, data, callback);
    },
    getCompanyBillingAddress: function getCompanyBillingAddress(companyId, callback) {
      restClient.getCompanyCreditCard(companyId, callback);
    },
    updateCompanyBillingAddress: function updateCompanyBillingAddress(companyId, billingAddress, callback) {
      gaEventTracker("updateBillingAddress");
      restClient.updateCompanyBillingAddress(companyId, billingAddress, callback);
    },
    getCompanyInvoices: function getCompanyInvoices(companyId, callback) {
      restClient.getCompanyInvoices(companyId, callback);
    },
    updateCompanyBillingDescription: function updateCompanyBillingDescription(companyId, data, callback) {
      restClient.updateCompanyBillingDescription(companyId, data, callback);
    },
    getCompanyBillingDescription: function getCompanyBillingDescription(companyId, callback) {
      restClient.getCompanyBillingDescription(companyId, callback);
    },
    getCompanyCreditCard: function getCompanyCreditCard(companyId, callback) {
      restClient.getCompanyCreditCard(companyId, callback);
    },
    updateCompanySubscriptionPlan: function updateCompanySubscriptionPlan(companyId, type, planId, cancel, callback) {
      restClient.updateCompanySubscriptionPlan(companyId, type, planId, cancel, callback);
    },
    getCompanySubscriptionPlan: function getCompanySubscriptionPlan(companyId, callback) {
      restClient.getCompanySubscriptionPlan(companyId, callback);
    },
    getCompanySubscriptionPlanCompare: function getCompanySubscriptionPlanCompare(companyId, planId, callback) {
      restClient.getCompanySubscriptionPlanCompare(companyId, planId, callback);
    },
    updateCompanyCreditCard: function updateCompanyCreditCard(companyId, token, callback) {
      var that = this;
      gaEventTracker("updateCompanyCreditCard");
      restClient.updateCompanyCreditCard(companyId, token, callback);
    },
    getCompanyEmbedWidget: function getCompanyEmbedWidget(companyId, callback) {
      restClient.getCompanyWidget(companyId, callback);
    },
    updateCompanyEmbedWidget: function updateCompanyEmbedWidget(companyId, widget, callback) {
      var that = this;
      gaEventTracker("updateCompanyWidget");
      restClient.updateCompanyWidget(companyId, widget, callback);
    },
    getPipelines: function getPipelines(companyId, callback) {
      restClient.getPipelines(companyId, callback);
    },
    addPipeline: function addPipeline(companyId, pipeline, callback) {
      var that = this;
      gaEventTracker("addPipeline");
      restClient.addPipeline(companyId, pipeline, function (error, data) {
        return callback(error, data);
      });
    },
    updatePipeline: function updatePipeline(companyId, pipelineId, pipeline, callback) {
      var that = this;
      gaEventTracker("updateCompanyPipeline");
      restClient.updatePipeline(companyId, pipelineId, pipeline, function (error, data) {
        return callback(error, data);
      });
    },
    deletePipeline: function deletePipeline(companyId, pipelineId, callback) {
      var that = this;
      gaEventTracker("deletePipeline");
      restClient.deletePipeline(companyId, pipelineId, function (error, data) {
        return callback(error, data);
      });
    },
    setPositionPipeline: function setPositionPipeline(pipelineId, positionId, companyId, callback) {
      var that = this;
      gaEventTracker("setPositionPipeline");
      restClient.setPositionPipeline(pipelineId, positionId, companyId, callback);
    },
    addCompanyCampaign: function addCompanyCampaign(campaign, callback) {
      var that = this;
      gaEventTracker("addCompanyCampaign");
      restClient.addCompanyCampaign(shared.activeCompany.company._id, campaign, callback);
    },
    updateCompanyCampaign: function updateCompanyCampaign(campaign, callback) {
      var that = this;
      gaEventTracker("updateCompanyCampaign");
      restClient.updateCompanyCampaign(shared.activeCompany.company._id, campaign, callback);
    },
    deleteCompanyCampaign: function deleteCompanyCampaign(campaignId, callback) {
      var that = this;
      gaEventTracker("deleteCompanyCampaign");
      restClient.deleteCompanyCampaign(shared.activeCompany.company._id, campaignId, callback);
    },
    addCompanyCustomField: function addCompanyCustomField(customField, callback) {
      var that = this;
      gaEventTracker("addCompanyCustomField");
      restClient.addCompanyCustomField(shared.activeCompany.company._id, customField, callback);
    },
    updateCompanyCustomField: function updateCompanyCustomField(customField, callback) {
      var that = this;
      gaEventTracker("updateCompanyCustomField");
      restClient.updateCompanyCustomField(shared.activeCompany.company._id, customField, callback);
    },
    deleteCompanyCustomField: function deleteCompanyCustomField(customFieldId, callback) {
      var that = this;
      gaEventTracker("deleteCompanyCustomField");
      restClient.deleteCompanyCustomField(shared.activeCompany.company._id, customFieldId, callback);
    },
    updateDefaultSubject: function updateDefaultSubject(companyId, subject, callback) {
      var that = this;
      gaEventTracker("updateDefaultSubject");
      restClient.updateDefaultSubject(companyId, subject, function (error, data) {
        return callback(error, data);
      });
    },
    addCompanyFolder: function addCompanyFolder(folder, callback) {
      var that = this;
      gaEventTracker("addCompanyFolder");
      restClient.addCompanyFolder(shared.activeCompany.company._id, folder, callback);
    },
    updateCompanyFolder: function updateCompanyFolder(folder, callback) {
      var that = this;
      gaEventTracker("updateCompanyFolder");
      restClient.updateCompanyFolder(shared.activeCompany.company._id, folder, callback);
    },
    deleteCompanyFolder: function deleteCompanyFolder(folderId, callback) {
      var that = this;
      gaEventTracker("deleteCompanyFolder");
      restClient.deleteCompanyFolder(shared.activeCompany.company._id, folderId, callback);
    },
    addCompanyTemplate: function addCompanyTemplate(companyId, template, callback) {
      var that = this;
      gaEventTracker("addCompanyTemplate");
      restClient.addCompanyTemplate(companyId, template, function (error, data) {
        return callback(error, data);
      });
    },
    updateCompanyTemplate: function updateCompanyTemplate(companyId, template, callback) {
      var that = this;
      gaEventTracker("updateCompanyTemplate");
      restClient.updateCompanyTemplate(companyId, template, function (error, data) {
        return callback(error, data);
      });
    },
    deleteCompanyTemplate: function deleteCompanyTemplate(companyId, templateId, callback) {
      var that = this;
      gaEventTracker("deleteCompanyTemplate");
      restClient.deleteCompanyTemplate(companyId, templateId, function (error, data) {
        return callback(error, data);
      });
    },
    getCompanyTemplates: function getCompanyTemplates(companyId, callback) {
      restClient.getCompanyTemplates(companyId, callback);
    },
    getDocSigningTemplates: function getDocSigningTemplates(companyId) {
      return restClient.getDocSigningTemplates(companyId);
    },
    newDocSigningTemplate: function newDocSigningTemplate(companyId, data) {
      return restClient.newDocSigningTemplate(companyId, data);
    },
    addDocSigningTemplate: function addDocSigningTemplate(companyId, data) {
      return restClient.addDocSigningTemplate(companyId, data);
    },
    updateDocSigningTemplate: function updateDocSigningTemplate(companyId, templateId, data) {
      return restClient.updateDocSigningTemplate(companyId, templateId, data);
    },
    editDocSigningTemplate: function editDocSigningTemplate(companyId, templateId) {
      return restClient.editDocSigningTemplate(companyId, templateId);
    },
    deleteDocSigningTemplate: function deleteDocSigningTemplate(companyId, templateId) {
      return restClient.deleteDocSigningTemplate(companyId, templateId);
    },
    sendDocSigningTemplate: function sendDocSigningTemplate(data) {
      return restClient.sendDocSigningTemplate(data);
    },
    getLimitsByType: function getLimitsByType(companyId, type, callback) {
      return restClient.getLimitsByType(companyId, type, callback);
    },
    deleteSegment: function deleteSegment(segmentId, callback) {
      var that = this;
      gaEventTracker("deleteSegment");
      restClient.deleteSegment(segmentId, function (error, data) {
        return callback(error, data);
      });
    },
    addSegment: function addSegment(segment, callback) {
      var that = this;
      gaEventTracker("addSegment");
      restClient.addSegment(segment, function (error, data) {
        return callback(error, data);
      });
    },
    deleteDiscussionNote: function deleteDiscussionNote(positionId, candidateId, activityId, callback) {
      var that = this;
      gaEventTracker("deleteDiscussionNote");
      restClient.deleteDiscussionNote(shared.activeCompany.company._id, positionId, candidateId, activityId, callback);
    },
    updateDiscussionNote: function updateDiscussionNote(data, positionId, candidateId, activityId, callback) {
      var that = this;
      gaEventTracker("updateDiscussionNote");
      restClient.updateDiscussionNote(data, shared.activeCompany.company._id, positionId, candidateId, activityId, callback);
    },
    deleteCandidateNote: function deleteCandidateNote(companyId, positionId, candidateMetaId, noteId, callback) {
      var that = this;
      gaEventTracker("deleteCandidateNote");
      restClient.deleteCandidateNote(companyId, positionId, candidateMetaId, noteId, callback);
    },
    addCandidateNote: function addCandidateNote(data, companyId, positionId, candidateMetaId, callback) {
      var that = this;
      gaEventTracker("addCandidateNote");
      restClient.addCandidateNote(data, companyId, positionId, candidateMetaId, callback);
    },
    updateCandidateNote: function updateCandidateNote(data, companyId, positionId, candidateMetaId, noteId, callback) {
      var that = this;
      gaEventTracker("updateCandidateNote");
      restClient.updateCandidateNote(data, companyId, positionId, candidateMetaId, noteId, callback);
    },
    requestCandidateScorecardsCompletion: function requestCandidateScorecardsCompletion(candidateId, positionId, companyId, callback) {
      var that = this;
      gaEventTracker("addCandidateScorecard");
      restClient.requestCandidateScorecardsCompletion(candidateId, positionId, companyId, callback);
    },
    addCandidateScorecard: function addCandidateScorecard(scorecard, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("addCandidateScorecard");
      restClient.addCandidateScorecard(scorecard, companyId, positionId, candidateId, callback);
    },
    addScorecard: function addScorecard(companyId, scorecard, callback) {
      var that = this;
      gaEventTracker("addScorecard");
      restClient.addScorecard(companyId, scorecard, function (error, data) {
        return callback(error, data);
      });
    },
    updateScorecard: function updateScorecard(companyId, scorecard, callback) {
      var that = this;
      gaEventTracker("updateScorecard");
      restClient.updateScorecard(companyId, scorecard, function (error, data) {
        return callback(error, data);
      });
    },
    deleteScorecard: function deleteScorecard(companyId, scorecardId, callback) {
      var that = this;
      gaEventTracker("deleteScorecard");
      restClient.deleteScorecard(companyId, scorecardId, function (error, data) {
        return callback(error, data);
      });
    },
    getScorecards: function getScorecards(companyId, callback) {
      restClient.getScorecards(companyId, callback);
    },
    addInterviewGuide: function addInterviewGuide(companyId, guide, callback) {
      var that = this;
      gaEventTracker("addInterviewGuide");
      restClient.addInterviewGuide(companyId, guide, function (error, data) {
        return callback(error, data);
      });
    },
    updateInterviewGuide: function updateInterviewGuide(companyId, guide, callback) {
      var that = this;
      gaEventTracker("updateInterviewGuide");
      restClient.updateInterviewGuide(companyId, guide, function (error, data) {
        return callback(error, data);
      });
    },
    deleteInterviewGuide: function deleteInterviewGuide(companyId, guideId, callback) {
      var that = this;
      gaEventTracker("deleteInterviewGuide");
      restClient.deleteInterviewGuide(companyId, guideId, function (error, data) {
        return callback(error, data);
      });
    },
    // approvals
    requestPublishApproval: function requestPublishApproval(companyId, positionId, request, callback) {
      restClient.requestPublishApproval(companyId, positionId, request, callback);
    },
    approvePublishApproval: function approvePublishApproval(companyId, positionId, callback) {
      restClient.approvePublishApproval(companyId, positionId, callback);
    },
    rejectPublishApproval: function rejectPublishApproval(companyId, positionId, callback) {
      restClient.rejectPublishApproval(companyId, positionId, callback);
    },
    cancelPublishApproval: function cancelPublishApproval(companyId, positionId, callback) {
      restClient.cancelPublishApproval(companyId, positionId, callback);
    },
    addQuestionnaire: function addQuestionnaire(companyId, questionnaire, callback) {
      var that = this;
      gaEventTracker("addQuestionnaire");
      restClient.addQuestionnaire(companyId, questionnaire, function (error, data) {
        return callback(error, data);
      });
    },
    addCandidateSchedulingLink: function addCandidateSchedulingLink(companyId, positionId, candidateId, schedulingLinkFriendlyId, data, callback) {
      restClient.addCandidateSchedulingLink(companyId, positionId, candidateId, schedulingLinkFriendlyId, data, function (error, data) {
        return callback(error, data);
      });
    },
    addCandidateQuestionnaire: function addCandidateQuestionnaire(companyId, positionId, candidateId, questionnaireId, callback) {
      restClient.addCandidateQuestionnaire(companyId, positionId, candidateId, questionnaireId, function (error, data) {
        return callback(error, data);
      });
    },
    addCompanySchedulingLink: function addCompanySchedulingLink(companyId, data, callback) {
      restClient.addCompanySchedulingLink(companyId, data, function (error, data) {
        return callback(error, data);
      });
    },
    updateCompanySchedulingLink: function updateCompanySchedulingLink(companyId, schedulingLinkId, data, callback) {
      restClient.updateCompanySchedulingLink(companyId, schedulingLinkId, data, function (error, data) {
        return callback(error, data);
      });
    },
    deleteCompanySchedulingLink: function deleteCompanySchedulingLink(companyId, schedulingLinkId, callback) {
      restClient.deleteCompanySchedulingLink(companyId, schedulingLinkId, function (error, data) {
        return callback(error, data);
      });
    },
    updateQuestionnaire: function updateQuestionnaire(companyId, questionnaire, callback) {
      var that = this;
      gaEventTracker("updateQuestionnaire");
      restClient.updateQuestionnaire(companyId, questionnaire, function (error, data) {
        return callback(error, data);
      });
    },
    deleteQuestionnaire: function deleteQuestionnaire(companyId, questionnareId, callback) {
      var that = this;
      gaEventTracker("deleteQuestionnaire");
      restClient.deleteQuestionnaire(companyId, questionnareId, function (error, data) {
        return callback(error, data);
      });
    },
    getTeams: function getTeams(callback) {
      var that = this;
      gaEventTracker("addTeam");
      restClient.getTeams(shared.activeCompany.company._id, function (error, data) {
        return callback(error, data);
      });
    },
    addTeam: function addTeam(team, callback) {
      var that = this;
      gaEventTracker("addTeam");
      restClient.addTeam(shared.activeCompany.company._id, team, function (error, data) {
        return callback(error, data);
      });
    },
    updateTeam: function updateTeam(team, callback) {
      var that = this;
      gaEventTracker("updateTeam");
      restClient.updateTeam(shared.activeCompany.company._id, team, function (error, data) {
        return callback(error, data);
      });
    },
    deleteTeam: function deleteTeam(teamId, callback) {
      var that = this;
      gaEventTracker("deleteTeam");
      restClient.deleteTeam(shared.activeCompany.company._id, teamId, function (error, data) {
        return callback(error, data);
      });
    },
    addReference: function addReference(companyId, positionId, candidateId, reference, callback) {
      var that = this;
      gaEventTracker("addReference");
      restClient.addReference(companyId, positionId, candidateId, reference, function (error, data) {
        return callback(data);
      });
    },
    updateReference: function updateReference(companyId, positionId, candidateId, reference, callback) {
      var that = this;
      gaEventTracker("updateReference");
      restClient.updateReference(companyId, positionId, candidateId, reference, function (error, data) {
        return callback(data);
      });
    },
    getQuestionnaires: function getQuestionnaires(companyId, callback) {
      restClient.getQuestionnaires(companyId, callback);
    },
    getCustomAttributes: function getCustomAttributes(companyId, type, callback) {
      restClient.getCustomAttributes(companyId, type, callback);
    },
    getCompanyStream: function getCompanyStream(companyId, callback) {
      restClient.getCompanyStream(companyId, callback);
    },
    getIntegrations: function getIntegrations(companyId, callback) {
      restClient.getIntegrations(companyId, callback);
    },
    disableIntegration: function disableIntegration(serviceId, companyId, callback) {
      var that = this;
      gaEventTracker("disableIntegration" + serviceId);
      restClient.disableIntegration(serviceId, companyId, callback);
    },
    testIntegrationConfig: function testIntegrationConfig(serviceId, data, callback) {
      var that = this;
      gaEventTracker("testIntegrationConfig");
      restClient.testIntegrationConfig(serviceId, data, callback);
    },
    testBambooHRConfig: function testBambooHRConfig(companyId, callback) {
      var that = this;
      gaEventTracker("testBambooHRConfig");
      restClient.testBambooHRConfig(companyId, callback);
    },
    updateBambooHRConfig: function updateBambooHRConfig(config, companyId, callback) {
      var that = this;
      gaEventTracker("updateBambooHRConfig");
      restClient.updateBambooHRConfig(config, companyId, callback);
    },
    updateIndeedSponsoredConfig: function updateIndeedSponsoredConfig(emailAddress, companyId, callback) {
      var that = this;
      gaEventTracker("updateIndeedSponsoredConfig");
      restClient.updateIndeedSponsoredConfig(emailAddress, companyId, callback);
    },
    updateFacebookFeedConfig: function updateFacebookFeedConfig(companyFullAddress, facebookUrl, companyId, callback) {
      var that = this;
      gaEventTracker("updateFacebookFeedConfig");
      restClient.updateFacebookFeedConfig(companyFullAddress, facebookUrl, companyId, callback);
    },
    updateWorkableConfig: function updateWorkableConfig(subdomain, accessToken, companyId, callback) {
      var that = this;
      gaEventTracker("updateWorkableConfig");
      restClient.updateWorkableConfig(subdomain, accessToken, companyId, callback);
    },
    startWorkableImport: function startWorkableImport(companyId, callback) {
      var that = this;
      gaEventTracker("startWorkableImport");
      restClient.startWorkableImport(companyId, callback);
    },
    updateNamelyConfig: function updateNamelyConfig(data, callback) {
      var that = this;
      gaEventTracker("updateNamelyConfig");
      restClient.updateNamelyConfig(data, shared.activeCompany.company._id, callback);
    },
    updateInovaPayrollConfig: function updateInovaPayrollConfig(data, callback) {
      var that = this;
      gaEventTracker("updateInovaPayrollConfig");
      restClient.updateInovaPayrollConfig(data, callback);
    },
    updateHackerRankConfig: function updateHackerRankConfig(apiKey, companyId, callback) {
      var that = this;
      gaEventTracker("updateHackerRankConfig");
      restClient.updateHackerRankConfig(apiKey, companyId, callback);
    },
    updateIndeedAssessmentsConfig: function updateIndeedAssessmentsConfig(apiKey, companyId, callback) {
      var that = this;
      gaEventTracker("updateIndeedAssessmentsConfig");
      restClient.updateIndeedAssessmentsConfig(apiKey, companyId, callback);
    },
    updateTraitifyConfig: function updateTraitifyConfig(apiKey, companyId, callback) {
      var that = this;
      gaEventTracker("updateTraitifyConfig");
      restClient.updateTraitifyConfig(apiKey, companyId, callback);
    },
    updateXingConfig: function updateXingConfig(orderId, companyId, callback) {
      var that = this;
      gaEventTracker("updateXingConfig");
      restClient.updateXingConfig(orderId, companyId, callback);
    },
    updateCriteriaCorpConfig: function updateCriteriaCorpConfig(data, callback) {
      var that = this;
      gaEventTracker("updateCriteriaCorpConfig");
      restClient.updateCriteriaCorpConfig(data, callback);
    },
    updateDeputyConfig: function updateDeputyConfig(data, callback) {
      var that = this;
      gaEventTracker("updateDeputyConfig");
      restClient.updateDeputyConfig(data, callback);
    },
    // data - advertiser_ids, mandatory_standout, company_id
    updateSeekConfig: function updateSeekConfig(data, callback) {
      var that = this;
      gaEventTracker("updateSeekConfig");
      restClient.updateSeekConfig(data, callback);
    },
    // data - username, password, companyId
    updateCvlibraryConfig: function updateCvlibraryConfig(data, callback) {
      var that = this;
      gaEventTracker("updateCvlibraryConfig");
      restClient.updateCvlibraryConfig(data, callback);
    },
    updateSlackConfig: function updateSlackConfig(config, companyId, callback) {
      var that = this;
      gaEventTracker("updateSlackConfig");
      restClient.updateSlackConfig(config, companyId, callback);
    },
    getJobBoards: function getJobBoards(companyId, callback) {
      restClient.getJobBoards(companyId, callback);
    },
    setPositionState: function setPositionState(state, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("setPositionState");
      restClient.setPositionState(state, companyId, positionId, callback);
    },
    setPositionPromotionOption: function setPositionPromotionOption(name, value, positionId, companyId, promotionObject, callback) {
      var that = this;
      gaEventTracker("setPositionPromotionOption");
      restClient.setPositionPromotionOption(name, value, positionId, companyId, promotionObject, callback);
    },
    updatePositionPromotion: function updatePositionPromotion(companyId, positionId, promotionId, updates, callback) {
      var that = this;
      gaEventTracker("updatePositionPromotion");
      restClient.updatePositionPromotion(companyId, positionId, promotionId, updates, callback);
    },
    setPositionApplicationOption: function setPositionApplicationOption(name, value, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("setPositionApplicationOption");
      restClient.setPositionApplicationOption(name, value, companyId, positionId, callback);
    },
    setPositionScorecard: function setPositionScorecard(scorecardId, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("setPositionScorecard");
      restClient.setPositionScorecard(scorecardId, companyId, positionId, callback);
    },
    setPositionQuestionnaire: function setPositionQuestionnaire(questionnareId, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("setPositionQuestionnaire");
      restClient.setPositionQuestionnaire(questionnareId, companyId, positionId, callback);
    },
    getPositionTemplates: function getPositionTemplates(callback) {
      var that = this;
      restClient.getPositionTemplates(callback);
    },
    getPositionTemplate: function getPositionTemplate(templateId, callback) {
      var that = this;
      restClient.getPositionTemplate(templateId, callback);
    },
    addPool: function addPool(positionData, companyId, callback) {
      var that = this;
      gaEventTracker("addPool");
      restClient.addPool(positionData, companyId, function (error, data) {
        return callback(error, data);
      });
    },
    updatePool: function updatePool(positionId, positionData, companyId, callback) {
      var that = this;
      gaEventTracker("updatePool");
      restClient.updatePool(positionId, positionData, companyId, function (error, data) {
        return callback(error, data);
      });
    },
    toggleStarPosition: function toggleStarPosition(positionId, callback) {
      var that = this;
      gaEventTracker("toggleStarPosition");
      restClient.toggleStarPosition(shared.activeCompany.company._id, positionId, function (error, data) {
        return callback(error, data);
      });
    },
    getPosition: function getPosition(positionId, callback) {
      var that = this;
      gaEventTracker("getPosition");
      restClient.getPosition(positionId, shared.activeCompany.company._id, function (error, data) {
        return callback(error, data);
      });
    },
    addPosition: function addPosition(positionData, companyId, callback) {
      var that = this;
      gaEventTracker("addPosition");
      restClient.addPosition(positionData, companyId, function (error, data) {
        return callback(error, data);
      });
    },
    updatePosition: function updatePosition(positionId, positionData, companyId, callback) {
      var that = this;
      gaEventTracker("updatePosition");
      restClient.updatePosition(positionId, positionData, companyId, function (error, data) {
        return callback(error, data);
      });
    },
    setPositionsTeamMemberRole: function setPositionsTeamMemberRole(companyId, positionIds, userId, roleType, callback) {
      //gaEventTracker("setPositionTeamMemberRole");
      restClient.setPositionsTeamMemberRole(companyId, positionIds, userId, roleType, callback);
    },
    setPositionTeamRole: function setPositionTeamRole(companyId, positionId, teamId, roleType, callback) {
      //gaEventTracker("setPositionTeamMemberRole");
      restClient.setPositionTeamRole(companyId, positionId, teamId, roleType, callback);
    },
    setPositionTeamMemberRole: function setPositionTeamMemberRole(companyId, positionId, userId, roleType, callback) {
      //gaEventTracker("setPositionTeamMemberRole");
      restClient.setPositionTeamMemberRole(companyId, positionId, userId, roleType, callback);
    },
    addPositionAdmin: function addPositionAdmin(companyId, positionId, userId, callback) {
      var that = this;
      gaEventTracker("addPositionAdmin");
      restClient.addPositionAdmin(companyId, positionId, userId, callback);
    },
    removePositionAdmin: function removePositionAdmin(companyId, positionId, userId, callback) {
      var that = this;
      gaEventTracker("removePositionAdmin");
      restClient.removePositionAdmin(companyId, positionId, userId, callback);
    },
    addPositionTeamMember: function addPositionTeamMember(companyId, positionId, userId, callback) {
      var that = this;
      gaEventTracker("addPositionTeamMember");
      restClient.addPositionTeamMember(companyId, positionId, userId, callback);
    },
    removePositionTeamMember: function removePositionTeamMember(userId, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("removePositionTeamMember");
      restClient.removePositionTeamMember(userId, companyId, positionId, callback);
    },
    getCompanyTeam: function getCompanyTeam(companyId, callback) {
      restClient.getCompanyTeam(companyId, callback);
    },
    getPositionTeam: function getPositionTeam(companyId, positionId, callback) {
      restClient.getPositionTeam(companyId, positionId, callback);
    },
    removePositionRecruiter: function removePositionRecruiter(recruiterId, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("removePositionRecruiter");
      restClient.removePositionRecruiter(recruiterId, companyId, positionId, callback);
    },
    addPositionRecruiter: function addPositionRecruiter(recruiter, companyId, positionId, callback) {
      var that = this;
      gaEventTracker("addPositionRecruiter");
      restClient.addPositionRecruiter(recruiter, companyId, positionId, callback);
    },
    getPositionDetail: function getPositionDetail(companyId, positionId, callback) {
      restClient.getPositionDetail(companyId, positionId, callback);
    },
    getPositionRecruiters: function getPositionRecruiters(companyId, positionId, callback) {
      restClient.getPositionRecruiters(companyId, positionId, callback);
    },
    getFilteredPositionStream: function getFilteredPositionStream(filters, skip, companyId, positionId, callback) {
      restClient.getFilteredPositionStream(filters, skip, companyId, positionId, callback);
    },
    getPositionStream: function getPositionStream(companyId, positionId, callback) {
      restClient.getPositionStream(companyId, positionId, callback);
    },
    getTalentNetwork: function getTalentNetwork(companyId, callback) {
      restClient.getTalentNetwork(companyId, callback);
    },
    getTalentNetworkCandidate: function getTalentNetworkCandidate(companyId, favoriteId, callback) {
      restClient.getTalentNetworkCandidate(companyId, favoriteId, callback);
    },
    isTalentNetwork: function isTalentNetwork(candidate) {
      try {
        return candidate.is_talnet;
      } catch (e) {}
    },
    addToTalentNetwork: function addToTalentNetwork(candidate, callback) {
      var that = this;
      restClient.addToTalentNetwork(candidate, function (error) {
        candidate.is_talnet = true;
        return callback(null, candidate);
      });
    },
    getMemberById: function getMemberById(memberId) {
      return shared.activeCompany.members.find(function (member) {
        return member._id === memberId;
      });
    },
    isPositionPromotedOnService: function isPositionPromotedOnService(position, serviceId) {
      try {
        var promotedCount = 0;
        var keys = Object.keys(position.promote_on);

        for (var i in keys) {
          var key = keys[i];

          if (key === "freeboards") {
            continue;
          }

          if (key === serviceId) {
            promotedCount++;
          }

          return promotedCount > 0;
        }
      } catch (e) {
        return true;
      }
    },
    isPositionPromoted: function isPositionPromoted(position) {
      try {
        var promotedCount = 0;
        var keys = Object.keys(position.promote_on);

        for (var i in keys) {
          var key = keys[i];

          if (key === "freeboards") {
            continue;
          }

          promotedCount++;
          return promotedCount > 0;
        }
      } catch (e) {
        return true;
      }
    },
    isCandidateUnseen: function isCandidateUnseen(candidate) {
      if (!candidate) return;

      try {
        if (new Date(candidate.creation_date).getTime() < 1490414400000) {
          // didn't support seen before march 25, 2017
          return false;
        }

        return candidate.viewed_by && candidate.viewed_by.indexOf(shared.user._id) == -1;
      } catch (e) {
        console.log("Candidate creation date error: " + e);
      }
    },
    isCandidateStarred: function isCandidateStarred(candidate) {
      try {
        return candidate.starred_by && candidate.starred_by.indexOf(shared.user._id) > -1;
      } catch (e) {}
    },
    starCandidate: function starCandidate(companyId, positionId, candidateId, callback) {
      gaEventTracker("starCandidate");
      restClient.starCandidate(companyId, positionId, candidateId, callback);
    },
    unstarCandidate: function unstarCandidate(companyId, positionId, candidateId, callback) {
      gaEventTracker("unstarCandidate");
      restClient.unstarCandidate(companyId, positionId, candidateId, callback);
    },
    toggleStarCandidate: function toggleStarCandidate(candidate, callback) {
      var that = this;
      gaEventTracker("toggleStarCandidate");

      var removeStar = function removeStar(candidate) {
        var idx = candidate.starred_by.indexOf(shared.user._id);
        candidate.starred_by.splice(idx, 1);
      };

      if (that.isCandidateStarred(candidate)) {
        that.unstarCandidate(candidate.company_id, candidate.position_id, candidate._id, function (error) {
          removeStar(candidate);
          return callback(null, candidate);
        });
      } else {
        that.starCandidate(candidate.company_id, candidate.position_id, candidate._id, function (error) {
          if (!candidate.starred_by) {
            candidate.starred_by = [];
          }

          candidate.starred_by.push(shared.user._id);
          return callback(null, candidate);
        });
      }
    },
    isCandidateFollowed: function isCandidateFollowed(candidate) {
      try {
        //temp hack to coordinate data update;
        if (Array.isArray(candidate.followed_by)) {
          return candidate.followed_by && candidate.followed_by.indexOf(shared.user._id) > -1;
        } else {
          return candidate.followed_by && candidate.followed_by[shared.user._id];
        }
      } catch (e) {}
    },
    followCandidate: function followCandidate(companyId, positionId, candidateId, callback) {
      gaEventTracker("followCandidate");
      restClient.followCandidate(companyId, positionId, candidateId, callback);
    },
    unfollowCandidate: function unfollowCandidate(companyId, positionId, candidateId, callback) {
      gaEventTracker("unfollowCandidate");
      restClient.unfollowCandidate(companyId, positionId, candidateId, callback);
    },
    toggleFollowCandidate: function toggleFollowCandidate(candidate, callback) {
      var that = this;
      gaEventTracker("toggleFollowCandidate");

      var removeFollow = function removeFollow(candidate) {
        if (Array.isArray(candidate.followed_by)) {
          var idx = candidate.followed_by.indexOf(shared.user._id);
          candidate.followed_by.splice(idx, 1);
        } else {
          candidate.followed_by[shared.user._id] = undefined;
        }
      };

      if (that.isCandidateFollowed(candidate)) {
        that.unfollowCandidate(candidate.company_id, candidate.position_id, candidate._id, function (error) {
          removeFollow(candidate);
          return callback(null, candidate);
        });
      } else {
        that.followCandidate(candidate.company_id, candidate.position_id, candidate._id, function (error) {
          // if(!candidate.followed_by) {
          //     candidate.followed_by = {};
          // }
          // candidate.followed_by[shared.user._id] = {};
          if (!candidate.followed_by) {
            candidate.followed_by = [];
          }

          if (Array.isArray(candidate.followed_by)) {
            candidate.followed_by.push(shared.user._id);
          } else {
            candidate.followed_by[shared.user._id] = {};
          }

          return callback(null, candidate);
        });
      }
    },
    isCandidateScored: function isCandidateScored(candidate) {
      try {
        if (candidate.overall_score && candidate.overall_score.good.indexOf(shared.user._id) > -1) {
          return "good";
        }

        if (candidate.overall_score && candidate.overall_score.very_good.indexOf(shared.user._id) > -1) {
          return "good";
        }

        if (candidate.overall_score && candidate.overall_score.neutral.indexOf(shared.user._id) > -1) {
          return "neutral";
        }

        if (candidate.overall_score && candidate.overall_score.very_poor.indexOf(shared.user._id) > -1) {
          return "poor";
        }

        if (candidate.overall_score && candidate.overall_score.poor.indexOf(shared.user._id) > -1) {
          return "poor";
        }
      } catch (e) {}
    },
    getVideoToken: function getVideoToken(interviewId, callback) {
      gaEventTracker("getVideoToken");
      restClient.getVideoToken(interviewId, callback);
    },
    getInterview: function getInterview(interviewId, callback) {
      gaEventTracker("getInterview");
      restClient.getInterview(interviewId, callback);
    },
    // Favorites
    getFavorites: function getFavorites(companyId, callback) {
      restClient.getFavorites(companyId, callback);
    },
    getFavorite: function getFavorite(companyId, favoriteId, callback) {
      restClient.getFavorite(companyId, favoriteId, callback);
    },
    updateFavorite: function updateFavorite(favorite, companyId, callback) {
      var that = this;
      gaEventTracker("updateFavorite");
      restClient.updateFavorite(favorite, companyId, callback);
    },
    addCopyFavorite: function addCopyFavorite(companyId, favoriteId, targetPositionId, callback) {
      var that = this;
      gaEventTracker("addCopyFavorite");
      restClient.addCopyFavorite(companyId, favoriteId, targetPositionId, callback);
    },
    getFavoriteDocuments: function getFavoriteDocuments(companyId, favoriteId, callback) {
      restClient.getFavoriteDocuments(companyId, favoriteId, callback);
    },
    deleteFavoriteDocument: function deleteFavoriteDocument(companyId, favoriteId, documentId, callback) {
      var that = this;
      gaEventTracker("deleteFavoriteDocument");
      restClient.deleteFavoriteDocument(companyId, favoriteId, documentId, callback);
    },
    getFavoriteStream: function getFavoriteStream(companyId, favoriteId, callback) {
      restClient.getFavoriteStream(companyId, favoriteId, callback);
    },
    postFavoriteNote: function postFavoriteNote(body, attachment, companyId, favoriteId, callback) {
      restClient.postFavoriteNote(body, attachment, companyId, favoriteId, function (error, data) {
        return callback(error, data);
      });
    },
    // Candidates
    requestConsent: function requestConsent(companyId, positionId, candidateId, request, callback) {
      restClient.requestConsent(companyId, positionId, candidateId, request, callback);
    },
    scheduleCandidateDataRequest: function scheduleCandidateDataRequest(data, callback) {
      restClient.scheduleCandidateDataRequest(data, callback);
    },
    getCandidateMetadata: function getCandidateMetadata(companyId, positionId, candidateId, callback) {
      restClient.getCandidateMetadata(companyId, positionId, candidateId, callback);
    },
    getCandidate: function getCandidate(companyId, positionId, candidateId, callback) {
      gaEventTracker("getCandidate");
      restClient.getCandidate(companyId, positionId, candidateId, callback);
    },
    addCandidateToStage: function addCandidateToStage(candidate, companyId, positionId, stageId, actionsEnabled, callback) {
      gaEventTracker("addCandidateToStage");
      restClient.addCandidateToStage(candidate, companyId, positionId, stageId, actionsEnabled, callback);
    },
    importSearchCandidate: function importSearchCandidate(person, companyId, positionId, stageId, actionsEnabled, callback) {
      gaEventTracker("importSearchCandidate");
      restClient.importSearchCandidate(person, companyId, positionId, stageId, actionsEnabled, callback);
    },
    addCandidate: function addCandidate(candidate, companyId, positionId, callback) {
      gaEventTracker("addCandidate");
      restClient.addCandidate(candidate, companyId, positionId, callback);
    },
    addCandidateFromWidget: function addCandidateFromWidget(candidate, companyId, positionId, callback) {
      gaEventTracker("addCandidateFromWidget");
      restClient.addCandidateFromWidget(candidate, companyId, positionId, callback);
    },
    updateCandidate: function updateCandidate(candidate, companyId, positionId, callback) {
      gaEventTracker("updateCandidate");
      restClient.updateCandidate(candidate, companyId, positionId, callback);
    },
    moveCandidateToStage: function moveCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback) {
      gaEventTracker("moveCandidateToStage");
      restClient.moveCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback);
    },
    bulkMoveCandidates: function bulkMoveCandidates(companyId, candidateIds, targetPositionId, targetStageId, actionsEnabled, callback) {
      gaEventTracker("bulkMoveCandidatesToStage");
      restClient.bulkMoveCandidates(companyId, candidateIds, targetPositionId, targetStageId, actionsEnabled, callback);
    },
    bulkMessageCandidates: function bulkMessageCandidates(message, companyId, candidateIds, callback) {
      gaEventTracker("bulkMessageCandidates");
      restClient.bulkMessageCandidates(message, companyId, candidateIds, callback);
    },
    copyCandidateToStage: function copyCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback) {
      gaEventTracker("copyCandidateToStage");
      restClient.copyCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback);
    },
    addCopyCandidate: function addCopyCandidate(companyId, positionId, candidateId, targetPositionId, callback) {
      gaEventTracker("addCopyCandidate");
      restClient.addCopyCandidate(companyId, positionId, candidateId, targetPositionId, callback);
    },
    addCandidateToHRIS: function addCandidateToHRIS(companyId, positionId, candidateId, hrisType, callback) {
      gaEventTracker("addCandidateToHRIS");
      restClient.addCandidateToHRIS(companyId, positionId, candidateId, hrisType, callback);
    },
    addSourcedResumeCandidate: function addSourcedResumeCandidate(candidate, companyId, positionId, callback) {
      gaEventTracker("addSourcedResumeCandidate");
      restClient.addSourcedResumeCandidate(candidate, companyId, positionId, callback);
    },
    getCandidateConversation: function getCandidateConversation(companyId, positionId, candidateId, skip, callback) {
      gaEventTracker("getCandidateConversation");
      restClient.getCandidateConversation(companyId, positionId, candidateId, skip, callback);
    },
    deleteCompanyConversationThread: function deleteCompanyConversationThread(companyId, positionId, candidateId, callback) {
      gaEventTracker("deleteCompanyConversationThread");
      restClient.deleteCompanyConversationThread(companyId, positionId, candidateId, callback);
    },
    getCompanyConversationThread: function getCompanyConversationThread(companyId, skip, filterByUser, callback) {
      gaEventTracker("getCompanyConversationThread");

      if (callback) {
        restClient.getCompanyConversationThread(companyId, skip, filterByUser, callback);
      } else {
        var deferred = $q.defer();
        restClient.getCompanyConversationThread(companyId, skip, filterByUser, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },
    getCompanyInbox: function getCompanyInbox(companyId, filterByUser, sortType, limit, skip) {
      gaEventTracker("getCompanyInbox");
      var deferred = $q.defer();
      restClient.getCompanyInbox(companyId, filterByUser, sortType, limit, skip, function (error, result) {
        deferred.resolve(result);
      });
      return deferred.promise;
    },
    getPositionConversationThread: function getPositionConversationThread(companyId, positionId, skip, filterByUser, callback) {
      if (callback) {
        restClient.getPositionConversationThread(companyId, positionId, skip, filterByUser, callback);
      } else {
        var deferred = $q.defer();
        restClient.getPositionConversationThread(companyId, positionId, skip, filterByUser, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },
    getPositionInbox: function getPositionInbox(companyId, positionId, filterByUser, sortType, callback) {
      gaEventTracker("getPositionInbox");

      if (callback) {
        restClient.getPositionInbox(companyId, positionId, filterByUser, sortType, callback);
      } else {
        var deferred = $q.defer();
        restClient.getPositionInbox(companyId, positionId, filterByUser, sortType, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },
    getCandidateQuestionnaires: function getCandidateQuestionnaires(companyId, positionId, candidateId, callback) {
      gaEventTracker("getCandidateQuestionnaires");
      restClient.getCandidateQuestionnaires(companyId, positionId, candidateId, callback);
    },
    getDocumentType: function getDocumentType(fileName) {
      fileName = fileName.toLowerCase();

      if (fileName.endsWith("mng") || fileName.endsWith("avi") || fileName.endsWith("mp4") || fileName.endsWith("mov") || fileName.endsWith("qt") || fileName.endsWith("wmv") || fileName.endsWith("flv") || fileName.endsWith("webp") || fileName.endsWith("ogv") || fileName.endsWith("3gp") || fileName.endsWith("f4v")) {
        return "file-video";
      }

      if (fileName.endsWith("mp3") || fileName.endsWith("wav") || fileName.endsWith("m4a") || fileName.endsWith("wv") || fileName.endsWith("cda") || fileName.endsWith("ogg") || fileName.endsWith("x3a")) {
        return "file-audio";
      }

      if (fileName.endsWith("jpeg") || fileName.endsWith("jpg") || fileName.endsWith("gif") || fileName.endsWith("png") || fileName.endsWith("psd") || fileName.endsWith("bmp") || fileName.endsWith("exif") || fileName.endsWith("webp") || fileName.endsWith("bgp") || fileName.endsWith("tiff")) {
        return "file-image";
      }

      if (fileName.endsWith("xls") || fileName.endsWith("xlsx")) {
        return "file-excel";
      }

      if (fileName.endsWith("txt") || fileName.endsWith("text")) {
        return "file-text";
      }

      if (fileName.endsWith("zip") || fileName.endsWith("rar") || fileName.endsWith("tar") || fileName.endsWith("iso") || fileName.endsWith("tgz") || fileName.endsWith("sit") || fileName.endsWith("sitx") || fileName.endsWith("tlz") || fileName.endsWith("bz") || fileName.endsWith("bz2") || fileName.endsWith("tar") || fileName.endsWith(".z") || fileName.endsWith("gz")) {
        return "file-archive";
      }

      if (fileName.endsWith("pdf")) {
        return "file-pdf";
      }

      if (fileName.endsWith("doc") || fileName.endsWith("docx")) {
        return "file-word";
      }

      if (fileName.endsWith("ppt") || fileName.endsWith("pptx")) {
        return "file-powerpoint";
      }

      return "file";
    },
    getCandidateDocuments: function getCandidateDocuments(companyId, positionId, candidateId, callback) {
      gaEventTracker("getCandidateDocuments");
      restClient.getCandidateDocuments(companyId, positionId, candidateId, callback);
    },
    deleteCandidateDocument: function deleteCandidateDocument(companyId, positionId, candidateId, documentId, callback) {
      var that = this;
      gaEventTracker("deleteCandidateDocument");
      restClient.deleteCandidateDocument(companyId, positionId, candidateId, documentId, callback);
    },
    getPositionSchedule: function getPositionSchedule(companyId, positionId, callback) {
      var that = this;
      gaEventTracker("getPositionSchedule");
      restClient.getPositionSchedule(companyId, positionId, callback);
    },
    getCandidateStream: function getCandidateStream(companyId, positionId, candidateId, skip, callback) {
      gaEventTracker("getCandidateStream");
      restClient.getCandidateStream(companyId, positionId, candidateId, skip, callback);
    },
    searchResources: function searchResources(searchTerm, callback) {
      var that = this;
      ga('send', 'event', 'ResourceSearch', searchTerm, 1);
      restClient.searchResources(searchTerm, function (error, results) {
        console.log("Search complete...");
        callback(error, results);
      });
    },
    searchCandidates: function searchCandidates(searchTerm, companyId, callback) {
      var that = this;
      gaEventTracker("searchCandidates");
      restClient.searchCandidates(searchTerm, companyId, callback);
    },
    getUserMetrics: function getUserMetrics(companyId, range, callback) {
      restClient.getUserMetrics(companyId, range, callback);
    },
    getUserCandidates: function getUserCandidates(companyId, options, callback) {
      restClient.getUserCandidates(companyId, options, callback);
    },
    getCandidates: function getCandidates(companyId, positionId, status, callback) {
      var that = this;
      gaEventTracker("getCandidates");

      if (callback) {
        restClient.getCandidates(companyId, positionId, status, callback);
      } else {
        var deferred = $q.defer();
        restClient.getCandidates(companyId, positionId, status, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },
    setCandidateTags: function setCandidateTags(companyId, positionId, candidateId, tags, callback) {
      var that = this;
      gaEventTracker("setCandidateTags");
      restClient.setCandidateTags(companyId, positionId, candidateId, tags, callback);
    },
    assignCandidate: function assignCandidate(companyId, positionId, candidateId, memberId, callback) {
      var that = this;
      gaEventTracker("assignCandidate");
      restClient.assignCandidate(companyId, positionId, candidateId, memberId, callback);
    },
    deleteCandidate: function deleteCandidate(companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("deleteCandidate");
      restClient.deleteCandidate(companyId, positionId, candidateId, callback);
    },
    deleteCandidates: function deleteCandidates(companyId, positionId, candidateIds, callback) {
      var that = this;
      gaEventTracker("deleteCandidates");
      restClient.deleteCandidates(companyId, positionId, candidateIds, callback);
    },
    setCandidateStatus: function setCandidateStatus(companyId, positionId, candidateId, status, callback) {
      var that = this;
      gaEventTracker("setCandidateStatus");
      restClient.setCandidateStatus(companyId, positionId, candidateId, status, callback);
    },
    sendOfferLetter: function sendOfferLetter(offer, companyId, positionId, candidateId, callback) {
      restClient.sendOfferLetter(offer, companyId, positionId, candidateId, callback);
    },
    sendFeedbackRequest: function sendFeedbackRequest(body, companyId, positionId, candidateId, callback) {
      restClient.sendFeedbackRequest(body, companyId, positionId, candidateId, callback);
    },
    sendCancelInterview: function sendCancelInterview(interview, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("sendCancelInterview");
      restClient.sendCancelInterview(interview, companyId, positionId, candidateId, callback);
    },
    sendInterviewRequest: function sendInterviewRequest(interview, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("sendInterviewRequest");
      restClient.sendInterviewRequest(interview, companyId, positionId, candidateId, callback);
    },
    getPanelInterview: function getPanelInterview(panelInterviewId, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("getPanelInterview");
      var deferred = $q.defer();
      restClient.getPanelInterview(panelInterviewId, companyId, positionId, candidateId, function (error, result) {
        deferred.resolve(result);
      });
      return deferred.promise; //restClient.getPanelInterview(panelInterviewId, companyId, positionId, candidateId, callback);
    },
    sendPanelInterviewRequest: function sendPanelInterviewRequest(interview, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("sendPanelInterviewRequest");
      restClient.sendPanelInterviewRequest(interview, companyId, positionId, candidateId, callback);
    },
    updatePanelInterviewRequest: function updatePanelInterviewRequest(interview, companyId, positionId, candidateId, panelInterviewId, callback) {
      var that = this;
      gaEventTracker("sendPanelInterviewRequest");
      restClient.updatePanelInterviewRequest(interview, companyId, positionId, candidateId, panelInterviewId, callback);
    },
    deletePanelInterview: function deletePanelInterview(companyId, positionId, candidateId, panelInterviewId, callback) {
      var that = this;
      gaEventTracker("deletePanelInterview");
      restClient.deletePanelInterview(companyId, positionId, candidateId, panelInterviewId, callback);
    },
    cancelReminder: function cancelReminder(companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("cancelReminder");
      restClient.cancelReminder(companyId, positionId, candidateId, callback);
    },
    setReminder: function setReminder(reminder, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("setReminder");
      restClient.setReminder(reminder, companyId, positionId, candidateId, callback);
    },
    updateMemberTeams: function updateMemberTeams(userId, teamIds, callback) {
      var that = this;
      gaEventTracker("updateMemberTeams");
      restClient.updateMemberTeams(shared.activeCompany.company._id, userId, teamIds, callback);
    },
    addCompanyAdmin: function addCompanyAdmin(companyId, userId, callback) {
      var that = this;
      gaEventTracker("addCompanyAdmin");
      restClient.addCompanyAdmin(companyId, userId, callback);
    },
    removeCompanyAdmin: function removeCompanyAdmin(companyId, userId, callback) {
      var that = this;
      gaEventTracker("removeCompanyAdmin");
      restClient.removeCompanyAdmin(companyId, userId, callback);
    },
    removeCompanyMember: function removeCompanyMember(companyId, userId, callback) {
      var that = this;
      gaEventTracker("removeCompanyMember");
      restClient.removeCompanyMember(companyId, userId, callback);
    },
    inviteCompanyUser: function inviteCompanyUser(companyId, data, callback) {
      var that = this;
      gaEventTracker("inviteCompanyUser");
      restClient.inviteCompanyUser(companyId, data, callback);
    },
    cancelInvitation: function cancelInvitation(companyId, inviteId, callback) {
      var that = this;
      gaEventTracker("cancelInvitation");
      restClient.cancelInvitation(companyId, inviteId, callback);
    },
    inviteCompanyMember: function inviteCompanyMember(companyId, positionId, email, callback) {
      var that = this;
      gaEventTracker("inviteCompanyMember");
      var inviteData = {
        "email": email
      };

      if (positionId) {
        inviteData.position_id = positionId;
      }

      restClient.inviteCompanyMember(companyId, inviteData, callback);
    },
    inviteCompanyAdmin: function inviteCompanyAdmin(companyId, positionId, email, callback) {
      var that = this;
      gaEventTracker("inviteCompanyAdmin");
      var inviteData = {
        "email": email
      };

      if (positionId) {
        inviteData.position_id = positionId;
      }

      restClient.inviteCompanyAdmin(companyId, inviteData, callback);
    },
    acceptInvitation: function acceptInvitation(inviteId, callback) {
      var that = this;
      gaEventTracker("acceptInvitation");
      restClient.acceptInvitation(inviteId, callback);
    },
    getInvitation: function getInvitation(inviteId, callback) {
      restClient.getInvitation(inviteId, callback);
    },
    getInvitations: function getInvitations(companyId, positionId, callback) {
      restClient.getInvitations(companyId, positionId, callback);
    },
    postQuestionnaireToCandidate: function postQuestionnaireToCandidate(questionnaire, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("postQuestionnaireToCandidate");
      restClient.postQuestionnaireToCandidate(questionnaire, companyId, positionId, candidateId, function (error, data) {
        return callback(error, data);
      });
    },
    getCompanyAssessments: function getCompanyAssessments(data, callback) {
      var that = this;
      gaEventTracker("getCompanyAssessments");
      restClient.getCompanyAssessments(data, function (error, data) {
        return callback(error, data);
      });
    },
    getCompanyBackgroundCheckPackages: function getCompanyBackgroundCheckPackages(data, callback) {
      var that = this;
      gaEventTracker("getCompanyBackgroundCheckPackages");
      restClient.getCompanyBackgroundCheckPackages(data, function (error, data) {
        return callback(error, data);
      });
    },
    postAssessmentToCandidate: function postAssessmentToCandidate(data, callback) {
      var that = this;
      gaEventTracker("postAssessmentToCandidate");
      restClient.postAssessmentToCandidate(data, function (error, data) {
        return callback(error, data);
      });
    },
    postBackgroundCheckToCandidate: function postBackgroundCheckToCandidate(data, callback) {
      var that = this;
      gaEventTracker("postBackgroundCheckToCandidate");
      restClient.postBackgroundCheckToCandidate(data, function (error, data) {
        return callback(error, data);
      });
    },
    postSignatureRequestToCandidate: function postSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("postSignatureRequestToCandidate");
      restClient.postSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, function (error, data) {
        return callback(error, data);
      });
    },
    recordSignatureRequestToCandidate: function recordSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("recordSignatureRequestToCandidate");
      restClient.recordSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, function (error, data) {
        return callback(error, data);
      });
    },
    postMessageToCandidate: function postMessageToCandidate(message, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("postMessageToCandidate");
      restClient.postMessageToCandidate(message, companyId, positionId, candidateId, callback);
    },
    postNote: function postNote(body, attachments, companyId, positionId, candidateId, callback) {
      var that = this;
      gaEventTracker("postNote");
      restClient.postNote(body, attachments, companyId, positionId, candidateId, callback);
    },

    /*
    DESKTOP NOTIFICATION
    */
    getDesktopNotificationState: function getDesktopNotificationState() {
      return shared.html5Notifications.permissionLevel;
    },
    displayDesktopNotification: function displayDesktopNotification(path, title, body, iconUrl, sound) {
      if (body > 40) {
        body = body.substring(0, 37) + '...';
      }

      html5notify.showNotification(path, title, body, iconUrl);
    },
    requestDesktopNotificationPermission: function requestDesktopNotificationPermission() {
      console.log('requestNotificationPermission');
      html5notify.requestPermission();
    },
    // Position Info
    getPositionTypes: function getPositionTypes() {
      return shared.positionTypes;
    },
    getPositionType: function getPositionType(key) {
      return shared.positionTypes[key];
    },
    getCountries: function getCountries(searchTerm) {
      var countries = angular.copy(shared.countries);

      if (!searchTerm || searchTerm.length === 0) {
        console.log('returning (country) default');
        return countries;
      }

      var filtered = [];
      angular.forEach(countries, function (item) {
        if (item.name.indexOf(searchTerm) != -1) {
          filtered.push(item);
        }
      });
      return filtered;
    },
    getCountry: function getCountry(key) {
      return angular.copy(shared.countries[key]);
    },
    getStatesProvinces: function getStatesProvinces(key, searchTerm) {
      console.log('getStatesProvinces: ' + key + ', ' + searchTerm);

      if (!shared.countries[key] || !shared.countries[key].states) {
        console.log('returning');
        return;
      }

      if (!searchTerm || searchTerm.length === 0) {
        console.log('returning (states) default');
      }

      var filtered = {};
      angular.forEach(shared.countries[key].states, function (item) {
        if (item.name.indexOf(searchTerm) > -1) {
          filtered[item.id] = item;
        }
      });
      return filtered;
    },
    getStateOrProvince: function getStateOrProvince(key) {
      return shared.statesProvinces[key];
    },

    /*
     GENERAL
     */
    navigateToPath: function navigateToPath(target) {
      $location.url(target);
    },
    navigateTo: function navigateTo(target) {
      console.log(target);
      $state.go(target);
    },
    transitionTo: function transitionTo(target) {
      $state.transitionTo(target);
    },
    getLocalDateTime: function getLocalDateTime(_date) {
      //console.log(_date);
      try {
        if (new Date(_date).getFullYear() === new Date().getFullYear()) {
          return moment(_date).format('MMM Do [@] h:mm a');
        } else {
          return moment(_date).format('MMM Do YYYY [@] h:mm a');
        }
      } catch (e) {
        return "";
      }
    },
    getMonth: function getMonth(monthId) {
      var that = this;
      return that.getMonth(monthId);
    },
    deleteSlackTokens: function deleteSlackTokens(callback) {
      restClient.deleteSlackTokens(shared.activeCompany.company._id, function (error, data) {
        return callback(error, data);
      });
    },
    deleteGoogleCalendarTokens: function deleteGoogleCalendarTokens(callback) {
      restClient.deleteGoogleCalendarTokens(function (error, data) {
        return callback(error, data);
      });
    },
    deleteOutlookCalendarTokens: function deleteOutlookCalendarTokens(callback) {
      restClient.deleteOutlookCalendarTokens(function (error, data) {
        return callback(error, data);
      });
    },
    deleteGoogleEmailTokens: function deleteGoogleEmailTokens(callback) {
      restClient.deleteGoogleEmailTokens(function (error, data) {
        return callback(error, data);
      });
    },
    deleteOutlookEmailTokens: function deleteOutlookEmailTokens(callback) {
      restClient.deleteOutlookEmailTokens(function (error, data) {
        return callback(error, data);
      });
    },
    createSeekAdvertisement: function createSeekAdvertisement(companyId, positionId, advertisement) {
      return restClient.createSeekAdvertisement(companyId, positionId, advertisement);
    },
    updateSeekAdvertisement: function updateSeekAdvertisement(companyId, positionId, advertisement) {
      return restClient.updateSeekAdvertisement(companyId, positionId, advertisement);
    },
    getSeekAdvertisement: function getSeekAdvertisement(companyId, positionId) {
      return restClient.getSeekAdvertisement(companyId, positionId);
    },
    deleteSeekAdvertisment: function deleteSeekAdvertisment(companyId, positionId) {
      return restClient.deleteSeekAdvertisement(companyId, positionId);
    },
    postCvlibraryJob: function postCvlibraryJob(companyId, positionId, job) {
      return restClient.postCvlibraryJob(companyId, positionId, job);
    },
    deleteCvlibraryJob: function deleteCvlibraryJob(companyId, positionId) {
      return restClient.deleteCvlibraryJob(companyId, positionId);
    },
    doPeopleSearch: function doPeopleSearch(query) {
      return restClient.doPeopleSearch(query);
    },
    isValidEmail: function isValidEmail(email) {
      var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(email);
    },
    isValidDomain: function isValidDomain(domain) {
      var re = new RegExp(/^((?:(?:(?:\w[\.\-\+]?)*)\w)+)((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,8})$/);
      return domain.match(re);
    },
    createGoodhireCompany: function createGoodhireCompany(data) {
      return restClient.createGoodhireCompany(data);
    },
    createGoodhireRequestor: function createGoodhireRequestor(data) {
      return restClient.createGoodhireRequestor(data);
    },
    enableGoodhireIntegration: function enableGoodhireIntegration(data) {
      return restClient.enableGoodhireIntegration(data);
    },
    disableGoodhireIntegration: function disableGoodhireIntegration(data) {
      return restClient.disableGoodhireIntegration(data);
    },
    getGoodhireSelectReportUrl: function getGoodhireSelectReportUrl(data) {
      return restClient.getGoodhireSelectReportUrl(data);
    },
    updateAsurintConfig: function updateAsurintConfig(data) {
      return restClient.updateAsurintConfig(data);
    },
    getIntegration: function getIntegration(service, companyId, positionId) {
      return restClient.getIntegration(service, companyId, positionId);
    },
    getCheckrReport: function getCheckrReport(data) {
      return restClient.getCheckrReport(data);
    },
    getCheckrGeos: function getCheckrGeos(data) {
      return restClient.getCheckrGeos(data);
    },
    refreshZenefitsIntegration: function refreshZenefitsIntegration(companyId) {
      return restClient.refreshZenefitsIntegration(companyId);
    },
    getDeputyLocations: function getDeputyLocations(companyId) {
      return restClient.getDeputyLocations(companyId);
    },
    getCompanyCustomFields: function getCompanyCustomFields(companyId) {
      return restClient.getCompanyCustomFields(companyId);
    },
    gaEventTracker: gaEventTracker
  };
});
'use strict';

angular.module('BaseApp').factory('CalendarService', ['SharedData', 'RESTClient', '$q', '$http', function (SharedData, RESTClient, $q, $http) {
  var company = SharedData.activeCompany.company;
  var user = SharedData.user;
  var events = [];

  var getSimpleInterview = function getSimpleInterview(interview) {
    return {
      _id: interview._id,
      start: new Date(interview.start_time),
      end: new Date(interview.end_time),
      title: interview.location ? interview.location : interview.candidate.name,
      data: interview,
      className: interview.candidate && interview.candidate.assigned_to && interview.candidate.assigned_to._id == user._id ? "assigned" : ""
    };
  };

  var getClosestEvent = function getClosestEvent() {
    var dist, closest, endTime;
    var now = new Date().getTime();
    events.forEach(function (event) {
      if (event.candidate) {
        endTime = new Date(event.end_time).getTime();

        if (endTime > now) {
          if (!dist || endTime - now < dist) {
            dist = endTime - now;
            closest = event;
          }
        }
      }
    });
    return closest;
  };

  return {
    getUserCalendar: function getUserCalendar(options) {
      var deferred = $q.defer();
      RESTClient.getUserCalendar(company._id, options).then(function (result) {
        events = result.map(getSimpleInterview);
        deferred.resolve(result);
      });
      return deferred.promise;
    }
  };
}]);
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

angular.module('BaseApp')
/* ===== WORD OF CAUTION ===== */
//
// Don't let this service scare you. It is all about normalizing data
// and allowing the Company Candidate page and Position Candidate page
// to request just the item data they need. It is also designed to allow
// for multiple criteria on every options, IE: is, is_not, contains, etc.
// That will be phase 2.
//

/* =========================== */
.factory('CandidatesFilterService', ['$rootScope', 'SharedData', 'RESTClient', '$q', 'DateService', function ($rootScope, SharedData, RESTClient, $q, DateService) {
  var companyAdmin = SharedData.activeCompany.company.user_role.id === 'company_admin';
  var activeController = null;
  var metadata = null;
  var metadataRefresh = true; // company metadata could've changed so refresh

  $rootScope.$on('candidateAdded', function () {
    metadataRefresh = true;
  });

  var getValues = function getValues(filter) {
    var rules = filter.rules;

    if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      var values = rules.reduce(function (acc, rule) {
        //console.log(rule);
        return rule.hasOwnProperty('value') && typeof rule.value !== 'undefined' ? acc.concat(rule.value.value) : acc;
      }, []);
      segmentOptions[filter.key] = values;
      return values;
    } else {
      return [];
    }
  };

  var getValuesAndStageIdToo = function getValuesAndStageIdToo(filter) {
    var rules = filter.rules;

    if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      var values = rules.reduce(function (acc, rule) {
        if (rule.hasOwnProperty('value') && typeof rule.value !== 'undefined') {
          acc.push(rule.value.value);

          if (rule.value.value != rule.value.stage_id) {
            acc.push(rule.value.stage_id);
          }
        }

        return acc;
      }, []);
      segmentOptions[filter.key] = values;
      return values;
    } else {
      return [];
    }
  };

  var positionFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'positionsgroup',
    values: function values(positions) {
      //console.log(positions);
      this.values = positions.map(function (position) {
        return {
          label: position.name,
          value: position._id,
          state: position.state,
          org_type: position.org_type,
          location: position.location || null,
          pipeline_id: position.pipeline_id ? position.pipeline_id : position.org_type ? 'default_pool' : 'default'
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var assignedFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(members) {
      this.values = [{
        label: 'Any',
        value: 'any'
      }, {
        label: 'Unassigned',
        value: 'any_unassigned'
      }].concat(_toConsumableArray(members.map(function (member) {
        return {
          label: member.name,
          value: member._id
        };
      })));
    },
    postProcess: getValues,
    multiple: true
    /*, {
          key: 'is_not',
          label: 'is not',
          type: 'select',
          values: [{
                  label: 'Any',
                  value: 'any'
              }, {
                  label: 'Unassigned',
                  value: 'any_unassigned'
              },
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator
              ...$scope.members.map(member => ({
                  label: member.name,
                  value: member._id
              }))
          ]
      } */

  }];
  var has_applied = false;

  var determineIsOrIsNot = function determineIsOrIsNot(filter) {
    has_applied = false;
    var rules = filter.rules;

    if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      var values = getValues(filter);
      this.values.forEach(function (value) {
        if (values.indexOf(value.value) > -1 && value.applied) {
          has_applied = true;
        }
      });

      if (has_applied) {
        values = getValuesAndStageIdToo(filter);
        var excludeIds = this.values.reduce(function (acc, stage) {
          acc.push(stage.value);

          if (stage.value != stage.stage_id) {
            acc.push(stage.stage_id);
          }

          return acc;
        }, []).filter(function (id) {
          return values.indexOf(id) === -1;
        });
        segmentOptions[filter.key] = {
          is_not: excludeIds
        };
        return {
          is_not: excludeIds
        };
      } else {
        //values = getValues(filter);
        values = getValuesAndStageIdToo(filter); //console.log(values);

        segmentOptions[filter.key] = {
          is: values
        };
        return {
          is: values
        };
      }
    } else {
      return [];
    }
  };

  var unfoldIsOrIsNot = function unfoldIsOrIsNot(values) {
    var stages = [];
    var type = values.hasOwnProperty('is') ? 'is' : 'is_not';

    if (values.hasOwnProperty('is')) {
      this.values.forEach(function (stage) {
        if (values.is.indexOf(stage.value) > -1) {
          stages.push({
            value: stage
          });
        }
      });
    } else {
      this.values.forEach(function (stage) {
        if (values.is_not.indexOf(stage.value) == -1) {
          stages.push({
            value: stage
          });
        }
      });
    }

    return stages;
  };

  var stageFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'stagegroup',
    values: function values(pipeline) {
      this.values = pipeline.map(function (stage) {
        return {
          applied: stage.id === "applied",
          label: stage.name,
          value: stage.query_id || stage.id,
          stage_id: stage.id,
          icon: stage.icon || stage.type.icon
        };
      });
    },
    multiple: true,
    preProcess: unfoldIsOrIsNot,
    postProcess: determineIsOrIsNot
  }];
  var stage_pipelines = null;

  var determineIsOrIsNotMultiPipeline = function determineIsOrIsNotMultiPipeline(filter) {
    var rules = filter.rules;

    if (rules.length > 0 && rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      has_applied = false;
      var pipeline_key = null;
      rules.forEach(function (rule) {
        if (rule.value) {
          if (rule.value.applied) {
            has_applied = true;
          }

          pipeline_key = rule.value.pipeline;
          stage_pipelines = [rule.value.pipeline_id];
        }
      }); //var values = getValues(filter);

      var values; // = getValuesAndStageIdToo(filter);

      var returnvalues = {};

      if (has_applied) {
        values = getValuesAndStageIdToo(filter);
        var excludeIds = [];
        excludeIds = this.values[pipeline_key].reduce(function (acc, stage) {
          acc.push(stage.value);

          if (stage.value != stage.stage_id) {
            acc.push(stage.stage_id);
          }

          return acc;
        }, excludeIds).filter(function (id) {
          return values.indexOf(id) === -1;
        });
        returnvalues = {
          is_not: excludeIds
        };
        segmentOptions[filter.key] = excludeIds;
      } else {
        //values = getValues(filter);
        values = getValuesAndStageIdToo(filter);
        returnvalues = {
          is: values
        };
        segmentOptions[filter.key] = values;
      } //segmentOptions[filter.key] = returnvalues;


      return returnvalues;
    } else {
      return [];
    }
  };

  var unfoldIsOrIsNotMultiPipeline = function unfoldIsOrIsNotMultiPipeline(values) {
    var pipeline_keys = [];
    var stages = [];
    var key;
    var type = values.hasOwnProperty('is') ? 'is' : 'is_not';

    for (key in this.values) {
      this.values[key].forEach(function (stage) {
        if (values[type].indexOf(stage.value) > -1) {
          if (pipeline_keys.indexOf(stage.pipeline) < 0) {
            pipeline_keys.push(stage.pipeline);
          }
        }
      });
    }

    if (values.hasOwnProperty('is')) {
      for (key in pipeline_keys) {
        this.values[pipeline_keys[key]].forEach(function (stage) {
          if (values.is.indexOf(stage.value) > -1) {
            stages.push({
              value: stage
            });
          }
        });
      }
    } else {
      for (key in pipeline_keys) {
        this.values[pipeline_keys[key]].forEach(function (stage) {
          if (values.is_not.indexOf(stage.value) == -1) {
            stages.push({
              value: stage
            });
          }
        });
      }
    }

    return stages;
  };

  var pipelinesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'pipelinesgroup',
    values: function values(pipelines) {
      this.values = {};

      for (var key in pipelines) {
        this.values[pipelines[key].name] = pipelines[key].pipeline.map(function (stage) {
          return {
            applied: stage.id === "applied",
            label: stage.name,
            value: stage.query_id || stage.id,
            stage_id: stage.id,
            icon: stage.icon || stage.type.icon,
            pipeline: pipelines[key].name,
            pipeline_id: key
          };
        });
      } //this.values = pipelines;

    },
    multiple: true,
    preProcess: unfoldIsOrIsNotMultiPipeline,
    postProcess: determineIsOrIsNotMultiPipeline
  }];
  var tagsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'tags',
    sort: 'label',
    values: function values(tags) {
      this.values = tags.filter(function (tag) {
        return tag.hasOwnProperty('id');
      }).map(function (tag) {
        return {
          label: tag.tag,
          value: tag.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var sourcesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(sources) {
      this.values = sources.map(function (source) {
        return {
          label: source.name,
          value: source._id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var sourcersFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(sourcers) {
      this.values = sourcers.map(function (sourcer) {
        return {
          label: sourcer.name,
          value: sourcer._id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var referrersFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(referrers) {
      this.values = referrers.map(function (referrer) {
        return {
          label: referrer.name,
          value: referrer._id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var recruitersFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(recruiters) {
      this.values = recruiters.map(function (recruiter) {
        return {
          label: recruiter.name,
          value: recruiter._id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];

  var getDateRange = function getDateRange(filter) {
    var rules = filter.rules;
    var selected, range; // custom range

    if (rules[0].hasOwnProperty('value') && rules[0].value.value === 'customRange') {
      selected = rules[0].value;
      if (!selected.start || !selected.end) return [];
      range = DateService.getDateRange(selected);
      segmentOptions[filter.key] = range;
      return range;
    } else if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      selected = rules[0].value;
      range = DateService.getDateRange(selected);
      segmentOptions[filter.key] = [selected.value];
      return range;
    } else {
      return [];
    }
  };

  var convertDateRange = function convertDateRange(values) {
    var _this = this;

    if (values instanceof Array) {
      return values.map(function (segmentValue) {
        return {
          value: _this.values.find(function (optionValue) {
            return optionValue.value == segmentValue;
          })
        };
      });
    } else {
      var customRange = {
        value: this.values.find(function (optionValue) {
          return optionValue.value == 'customRange';
        })
      };
      customRange.value.start = values.start;
      customRange.value.end = values.end;
      return [customRange];
    }
  };

  var dateRangeFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: DateService.getDateRangeOptions(),
    preProcess: convertDateRange,
    postProcess: getDateRange,
    multiple: false
  }];
  var updateDateFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: DateService.getDateRangeOptions(),
    preProcess: convertDateRange,
    postProcess: getDateRange,
    multiple: false
  }];
  var expiryDateFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: DateService.getDateRangeOptions(),
    preProcess: convertDateRange,
    postProcess: getDateRange,
    multiple: false
  }];
  var candidateTypeFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: [{
      label: 'Applied',
      value: 'applied'
    }, {
      label: 'Recruited',
      value: 'recruiter'
    }, {
      label: 'Referred',
      value: 'referral'
    }, {
      label: 'Sourced',
      value: 'sourced'
    }],
    postProcess: getValues,
    multiple: true
  }];
  var locationsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(locations) {
      this.values = locations;
    },
    postProcess: getValues,
    multiple: true
  }];
  var categoriesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(categories) {
      this.values = categories.map(function (category) {
        return {
          label: category.name,
          value: category.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var getGenericFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(items) {
      this.values = items.map(function (item) {
        return {
          label: item.name,
          value: item.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var availableFilters = {
    positions: {
      active: false,
      icon: 'briefcase',
      label: 'Positions / Pools',
      key: 'position_ids',
      options: positionFilterOptions,
      rules: [{
        is: null
      }]
    },
    assigned: {
      active: false,
      icon: 'user-plus',
      label: 'Assigned To',
      key: 'assigned',
      options: assignedFilterOptions,
      rules: [{
        is: null
      }]
    },
    pipeline: {
      active: false,
      icon: 'list-ol',
      label: 'Stages',
      key: 'pipeline',
      options: stageFilterOptions,
      rules: [{
        is: null
      }]
    },
    pipelines: {
      active: false,
      icon: 'list-ol',
      label: 'Pipeline / Stages',
      key: 'pipeline',
      options: pipelinesFilterOptions,
      rules: [{
        is: null
      }]
    },
    tags: {
      active: false,
      icon: 'tag',
      label: 'Tags',
      key: 'tags',
      options: tagsFilterOptions,
      rules: [{
        is: null
      }]
    },
    date_range: {
      active: false,
      icon: 'clock',
      label: 'Added Date',
      key: 'date_range',
      options: dateRangeFilterOptions,
      rules: [{
        is: null
      }]
    },
    updated_date: {
      active: false,
      icon: 'bolt',
      label: 'Last Activity Date',
      key: 'updated_date',
      options: updateDateFilterOptions,
      rules: [{
        is: null
      }]
    },
    candidate_type: {
      active: false,
      icon: 'user-circle',
      label: 'Candidate Type',
      key: 'candidate_type',
      options: candidateTypeFilterOptions,
      rules: [{
        is: null
      }]
    },
    source: {
      active: false,
      icon: 'map',
      label: 'Candidate Source',
      key: 'source',
      options: sourcesFilterOptions,
      rules: [{
        is: null
      }]
    },
    sourcers: {
      active: false,
      icon: 'upload',
      label: 'Sourced By',
      key: 'sourcers',
      options: sourcersFilterOptions,
      rules: [{
        is: null
      }]
    },
    referrers: {
      active: false,
      icon: 'handshake',
      label: 'Referred By',
      key: 'referrers',
      options: referrersFilterOptions,
      rules: [{
        is: null
      }]
    },
    recruiters: {
      active: false,
      icon: 'address-card',
      label: 'Recruited By',
      key: 'recruiters',
      options: recruitersFilterOptions,
      rules: [{
        is: null
      }]
    },
    locations: {
      active: false,
      icon: 'map-marker',
      label: 'Position Locations',
      key: 'location',
      options: locationsFilterOptions,
      rules: [{
        is: null
      }]
    },
    unseen: {
      active: false,
      icon: 'eye-slash',
      label: 'Unseen',
      key: 'unseen'
    },
    starred: {
      active: false,
      icon: 'star',
      label: 'Starred',
      key: 'starred'
    },
    all_positions: {
      active: false,
      label: null,
      key: 'all_positions',
      hidden: true
    },
    archived: {
      active: false,
      icon: 'archive',
      label: 'Include Archived',
      key: 'archived'
    },
    categories: {
      active: false,
      icon: 'th-large',
      label: 'Position Category',
      key: 'category',
      options: categoriesFilterOptions,
      rules: [{
        is: null
      }]
    },
    gdpr_status: {
      active: false,
      group: 'gdpr',
      icon: 'badge',
      label: 'Consent Status',
      key: 'gdpr_status',
      options: getGenericFilterOptions,
      rules: [{
        is: null
      }]
    },
    expiry_date: {
      active: false,
      group: 'gdpr',
      icon: 'clock',
      label: 'Consent Expiry',
      key: 'expiry_date',
      options: expiryDateFilterOptions,
      rules: [{
        is: null
      }]
    }
  };
  var masterFilters = {
    text: '',
    options: null
  };
  var segments = null;
  var segmentsCopy = null;
  var segmentOptions = {};
  var segmentMetadata = {};
  var includeAllPositionsSegment = false;
  var availableFiltersCopy;
  return {
    getActiveController: function getActiveController() {
      return activeController;
    },
    setMetadataRefresh: function setMetadataRefresh(refresh) {
      //console.log('refresh metadata');
      metadataRefresh = refresh;
    },
    getMetadata: function getMetadata(companyId) {
      var deferred = $q.defer();

      if (metadataRefresh) {
        //console.log('fetching new metadata');
        RESTClient.getCandidatesFilterMetadata(companyId, function (error, result) {
          metadata = result;
          metadataRefresh = false;
          deferred.resolve(result);
        });
      } else {
        //console.log('returning cached metadata');
        deferred.resolve(metadata);
      }

      return deferred.promise;
    },
    init: function init(filters, controller) {
      activeController = controller; //console.log(`filter inited for ${activeController}`);

      if (filters.hasOwnProperty('all_positions')) {
        includeAllPositionsSegment = true;
      } else {
        includeAllPositionsSegment = false;
      } // reset might be better here eventually rather than copy


      availableFiltersCopy = angular.copy(availableFilters);
      masterFilters.options = Object.keys(filters).map(function (filter) {
        var data = filters[filter];
        filter = availableFiltersCopy[filter];

        if (filter.options && typeof filter.options[0].values === 'function') {
          //console.log('we have to init the data manually');
          data = data || [];
          filter.options[0].values(data);
        }

        return filter;
      });
      return masterFilters;
    },
    getOptions: function getOptions(filters) {
      //console.log('getOptions');
      var options = {};
      segmentOptions = segmentMetadata; //console.log(segmentOptions);

      filters.options.forEach(function (filter) {
        if (filter.active) {
          if (filter.hasOwnProperty('rules')) {
            var values = {}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

            values = filter.options[0].postProcess(filter);

            if (values.length > 0 || Object.keys(values).length > 0) {
              //console.log('setting option');
              //console.log(values);
              options[filter.key] = values;
            }
          } else {
            options[filter.key] = filter.active;
            segmentOptions[filter.key] = filter.active;
          }
        }
      }); // crappy hack for include stage_pipelines

      if (options.hasOwnProperty('pipeline') && stage_pipelines) {
        options.stage_pipelines = stage_pipelines;
        segmentOptions.stage_pipelines = stage_pipelines;
      }

      if (filters.text.length > 0) {
        options.filter_text = filters.text;
        segmentOptions.filter_text = filters.text;
      }

      return options;
    },
    segmentStatus: function segmentStatus(options) {
      var match = null;
      var emptyIndex = companyAdmin && includeAllPositionsSegment ? 1 : 0; //console.log(segments);
      //console.log('====segmentOptions=====');
      //console.log(segmentOptions);
      //console.log('===');

      if (Object.keys(options).length === 0) return segmentsCopy[emptyIndex]; //console.log(options);
      //console.log(segmentOptions);
      //console.log('=========');

      segmentsCopy.forEach(function (segment) {
        //console.log(segment.filters, segmentOptions);
        //if (angular.equals(segment.filters, options)) {
        if (angular.equals(segment.filters, segmentOptions)) {
          //console.log('match!!!');
          match = segment;
        }
      }); //console.log('=========');

      return match;
    },
    getSegments: function getSegments() {
      segments = [{
        _id: 'all',
        name: 'All Candidates',
        filters: {},
        system: true
      }, {
        _id: 'new',
        name: 'New Candidates',
        filters: {
          date_range: ['7days']
        },
        system: true
      }, {
        _id: 'mine',
        name: 'My Candidates',
        filters: {
          assigned: [SharedData.user._id]
        },
        system: true
      }, {
        _id: 'starred',
        name: 'Starred Candidates',
        filters: {
          starred: true
        },
        system: true
      }, {
        _id: 'unseen',
        name: 'Unseen Candidates',
        filters: {
          unseen: true
        },
        system: true
      }].concat(_toConsumableArray(SharedData.activeCompany.segments.filter(function (segment) {
        return !segment.hasOwnProperty('type') || segment.type === 'candidate';
      })));
      segmentsCopy = angular.copy(segments);

      if (companyAdmin && includeAllPositionsSegment) {
        segmentsCopy.unshift({
          _id: 'all_positions',
          name: 'All Candidates (Admin)',
          filters: {
            all_positions: true
          },
          system: true
        });
      }

      return segmentsCopy;
    },
    setSegment: function setSegment(segmentId, segment) {
      //console.log('setSegment');
      var options = {};
      segmentMetadata = {};
      options = segment.filters; // turn options into filters

      masterFilters.options.forEach(function (filter) {
        if (options.hasOwnProperty(filter.key)) {
          filter.active = true;

          if (['unseen', 'all_positions', 'starred', 'archived'].indexOf(filter.key) > -1) {} else if (filter.options[0].hasOwnProperty('preProcess')) {
            // custom data convert
            filter.rules = filter.options[0].preProcess(options[filter.key]);
          } else {
            // standard data convert
            filter.rules = options[filter.key].map(function (segmentValue) {
              return {
                value: filter.options[0].values.find(function (optionValue) {
                  return optionValue.value == segmentValue;
                })
              };
            });
          }
        } else {
          // reset any existing filters
          filter.active = false;

          if (filter.hasOwnProperty('rules')) {
            filter.rules = [{}];
          }
        }
      });

      if (options.hasOwnProperty('all_positions')) {
        segmentMetadata.all_positions = options.all_positions;
      }

      if (options.hasOwnProperty('tags_operator')) {
        segmentMetadata.tags_operator = options.tags_operator;
      }

      if (options.filter_text) {
        masterFilters.text = options.filter_text;
      } else {
        masterFilters.text = '';
      }
    }
  };
}]);
'use strict';

angular.module('BaseApp')
/* ===== WORD OF CAUTION ===== */
//
// Don't let this service scare you. It is all about normalizing data
// and allowing the Company Candidate page and Position Candidate page
// to request just the item data they need. It is also designed to allow
// for multiple criteria on every options, IE: is, is_not, contains, etc.
// That will be phase 2.
//

/* =========================== */
.factory('CandidatesSourcingFilterService', ['$http', 'SharedData', 'RESTClient', '$q', 'DateService', function ($http, SharedData, RESTClient, $q, DateService) {
  var activeController = null;

  var getValues = function getValues(filter) {
    var rules = filter.rules;

    if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      var values = rules.reduce(function (acc, rule) {
        //console.log(rule);
        if (rule.hasOwnProperty('value') && typeof rule.value !== 'undefined') {
          var option = {
            name: rule.value.value
          };

          if (rule.value.hasOwnProperty('is_current') && rule.value.is_current) {
            option.is_current = rule.value.is_current;
          }

          acc.push(option);
        }

        return acc;
      }, []);
      segmentOptions[filter.key] = values;
      return values;
    } else {
      return [];
    }
  };

  var getValuesWithDistance = function getValuesWithDistance(filter) {
    var rules = filter.rules;

    if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      var values = rules.reduce(function (acc, rule) {
        if (rule.hasOwnProperty('value') && typeof rule.value !== 'undefined') {
          var option = {
            name: rule.value.value,
            locality: rule.value.locality,
            region: rule.value.region,
            country: rule.value.country,
            type: rule.value.type
          };

          if (rule.value.geo && rule.value.radial) {
            option.geo = rule.value.geo;
            option.geo_distance = rule.value.geo_distance;
            option.geo_unit = 'mi';
          }

          acc.push(option);
        }

        return acc;
      }, []);
      segmentOptions[filter.key] = values;
      return values;
    } else {
      return [];
    }
  };

  var populateValues = function populateValues(option) {
    $http.get(option.url, {
      params: {
        q: option.q
      }
    }).then(function (result) {
      //console.log(result);
      option.values = [];
      result.data.results.forEach(function (r) {
        var obj = {
          label: r.data.display_name,
          value: r.data.name
        };

        if (r.data.geo) {
          obj.geo = r.data.geo;
          obj.radial = false;
          obj.geo_distance = 50;
        }

        if (r.data.type && ['country', 'region', 'locality'].indexOf(r.data.type) > -1) {
          obj.locality = r.data.locality;
          obj.country = r.data.country;
          obj.region = r.data.region;
          obj.type = r.data.type;
        }

        option.values.push(obj);
      });
    });
  };

  var degreesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(degrees) {
      this.values = degrees.map(function (degree) {
        return {
          label: degree.name,
          value: degree.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var majorsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(majors) {
      //console.log(positions);
      this.values = majors.map(function (major) {
        return {
          label: major.name,
          value: major.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];
  var locationsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'ajax',
    q: '',
    values: function values(location) {
      this.url = location;
      this.values = [];
    },
    process: populateValues,
    postProcess: getValuesWithDistance,
    multiple: true
  }];
  var companiesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'ajax',
    q: '',
    values: function values(location) {
      this.url = location;
      this.values = [];
    },
    process: populateValues,
    postProcess: getValues,
    multiple: true
  }];
  var schoolsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'ajax',
    q: '',
    values: function values(location) {
      this.url = location;
      this.values = [];
    },
    process: populateValues,
    postProcess: getValues,
    multiple: true
  }];
  var industriesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(industries) {
      this.values = industries.map(function (industry) {
        return {
          label: industry.name,
          value: industry.id
        };
      });
    },
    postProcess: getValues,
    multiple: true
  }];

  var getDateRange = function getDateRange(filter) {
    var rules = filter.rules;
    var selected, range; // custom range

    if (rules[0].hasOwnProperty('value') && rules[0].value.value === 'customRange') {
      selected = rules[0].value;
      if (!selected.start || !selected.end) return [];
      range = DateService.getDateRange(selected);
      segmentOptions[filter.key] = range;
      return range;
    } else if (rules[0].hasOwnProperty('value') && typeof rules[0].value !== 'undefined') {
      selected = rules[0].value;
      range = DateService.getDateRange(selected);
      segmentOptions[filter.key] = [selected.value];
      return range;
    } else {
      return [];
    }
  };

  var convertDateRange = function convertDateRange(values) {
    var _this = this;

    if (values instanceof Array) {
      return values.map(function (segmentValue) {
        return {
          value: _this.values.find(function (optionValue) {
            return optionValue.value == segmentValue;
          })
        };
      });
    } else {
      var customRange = {
        value: this.values.find(function (optionValue) {
          return optionValue.value == 'customRange';
        })
      };
      customRange.value.start = values.start;
      customRange.value.end = values.end;
      return [customRange];
    }
  };

  var availableFilters = {
    degrees: {
      active: false,
      icon: 'user-graduation',
      label: 'Degree',
      key: 'degrees',
      options: degreesFilterOptions,
      rules: [{
        is: null
      }]
    },
    majors: {
      active: false,
      icon: 'abacus',
      label: 'Major',
      key: 'majors',
      options: majorsFilterOptions,
      rules: [{
        is: null
      }]
    },
    locations: {
      active: false,
      icon: 'map-marker-alt',
      label: 'Location',
      key: 'locations',
      options: locationsFilterOptions,
      rules: [{
        is: null
      }]
    },
    companies: {
      active: false,
      icon: 'building',
      label: 'Company',
      key: 'companies',
      options: companiesFilterOptions,
      rules: [{
        is: null
      }]
    },
    schools: {
      active: false,
      icon: 'graduation-cap',
      label: 'School',
      key: 'schools',
      options: schoolsFilterOptions,
      rules: [{
        is: null
      }]
    },
    industries: {
      active: false,
      icon: 'industry',
      label: 'Industry',
      key: 'industries',
      options: industriesFilterOptions,
      rules: [{
        is: null
      }]
    },

    /*
    min_months_company: {
        active: false,
        icon: '',
        label: 'Min Months at Company',
        key: 'min_months_company',
        type: 'input',
        value: null
    },
    */
    has_email: {
      active: false,
      icon: 'envelope',
      label: 'Has Email',
      key: 'has_email'
    },
    has_phone: {
      active: false,
      icon: 'phone',
      label: 'Has Phone',
      key: 'has_phone'
    },
    has_linkedin: {
      active: false,
      icon: 'linkedin',
      label: 'Has LinkedIn',
      key: 'has_linkedin'
    }
  };
  var masterFilters = {
    text: '',
    options: null
  };
  var segments = null;
  var segmentsCopy = null;
  var segmentOptions = {};
  var segmentMetadata = {};
  var includeAllPositionsSegment = false;
  var availableFiltersCopy;
  return {
    init: function init(filters, controller) {
      activeController = controller; // reset might be better here eventually rather than copy

      availableFiltersCopy = angular.copy(availableFilters);
      masterFilters.options = Object.keys(filters).map(function (filter) {
        var data = filters[filter];
        filter = availableFiltersCopy[filter];

        if (filter.options && typeof filter.options[0].values === 'function') {
          //console.log('we have to init the data manually');
          data = data || [];
          filter.options[0].values(data);
        }

        return filter;
      });
      return masterFilters;
    },
    getOptions: function getOptions(filters) {
      //console.log('getOptions');
      var options = {};
      segmentOptions = segmentMetadata; //console.log(segmentOptions);

      filters.options.forEach(function (filter) {
        if (filter.active) {
          if (filter.hasOwnProperty('rules')) {
            var values = {}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

            values = filter.options[0].postProcess(filter);

            if (values.length > 0 || Object.keys(values).length > 0) {
              //console.log('setting option');
              //console.log(values);
              options[filter.key] = values;
            }
          } else if (filter.hasOwnProperty('value')) {
            console.log(filter);
            options[filter.key] = filter.value;
          } else {
            options[filter.key] = filter.active;
            segmentOptions[filter.key] = filter.active;
          }
        }
      });

      if (filters.text.length > 0) {
        options.filter_text = filters.text;
      }

      return options;
    },
    segmentStatus: function segmentStatus(options) {
      var match = null;
      segmentsCopy.forEach(function (segment) {
        //console.log(segment.filters);
        //if (angular.equals(segment.filters, options)) {
        if (angular.equals(segment.filters, segmentOptions)) {
          //console.log('match!!!');
          match = segment;
        }
      }); //console.log('=========');

      return match;
    },
    getSegments: function getSegments() {
      segments = SharedData.activeCompany.segments.filter(function (segment) {
        return segment.type === 'sourcing';
      });
      segmentsCopy = angular.copy(segments);
      return segmentsCopy;
    },
    setSegment: function setSegment(segmentId, segment) {
      //console.log('setSegment');
      var options = {};
      segmentMetadata = {};
      options = segment.filters; // turn options into filters

      masterFilters.options.forEach(function (filter) {
        if (options.hasOwnProperty(filter.key)) {
          filter.active = true;

          if ([].indexOf(filter.key) > -1) {} else if (filter.options[0].hasOwnProperty('preProcess')) {
            // custom data convert
            filter.rules = filter.options[0].preProcess(options[filter.key]);
          } else {
            // standard data convert
            filter.rules = options[filter.key].map(function (segmentValue) {
              return {
                value: filter.options[0].values.find(function (optionValue) {
                  return optionValue.value == segmentValue;
                })
              };
            });
          }
        } else {
          // reset any existing filters
          filter.active = false;

          if (filter.hasOwnProperty('rules')) {
            filter.rules = [{}];
          }
        }
      });

      if (options.filter_text) {
        masterFilters.text = options.filter_text;
      } else {
        masterFilters.text = '';
      }
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('CandidatesSourcingService', [function () {
  var degrees = [{
    id: 'associate of arts',
    name: 'Associate of Arts'
  }, {
    id: 'associates',
    name: 'Associates'
  }, {
    id: 'bachelor of applied science',
    name: 'Bachelor of Applied Science'
  }, {
    id: 'bachelor of architecture',
    name: 'Bachelor of Architecture'
  }, {
    id: 'bachelor of arts',
    name: 'Bachelor of Arts'
  }, {
    id: 'bachelor of business administration',
    name: 'Bachelor of Business Administration'
  }, {
    id: 'bachelor of commerce',
    name: 'Bachelor of Commerce'
  }, {
    id: 'bachelor of design',
    name: 'Bachelor of Design'
  }, {
    id: 'bachelor of education',
    name: 'Bachelor of Education'
  }, {
    id: 'bachelor of engineering',
    name: 'Bachelor of Engineering'
  }, {
    id: 'bachelor of fine arts',
    name: 'Bachelor of Fine Arts'
  }, {
    id: 'bachelor of law',
    name: 'Bachelor of Law'
  }, {
    id: 'bachelor of liberal arts and sciences',
    name: 'Bachelor of Liberal Arts and Sciences'
  }, {
    id: 'bachelor of mathematics',
    name: 'Bachelor of Mathematics'
  }, {
    id: 'bachelor of medicine',
    name: 'Bachelor of Medicine'
  }, {
    id: 'bachelor of music',
    name: 'Bachelor of Music'
  }, {
    id: 'bachelor of pharmacy',
    name: 'Bachelor of Pharmacy'
  }, {
    id: 'bachelor of science',
    name: 'Bachelor of Science'
  }, {
    id: 'bachelor of science in nursing',
    name: 'Bachelor of Science in Nursing'
  }, {
    id: 'bachelor of veterinary science',
    name: 'Bachelor of Veterinary Science'
  }, {
    id: 'bachelors',
    name: 'Bachelors'
  }, {
    id: 'doctor of chiropractic',
    name: 'Doctor of Chiropractic'
  }, {
    id: 'doctor of dental surgery',
    name: 'Doctor of Dental Surgery'
  }, {
    id: 'doctor of education',
    name: 'Doctor of Education'
  }, {
    id: 'doctor of jurisprudence',
    name: 'Doctor of Jurisprudence'
  }, {
    id: 'doctor of medical dentistry',
    name: 'Doctor of Medical Dentistry'
  }, {
    id: 'doctor of medicine',
    name: 'Doctor of Medicine'
  }, {
    id: 'doctor of ministry',
    name: 'Doctor of Ministry'
  }, {
    id: 'doctor of nursing practice',
    name: 'Doctor of Nursing Practice'
  }, {
    id: 'doctor of optometry',
    name: 'Doctor of Optometry'
  }, {
    id: 'doctor of osteophathy',
    name: 'Doctor of Osteophathy'
  }, {
    id: 'doctor of pharmacy',
    name: 'Doctor of Pharmacy'
  }, {
    id: 'doctor of philosophy',
    name: 'Doctor of Philosophy'
  }, {
    id: 'doctor of physical therapy',
    name: 'Doctor of Physical Therapy'
  }, {
    id: 'doctor of psychology',
    name: 'Doctor of Psychology'
  }, {
    id: 'doctor of public health',
    name: 'Doctor of Public Health'
  }, {
    id: 'doctor of science',
    name: 'Doctor of Science'
  }, {
    id: 'doctor of veterinary medicine',
    name: 'Doctor of Veterinary Medicine'
  }, {
    id: 'doctorate',
    name: 'Doctorate'
  }, {
    id: 'doctorates',
    name: 'Doctorates'
  }, {
    id: 'master of arts',
    name: 'Master of Arts'
  }, {
    id: 'master of business administration',
    name: 'Master of Business Administration'
  }, {
    id: 'master of commerce',
    name: 'Master of Commerce'
  }, {
    id: 'master of divinity',
    name: 'Master of Divinity'
  }, {
    id: 'master of education',
    name: 'Master of Education'
  }, {
    id: 'master of international studies',
    name: 'Master of International Studies'
  }, {
    id: 'master of laws',
    name: 'Master of Laws'
  }, {
    id: 'master of library science',
    name: 'Master of Library Science'
  }, {
    id: 'master of public health',
    name: 'Master of Public Health'
  }, {
    id: 'master of science',
    name: 'Master of Science'
  }, {
    id: 'master of social work',
    name: 'Master of Social Work'
  }, {
    id: 'masters',
    name: 'Masters'
  }];
  var majors = [{
    id: '3d modelling',
    name: '3D Modelling'
  }, {
    id: '3d modelling and animation',
    name: '3D Modelling and Animation'
  }, {
    id: 'accountancy',
    name: 'Accountancy'
  }, {
    id: 'accounting',
    name: 'Accounting'
  }, {
    id: 'acting',
    name: 'Acting'
  }, {
    id: 'actuarial science',
    name: 'Actuarial Science'
  }, {
    id: 'addiction counseling',
    name: 'Addiction Counseling'
  }, {
    id: 'administration',
    name: 'Administration'
  }, {
    id: 'administration of justice',
    name: 'Administration of Justice'
  }, {
    id: 'advertising',
    name: 'Advertising'
  }, {
    id: 'aerospace and aeronautical engineering',
    name: 'Aerospace and Aeronautical Engineering'
  }, {
    id: 'aerospace engineering',
    name: 'Aerospace Engineering'
  }, {
    id: 'african american studies',
    name: 'African American Studies'
  }, {
    id: 'african culture',
    name: 'African Culture'
  }, {
    id: 'african language',
    name: 'African Language'
  }, {
    id: 'african language and culture',
    name: 'African Language and Culture'
  }, {
    id: 'african language and literature',
    name: 'African Language and Literature'
  }, {
    id: 'african language studies',
    name: 'African Language Studies'
  }, {
    id: 'african languages',
    name: 'African Languages'
  }, {
    id: 'african literature',
    name: 'African Literature'
  }, {
    id: 'african literature and culture',
    name: 'African Literature and Culture'
  }, {
    id: 'african studies',
    name: 'African Studies'
  }, {
    id: 'africana studies',
    name: 'Africana Studies'
  }, {
    id: 'africana study',
    name: 'Africana Study'
  }, {
    id: 'afrikaans',
    name: 'Afrikaans'
  }, {
    id: 'afrikaans culture',
    name: 'Afrikaans Culture'
  }, {
    id: 'afrikaans language',
    name: 'Afrikaans Language'
  }, {
    id: 'afrikaans language and literature',
    name: 'Afrikaans Language and Literature'
  }, {
    id: 'afrikaans language studies',
    name: 'Afrikaans Language Studies'
  }, {
    id: 'afrikaans languages',
    name: 'Afrikaans Languages'
  }, {
    id: 'afrikaans literature',
    name: 'Afrikaans Literature'
  }, {
    id: 'afrikaans studies',
    name: 'Afrikaans Studies'
  }, {
    id: 'agricultural economics',
    name: 'Agricultural Economics'
  }, {
    id: 'agricultural engineering',
    name: 'Agricultural Engineering'
  }, {
    id: 'agriculture',
    name: 'Agriculture'
  }, {
    id: 'agriculture production',
    name: 'Agriculture Production'
  }, {
    id: 'agriculture production and management',
    name: 'Agriculture Production and Management'
  }, {
    id: 'agronomy',
    name: 'Agronomy'
  }, {
    id: 'airway science',
    name: 'Airway Science'
  }, {
    id: 'american history',
    name: 'American History'
  }, {
    id: 'american indian studies',
    name: 'American Indian Studies'
  }, {
    id: 'american literature',
    name: 'American Literature'
  }, {
    id: 'american sign language',
    name: 'American Sign Language'
  }, {
    id: 'american studies',
    name: 'American Studies'
  }, {
    id: 'anatomy',
    name: 'Anatomy'
  }, {
    id: 'ancient civilizations',
    name: 'Ancient Civilizations'
  }, {
    id: 'anesthesiology',
    name: 'Anesthesiology'
  }, {
    id: 'animal behavior',
    name: 'Animal Behavior'
  }, {
    id: 'animal bioscience',
    name: 'Animal Bioscience'
  }, {
    id: 'animal science',
    name: 'Animal Science'
  }, {
    id: 'animation',
    name: 'Animation'
  }, {
    id: 'anthropology',
    name: 'Anthropology'
  }, {
    id: 'anthropology and archeology',
    name: 'Anthropology and Archeology'
  }, {
    id: 'apparel and merchandising',
    name: 'Apparel and Merchandising'
  }, {
    id: 'apparel and textiles',
    name: 'Apparel and Textiles'
  }, {
    id: 'apparel design',
    name: 'Apparel Design'
  }, {
    id: 'applied digital art',
    name: 'Applied Digital Art'
  }, {
    id: 'applied economics',
    name: 'Applied Economics'
  }, {
    id: 'applied graphic design',
    name: 'Applied Graphic Design'
  }, {
    id: 'applied linguistics',
    name: 'Applied Linguistics'
  }, {
    id: 'applied mathematics',
    name: 'Applied Mathematics'
  }, {
    id: 'applied physics',
    name: 'Applied Physics'
  }, {
    id: 'applied psychology',
    name: 'Applied Psychology'
  }, {
    id: 'applied science',
    name: 'Applied Science'
  }, {
    id: 'applied statistics',
    name: 'Applied Statistics'
  }, {
    id: 'aquaculture',
    name: 'Aquaculture'
  }, {
    id: 'aquatics',
    name: 'Aquatics'
  }, {
    id: 'arabic',
    name: 'Arabic'
  }, {
    id: 'arabic culture',
    name: 'Arabic Culture'
  }, {
    id: 'arabic language',
    name: 'Arabic Language'
  }, {
    id: 'arabic language and culture',
    name: 'Arabic Language and Culture'
  }, {
    id: 'arabic language and literature',
    name: 'Arabic Language and Literature'
  }, {
    id: 'arabic language studies',
    name: 'Arabic Language Studies'
  }, {
    id: 'arabic languages',
    name: 'Arabic Languages'
  }, {
    id: 'arabic literature',
    name: 'Arabic Literature'
  }, {
    id: 'arabic literature and culture',
    name: 'Arabic Literature and Culture'
  }, {
    id: 'arabic studies',
    name: 'Arabic Studies'
  }, {
    id: 'archeology',
    name: 'Archeology'
  }, {
    id: 'architectural engineering',
    name: 'Architectural Engineering'
  }, {
    id: 'architectural tech',
    name: 'Architectural Tech'
  }, {
    id: 'architecture',
    name: 'Architecture'
  }, {
    id: 'architecture and engineering',
    name: 'Architecture and Engineering'
  }, {
    id: 'art',
    name: 'Art'
  }, {
    id: 'art and design',
    name: 'Art and Design'
  }, {
    id: 'art and music education',
    name: 'Art and Music Education'
  }, {
    id: 'art education',
    name: 'Art Education'
  }, {
    id: 'art history',
    name: 'Art History'
  }, {
    id: 'art therapy',
    name: 'Art Therapy'
  }, {
    id: 'asian american studies',
    name: 'Asian American Studies'
  }, {
    id: 'asian studies',
    name: 'Asian Studies'
  }, {
    id: 'astrology',
    name: 'Astrology'
  }, {
    id: 'astronomy',
    name: 'Astronomy'
  }, {
    id: 'astronomy and astrophysics',
    name: 'Astronomy and Astrophysics'
  }, {
    id: 'astrophysics',
    name: 'Astrophysics'
  }, {
    id: 'atmospheric science',
    name: 'Atmospheric Science'
  }, {
    id: 'atmospheric science and meteorology',
    name: 'Atmospheric Science and Meteorology'
  }, {
    id: 'audiology',
    name: 'Audiology'
  }, {
    id: 'automotive mechanics',
    name: 'Automotive Mechanics'
  }, {
    id: 'aviation',
    name: 'Aviation'
  }, {
    id: 'avionic systems',
    name: 'Avionic Systems'
  }, {
    id: 'avionics',
    name: 'Avionics'
  }, {
    id: 'avionics maintenance',
    name: 'Avionics Maintenance'
  }, {
    id: 'baking',
    name: 'Baking'
  }, {
    id: 'baking and pastry art',
    name: 'Baking and Pastry Art'
  }, {
    id: 'balkan culture',
    name: 'Balkan Culture'
  }, {
    id: 'balkan language',
    name: 'Balkan Language'
  }, {
    id: 'balkan languages',
    name: 'Balkan Languages'
  }, {
    id: 'balkan literature',
    name: 'Balkan Literature'
  }, {
    id: 'balkan studies',
    name: 'Balkan Studies'
  }, {
    id: 'ballet',
    name: 'Ballet'
  }, {
    id: 'baltic culture',
    name: 'Baltic Culture'
  }, {
    id: 'baltic language',
    name: 'Baltic Language'
  }, {
    id: 'baltic languages',
    name: 'Baltic Languages'
  }, {
    id: 'baltic studies',
    name: 'Baltic Studies'
  }, {
    id: 'banking',
    name: 'Banking'
  }, {
    id: 'behavioral science',
    name: 'Behavioral Science'
  }, {
    id: 'behavioural science',
    name: 'Behavioural Science'
  }, {
    id: 'biblical preaching',
    name: 'Biblical Preaching'
  }, {
    id: 'biblical studies',
    name: 'Biblical Studies'
  }, {
    id: 'biobehavioral health',
    name: 'Biobehavioral Health'
  }, {
    id: 'biochemical engineering',
    name: 'Biochemical Engineering'
  }, {
    id: 'biochemical science',
    name: 'Biochemical Science'
  }, {
    id: 'biochemistry',
    name: 'Biochemistry'
  }, {
    id: 'bioengineering',
    name: 'Bioengineering'
  }, {
    id: 'bioinformatics',
    name: 'Bioinformatics'
  }, {
    id: 'biological engineering',
    name: 'Biological Engineering'
  }, {
    id: 'biological science',
    name: 'Biological Science'
  }, {
    id: 'biology',
    name: 'Biology'
  }, {
    id: 'biomedical engineering',
    name: 'Biomedical Engineering'
  }, {
    id: 'biomedical science',
    name: 'Biomedical Science'
  }, {
    id: 'biophysics',
    name: 'Biophysics'
  }, {
    id: 'biotechnology',
    name: 'Biotechnology'
  }, {
    id: 'botany',
    name: 'Botany'
  }, {
    id: 'brass instruments',
    name: 'Brass Instruments'
  }, {
    id: 'british literature',
    name: 'British Literature'
  }, {
    id: 'broadcast and cinematic art',
    name: 'Broadcast and Cinematic Art'
  }, {
    id: 'broadcast journalism',
    name: 'Broadcast Journalism'
  }, {
    id: 'broadcasting',
    name: 'Broadcasting'
  }, {
    id: 'buddhist studies',
    name: 'Buddhist Studies'
  }, {
    id: 'bulgarian',
    name: 'Bulgarian'
  }, {
    id: 'bulgarian culture',
    name: 'Bulgarian Culture'
  }, {
    id: 'bulgarian language',
    name: 'Bulgarian Language'
  }, {
    id: 'bulgarian language and culture',
    name: 'Bulgarian Language and Culture'
  }, {
    id: 'bulgarian language and literature',
    name: 'Bulgarian Language and Literature'
  }, {
    id: 'bulgarian language studies',
    name: 'Bulgarian Language Studies'
  }, {
    id: 'bulgarian languages',
    name: 'Bulgarian Languages'
  }, {
    id: 'bulgarian literature',
    name: 'Bulgarian Literature'
  }, {
    id: 'bulgarian studies',
    name: 'Bulgarian Studies'
  }, {
    id: 'business',
    name: 'Business'
  }, {
    id: 'business admin',
    name: 'Business Admin'
  }, {
    id: 'business administration',
    name: 'Business Administration'
  }, {
    id: 'business administration and management',
    name: 'Business Administration and Management'
  }, {
    id: 'business and medical administration',
    name: 'Business and Medical Administration'
  }, {
    id: 'business economics',
    name: 'Business Economics'
  }, {
    id: 'business finance',
    name: 'Business Finance'
  }, {
    id: 'business law',
    name: 'Business Law'
  }, {
    id: 'business management',
    name: 'Business Management'
  }, {
    id: 'business management and administration',
    name: 'Business Management and Administration'
  }, {
    id: 'business marketing',
    name: 'Business Marketing'
  }, {
    id: 'business studies',
    name: 'Business Studies'
  }, {
    id: 'celtic studies',
    name: 'Celtic Studies'
  }, {
    id: 'ceramics',
    name: 'Ceramics'
  }, {
    id: 'chemical engineering',
    name: 'Chemical Engineering'
  }, {
    id: 'chemistry',
    name: 'Chemistry'
  }, {
    id: 'chicano',
    name: 'Chicano'
  }, {
    id: 'chicano culture',
    name: 'Chicano Culture'
  }, {
    id: 'chicano studies',
    name: 'Chicano Studies'
  }, {
    id: 'child and adolescent development',
    name: 'Child and Adolescent Development'
  }, {
    id: 'child development',
    name: 'Child Development'
  }, {
    id: 'chinese',
    name: 'Chinese'
  }, {
    id: 'chinese culture',
    name: 'Chinese Culture'
  }, {
    id: 'chinese language',
    name: 'Chinese Language'
  }, {
    id: 'chinese language and culture',
    name: 'Chinese Language and Culture'
  }, {
    id: 'chinese language and literature',
    name: 'Chinese Language and Literature'
  }, {
    id: 'chinese language studies',
    name: 'Chinese Language Studies'
  }, {
    id: 'chinese languages',
    name: 'Chinese Languages'
  }, {
    id: 'chinese literature',
    name: 'Chinese Literature'
  }, {
    id: 'chinese literature and culture',
    name: 'Chinese Literature and Culture'
  }, {
    id: 'chinese studies',
    name: 'Chinese Studies'
  }, {
    id: 'choral conducting',
    name: 'Choral Conducting'
  }, {
    id: 'christian administration',
    name: 'Christian Administration'
  }, {
    id: 'christian preaching',
    name: 'Christian Preaching'
  }, {
    id: 'civil engineering',
    name: 'Civil Engineering'
  }, {
    id: 'classical culture',
    name: 'Classical Culture'
  }, {
    id: 'classical language',
    name: 'Classical Language'
  }, {
    id: 'classical language and culture',
    name: 'Classical Language and Culture'
  }, {
    id: 'classical language and literature',
    name: 'Classical Language and Literature'
  }, {
    id: 'classical language studies',
    name: 'Classical Language Studies'
  }, {
    id: 'classical languages',
    name: 'Classical Languages'
  }, {
    id: 'classical literature',
    name: 'Classical Literature'
  }, {
    id: 'classical literature and culture',
    name: 'Classical Literature and Culture'
  }, {
    id: 'classical studies',
    name: 'Classical Studies'
  }, {
    id: 'classics',
    name: 'Classics'
  }, {
    id: 'clinical nurse',
    name: 'Clinical Nurse'
  }, {
    id: 'clinical nursing',
    name: 'Clinical Nursing'
  }, {
    id: 'clinical psychology',
    name: 'Clinical Psychology'
  }, {
    id: 'coaching',
    name: 'Coaching'
  }, {
    id: 'cognitive science',
    name: 'Cognitive Science'
  }, {
    id: 'cognitive science and biopsychology',
    name: 'Cognitive Science and Biopsychology'
  }, {
    id: 'college student affairs',
    name: 'College Student Affairs'
  }, {
    id: 'commerce',
    name: 'Commerce'
  }, {
    id: 'commercial art',
    name: 'Commercial Art'
  }, {
    id: 'commercial science',
    name: 'Commercial Science'
  }, {
    id: 'commercial studies',
    name: 'Commercial Studies'
  }, {
    id: 'communication',
    name: 'Communication'
  }, {
    id: 'communication art',
    name: 'Communication Art'
  }, {
    id: 'communication disorders science and services',
    name: 'Communication Disorders Science and Services'
  }, {
    id: 'communication management',
    name: 'Communication Management'
  }, {
    id: 'communication studies',
    name: 'Communication Studies'
  }, {
    id: 'communication tech',
    name: 'Communication Tech'
  }, {
    id: 'communications',
    name: 'Communications'
  }, {
    id: 'communications and media studies',
    name: 'Communications and Media Studies'
  }, {
    id: 'community',
    name: 'Community'
  }, {
    id: 'community and public health',
    name: 'Community and Public Health'
  }, {
    id: 'community development',
    name: 'Community Development'
  }, {
    id: 'comp lit',
    name: 'Comp Lit'
  }, {
    id: 'comp sci',
    name: 'Comp Sci'
  }, {
    id: 'comparative literature',
    name: 'Comparative Literature'
  }, {
    id: 'comparative race and ethnic studies',
    name: 'Comparative Race and Ethnic Studies'
  }, {
    id: 'comparative religious studies',
    name: 'Comparative Religious Studies'
  }, {
    id: 'composition',
    name: 'Composition'
  }, {
    id: 'composition and rhetoric',
    name: 'Composition and Rhetoric'
  }, {
    id: 'computer',
    name: 'Computer'
  }, {
    id: 'computer and information science',
    name: 'Computer and Information Science'
  }, {
    id: 'computer and information systems',
    name: 'Computer and Information Systems'
  }, {
    id: 'computer application',
    name: 'Computer Application'
  }, {
    id: 'computer applications',
    name: 'Computer Applications'
  }, {
    id: 'computer engineering',
    name: 'Computer Engineering'
  }, {
    id: 'computer graphics',
    name: 'Computer Graphics'
  }, {
    id: 'computer information systems',
    name: 'Computer Information Systems'
  }, {
    id: 'computer networking and telecommunications',
    name: 'Computer Networking and Telecommunications'
  }, {
    id: 'computer programming',
    name: 'Computer Programming'
  }, {
    id: 'computer programming and data processing',
    name: 'Computer Programming and Data Processing'
  }, {
    id: 'computer science',
    name: 'Computer Science'
  }, {
    id: 'computer science and electrical engineering',
    name: 'Computer Science and Electrical Engineering'
  }, {
    id: 'computer science and engineering',
    name: 'Computer Science and Engineering'
  }, {
    id: 'computer science and mathematics',
    name: 'Computer Science and Mathematics'
  }, {
    id: 'computer systems',
    name: 'Computer Systems'
  }, {
    id: 'computer systems engineering',
    name: 'Computer Systems Engineering'
  }, {
    id: 'computer systems management',
    name: 'Computer Systems Management'
  }, {
    id: 'computer tech',
    name: 'Computer Tech'
  }, {
    id: 'conducting',
    name: 'Conducting'
  }, {
    id: 'conflict resolution',
    name: 'Conflict Resolution'
  }, {
    id: 'construction',
    name: 'Construction'
  }, {
    id: 'construction and land development',
    name: 'Construction and Land Development'
  }, {
    id: 'construction management',
    name: 'Construction Management'
  }, {
    id: 'construction services',
    name: 'Construction Services'
  }, {
    id: 'consulting',
    name: 'Consulting'
  }, {
    id: 'consulting and sales',
    name: 'Consulting and Sales'
  }, {
    id: 'consumer science',
    name: 'Consumer Science'
  }, {
    id: 'corporate finance',
    name: 'Corporate Finance'
  }, {
    id: 'corporate law',
    name: 'Corporate Law'
  }, {
    id: 'corrections',
    name: 'Corrections'
  }, {
    id: 'cosmetology',
    name: 'Cosmetology'
  }, {
    id: 'counseling',
    name: 'Counseling'
  }, {
    id: 'counseling psychology',
    name: 'Counseling Psychology'
  }, {
    id: 'court reporting',
    name: 'Court Reporting'
  }, {
    id: 'creative writing',
    name: 'Creative Writing'
  }, {
    id: 'criminal justice',
    name: 'Criminal Justice'
  }, {
    id: 'criminal justice and fire protection',
    name: 'Criminal Justice and Fire Protection'
  }, {
    id: 'criminology',
    name: 'Criminology'
  }, {
    id: 'culinary art',
    name: 'Culinary Art'
  }, {
    id: 'culinary arts',
    name: 'Culinary Arts'
  }, {
    id: 'curriculum and instruction',
    name: 'Curriculum and Instruction'
  }, {
    id: 'curriculum supervision',
    name: 'Curriculum Supervision'
  }, {
    id: 'customer service',
    name: 'Customer Service'
  }, {
    id: 'customer service management',
    name: 'Customer Service Management'
  }, {
    id: 'cybersecurity',
    name: 'Cybersecurity'
  }, {
    id: 'czech',
    name: 'Czech'
  }, {
    id: 'czech culture',
    name: 'Czech Culture'
  }, {
    id: 'czech language',
    name: 'Czech Language'
  }, {
    id: 'czech language and culture',
    name: 'Czech Language and Culture'
  }, {
    id: 'czech language and literature',
    name: 'Czech Language and Literature'
  }, {
    id: 'czech language studies',
    name: 'Czech Language Studies'
  }, {
    id: 'czech languages',
    name: 'Czech Languages'
  }, {
    id: 'czech literature',
    name: 'Czech Literature'
  }, {
    id: 'czech studies',
    name: 'Czech Studies'
  }, {
    id: 'dance',
    name: 'Dance'
  }, {
    id: 'dance performance',
    name: 'Dance Performance'
  }, {
    id: 'danish',
    name: 'Danish'
  }, {
    id: 'danish culture',
    name: 'Danish Culture'
  }, {
    id: 'danish language',
    name: 'Danish Language'
  }, {
    id: 'danish language and culture',
    name: 'Danish Language and Culture'
  }, {
    id: 'danish language and literature',
    name: 'Danish Language and Literature'
  }, {
    id: 'danish language studies',
    name: 'Danish Language Studies'
  }, {
    id: 'danish languages',
    name: 'Danish Languages'
  }, {
    id: 'danish literature',
    name: 'Danish Literature'
  }, {
    id: 'danish literature and culture',
    name: 'Danish Literature and Culture'
  }, {
    id: 'danish studies',
    name: 'Danish Studies'
  }, {
    id: 'data science',
    name: 'Data Science'
  }, {
    id: 'demography',
    name: 'Demography'
  }, {
    id: 'dental hygiene',
    name: 'Dental Hygiene'
  }, {
    id: 'dental tech',
    name: 'Dental Tech'
  }, {
    id: 'dentistry',
    name: 'Dentistry'
  }, {
    id: 'design',
    name: 'Design'
  }, {
    id: 'digital art',
    name: 'Digital Art'
  }, {
    id: 'digital video',
    name: 'Digital Video'
  }, {
    id: 'digital video and cinema',
    name: 'Digital Video and Cinema'
  }, {
    id: 'digital visual effects',
    name: 'Digital Visual Effects'
  }, {
    id: 'disability studies',
    name: 'Disability Studies'
  }, {
    id: 'distribution management',
    name: 'Distribution Management'
  }, {
    id: 'diversity studies',
    name: 'Diversity Studies'
  }, {
    id: 'divinity',
    name: 'Divinity'
  }, {
    id: 'documentary production',
    name: 'Documentary Production'
  }, {
    id: 'drama',
    name: 'Drama'
  }, {
    id: 'drama and theater art',
    name: 'Drama and Theater Art'
  }, {
    id: 'drawing',
    name: 'Drawing'
  }, {
    id: 'drug development',
    name: 'Drug Development'
  }, {
    id: 'dutch',
    name: 'Dutch'
  }, {
    id: 'dutch culture',
    name: 'Dutch Culture'
  }, {
    id: 'dutch language',
    name: 'Dutch Language'
  }, {
    id: 'dutch language and culture',
    name: 'Dutch Language and Culture'
  }, {
    id: 'dutch language and literature',
    name: 'Dutch Language and Literature'
  }, {
    id: 'dutch language studies',
    name: 'Dutch Language Studies'
  }, {
    id: 'dutch languages',
    name: 'Dutch Languages'
  }, {
    id: 'dutch literature',
    name: 'Dutch Literature'
  }, {
    id: 'dutch literature and culture',
    name: 'Dutch Literature and Culture'
  }, {
    id: 'dutch studies',
    name: 'Dutch Studies'
  }, {
    id: 'early childhood education',
    name: 'Early Childhood Education'
  }, {
    id: 'earth science',
    name: 'Earth Science'
  }, {
    id: 'east asian studies',
    name: 'East Asian Studies'
  }, {
    id: 'ecology',
    name: 'Ecology'
  }, {
    id: 'economics',
    name: 'Economics'
  }, {
    id: 'education',
    name: 'Education'
  }, {
    id: 'educational administration and supervision',
    name: 'Educational Administration and Supervision'
  }, {
    id: 'educational psychology',
    name: 'Educational Psychology'
  }, {
    id: 'electrical engineering',
    name: 'Electrical Engineering'
  }, {
    id: 'electrical engineering and computer science',
    name: 'Electrical Engineering and Computer Science'
  }, {
    id: 'electrical engineering tech',
    name: 'Electrical Engineering Tech'
  }, {
    id: 'electronics',
    name: 'Electronics'
  }, {
    id: 'electronics engineering',
    name: 'Electronics Engineering'
  }, {
    id: 'elementary education',
    name: 'Elementary Education'
  }, {
    id: 'energy',
    name: 'Energy'
  }, {
    id: 'energy and climate policy',
    name: 'Energy and Climate Policy'
  }, {
    id: 'energy and enviornmental analysis',
    name: 'Energy and Enviornmental Analysis'
  }, {
    id: 'engineering',
    name: 'Engineering'
  }, {
    id: 'engineering and industrial management',
    name: 'Engineering and Industrial Management'
  }, {
    id: 'engineering tech',
    name: 'Engineering Tech'
  }, {
    id: 'english',
    name: 'English'
  }, {
    id: 'english as a second language',
    name: 'English as a Second Language'
  }, {
    id: 'english culture',
    name: 'English Culture'
  }, {
    id: 'english language',
    name: 'English Language'
  }, {
    id: 'english language and culture',
    name: 'English Language and Culture'
  }, {
    id: 'english language and literature',
    name: 'English Language and Literature'
  }, {
    id: 'english language arts',
    name: 'English Language Arts'
  }, {
    id: 'english language studies',
    name: 'English Language Studies'
  }, {
    id: 'english languages',
    name: 'English Languages'
  }, {
    id: 'english literature',
    name: 'English Literature'
  }, {
    id: 'english literature and culture',
    name: 'English Literature and Culture'
  }, {
    id: 'english studies',
    name: 'English Studies'
  }, {
    id: 'entomology',
    name: 'Entomology'
  }, {
    id: 'entrepreneurial studies',
    name: 'Entrepreneurial Studies'
  }, {
    id: 'entrepreneurship',
    name: 'Entrepreneurship'
  }, {
    id: 'environmental',
    name: 'Environmental'
  }, {
    id: 'environmental and geotechnical engineering',
    name: 'Environmental and Geotechnical Engineering'
  }, {
    id: 'environmental engineering',
    name: 'Environmental Engineering'
  }, {
    id: 'environmental science',
    name: 'Environmental Science'
  }, {
    id: 'environmental studies',
    name: 'Environmental Studies'
  }, {
    id: 'epidemiology',
    name: 'Epidemiology'
  }, {
    id: 'ethics',
    name: 'Ethics'
  }, {
    id: 'european civilization',
    name: 'European Civilization'
  }, {
    id: 'european history',
    name: 'European History'
  }, {
    id: 'european modern languages',
    name: 'European Modern Languages'
  }, {
    id: 'european studies',
    name: 'European Studies'
  }, {
    id: 'event planning',
    name: 'Event Planning'
  }, {
    id: 'exercise and sport science',
    name: 'Exercise and Sport Science'
  }, {
    id: 'exercise science',
    name: 'Exercise Science'
  }, {
    id: 'family',
    name: 'Family'
  }, {
    id: 'family and community services',
    name: 'Family and Community Services'
  }, {
    id: 'family and consumer science',
    name: 'Family and Consumer Science'
  }, {
    id: 'family science',
    name: 'Family Science'
  }, {
    id: 'family therapy',
    name: 'Family Therapy'
  }, {
    id: 'fashion',
    name: 'Fashion'
  }, {
    id: 'fashion design',
    name: 'Fashion Design'
  }, {
    id: 'feminine spirituality',
    name: 'Feminine Spirituality'
  }, {
    id: 'feminine studies',
    name: 'Feminine Studies'
  }, {
    id: 'film',
    name: 'Film'
  }, {
    id: 'film and television',
    name: 'Film and Television'
  }, {
    id: 'film directing',
    name: 'Film Directing'
  }, {
    id: 'film photography',
    name: 'Film Photography'
  }, {
    id: 'film photography and visual art',
    name: 'Film Photography and Visual Art'
  }, {
    id: 'film video and photographic art',
    name: 'Film Video and Photographic Art'
  }, {
    id: 'finance',
    name: 'Finance'
  }, {
    id: 'finance and marketing',
    name: 'Finance and Marketing'
  }, {
    id: 'financial accounting',
    name: 'Financial Accounting'
  }, {
    id: 'financial economics',
    name: 'Financial Economics'
  }, {
    id: 'financial engineering',
    name: 'Financial Engineering'
  }, {
    id: 'financial forensics',
    name: 'Financial Forensics'
  }, {
    id: 'financial forensics and fraud investigation',
    name: 'Financial Forensics and Fraud Investigation'
  }, {
    id: 'financial management',
    name: 'Financial Management'
  }, {
    id: 'fine',
    name: 'Fine'
  }, {
    id: 'fine and studio art',
    name: 'Fine and Studio Art'
  }, {
    id: 'fine art',
    name: 'Fine Art'
  }, {
    id: 'fine arts',
    name: 'Fine Arts'
  }, {
    id: 'finnish',
    name: 'Finnish'
  }, {
    id: 'finnish culture',
    name: 'Finnish Culture'
  }, {
    id: 'finnish language',
    name: 'Finnish Language'
  }, {
    id: 'finnish language and culture',
    name: 'Finnish Language and Culture'
  }, {
    id: 'finnish language and literature',
    name: 'Finnish Language and Literature'
  }, {
    id: 'finnish language studies',
    name: 'Finnish Language Studies'
  }, {
    id: 'finnish languages',
    name: 'Finnish Languages'
  }, {
    id: 'finnish literature',
    name: 'Finnish Literature'
  }, {
    id: 'finnish literature and culture',
    name: 'Finnish Literature and Culture'
  }, {
    id: 'finnish studies',
    name: 'Finnish Studies'
  }, {
    id: 'fisheries',
    name: 'Fisheries'
  }, {
    id: 'fisheries and wildlife science',
    name: 'Fisheries and Wildlife Science'
  }, {
    id: 'flute',
    name: 'Flute'
  }, {
    id: 'flute performance',
    name: 'Flute Performance'
  }, {
    id: 'folklore',
    name: 'Folklore'
  }, {
    id: 'folklore studies',
    name: 'Folklore Studies'
  }, {
    id: 'food',
    name: 'Food'
  }, {
    id: 'food and nutritional science',
    name: 'Food and Nutritional Science'
  }, {
    id: 'food preparation',
    name: 'Food Preparation'
  }, {
    id: 'food safety',
    name: 'Food Safety'
  }, {
    id: 'food science',
    name: 'Food Science'
  }, {
    id: 'foreign relations',
    name: 'Foreign Relations'
  }, {
    id: 'foreign studies',
    name: 'Foreign Studies'
  }, {
    id: 'forensic chemistry',
    name: 'Forensic Chemistry'
  }, {
    id: 'forensic computing',
    name: 'Forensic Computing'
  }, {
    id: 'forensic science',
    name: 'Forensic Science'
  }, {
    id: 'forensics',
    name: 'Forensics'
  }, {
    id: 'forest science',
    name: 'Forest Science'
  }, {
    id: 'forest tech',
    name: 'Forest Tech'
  }, {
    id: 'forestry',
    name: 'Forestry'
  }, {
    id: 'francophone studies',
    name: 'Francophone Studies'
  }, {
    id: 'french',
    name: 'French'
  }, {
    id: 'french culture',
    name: 'French Culture'
  }, {
    id: 'french language',
    name: 'French Language'
  }, {
    id: 'french language and culture',
    name: 'French Language and Culture'
  }, {
    id: 'french language and literature',
    name: 'French Language and Literature'
  }, {
    id: 'french language studies',
    name: 'French Language Studies'
  }, {
    id: 'french languages',
    name: 'French Languages'
  }, {
    id: 'french literature',
    name: 'French Literature'
  }, {
    id: 'french literature and culture',
    name: 'French Literature and Culture'
  }, {
    id: 'french pastry',
    name: 'French Pastry'
  }, {
    id: 'french studies',
    name: 'French Studies'
  }, {
    id: 'fundraising',
    name: 'Fundraising'
  }, {
    id: 'fundraising and grantmaking',
    name: 'Fundraising and Grantmaking'
  }, {
    id: 'game design',
    name: 'Game Design'
  }, {
    id: 'gay and lesbian studies',
    name: 'Gay and Lesbian Studies'
  }, {
    id: 'gay lesbian studies',
    name: 'Gay Lesbian Studies'
  }, {
    id: 'gender and diversity studies',
    name: 'Gender and Diversity Studies'
  }, {
    id: 'gender and womens studies',
    name: 'Gender and Womens Studies'
  }, {
    id: 'gender studies',
    name: 'Gender Studies'
  }, {
    id: 'general agriculture',
    name: 'General Agriculture'
  }, {
    id: 'general business',
    name: 'General Business'
  }, {
    id: 'general education',
    name: 'General Education'
  }, {
    id: 'general engineering',
    name: 'General Engineering'
  }, {
    id: 'general science',
    name: 'General Science'
  }, {
    id: 'general social science',
    name: 'General Social Science'
  }, {
    id: 'general studies',
    name: 'General Studies'
  }, {
    id: 'genetics',
    name: 'Genetics'
  }, {
    id: 'genomics',
    name: 'Genomics'
  }, {
    id: 'geochemistry',
    name: 'Geochemistry'
  }, {
    id: 'geography',
    name: 'Geography'
  }, {
    id: 'geological and geophysical engineering',
    name: 'Geological and Geophysical Engineering'
  }, {
    id: 'geology',
    name: 'Geology'
  }, {
    id: 'geology and earth science',
    name: 'Geology and Earth Science'
  }, {
    id: 'geophysics',
    name: 'Geophysics'
  }, {
    id: 'geoscience',
    name: 'Geoscience'
  }, {
    id: 'geosciences',
    name: 'Geosciences'
  }, {
    id: 'geotechnical engineering',
    name: 'Geotechnical Engineering'
  }, {
    id: 'german',
    name: 'German'
  }, {
    id: 'german culture',
    name: 'German Culture'
  }, {
    id: 'german language',
    name: 'German Language'
  }, {
    id: 'german language and culture',
    name: 'German Language and Culture'
  }, {
    id: 'german language and literature',
    name: 'German Language and Literature'
  }, {
    id: 'german language studies',
    name: 'German Language Studies'
  }, {
    id: 'german languages',
    name: 'German Languages'
  }, {
    id: 'german literature',
    name: 'German Literature'
  }, {
    id: 'german literature and culture',
    name: 'German Literature and Culture'
  }, {
    id: 'german studies',
    name: 'German Studies'
  }, {
    id: 'global health',
    name: 'Global Health'
  }, {
    id: 'global history',
    name: 'Global History'
  }, {
    id: 'global studies',
    name: 'Global Studies'
  }, {
    id: 'government',
    name: 'Government'
  }, {
    id: 'government and management',
    name: 'Government and Management'
  }, {
    id: 'government and politics',
    name: 'Government and Politics'
  }, {
    id: 'graphic and printing',
    name: 'Graphic and Printing'
  }, {
    id: 'graphic and printing science',
    name: 'Graphic and Printing Science'
  }, {
    id: 'graphic art',
    name: 'Graphic Art'
  }, {
    id: 'graphic design',
    name: 'Graphic Design'
  }, {
    id: 'greek',
    name: 'Greek'
  }, {
    id: 'greek culture',
    name: 'Greek Culture'
  }, {
    id: 'greek language',
    name: 'Greek Language'
  }, {
    id: 'greek language and culture',
    name: 'Greek Language and Culture'
  }, {
    id: 'greek language and literature',
    name: 'Greek Language and Literature'
  }, {
    id: 'greek language studies',
    name: 'Greek Language Studies'
  }, {
    id: 'greek languages',
    name: 'Greek Languages'
  }, {
    id: 'greek literature',
    name: 'Greek Literature'
  }, {
    id: 'greek literature and culture',
    name: 'Greek Literature and Culture'
  }, {
    id: 'greek mythology',
    name: 'Greek Mythology'
  }, {
    id: 'greek studies',
    name: 'Greek Studies'
  }, {
    id: 'gynecology',
    name: 'Gynecology'
  }, {
    id: 'health administration',
    name: 'Health Administration'
  }, {
    id: 'health and medical administrative services',
    name: 'Health and Medical Administrative Services'
  }, {
    id: 'health care',
    name: 'Health Care'
  }, {
    id: 'health care administration',
    name: 'Health Care Administration'
  }, {
    id: 'health education',
    name: 'Health Education'
  }, {
    id: 'health education teaching',
    name: 'Health Education Teaching'
  }, {
    id: 'health promotion',
    name: 'Health Promotion'
  }, {
    id: 'health science',
    name: 'Health Science'
  }, {
    id: 'health service administration',
    name: 'Health Service Administration'
  }, {
    id: 'health services',
    name: 'Health Services'
  }, {
    id: 'healthcare',
    name: 'Healthcare'
  }, {
    id: 'healthcare administration',
    name: 'Healthcare Administration'
  }, {
    id: 'hebrew',
    name: 'Hebrew'
  }, {
    id: 'hebrew culture',
    name: 'Hebrew Culture'
  }, {
    id: 'hebrew language',
    name: 'Hebrew Language'
  }, {
    id: 'hebrew language and culture',
    name: 'Hebrew Language and Culture'
  }, {
    id: 'hebrew language and literature',
    name: 'Hebrew Language and Literature'
  }, {
    id: 'hebrew language studies',
    name: 'Hebrew Language Studies'
  }, {
    id: 'hebrew languages',
    name: 'Hebrew Languages'
  }, {
    id: 'hebrew literature',
    name: 'Hebrew Literature'
  }, {
    id: 'hebrew studies',
    name: 'Hebrew Studies'
  }, {
    id: 'hindi',
    name: 'Hindi'
  }, {
    id: 'hindi culture',
    name: 'Hindi Culture'
  }, {
    id: 'hindi language',
    name: 'Hindi Language'
  }, {
    id: 'hindi language and culture',
    name: 'Hindi Language and Culture'
  }, {
    id: 'hindi language and literature',
    name: 'Hindi Language and Literature'
  }, {
    id: 'hindi language studies',
    name: 'Hindi Language Studies'
  }, {
    id: 'hindi languages',
    name: 'Hindi Languages'
  }, {
    id: 'hindi literature',
    name: 'Hindi Literature'
  }, {
    id: 'hindi literature and culture',
    name: 'Hindi Literature and Culture'
  }, {
    id: 'hindi studies',
    name: 'Hindi Studies'
  }, {
    id: 'hindu',
    name: 'Hindu'
  }, {
    id: 'hindu studies',
    name: 'Hindu Studies'
  }, {
    id: 'historic preservation',
    name: 'Historic Preservation'
  }, {
    id: 'history',
    name: 'History'
  }, {
    id: 'holocaust studies',
    name: 'Holocaust Studies'
  }, {
    id: 'homeland security',
    name: 'Homeland Security'
  }, {
    id: 'horticulture',
    name: 'Horticulture'
  }, {
    id: 'hospitality',
    name: 'Hospitality'
  }, {
    id: 'hospitality and tourism',
    name: 'Hospitality and Tourism'
  }, {
    id: 'hospitality management',
    name: 'Hospitality Management'
  }, {
    id: 'hotel management',
    name: 'Hotel Management'
  }, {
    id: 'human development',
    name: 'Human Development'
  }, {
    id: 'human physiology',
    name: 'Human Physiology'
  }, {
    id: 'human relations',
    name: 'Human Relations'
  }, {
    id: 'human resource development',
    name: 'Human Resource Development'
  }, {
    id: 'human resource management',
    name: 'Human Resource Management'
  }, {
    id: 'human resources',
    name: 'Human Resources'
  }, {
    id: 'human resources and personnel management',
    name: 'Human Resources and Personnel Management'
  }, {
    id: 'human resources management',
    name: 'Human Resources Management'
  }, {
    id: 'human services',
    name: 'Human Services'
  }, {
    id: 'human services and community organization',
    name: 'Human Services and Community Organization'
  }, {
    id: 'humanities',
    name: 'Humanities'
  }, {
    id: 'hungarian',
    name: 'Hungarian'
  }, {
    id: 'hungarian culture',
    name: 'Hungarian Culture'
  }, {
    id: 'hungarian language',
    name: 'Hungarian Language'
  }, {
    id: 'hungarian language and culture',
    name: 'Hungarian Language and Culture'
  }, {
    id: 'hungarian language and literature',
    name: 'Hungarian Language and Literature'
  }, {
    id: 'hungarian language studies',
    name: 'Hungarian Language Studies'
  }, {
    id: 'hungarian languages',
    name: 'Hungarian Languages'
  }, {
    id: 'hungarian literature',
    name: 'Hungarian Literature'
  }, {
    id: 'hungarian literature and culture',
    name: 'Hungarian Literature and Culture'
  }, {
    id: 'hungarian studies',
    name: 'Hungarian Studies'
  }, {
    id: 'illustration',
    name: 'Illustration'
  }, {
    id: 'illustraton',
    name: 'Illustraton'
  }, {
    id: 'immunology',
    name: 'Immunology'
  }, {
    id: 'indonesian',
    name: 'Indonesian'
  }, {
    id: 'indonesian and malay languages',
    name: 'Indonesian and Malay Languages'
  }, {
    id: 'indonesian culture',
    name: 'Indonesian Culture'
  }, {
    id: 'indonesian language',
    name: 'Indonesian Language'
  }, {
    id: 'indonesian language and culture',
    name: 'Indonesian Language and Culture'
  }, {
    id: 'indonesian language and literature',
    name: 'Indonesian Language and Literature'
  }, {
    id: 'indonesian language studies',
    name: 'Indonesian Language Studies'
  }, {
    id: 'indonesian languages',
    name: 'Indonesian Languages'
  }, {
    id: 'indonesian literature',
    name: 'Indonesian Literature'
  }, {
    id: 'indonesian studies',
    name: 'Indonesian Studies'
  }, {
    id: 'industrial administration',
    name: 'Industrial Administration'
  }, {
    id: 'industrial and manufacturing engineering',
    name: 'Industrial and Manufacturing Engineering'
  }, {
    id: 'industrial and organizational psychology',
    name: 'Industrial and Organizational Psychology'
  }, {
    id: 'industrial design',
    name: 'Industrial Design'
  }, {
    id: 'industrial engineering',
    name: 'Industrial Engineering'
  }, {
    id: 'industrial engineering and operations research',
    name: 'Industrial Engineering and Operations Research'
  }, {
    id: 'industrial production tech',
    name: 'Industrial Production Tech'
  }, {
    id: 'industrial relations',
    name: 'Industrial Relations'
  }, {
    id: 'industrial safety',
    name: 'Industrial Safety'
  }, {
    id: 'industrial sales',
    name: 'Industrial Sales'
  }, {
    id: 'industrial tech',
    name: 'Industrial Tech'
  }, {
    id: 'informatics',
    name: 'Informatics'
  }, {
    id: 'information science',
    name: 'Information Science'
  }, {
    id: 'information science and tech',
    name: 'Information Science and Tech'
  }, {
    id: 'information systems',
    name: 'Information Systems'
  }, {
    id: 'information systems management',
    name: 'Information Systems Management'
  }, {
    id: 'information tech',
    name: 'Information Tech'
  }, {
    id: 'instructional tech',
    name: 'Instructional Tech'
  }, {
    id: 'interactive media',
    name: 'Interactive Media'
  }, {
    id: 'intercultural and international studies',
    name: 'Intercultural and International Studies'
  }, {
    id: 'interdisciplinary social science',
    name: 'Interdisciplinary Social Science'
  }, {
    id: 'interdisciplinary studies',
    name: 'Interdisciplinary Studies'
  }, {
    id: 'international affairs',
    name: 'International Affairs'
  }, {
    id: 'international business',
    name: 'International Business'
  }, {
    id: 'international commerce',
    name: 'International Commerce'
  }, {
    id: 'international communications',
    name: 'International Communications'
  }, {
    id: 'international development',
    name: 'International Development'
  }, {
    id: 'international development and conflict management',
    name: 'International Development and Conflict Management'
  }, {
    id: 'international economic relations',
    name: 'International Economic Relations'
  }, {
    id: 'international economics',
    name: 'International Economics'
  }, {
    id: 'international finance',
    name: 'International Finance'
  }, {
    id: 'international law',
    name: 'International Law'
  }, {
    id: 'international relations',
    name: 'International Relations'
  }, {
    id: 'international studies',
    name: 'International Studies'
  }, {
    id: 'investment analysis',
    name: 'Investment Analysis'
  }, {
    id: 'investment banking',
    name: 'Investment Banking'
  }, {
    id: 'irish studies',
    name: 'Irish Studies'
  }, {
    id: 'islamic culture',
    name: 'Islamic Culture'
  }, {
    id: 'islamic religion',
    name: 'Islamic Religion'
  }, {
    id: 'islamic studies',
    name: 'Islamic Studies'
  }, {
    id: 'italian',
    name: 'Italian'
  }, {
    id: 'italian culture',
    name: 'Italian Culture'
  }, {
    id: 'italian language',
    name: 'Italian Language'
  }, {
    id: 'italian language and culture',
    name: 'Italian Language and Culture'
  }, {
    id: 'italian language and literature',
    name: 'Italian Language and Literature'
  }, {
    id: 'italian language studies',
    name: 'Italian Language Studies'
  }, {
    id: 'italian languages',
    name: 'Italian Languages'
  }, {
    id: 'italian literature',
    name: 'Italian Literature'
  }, {
    id: 'italian literature and culture',
    name: 'Italian Literature and Culture'
  }, {
    id: 'italian studies',
    name: 'Italian Studies'
  }, {
    id: 'japanese',
    name: 'Japanese'
  }, {
    id: 'japanese culture',
    name: 'Japanese Culture'
  }, {
    id: 'japanese language',
    name: 'Japanese Language'
  }, {
    id: 'japanese language and culture',
    name: 'Japanese Language and Culture'
  }, {
    id: 'japanese language and literature',
    name: 'Japanese Language and Literature'
  }, {
    id: 'japanese language studies',
    name: 'Japanese Language Studies'
  }, {
    id: 'japanese languages',
    name: 'Japanese Languages'
  }, {
    id: 'japanese literature',
    name: 'Japanese Literature'
  }, {
    id: 'japanese literature and culture',
    name: 'Japanese Literature and Culture'
  }, {
    id: 'japanese studies',
    name: 'Japanese Studies'
  }, {
    id: 'jazz',
    name: 'Jazz'
  }, {
    id: 'jazz performance',
    name: 'Jazz Performance'
  }, {
    id: 'journalism',
    name: 'Journalism'
  }, {
    id: 'judaic studies',
    name: 'Judaic Studies'
  }, {
    id: 'kinesiology',
    name: 'Kinesiology'
  }, {
    id: 'korean',
    name: 'Korean'
  }, {
    id: 'korean culture',
    name: 'Korean Culture'
  }, {
    id: 'korean language',
    name: 'Korean Language'
  }, {
    id: 'korean language and culture',
    name: 'Korean Language and Culture'
  }, {
    id: 'korean language and literature',
    name: 'Korean Language and Literature'
  }, {
    id: 'korean language studies',
    name: 'Korean Language Studies'
  }, {
    id: 'korean languages',
    name: 'Korean Languages'
  }, {
    id: 'korean literature',
    name: 'Korean Literature'
  }, {
    id: 'korean literature and culture',
    name: 'Korean Literature and Culture'
  }, {
    id: 'korean studies',
    name: 'Korean Studies'
  }, {
    id: 'labor relations',
    name: 'Labor Relations'
  }, {
    id: 'labor studies',
    name: 'Labor Studies'
  }, {
    id: 'landscape architecture',
    name: 'Landscape Architecture'
  }, {
    id: 'landscaping',
    name: 'Landscaping'
  }, {
    id: 'landscaping and groundskeeping',
    name: 'Landscaping and Groundskeeping'
  }, {
    id: 'latin',
    name: 'Latin'
  }, {
    id: 'latin american and caribbean studies',
    name: 'Latin American and Caribbean Studies'
  }, {
    id: 'latin american studies',
    name: 'Latin American Studies'
  }, {
    id: 'law',
    name: 'Law'
  }, {
    id: 'law enforcement',
    name: 'Law Enforcement'
  }, {
    id: 'law enforcement executive development',
    name: 'Law Enforcement Executive Development'
  }, {
    id: 'leadership',
    name: 'Leadership'
  }, {
    id: 'legal administration',
    name: 'Legal Administration'
  }, {
    id: 'legal studies',
    name: 'Legal Studies'
  }, {
    id: 'lgbtq studies',
    name: 'Lgbtq Studies'
  }, {
    id: 'liberal art',
    name: 'Liberal Art'
  }, {
    id: 'liberal arts',
    name: 'Liberal Arts'
  }, {
    id: 'liberal studies',
    name: 'Liberal Studies'
  }, {
    id: 'library science',
    name: 'Library Science'
  }, {
    id: 'linguistics',
    name: 'Linguistics'
  }, {
    id: 'literature',
    name: 'Literature'
  }, {
    id: 'liturgical studies',
    name: 'Liturgical Studies'
  }, {
    id: 'logic',
    name: 'Logic'
  }, {
    id: 'logistics',
    name: 'Logistics'
  }, {
    id: 'management',
    name: 'Management'
  }, {
    id: 'management information systems and statistics',
    name: 'Management Information Systems and Statistics'
  }, {
    id: 'management science',
    name: 'Management Science'
  }, {
    id: 'management studies',
    name: 'Management Studies'
  }, {
    id: 'mandarin',
    name: 'Mandarin'
  }, {
    id: 'mandarin chinese',
    name: 'Mandarin Chinese'
  }, {
    id: 'mandarin culture',
    name: 'Mandarin Culture'
  }, {
    id: 'mandarin language',
    name: 'Mandarin Language'
  }, {
    id: 'mandarin language and culture',
    name: 'Mandarin Language and Culture'
  }, {
    id: 'mandarin language and literature',
    name: 'Mandarin Language and Literature'
  }, {
    id: 'mandarin language studies',
    name: 'Mandarin Language Studies'
  }, {
    id: 'mandarin languages',
    name: 'Mandarin Languages'
  }, {
    id: 'mandarin literature',
    name: 'Mandarin Literature'
  }, {
    id: 'mandarin studies',
    name: 'Mandarin Studies'
  }, {
    id: 'marine biology',
    name: 'Marine Biology'
  }, {
    id: 'marine science',
    name: 'Marine Science'
  }, {
    id: 'marketing',
    name: 'Marketing'
  }, {
    id: 'masonry',
    name: 'Masonry'
  }, {
    id: 'mass media',
    name: 'Mass Media'
  }, {
    id: 'materials engineering',
    name: 'Materials Engineering'
  }, {
    id: 'materials engineering and materials science',
    name: 'Materials Engineering and Materials Science'
  }, {
    id: 'materials science',
    name: 'Materials Science'
  }, {
    id: 'mathematical modeling',
    name: 'Mathematical Modeling'
  }, {
    id: 'mathematical science',
    name: 'Mathematical Science'
  }, {
    id: 'mathematics',
    name: 'Mathematics'
  }, {
    id: 'mechanical engineering',
    name: 'Mechanical Engineering'
  }, {
    id: 'mechanical tech',
    name: 'Mechanical Tech'
  }, {
    id: 'mechatronics',
    name: 'Mechatronics'
  }, {
    id: 'mechatronics and automation',
    name: 'Mechatronics and Automation'
  }, {
    id: 'mechatronics engineering',
    name: 'Mechatronics Engineering'
  }, {
    id: 'media art',
    name: 'Media Art'
  }, {
    id: 'media art and entertainment',
    name: 'Media Art and Entertainment'
  }, {
    id: 'media management',
    name: 'Media Management'
  }, {
    id: 'media studies',
    name: 'Media Studies'
  }, {
    id: 'medical assisting services',
    name: 'Medical Assisting Services'
  }, {
    id: 'medical biology',
    name: 'Medical Biology'
  }, {
    id: 'medical engineering',
    name: 'Medical Engineering'
  }, {
    id: 'medical insurance',
    name: 'Medical Insurance'
  }, {
    id: 'medical tech',
    name: 'Medical Tech'
  }, {
    id: 'medicine',
    name: 'Medicine'
  }, {
    id: 'medieval and renaissance studies',
    name: 'Medieval and Renaissance Studies'
  }, {
    id: 'medieval studies',
    name: 'Medieval Studies'
  }, {
    id: 'metallurgical engineering',
    name: 'Metallurgical Engineering'
  }, {
    id: 'metaphysics',
    name: 'Metaphysics'
  }, {
    id: 'meteorology',
    name: 'Meteorology'
  }, {
    id: 'microbiology',
    name: 'Microbiology'
  }, {
    id: 'middle eastern studies',
    name: 'Middle Eastern Studies'
  }, {
    id: 'military science',
    name: 'Military Science'
  }, {
    id: 'military tech',
    name: 'Military Tech'
  }, {
    id: 'mining',
    name: 'Mining'
  }, {
    id: 'mining and mineral engineering',
    name: 'Mining and Mineral Engineering'
  }, {
    id: 'mining engineering',
    name: 'Mining Engineering'
  }, {
    id: 'ministry',
    name: 'Ministry'
  }, {
    id: 'modern art',
    name: 'Modern Art'
  }, {
    id: 'modern languages',
    name: 'Modern Languages'
  }, {
    id: 'molecular biology',
    name: 'Molecular Biology'
  }, {
    id: 'molecular biophysics',
    name: 'Molecular Biophysics'
  }, {
    id: 'multicultural studies',
    name: 'Multicultural Studies'
  }, {
    id: 'multimedia',
    name: 'Multimedia'
  }, {
    id: 'multimedia journalism',
    name: 'Multimedia Journalism'
  }, {
    id: 'music',
    name: 'Music'
  }, {
    id: 'music education',
    name: 'Music Education'
  }, {
    id: 'mythology',
    name: 'Mythology'
  }, {
    id: 'mythology and folklore',
    name: 'Mythology and Folklore'
  }, {
    id: 'nanotechnology',
    name: 'Nanotechnology'
  }, {
    id: 'native american studies',
    name: 'Native American Studies'
  }, {
    id: 'natural resource conservation',
    name: 'Natural Resource Conservation'
  }, {
    id: 'natural resources conservation',
    name: 'Natural Resources Conservation'
  }, {
    id: 'natural resources management',
    name: 'Natural Resources Management'
  }, {
    id: 'natural science',
    name: 'Natural Science'
  }, {
    id: 'naval architecture',
    name: 'Naval Architecture'
  }, {
    id: 'naval architecture and marine engineering',
    name: 'Naval Architecture and Marine Engineering'
  }, {
    id: 'naval architecture and ocean engineering',
    name: 'Naval Architecture and Ocean Engineering'
  }, {
    id: 'near and middle eastern studies',
    name: 'Near and Middle Eastern Studies'
  }, {
    id: 'near eastern studies',
    name: 'Near Eastern Studies'
  }, {
    id: 'network administration',
    name: 'Network Administration'
  }, {
    id: 'network and systems administration',
    name: 'Network and Systems Administration'
  }, {
    id: 'neuroscience',
    name: 'Neuroscience'
  }, {
    id: 'norwegian',
    name: 'Norwegian'
  }, {
    id: 'norwegian culture',
    name: 'Norwegian Culture'
  }, {
    id: 'norwegian language',
    name: 'Norwegian Language'
  }, {
    id: 'norwegian language and culture',
    name: 'Norwegian Language and Culture'
  }, {
    id: 'norwegian language and literature',
    name: 'Norwegian Language and Literature'
  }, {
    id: 'norwegian language studies',
    name: 'Norwegian Language Studies'
  }, {
    id: 'norwegian languages',
    name: 'Norwegian Languages'
  }, {
    id: 'norwegian literature',
    name: 'Norwegian Literature'
  }, {
    id: 'norwegian literature and culture',
    name: 'Norwegian Literature and Culture'
  }, {
    id: 'norwegian studies',
    name: 'Norwegian Studies'
  }, {
    id: 'nuclear engineering',
    name: 'Nuclear Engineering'
  }, {
    id: 'nuclear propulsion',
    name: 'Nuclear Propulsion'
  }, {
    id: 'number theory',
    name: 'Number Theory'
  }, {
    id: 'nursing',
    name: 'Nursing'
  }, {
    id: 'nursing administration',
    name: 'Nursing Administration'
  }, {
    id: 'nutrition',
    name: 'Nutrition'
  }, {
    id: 'nutrition science',
    name: 'Nutrition Science'
  }, {
    id: 'nutritional science',
    name: 'Nutritional Science'
  }, {
    id: 'occupational health',
    name: 'Occupational Health'
  }, {
    id: 'occupational health and safety',
    name: 'Occupational Health and Safety'
  }, {
    id: 'occupational safety',
    name: 'Occupational Safety'
  }, {
    id: 'occupational safety engineering',
    name: 'Occupational Safety Engineering'
  }, {
    id: 'occupational therapy',
    name: 'Occupational Therapy'
  }, {
    id: 'oceanography',
    name: 'Oceanography'
  }, {
    id: 'operations logistics',
    name: 'Operations Logistics'
  }, {
    id: 'operations management',
    name: 'Operations Management'
  }, {
    id: 'optometry',
    name: 'Optometry'
  }, {
    id: 'orchestral conducting',
    name: 'Orchestral Conducting'
  }, {
    id: 'organ performance',
    name: 'Organ Performance'
  }, {
    id: 'organic chemistry',
    name: 'Organic Chemistry'
  }, {
    id: 'organization administration',
    name: 'Organization Administration'
  }, {
    id: 'organizational and professional communications',
    name: 'Organizational and Professional Communications'
  }, {
    id: 'organizational communications',
    name: 'Organizational Communications'
  }, {
    id: 'organizational leadership',
    name: 'Organizational Leadership'
  }, {
    id: 'organizational management',
    name: 'Organizational Management'
  }, {
    id: 'orthodontics',
    name: 'Orthodontics'
  }, {
    id: 'painting',
    name: 'Painting'
  }, {
    id: 'paleontology',
    name: 'Paleontology'
  }, {
    id: 'paralegal',
    name: 'Paralegal'
  }, {
    id: 'paralegal studies',
    name: 'Paralegal Studies'
  }, {
    id: 'parks',
    name: 'Parks'
  }, {
    id: 'parks and recreation',
    name: 'Parks and Recreation'
  }, {
    id: 'parks recreation and leisure studies',
    name: 'Parks Recreation and Leisure Studies'
  }, {
    id: 'percussion',
    name: 'Percussion'
  }, {
    id: 'performing art',
    name: 'Performing Art'
  }, {
    id: 'performing arts',
    name: 'Performing Arts'
  }, {
    id: 'petroleum engineering',
    name: 'Petroleum Engineering'
  }, {
    id: 'petroleum geoscience',
    name: 'Petroleum Geoscience'
  }, {
    id: 'petroleum tech',
    name: 'Petroleum Tech'
  }, {
    id: 'pharmaceutical administration',
    name: 'Pharmaceutical Administration'
  }, {
    id: 'pharmaceutical development',
    name: 'Pharmaceutical Development'
  }, {
    id: 'pharmaceutical science',
    name: 'Pharmaceutical Science'
  }, {
    id: 'pharmacology',
    name: 'Pharmacology'
  }, {
    id: 'pharmacy',
    name: 'Pharmacy'
  }, {
    id: 'philosophy',
    name: 'Philosophy'
  }, {
    id: 'photography',
    name: 'Photography'
  }, {
    id: 'physical',
    name: 'Physical'
  }, {
    id: 'physical activity',
    name: 'Physical Activity'
  }, {
    id: 'physical and health education teaching',
    name: 'Physical and Health Education Teaching'
  }, {
    id: 'physical education',
    name: 'Physical Education'
  }, {
    id: 'physical science',
    name: 'Physical Science'
  }, {
    id: 'physical therapy',
    name: 'Physical Therapy'
  }, {
    id: 'physics',
    name: 'Physics'
  }, {
    id: 'physiology',
    name: 'Physiology'
  }, {
    id: 'physiotherapy',
    name: 'Physiotherapy'
  }, {
    id: 'piano',
    name: 'Piano'
  }, {
    id: 'piano performace',
    name: 'Piano Performace'
  }, {
    id: 'piano performance',
    name: 'Piano Performance'
  }, {
    id: 'planetary',
    name: 'Planetary'
  }, {
    id: 'planetary and atmospheric science',
    name: 'Planetary and Atmospheric Science'
  }, {
    id: 'plant science',
    name: 'Plant Science'
  }, {
    id: 'plant science and agronomy',
    name: 'Plant Science and Agronomy'
  }, {
    id: 'playwriting',
    name: 'Playwriting'
  }, {
    id: 'poetry',
    name: 'Poetry'
  }, {
    id: 'police science',
    name: 'Police Science'
  }, {
    id: 'political development',
    name: 'Political Development'
  }, {
    id: 'political science',
    name: 'Political Science'
  }, {
    id: 'political science and government',
    name: 'Political Science and Government'
  }, {
    id: 'politics',
    name: 'Politics'
  }, {
    id: 'poly sci',
    name: 'Poly Sci'
  }, {
    id: 'portugese',
    name: 'Portugese'
  }, {
    id: 'portugese language',
    name: 'Portugese Language'
  }, {
    id: 'portugese language and culture',
    name: 'Portugese Language and Culture'
  }, {
    id: 'portugese language and literature',
    name: 'Portugese Language and Literature'
  }, {
    id: 'portugese language studies',
    name: 'Portugese Language Studies'
  }, {
    id: 'portugese languages',
    name: 'Portugese Languages'
  }, {
    id: 'portugese studies',
    name: 'Portugese Studies'
  }, {
    id: 'pre dental',
    name: 'Pre Dental'
  }, {
    id: 'pre law',
    name: 'Pre Law'
  }, {
    id: 'pre law and legal studies',
    name: 'Pre Law and Legal Studies'
  }, {
    id: 'pre med',
    name: 'Pre Med'
  }, {
    id: 'pre optometry',
    name: 'Pre Optometry'
  }, {
    id: 'prelaw',
    name: 'Prelaw'
  }, {
    id: 'premed',
    name: 'Premed'
  }, {
    id: 'premedicine',
    name: 'Premedicine'
  }, {
    id: 'product design',
    name: 'Product Design'
  }, {
    id: 'product marketing',
    name: 'Product Marketing'
  }, {
    id: 'production tech',
    name: 'Production Tech'
  }, {
    id: 'project management',
    name: 'Project Management'
  }, {
    id: 'psychology',
    name: 'Psychology'
  }, {
    id: 'public admin',
    name: 'Public Admin'
  }, {
    id: 'public administration',
    name: 'Public Administration'
  }, {
    id: 'public affairs',
    name: 'Public Affairs'
  }, {
    id: 'public health',
    name: 'Public Health'
  }, {
    id: 'public law',
    name: 'Public Law'
  }, {
    id: 'public policy',
    name: 'Public Policy'
  }, {
    id: 'public relations',
    name: 'Public Relations'
  }, {
    id: 'public service',
    name: 'Public Service'
  }, {
    id: 'public service and administration',
    name: 'Public Service and Administration'
  }, {
    id: 'publishing',
    name: 'Publishing'
  }, {
    id: 'puppetry',
    name: 'Puppetry'
  }, {
    id: 'quality improvement',
    name: 'Quality Improvement'
  }, {
    id: 'queer studies',
    name: 'Queer Studies'
  }, {
    id: 'rabbinic studies',
    name: 'Rabbinic Studies'
  }, {
    id: 'rabbinical studies',
    name: 'Rabbinical Studies'
  }, {
    id: 'radio broadcasting',
    name: 'Radio Broadcasting'
  }, {
    id: 'radiology',
    name: 'Radiology'
  }, {
    id: 'real estate',
    name: 'Real Estate'
  }, {
    id: 'recording art',
    name: 'Recording Art'
  }, {
    id: 'recording arts',
    name: 'Recording Arts'
  }, {
    id: 'recreation',
    name: 'Recreation'
  }, {
    id: 'recreation administration',
    name: 'Recreation Administration'
  }, {
    id: 'regional planning',
    name: 'Regional Planning'
  }, {
    id: 'religious education',
    name: 'Religious Education'
  }, {
    id: 'religious studies',
    name: 'Religious Studies'
  }, {
    id: 'retail',
    name: 'Retail'
  }, {
    id: 'rhetoric',
    name: 'Rhetoric'
  }, {
    id: 'robotics',
    name: 'Robotics'
  }, {
    id: 'russian',
    name: 'Russian'
  }, {
    id: 'russian culture',
    name: 'Russian Culture'
  }, {
    id: 'russian language',
    name: 'Russian Language'
  }, {
    id: 'russian language and culture',
    name: 'Russian Language and Culture'
  }, {
    id: 'russian language and literature',
    name: 'Russian Language and Literature'
  }, {
    id: 'russian language studies',
    name: 'Russian Language Studies'
  }, {
    id: 'russian languages',
    name: 'Russian Languages'
  }, {
    id: 'russian literature',
    name: 'Russian Literature'
  }, {
    id: 'russian literature and culture',
    name: 'Russian Literature and Culture'
  }, {
    id: 'russian studies',
    name: 'Russian Studies'
  }, {
    id: 'scandinavian',
    name: 'Scandinavian'
  }, {
    id: 'scandinavian culture',
    name: 'Scandinavian Culture'
  }, {
    id: 'scandinavian language',
    name: 'Scandinavian Language'
  }, {
    id: 'scandinavian language and culture',
    name: 'Scandinavian Language and Culture'
  }, {
    id: 'scandinavian language and literature',
    name: 'Scandinavian Language and Literature'
  }, {
    id: 'scandinavian language studies',
    name: 'Scandinavian Language Studies'
  }, {
    id: 'scandinavian languages',
    name: 'Scandinavian Languages'
  }, {
    id: 'scandinavian literature',
    name: 'Scandinavian Literature'
  }, {
    id: 'scandinavian literature and culture',
    name: 'Scandinavian Literature and Culture'
  }, {
    id: 'scandinavian studies',
    name: 'Scandinavian Studies'
  }, {
    id: 'school student counseling',
    name: 'School Student Counseling'
  }, {
    id: 'science information',
    name: 'Science Information'
  }, {
    id: 'science tech',
    name: 'Science Tech'
  }, {
    id: 'science tech and society',
    name: 'Science Tech and Society'
  }, {
    id: 'screen writing',
    name: 'Screen Writing'
  }, {
    id: 'screenwriting',
    name: 'Screenwriting'
  }, {
    id: 'sculpture',
    name: 'Sculpture'
  }, {
    id: 'secondary teacher education',
    name: 'Secondary Teacher Education'
  }, {
    id: 'semiconductor manufacturing',
    name: 'Semiconductor Manufacturing'
  }, {
    id: 'serbian',
    name: 'Serbian'
  }, {
    id: 'serbian culture',
    name: 'Serbian Culture'
  }, {
    id: 'serbian language',
    name: 'Serbian Language'
  }, {
    id: 'serbian language and culture',
    name: 'Serbian Language and Culture'
  }, {
    id: 'serbian language and literature',
    name: 'Serbian Language and Literature'
  }, {
    id: 'serbian language studies',
    name: 'Serbian Language Studies'
  }, {
    id: 'serbian languages',
    name: 'Serbian Languages'
  }, {
    id: 'serbian literature',
    name: 'Serbian Literature'
  }, {
    id: 'serbian studies',
    name: 'Serbian Studies'
  }, {
    id: 'slavic culture',
    name: 'Slavic Culture'
  }, {
    id: 'slavic language',
    name: 'Slavic Language'
  }, {
    id: 'slavic language and culture',
    name: 'Slavic Language and Culture'
  }, {
    id: 'slavic language and literature',
    name: 'Slavic Language and Literature'
  }, {
    id: 'slavic language studies',
    name: 'Slavic Language Studies'
  }, {
    id: 'slavic languages',
    name: 'Slavic Languages'
  }, {
    id: 'slavic literature',
    name: 'Slavic Literature'
  }, {
    id: 'slavic literature and culture',
    name: 'Slavic Literature and Culture'
  }, {
    id: 'slavic studies',
    name: 'Slavic Studies'
  }, {
    id: 'social psychology',
    name: 'Social Psychology'
  }, {
    id: 'social science',
    name: 'Social Science'
  }, {
    id: 'social services',
    name: 'Social Services'
  }, {
    id: 'social studies',
    name: 'Social Studies'
  }, {
    id: 'social work',
    name: 'Social Work'
  }, {
    id: 'sociology',
    name: 'Sociology'
  }, {
    id: 'software development',
    name: 'Software Development'
  }, {
    id: 'software engineering',
    name: 'Software Engineering'
  }, {
    id: 'soil science',
    name: 'Soil Science'
  }, {
    id: 'sommelier',
    name: 'Sommelier'
  }, {
    id: 'spanish',
    name: 'Spanish'
  }, {
    id: 'spanish culture',
    name: 'Spanish Culture'
  }, {
    id: 'spanish language',
    name: 'Spanish Language'
  }, {
    id: 'spanish language and culture',
    name: 'Spanish Language and Culture'
  }, {
    id: 'spanish language and literature',
    name: 'Spanish Language and Literature'
  }, {
    id: 'spanish language studies',
    name: 'Spanish Language Studies'
  }, {
    id: 'spanish languages',
    name: 'Spanish Languages'
  }, {
    id: 'spanish literature',
    name: 'Spanish Literature'
  }, {
    id: 'spanish literature and culture',
    name: 'Spanish Literature and Culture'
  }, {
    id: 'spanish studies',
    name: 'Spanish Studies'
  }, {
    id: 'special education',
    name: 'Special Education'
  }, {
    id: 'special needs education',
    name: 'Special Needs Education'
  }, {
    id: 'speech and hearing science',
    name: 'Speech and Hearing Science'
  }, {
    id: 'speech communications',
    name: 'Speech Communications'
  }, {
    id: 'speech language pathology',
    name: 'Speech Language Pathology'
  }, {
    id: 'speech pathology',
    name: 'Speech Pathology'
  }, {
    id: 'speech science',
    name: 'Speech Science'
  }, {
    id: 'sport administration',
    name: 'Sport Administration'
  }, {
    id: 'sport communications',
    name: 'Sport Communications'
  }, {
    id: 'sport management',
    name: 'Sport Management'
  }, {
    id: 'sport philosophy',
    name: 'Sport Philosophy'
  }, {
    id: 'sport psychology',
    name: 'Sport Psychology'
  }, {
    id: 'sports and fitness',
    name: 'Sports and Fitness'
  }, {
    id: 'sports management',
    name: 'Sports Management'
  }, {
    id: 'statistics',
    name: 'Statistics'
  }, {
    id: 'statistics and decision science',
    name: 'Statistics and Decision Science'
  }, {
    id: 'stringed instruments',
    name: 'Stringed Instruments'
  }, {
    id: 'studio art',
    name: 'Studio Art'
  }, {
    id: 'studio arts',
    name: 'Studio Arts'
  }, {
    id: 'supply chain management',
    name: 'Supply Chain Management'
  }, {
    id: 'sustainability',
    name: 'Sustainability'
  }, {
    id: 'sustainability management',
    name: 'Sustainability Management'
  }, {
    id: 'sustainability studies',
    name: 'Sustainability Studies'
  }, {
    id: 'swedish',
    name: 'Swedish'
  }, {
    id: 'swedish culture',
    name: 'Swedish Culture'
  }, {
    id: 'swedish language',
    name: 'Swedish Language'
  }, {
    id: 'swedish language and culture',
    name: 'Swedish Language and Culture'
  }, {
    id: 'swedish language and literature',
    name: 'Swedish Language and Literature'
  }, {
    id: 'swedish language studies',
    name: 'Swedish Language Studies'
  }, {
    id: 'swedish languages',
    name: 'Swedish Languages'
  }, {
    id: 'swedish literature',
    name: 'Swedish Literature'
  }, {
    id: 'swedish studies',
    name: 'Swedish Studies'
  }, {
    id: 'talmudic studies',
    name: 'Talmudic Studies'
  }, {
    id: 'taxidermy',
    name: 'Taxidermy'
  }, {
    id: 'teacher education',
    name: 'Teacher Education'
  }, {
    id: 'teaching',
    name: 'Teaching'
  }, {
    id: 'telecom',
    name: 'Telecom'
  }, {
    id: 'telecom and electronics',
    name: 'Telecom and Electronics'
  }, {
    id: 'telecommunications',
    name: 'Telecommunications'
  }, {
    id: 'television',
    name: 'Television'
  }, {
    id: 'television broadcasting',
    name: 'Television Broadcasting'
  }, {
    id: 'theater',
    name: 'Theater'
  }, {
    id: 'theater art',
    name: 'Theater Art'
  }, {
    id: 'theater arts',
    name: 'Theater Arts'
  }, {
    id: 'theatre',
    name: 'Theatre'
  }, {
    id: 'theological studies',
    name: 'Theological Studies'
  }, {
    id: 'theology',
    name: 'Theology'
  }, {
    id: 'theology and religious vocations',
    name: 'Theology and Religious Vocations'
  }, {
    id: 'tibetan',
    name: 'Tibetan'
  }, {
    id: 'tibetan culture',
    name: 'Tibetan Culture'
  }, {
    id: 'tibetan language',
    name: 'Tibetan Language'
  }, {
    id: 'tibetan language and culture',
    name: 'Tibetan Language and Culture'
  }, {
    id: 'tibetan language and literature',
    name: 'Tibetan Language and Literature'
  }, {
    id: 'tibetan language studies',
    name: 'Tibetan Language Studies'
  }, {
    id: 'tibetan languages',
    name: 'Tibetan Languages'
  }, {
    id: 'tibetan literature',
    name: 'Tibetan Literature'
  }, {
    id: 'tibetan studies',
    name: 'Tibetan Studies'
  }, {
    id: 'tourism',
    name: 'Tourism'
  }, {
    id: 'tourism management',
    name: 'Tourism Management'
  }, {
    id: 'toxicology',
    name: 'Toxicology'
  }, {
    id: 'travel',
    name: 'Travel'
  }, {
    id: 'travel and tourism management',
    name: 'Travel and Tourism Management'
  }, {
    id: 'travel services management',
    name: 'Travel Services Management'
  }, {
    id: 'trial advocacy',
    name: 'Trial Advocacy'
  }, {
    id: 'turfgrass science',
    name: 'Turfgrass Science'
  }, {
    id: 'turkish',
    name: 'Turkish'
  }, {
    id: 'turkish culture',
    name: 'Turkish Culture'
  }, {
    id: 'turkish language',
    name: 'Turkish Language'
  }, {
    id: 'turkish language and culture',
    name: 'Turkish Language and Culture'
  }, {
    id: 'turkish language and literature',
    name: 'Turkish Language and Literature'
  }, {
    id: 'turkish language studies',
    name: 'Turkish Language Studies'
  }, {
    id: 'turkish languages',
    name: 'Turkish Languages'
  }, {
    id: 'turkish literature',
    name: 'Turkish Literature'
  }, {
    id: 'turkish literature and culture',
    name: 'Turkish Literature and Culture'
  }, {
    id: 'turkish studies',
    name: 'Turkish Studies'
  }, {
    id: 'ukrainian',
    name: 'Ukrainian'
  }, {
    id: 'ukrainian culture',
    name: 'Ukrainian Culture'
  }, {
    id: 'ukrainian language',
    name: 'Ukrainian Language'
  }, {
    id: 'ukrainian language and culture',
    name: 'Ukrainian Language and Culture'
  }, {
    id: 'ukrainian language and literature',
    name: 'Ukrainian Language and Literature'
  }, {
    id: 'ukrainian language studies',
    name: 'Ukrainian Language Studies'
  }, {
    id: 'ukrainian languages',
    name: 'Ukrainian Languages'
  }, {
    id: 'ukrainian literature',
    name: 'Ukrainian Literature'
  }, {
    id: 'ukrainian studies',
    name: 'Ukrainian Studies'
  }, {
    id: 'united states history',
    name: 'United States History'
  }, {
    id: 'urban planning',
    name: 'Urban Planning'
  }, {
    id: 'urban schooling',
    name: 'Urban Schooling'
  }, {
    id: 'urban social studies',
    name: 'Urban Social Studies'
  }, {
    id: 'urban sociology',
    name: 'Urban Sociology'
  }, {
    id: 'urban studies',
    name: 'Urban Studies'
  }, {
    id: 'veterinary pathology',
    name: 'Veterinary Pathology'
  }, {
    id: 'veterinary science',
    name: 'Veterinary Science'
  }, {
    id: 'veterinary studies',
    name: 'Veterinary Studies'
  }, {
    id: 'vietnamese',
    name: 'Vietnamese'
  }, {
    id: 'vietnamese culture',
    name: 'Vietnamese Culture'
  }, {
    id: 'vietnamese language',
    name: 'Vietnamese Language'
  }, {
    id: 'vietnamese language and culture',
    name: 'Vietnamese Language and Culture'
  }, {
    id: 'vietnamese language and literature',
    name: 'Vietnamese Language and Literature'
  }, {
    id: 'vietnamese language studies',
    name: 'Vietnamese Language Studies'
  }, {
    id: 'vietnamese languages',
    name: 'Vietnamese Languages'
  }, {
    id: 'vietnamese literature',
    name: 'Vietnamese Literature'
  }, {
    id: 'vietnamese literature and culture',
    name: 'Vietnamese Literature and Culture'
  }, {
    id: 'vietnamese studies',
    name: 'Vietnamese Studies'
  }, {
    id: 'virology',
    name: 'Virology'
  }, {
    id: 'visual',
    name: 'Visual'
  }, {
    id: 'visual and performing art',
    name: 'Visual and Performing Art'
  }, {
    id: 'visual art',
    name: 'Visual Art'
  }, {
    id: 'visual communications',
    name: 'Visual Communications'
  }, {
    id: 'visual effects',
    name: 'Visual Effects'
  }, {
    id: 'viticulture',
    name: 'Viticulture'
  }, {
    id: 'vocal performance',
    name: 'Vocal Performance'
  }, {
    id: 'vocational counseling',
    name: 'Vocational Counseling'
  }, {
    id: 'vocational rehabilitation',
    name: 'Vocational Rehabilitation'
  }, {
    id: 'voice',
    name: 'Voice'
  }, {
    id: 'voice and opera',
    name: 'Voice and Opera'
  }, {
    id: 'web development',
    name: 'Web Development'
  }, {
    id: 'welding',
    name: 'Welding'
  }, {
    id: 'welding engineering',
    name: 'Welding Engineering'
  }, {
    id: 'wellness management',
    name: 'Wellness Management'
  }, {
    id: 'wildlife and fisheries science',
    name: 'Wildlife and Fisheries Science'
  }, {
    id: 'wildlife and fishery science',
    name: 'Wildlife and Fishery Science'
  }, {
    id: 'wildlife science',
    name: 'Wildlife Science'
  }, {
    id: 'wildlife tech',
    name: 'Wildlife Tech'
  }, {
    id: 'womens studies',
    name: 'Womens Studies'
  }, {
    id: 'writing',
    name: 'Writing'
  }, {
    id: 'writing and culture',
    name: 'Writing and Culture'
  }, {
    id: 'zoology',
    name: 'Zoology'
  }];
  var industries = [{
    "id": "accounting",
    "name": "Accounting"
  }, {
    "id": "airlines/aviation",
    "name": "Airlines/aviation"
  }, {
    "id": "alternative dispute resolution",
    "name": "Alternative Dispute Resolution"
  }, {
    "id": "alternative medicine",
    "name": "Alternative Medicine"
  }, {
    "id": "animation",
    "name": "Animation"
  }, {
    "id": "apparel & fashion",
    "name": "Apparel & Fashion"
  }, {
    "id": "architecture & planning",
    "name": "Architecture & Planning"
  }, {
    "id": "arts and crafts",
    "name": "Arts and Crafts"
  }, {
    "id": "automotive",
    "name": "Automotive"
  }, {
    "id": "aviation & aerospace",
    "name": "Aviation & Aerospace"
  }, {
    "id": "banking",
    "name": "Banking"
  }, {
    "id": "biotechnology",
    "name": "Biotechnology"
  }, {
    "id": "broadcast media",
    "name": "Broadcast Media"
  }, {
    "id": "building materials",
    "name": "Building Materials"
  }, {
    "id": "business supplies and equipment",
    "name": "Business Supplies and Equipment"
  }, {
    "id": "capital markets",
    "name": "Capital Markets"
  }, {
    "id": "chemicals",
    "name": "Chemicals"
  }, {
    "id": "civic & social organization",
    "name": "Civic & Social Organization"
  }, {
    "id": "civil engineering",
    "name": "Civil Engineering"
  }, {
    "id": "commercial real estate",
    "name": "Commercial Real Estate"
  }, {
    "id": "computer & network security",
    "name": "Computer & Network Security"
  }, {
    "id": "computer games",
    "name": "Computer Games"
  }, {
    "id": "computer hardware",
    "name": "Computer Hardware"
  }, {
    "id": "computer networking",
    "name": "Computer Networking"
  }, {
    "id": "computer software",
    "name": "Computer Software"
  }, {
    "id": "construction",
    "name": "Construction"
  }, {
    "id": "consumer electronics",
    "name": "Consumer Electronics"
  }, {
    "id": "consumer goods",
    "name": "Consumer Goods"
  }, {
    "id": "consumer services",
    "name": "Consumer Services"
  }, {
    "id": "cosmetics",
    "name": "Cosmetics"
  }, {
    "id": "dairy",
    "name": "Dairy"
  }, {
    "id": "defense & space",
    "name": "Defense & Space"
  }, {
    "id": "design",
    "name": "Design"
  }, {
    "id": "e-learning",
    "name": "E Learning"
  }, {
    "id": "education management",
    "name": "Education Management"
  }, {
    "id": "electrical/electronic manufacturing",
    "name": "Electrical/electronic Manufacturing"
  }, {
    "id": "entertainment",
    "name": "Entertainment"
  }, {
    "id": "environmental services",
    "name": "Environmental Services"
  }, {
    "id": "events services",
    "name": "Events Services"
  }, {
    "id": "executive office",
    "name": "Executive Office"
  }, {
    "id": "facilities services",
    "name": "Facilities Services"
  }, {
    "id": "farming",
    "name": "Farming"
  }, {
    "id": "financial services",
    "name": "Financial Services"
  }, {
    "id": "fine art",
    "name": "Fine Art"
  }, {
    "id": "fishery",
    "name": "Fishery"
  }, {
    "id": "food & beverages",
    "name": "Food & Beverages"
  }, {
    "id": "food production",
    "name": "Food Production"
  }, {
    "id": "fund-raising",
    "name": "Fund Raising"
  }, {
    "id": "furniture",
    "name": "Furniture"
  }, {
    "id": "gambling & casinos",
    "name": "Gambling & Casinos"
  }, {
    "id": "government administration",
    "name": "Government Administration"
  }, {
    "id": "government relations",
    "name": "Government Relations"
  }, {
    "id": "graphic design",
    "name": "Graphic Design"
  }, {
    "id": "higher education",
    "name": "Higher Education"
  }, {
    "id": "hospital & health care",
    "name": "Hospital & Health Care"
  }, {
    "id": "hospitality",
    "name": "Hospitality"
  }, {
    "id": "human resources",
    "name": "Human Resources"
  }, {
    "id": "import and export",
    "name": "Import and Export"
  }, {
    "id": "individual & family services",
    "name": "Individual & Family Services"
  }, {
    "id": "industrial automation",
    "name": "Industrial Automation"
  }, {
    "id": "information services",
    "name": "Information Services"
  }, {
    "id": "information technology and services",
    "name": "Information Technology and Services"
  }, {
    "id": "insurance",
    "name": "Insurance"
  }, {
    "id": "international affairs",
    "name": "International Affairs"
  }, {
    "id": "international trade and development",
    "name": "International Trade and Development"
  }, {
    "id": "internet",
    "name": "Internet"
  }, {
    "id": "investment banking",
    "name": "Investment Banking"
  }, {
    "id": "investment management",
    "name": "Investment Management"
  }, {
    "id": "judiciary",
    "name": "Judiciary"
  }, {
    "id": "law enforcement",
    "name": "Law Enforcement"
  }, {
    "id": "law practice",
    "name": "Law Practice"
  }, {
    "id": "legal services",
    "name": "Legal Services"
  }, {
    "id": "legislative office",
    "name": "Legislative Office"
  }, {
    "id": "libraries",
    "name": "Libraries"
  }, {
    "id": "logistics and supply chain",
    "name": "Logistics and Supply Chain"
  }, {
    "id": "luxury goods & jewelry",
    "name": "Luxury Goods & Jewelry"
  }, {
    "id": "machinery",
    "name": "Machinery"
  }, {
    "id": "management consulting",
    "name": "Management Consulting"
  }, {
    "id": "maritime",
    "name": "Maritime"
  }, {
    "id": "market research",
    "name": "Market Research"
  }, {
    "id": "marketing and advertising",
    "name": "Marketing and Advertising"
  }, {
    "id": "mechanical or industrial engineering",
    "name": "Mechanical or Industrial Engineering"
  }, {
    "id": "media production",
    "name": "Media Production"
  }, {
    "id": "medical devices",
    "name": "Medical Devices"
  }, {
    "id": "medical practice",
    "name": "Medical Practice"
  }, {
    "id": "mental health care",
    "name": "Mental Health Care"
  }, {
    "id": "military",
    "name": "Military"
  }, {
    "id": "mining & metals",
    "name": "Mining & Metals"
  }, {
    "id": "motion pictures and film",
    "name": "Motion Pictures and Film"
  }, {
    "id": "museums and institutions",
    "name": "Museums and Institutions"
  }, {
    "id": "music",
    "name": "Music"
  }, {
    "id": "nanotechnology",
    "name": "Nanotechnology"
  }, {
    "id": "newspapers",
    "name": "Newspapers"
  }, {
    "id": "non-profit organization management",
    "name": "Non-profit Organization Management"
  }, {
    "id": "oil & energy",
    "name": "Oil & Energy"
  }, {
    "id": "online media",
    "name": "Online Media"
  }, {
    "id": "outsourcing/offshoring",
    "name": "Outsourcing/offshoring"
  }, {
    "id": "package/freight delivery",
    "name": "Package/freight Delivery"
  }, {
    "id": "packaging and containers",
    "name": "Packaging and Containers"
  }, {
    "id": "paper & forest products",
    "name": "Paper & Forest Products"
  }, {
    "id": "performing arts",
    "name": "Performing Arts"
  }, {
    "id": "pharmaceuticals",
    "name": "Pharmaceuticals"
  }, {
    "id": "philanthropy",
    "name": "Philanthropy"
  }, {
    "id": "photography",
    "name": "Photography"
  }, {
    "id": "plastics",
    "name": "Plastics"
  }, {
    "id": "political organization",
    "name": "Political Organization"
  }, {
    "id": "primary/secondary education",
    "name": "Primary/secondary Education"
  }, {
    "id": "printing",
    "name": "Printing"
  }, {
    "id": "professional training & coaching",
    "name": "Professional Training & Coaching"
  }, {
    "id": "program development",
    "name": "Program Development"
  }, {
    "id": "public policy",
    "name": "Public Policy"
  }, {
    "id": "public relations and communications",
    "name": "Public Relations and Communications"
  }, {
    "id": "public safety",
    "name": "Public Safety"
  }, {
    "id": "publishing",
    "name": "Publishing"
  }, {
    "id": "railroad manufacture",
    "name": "Railroad Manufacture"
  }, {
    "id": "ranching",
    "name": "Ranching"
  }, {
    "id": "real estate",
    "name": "Real Estate"
  }, {
    "id": "recreational facilities and services",
    "name": "Recreational Facilities and Services"
  }, {
    "id": "religious institutions",
    "name": "Religious Institutions"
  }, {
    "id": "renewables & environment",
    "name": "Renewables & Environment"
  }, {
    "id": "research",
    "name": "Research"
  }, {
    "id": "restaurants",
    "name": "Restaurants"
  }, {
    "id": "retail",
    "name": "Retail"
  }, {
    "id": "security and investigations",
    "name": "Security and Investigations"
  }, {
    "id": "semiconductors",
    "name": "Semiconductors"
  }, {
    "id": "shipbuilding",
    "name": "Shipbuilding"
  }, {
    "id": "sporting goods",
    "name": "Sporting Goods"
  }, {
    "id": "sports",
    "name": "Sports"
  }, {
    "id": "staffing and recruiting",
    "name": "Staffing and Recruiting"
  }, {
    "id": "supermarkets",
    "name": "Supermarkets"
  }, {
    "id": "telecommunications",
    "name": "Telecommunications"
  }, {
    "id": "textiles",
    "name": "Textiles"
  }, {
    "id": "think tanks",
    "name": "Think Tanks"
  }, {
    "id": "tobacco",
    "name": "Tobacco"
  }, {
    "id": "translation and localization",
    "name": "Translation and Localization"
  }, {
    "id": "transportation/trucking/railroad",
    "name": "Transportation/trucking/railroad"
  }, {
    "id": "utilities",
    "name": "Utilities"
  }, {
    "id": "venture capital & private equity",
    "name": "Venture Capital & Private Equity"
  }, {
    "id": "veterinary",
    "name": "Veterinary"
  }, {
    "id": "warehousing",
    "name": "Warehousing"
  }, {
    "id": "wholesale",
    "name": "Wholesale"
  }, {
    "id": "wine and spirits",
    "name": "Wine and Spirits"
  }, {
    "id": "wireless",
    "name": "Wireless"
  }, {
    "id": "writing and editing",
    "name": "Writing and Editing"
  }];
  return {
    degrees: degrees,
    majors: majors,
    industries: industries
  };
}]);
'use strict';

angular.module('BaseApp').factory('CandidatesService', ['AppClient', 'SharedData', 'RESTClient', 'CompanyService', 'PositionsService', 'dialog', 'ModalService', '$q', '$rootScope', function (AppClient, SharedData, RESTClient, CompanyService, PositionsService, dialog, ModalService, $q, $rootScope) {
  var company = SharedData.activeCompany.company;
  var user = SharedData.user;
  var candidates = [];
  var orphanes = false;
  var recentlyViewed = [];
  var pipeline = [];
  var filterIds = [];
  var cache = {};
  var dateRangeMapping = {
    '30days': 'last30Days',
    '7days': 'last7Days',
    lastweek: 'lastWeek',
    thisweek: 'thisWeek',
    yesterday: 'yesterday',
    today: 'today'
  };
  var logging = false;
  $rootScope.$watch(function () {
    return orphanes;
  }, function watchCallback(newValue, oldValue) {
    $rootScope.$broadcast('orphanes:update', newValue);
  });

  var getCandidateById = function getCandidateById(candidateId) {
    return candidates.find(function (candidate) {
      return candidate._id === candidateId;
    });
  };

  var getIndexById = function getIndexById(candidateId) {
    if (candidates.length === 0) return -1;
    return candidates.findIndex(function (candidate) {
      return candidate._id === candidateId;
    });
  };

  var normalizeFilter = function normalizeFilter(filter) {
    // this function will normalize filters between pipeline and candidates view
    //console.log(filter);
    var normalizedFilter = {}; //if (filter.hasOwnProperty('create'))

    if (filter.hasOwnProperty('assigned')) {
      if (filter.assigned.id !== 'any') normalizedFilter.assigned_to = filter.assigned.id;
      delete filter.assigned;
    }

    if (filter.hasOwnProperty('creation_date') && filter.creation_date.date_range === 'all') delete filter.creation_date;

    if (filter.hasOwnProperty('date_range')) {
      if (filter.date_range.id !== 'all' && filter.date_range.id !== 'alltime') {
        normalizedFilter.creation_date = {
          date_range: dateRangeMapping[filter.date_range.id]
        };
      }

      delete filter.date_range;
    }

    if (filter.hasOwnProperty('filter_text')) {
      if (filter.filter_text.length > 0) {
        //filter.filter_text = filter.filter_text.toLowerCase().match(/(?:[^\s"]+|"[^"]*")+/g);
        filter.filter_text = filter.filter_text.toLowerCase().match(/\w+|"(?:\\"|[^"])+"/g);
      } else {
        delete filter.filter_text;
      }
    }

    if (filter.hasOwnProperty('candidate_type') && filter.candidate_type === 'all') delete filter.candidate_type;
    return Object.assign({}, filter, normalizedFilter);
  };

  var filterCandidates = function filterCandidates(filter, candidate) {
    if (Object.keys(filter).length === 0) return true;
    var keep = false;

    for (var type in filter) {
      if (filters[type]) {
        keep = filters[type](filter[type], candidate);
        if (logging) console.log("".concat(candidate.name, " passed ").concat(type, ": ").concat(keep));
        if (!keep) break;
      } else {
        console.log("*** unable to find filters.".concat(type, " ***"));
        keep = true;
      }
    }

    if (logging) console.log("Keeping ".concat(candidate.name, ": ").concat(keep, "\n-----"));
    return keep;
  };

  var filters = {
    creation_date: function creation_date(filter, candidate) {
      var keep = false;
      var creation_date = moment(candidate.creation_date);

      switch (filter.date_range) {
        case 'twoWeeks':
          keep = creation_date.isAfter(moment().subtract(14, 'days'));
          break;

        case 'thisMonth':
          keep = creation_date.isAfter(moment().startOf('month'));
          break;

        case 'lastMonth':
          keep = creation_date.isAfter(moment().subtract(1, 'month').startOf('month')) && creation_date.isBefore(moment().startOf('month'));
          break;

        case 'last30Days':
          keep = creation_date.isAfter(moment().subtract(30, 'days'));
          break;

        case 'last90Days':
          keep = creation_date.isAfter(moment().subtract(90, 'days'));
          break;

        case 'last180Days':
          keep = creation_date.isAfter(moment().subtract(180, 'days'));
          break;

        case 'all':
          keep = true;
          break;
        // deprecated

        case 'last7Days':
          keep = creation_date.isAfter(moment().subtract(7, 'days'));
          break;

        case 'lastWeek':
          keep = creation_date.isAfter(moment().subtract(1, 'weeks').startOf('week')) && creation_date.isBefore(moment().startOf('week'));
          break;

        case 'thisWeek':
          keep = creation_date.isAfter(moment().startOf('week'));
          break;

        case 'yesterday':
          keep = creation_date.isAfter(moment().subtract(1, 'days').startOf('day')) && creation_date.isBefore(moment().subtract(1, 'days').endOf('day'));
          break;

        case 'today':
          keep = creation_date.isAfter(moment().startOf('day'));
          break;

        default:
          keep = true;
          break;
      }

      return keep;
    },
    pipeline: function pipeline(_pipeline, candidate) {
      var keep = false;
      keep = _pipeline[candidate.stage.id];
      return keep;
    },
    assigned_to: function assigned_to(filter, candidate) {
      var keep = false;
      keep = candidate.hasOwnProperty('assigned_to') && candidate.assigned_to._id === filter;
      return keep;
    },
    candidate_type: function candidate_type(filter, candidate) {
      var keep = false;

      switch (filter) {
        case 'mine':
          keep = candidate.hasOwnProperty('assigned_to') && candidate.assigned_to !== null && candidate.assigned_to._id === SharedData.user._id;
          break;

        case 'assigned':
          keep = candidate.hasOwnProperty('assigned_to') && candidate.assigned_to !== null;
          break;

        case 'unassigned':
          keep = !candidate.hasOwnProperty('assigned_to') || candidate.assigned_to === null;
          break;

        case 'starred':
          keep = candidate.starred_by.indexOf(SharedData.user._id) > -1;
          break;

        default:
          keep = true;
          break;
      }

      return keep;
    }
  };
  var page_size = 30;

  var filterByStage = function filterByStage(stage, candidate) {
    var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : candidate.status;
    return status === stage;
  };

  var filterByOrphaned = function filterByOrphaned(candidate) {
    return candidate.orphaned;
  };

  var scoreValues = {
    very_poor: -2,
    poor: -1,
    neutral: 0,
    good: 1,
    very_good: 2
  };

  var getDisplayScore = function getDisplayScore(candidate) {
    var score = null;

    if (company.is_admin || user.positions[candidate.position_id].is_admin) {
      score = candidate.overall_score.score;
    } else {
      Object.keys(scoreValues).forEach(function (value) {
        if (candidate.overall_score[value].indexOf(user._id) > -1) {
          score = scoreValues[value];
        }
      });
    }

    if (score || score === 0) {
      score = {
        value: score,
        class: score > 0 ? 'good' : score < 0 ? 'poor' : 'neutral'
      };
    }

    return score;
  };

  var bulkCandidateStatusUpdated = function bulkCandidateStatusUpdated(candidateIds, stage) {
    var stageOld, stageNew, position_id;
    candidateIds.forEach(function (candidateId) {
      var index = getIndexById(candidateId);

      if (index === -1) {
        return;
      }

      var candidate = candidates[index];

      if (!position_id) {
        stageOld = candidate.orphaned ? 'orphaned' : candidate.status;
        stageNew = stage.id;
        if (typeof stageOld === 'undefined') stageOld = 'orphaned';
        position_id = candidate.position_id;
      } // updated locally so exit


      if (stageOld === stageNew) return;
      if (logging) console.log("".concat(candidate.name, " moved from ").concat(candidate.stage.name, " to ").concat(stage.name));
      candidate.stage = stage;
      candidate.status = stage.id;
      candidate.updated_date = new Date();
      candidate.stale = false;
      candidate.orphaned = false; // resort candidates

      candidates.unshift(candidates.splice(index, 1)[0]);
      $rootScope.$broadcast('candidate:' + candidateId);
    });
    CandidatesStore.local.checkForOrphanes(); // tell which stages to refresh

    $rootScope.$broadcast('pipeline:' + position_id + ':' + stageOld);
    $rootScope.$broadcast('pipeline:' + position_id + ':' + stageNew);
  };

  var candidateStatusUpdated = function candidateStatusUpdated(candidateId, stage, refresh) {
    //var candidate = getCandidateById(candidateId);
    var index = getIndexById(candidateId);

    if (index === -1) {
      console.log('candidate not found');
      return;
    }

    var candidate = candidates[index];
    var stageOld = candidate.orphaned ? 'orphaned' : candidate.status ? candidate.status : candidate.stage.id;
    var stageNew = stage.id;
    if (typeof stageOld === 'undefined') stageOld = 'orphaned'; // updated locally so exit

    if (stageOld === stageNew) return;
    if (logging) console.log("".concat(candidate.name, " moved from ").concat(candidate.stage.name, " to ").concat(stage.name));
    candidate.stage = stage;
    candidate.status = stage.id; //2018-03-01T18:37:51.406Z

    candidate.updated_date = moment.tz().format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    candidate.stale = false;
    candidate.orphaned = false;
    CandidatesStore.local.checkForOrphanes(); // resort candidates

    candidates.unshift(candidates.splice(index, 1)[0]); // tell which stages to refresh

    $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + stageOld);
    $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + stageNew);
    $rootScope.$broadcast('candidate:' + candidateId);
    /*if (refresh) {
        // refresh candidate grid
        $rootScope.$broadcast('candidates:refresh');
    } else {
        $rootScope.$broadcast('candidates:stale');
    }*/
  };

  var CandidatesStore = {
    local: {
      hasOrphanes: function hasOrphanes() {
        return orphanes;
      },
      checkForOrphanes: function checkForOrphanes() {
        orphanes = candidates.filter(function (candidate) {
          return candidate.orphaned;
        }).length > 0;
      },
      getByCandidateIds: function getByCandidateIds() {
        return candidates.filter(function (candidate) {
          return filterIds.indexOf(candidate._id) > -1;
        });
      },
      getByStage: function getByStage(stage, filter, options) {
        options = options || {};
        var stageFilter = stage === 'orphaned' ? filterByOrphaned : filterByStage.bind(this, stage);
        filter = normalizeFilter(angular.copy(filter)); //var candidatesByStage = candidates.filter(filterCandidates.bind(this, filter)).filter(stageFilter);

        var candidatesByStage = candidates.filter(function (candidate) {
          return filterIds.indexOf(candidate._id) > -1;
        }).filter(stageFilter);
        cache[stage] = candidatesByStage;
        return {
          count: candidatesByStage.length,
          data: options.all ? candidatesByStage : candidatesByStage.slice(0, page_size)
        };
      },
      getMoreByStage: function getMoreByStage(stage, count, filter) {
        var stageFilter = stage === 'orphaned' ? filterByOrphaned : filterByStage;
        var candidatesByStage = null;
        filter = normalizeFilter(angular.copy(filter));

        if (cache.hasOwnProperty(stage)) {
          if (logging) console.log("getting ".concat(count, " to ").concat(count + page_size, " from cache"));
          candidatesByStage = cache[stage].slice(count, count + page_size);
        } else {
          if (logging) console.log("getting ".concat(count, " to ").concat(count + page_size, " from master candidates")); //candidatesByStage = candidates.filter(filterCandidates.bind(this, filter)).filter(stageFilter).slice(count, count+page_size);

          candidatesByStage = candidates.filter(function (candidate) {
            return filterIds.indexOf(candidate._id) > -1;
          }).filter(stageFilter).slice(count, count + page_size);
          ;
        }

        return candidatesByStage;
      },
      getCandidate: function getCandidate(candidateId) {
        return getCandidateById(candidateId);
      },
      updateStarredBy: function updateStarredBy(candidateId, starredBy) {
        var candidate = getCandidateById(candidateId);
        candidate.starred_by = starredBy;
        $rootScope.$broadcast('candidate:' + candidate._id);
      },
      getPendingActivities: function getPendingActivities(activities) {
        if (!activities || !Array.isArray(activities)) {
          return [];
        }

        return activities.filter(function (activity) {
          if (activity.object.state === 'pending') {
            if (activity.type.indexOf('pending_') === -1) {
              activity.type = 'pending_' + activity.type;
            }

            return activity;
          }
        });
      },
      getRecentlyViewed: function getRecentlyViewed() {
        return recentlyViewed;
      },
      setRecentlyViewed: function setRecentlyViewed(candidate) {
        var index = recentlyViewed.findIndex(function (recent) {
          return recent._id === candidate._id;
        });

        if (index > -1) {
          recentlyViewed.splice(index, 1);
        }

        recentlyViewed.unshift(candidate);
        recentlyViewed = recentlyViewed.slice(0, 10);
      },
      destroyCandidates: function destroyCandidates() {
        candidates.length = 0;
        orphanes = false;
      }
    },
    remote: {
      import: function _import(companyId, positionId, candidates) {
        var deferred = $q.defer();
        RESTClient.importCandidates(candidates, companyId, positionId, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      },
      forceDelayMessage: function forceDelayMessage(companyId, positionId, conversationId) {
        var deferred = $q.defer();
        RESTClient.forceDelayMessage(companyId, positionId, conversationId, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      },
      cancelDelayMessage: function cancelDelayMessage(companyId, positionId, conversationId) {
        var deferred = $q.defer();
        RESTClient.cancelDelayMessage(companyId, positionId, conversationId, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      },
      getCandidateById: function getCandidateById(positionId, candidateId) {
        var deferred = $q.defer();
        RESTClient.getCandidate(company._id, positionId, candidateId, function (error, candidate) {
          deferred.resolve(candidate);
        });
        return deferred.promise;
      },
      updateCandidateStatus: function updateCandidateStatus(candidate, stage, callback) {
        // return if same stage
        if (stage.id === candidate.status) return;

        if (!PositionsService.getters.isAdmin(candidate.position_id)) {
          dialog.alert({
            message: 'Sorry, you\'re not a hiring manager on this position.'
          });
          return false;
        }

        var settings_reasons = CompanyService.getters.settings('eeoc.reasons');
        var statusData = {
          status: stage.id
        };

        if ((stage.id === 'disqualified' || stage.type && stage.type.id === 'disqualified') && ['optional', 'required'].indexOf(settings_reasons.disposition) > -1) {
          ModalService.openCandidateMoveReason('disposition', candidate, stage).then(function (reason) {
            if (!reason && settings_reasons.disposition === 'required') return;

            if (reason) {
              statusData.reason = {
                type: 'disposition',
                _id: reason._id
              };
            }

            RESTClient.setCandidateStatus(company._id, candidate.position_id, candidate._id, statusData, function (error, result) {
              if (callback) callback(error, result);
            });
            candidateStatusUpdated(candidate._id, stage);
          });
        } else {
          RESTClient.setCandidateStatus(company._id, candidate.position_id, candidate._id, statusData, function (error, result) {
            if (callback) callback(error, result);
          });
          candidateStatusUpdated(candidate._id, stage);
        }
      },
      updateCandidatesGroupStatus: function updateCandidatesGroupStatus(candidates, position, stage, callback) {
        //if (stage.id === stageOld.id) return;
        if (!PositionsService.getters.isAdmin(position._id)) {
          dialog.alert({
            message: 'Sorry, you\'re not a hiring manager on this position.'
          });
          return false;
        }

        var positionId;

        if (candidates.length > 0) {
          positionId = candidates[0].position_id;
        }

        var settings_reasons = CompanyService.getters.settings('eeoc.reasons');
        var statusData = {
          status: stage.id
        };
        var candidateIds = candidates.reduce(function (acc, candidate) {
          acc.push(candidate._id);
          return acc;
        }, []);
        statusData.candidate_ids = candidateIds;

        if ((stage.id === 'disqualified' || stage.type && stage.type.id === 'disqualified') && ['optional', 'required'].indexOf(settings_reasons.disposition) > -1) {
          ModalService.openCandidateMoveReason('disposition', candidates, stage).then(function (reason) {
            if (!reason && settings_reasons.disposition === 'required') return;

            if (reason) {
              statusData.reason = {
                type: 'disposition',
                _id: reason._id
              };
            }

            RESTClient.setBulkCandidateStatus(company._id, positionId, statusData, function (error, result) {});
            bulkCandidateStatusUpdated(candidateIds, stage);
            /*candidates.forEach(candidate => {
                candidateStatusUpdated(candidate._id, stage);
            });*/

            if (callback) callback();
          });
        } else {
          RESTClient.setBulkCandidateStatus(company._id, positionId, statusData, function (error, result) {});
          bulkCandidateStatusUpdated(candidateIds, stage);
          /*candidates.forEach(candidate => {
              //RESTClient.setCandidateStatus(company._id, candidate.position_id, candidate._id, statusData, function (error, result)  {});
              candidateStatusUpdated(candidate._id, stage);
          });*/

          if (callback) callback();
        }
      },
      getCandidateScorecard: function getCandidateScorecard(positionId, candidateId) {
        var deferred = $q.defer();
        RESTClient.getCandidateScorecard(company._id, positionId, candidateId, function (error, result) {
          deferred.resolve(result);
        });
        return deferred.promise;
      }
    },

    /*
    // not currently in use
    */
    getCandidate: function getCandidate(positionId, candidateId) {
      var deferred = $q.defer();
      var index = getIndexById(candidateId);

      if (candidates[index].full) {
        if (logging) console.log("".concat(candidates[index].name, " retrieved from cache"));
        deferred.resolve(candidates[index]);
      } else {
        RESTClient.getCandidate(company._id, positionId, candidateId, function (error, result) {
          if (logging) console.log("".concat(result.name, " retrieved from server"));
          result.full = true;
          candidates[index] = result; //console.log(candidate);

          deferred.resolve(candidates[index]);
        });
      }

      return deferred.promise;
    },
    getCandidates: function getCandidates(positionId, pipeline) {
      pipeline = pipeline;
      var deferred = $q.defer();
      var orphaneFound = false;

      if (candidates.length > 0) {
        window.setTimeout(function () {
          deferred.resolve(candidates);
        });
      } else {
        RESTClient.getPipelineCandidates(company._id, positionId, '', function (error, result) {
          if (!result) {
            result = [];
          }

          result.forEach(function (candidate) {
            var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : candidate.status;
            var index = pipeline.indexOf(status);

            if (index === -1) {
              candidate.orphaned = true;
              orphaneFound = true;
            }
          });

          if (orphaneFound) {
            orphanes = true;
          }

          candidates = result;
          deferred.resolve(candidates);
        });
      }

      return deferred.promise;
    },
    getUserCandidates: function getUserCandidates(companyId, options) {
      if (logging) console.log('getting position user candidates');
      var deferred = $q.defer();
      options.ids = true;
      RESTClient.getUserCandidates(companyId, options, function (error, result) {
        if (options.skip) {
          filterIds = filterIds.concat(result.data);
        } else {
          filterIds = result.data;
        }

        deferred.resolve({
          total: result.total,
          data: candidates.filter(function (candidate) {
            return filterIds.indexOf(candidate._id) > -1;
          })
        });
      });
      return deferred.promise;
    },
    getFilteredCandidateIds: function getFilteredCandidateIds(options) {
      if (logging) console.log('getting position user candidates');
      var deferred = $q.defer();
      options.limit = 10000;
      options.ids = true;
      RESTClient.getUserCandidates(company._id, options, function (error, result) {
        filterIds = result;
        deferred.resolve();
      });
      return deferred.promise;
    },
    getFilteredCandidates: function getFilteredCandidates(filter) {
      filter = normalizeFilter(filter);
      return candidates.filter(filterCandidates.bind(this, filter));
    },
    getGroupedByStage: function getGroupedByStage(pipeline, filter) {
      var candidatesByStage = {};
      var status = null,
          index = -1,
          oneMonth = new Date().getTime() - 2592000000;
      filter = normalizeFilter(angular.copy(filter));
      var pipelineFlat = pipeline.map(function (stage) {
        return stage.id;
      }); //console.log(pipelineFlat);

      candidates.filter(filterCandidates.bind(this, filter)).forEach(function (candidate) {
        status = candidate.status;
        index = pipelineFlat.indexOf(status);

        if (index === -1) {
          status = 'orphaned';
          candidate.orphaned = true;
        }

        if (new Date(candidate.updated_date).getTime() < oneMonth) {
          candidate.stale = true;
        }

        (candidatesByStage[status] = candidatesByStage[status] || []).push(candidate);
      });
      /*.map((candidate) => {
          status = candidate.status;
          index = pipeline.findIndex((stage) => (stage.id == status));
          if (index === -1) status = 'applied';
          (candidatesByStage[status] = candidatesByStage[status] || []).push(candidate);
      });*/

      return candidatesByStage;
    },
    // SNS
    candidatesImported: function candidatesImported(positionId, candidatesData) {
      if (logging) console.log("".concat(candidatesData.length, " candidates imported"));
      candidatesData.forEach(function (candidate) {
        candidates.unshift(candidate);
      });
      PositionsService.updateCandidateCount(positionId, candidatesData.length);
      $rootScope.$broadcast('pipeline:refresh');
    },
    candidateAdded: function candidateAdded(candidate) {
      var foundCandidate = getCandidateById(candidate._id);

      if (foundCandidate) {
        if (logging) console.log("".concat(foundCandidate.name, " already exists"));
        return;
      }

      if (logging) console.log("".concat(candidate.name, " added"));
      candidates.unshift(candidate);
      filterIds.unshift(candidate._id); // tell which stages to refresh

      var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : status;
      if (candidate.orphaned) status = 'orphaned';
      $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + status);
      PositionsService.updateCandidateCount(candidate.position_id, 1);
    },
    candidateUpdated: function candidateUpdated(candidateId, candidate) {
      //if (typeof refresh === 'undefined') refresh = true;
      var index = getIndexById(candidateId);

      if (index > -1) {
        if (logging) console.log("".concat(candidates[index].name, " updated"));
        candidates[index] = candidate; //candidates[index]
        // resort candidates

        candidates.unshift(candidates.splice(index, 1)[0]); // tell which stages to refresh

        var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : status;
        if (candidate.orphaned) status = 'orphaned';
        $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + status);
        $rootScope.$broadcast('candidate:' + candidateId);
        /*if (refresh) {
            $rootScope.$broadcast('candidates:refresh');
        } else {
            $rootScope.$broadcast('candidates:stale');
        }*/
      }
    },
    candidateStatusUpdated: candidateStatusUpdated,
    bulkCandidateStatusUpdated: bulkCandidateStatusUpdated,
    candidateDeleted: function candidateDeleted(candidateId) {
      var index = getIndexById(candidateId);

      if (index === -1) {
        return;
      }

      var candidate = candidates[index];
      if (logging) console.log("".concat(candidates[index].name, " deleted"));
      var removedCandidate = candidates.splice(index, 1)[0]; // tell which stages to refresh

      var status = removedCandidate.hasOwnProperty('stage') ? removedCandidate.stage.id : status; //if (candidate.orphaned) status = 'applied';

      $rootScope.$broadcast('pipeline:' + removedCandidate.position_id + ':' + status);
      $rootScope.$broadcast('candidate:' + removedCandidate._id + ':deleted');
      PositionsService.updateCandidateCount(removedCandidate.position_id, -1); //$rootScope.$broadcast('grid:refresh');
    },
    candidateAssignedPosted: function candidateAssignedPosted(candidateId, member) {
      //var candidate = getCandidateById(candidateId);
      var index = getIndexById(candidateId);

      if (index === -1) {
        return;
      }

      var candidate = candidates[index];
      if (logging) console.log("".concat(candidate.name, " assigned to ").concat(member.name));
      candidate.assigned_to = member; // resort candidates

      candidates.unshift(candidates.splice(index, 1)[0]); // tell which stages to refresh

      var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : status;
      if (candidate.orphaned) status = 'orphaned';
      $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + status);
    },
    candidateSeenPosted: function candidateSeenPosted(candidateId, actingUserId) {
      //var candidate = getCandidateById(candidateId);
      var index = getIndexById(candidateId);

      if (index === -1) {
        return;
      }

      var candidate = candidates[index];
      if (logging) console.log("".concat(candidate.name, "'s seen state"));

      if (!candidate.viewed_by) {
        candidate.viewed_by = [];
      }

      if (candidate.viewed_by.indexOf(actingUserId) == -1) {
        candidate.viewed_by.push(actingUserId);
      } // tell which stages to refresh


      var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : status;
      if (candidate.orphaned) status = 'orphaned';
      $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + status);
      $rootScope.$broadcast('candidate:' + candidateId);
      /*$rootScope.$broadcast('candidate:update', {
          candidateId: candidateId,
          updates: {
              viewed_by: candidate.viewed_by
          }
      });*/
    },
    candidateScoreUpdated: function candidateScoreUpdated(candidateId, score) {
      //if (typeof refresh === 'undefined') refresh = true;
      //var candidate = getCandidateById(candidateId);
      var index = getIndexById(candidateId);

      if (index > -1) {
        var candidate = candidates[index];
        if (logging) console.log("".concat(candidate.name, "'s score updated to ").concat(score));
        candidate.overall_score = score;
        candidate.display_score = getDisplayScore(candidate); // resort candidates

        candidates.unshift(candidates.splice(index, 1)[0]); // tell which stages to refresh

        var status = candidate.hasOwnProperty('stage') ? candidate.stage.id : status;
        if (candidate.orphaned) status = 'orphaned';
        $rootScope.$broadcast('pipeline:' + candidate.position_id + ':' + status);
        $rootScope.$broadcast('candidate:' + candidateId);
        /*if (refresh) {
            // refresh candidate grid
            $rootScope.$broadcast('candidates:refresh');
        } else {
            $rootScope.$broadcast('candidates:stale');
        }*/
      }
    }
  };
  return CandidatesStore;
}]);
'use strict';

angular.module('BaseApp').factory('ChartsService', ['ReportService', 'dialog', function (ReportService, dialog) {
  var charts = [];
  var options = {
    ///Boolean - Whether grid lines are shown across the chart
    backgroundColor: {
      fill: 'transparent'
    },
    scaleShowGridLines: true,
    animation: false,
    // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
    scaleIntegersOnly: true,
    // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
    scaleBeginAtZero: false,
    // String - Scale label font declaration for the scale label
    scaleFontFamily: "'Helvetica Neue',Helvetica,Arial,sans-serif",
    // Number - Scale label font size in pixels
    scaleFontSize: 14,
    //showXLabels: 3,
    // String - Scale label font weight style
    scaleFontStyle: "normal",
    // String - Scale label font colour
    scaleFontColor: "#778591",
    //Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,
    //Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines: false,
    //Boolean - Whether the line is curved between points
    bezierCurve: true,
    //Number - Tension of the bezier curve between points
    bezierCurveTension: 0.4,
    //Boolean - Whether to show a dot for each point
    pointDot: true,
    //Number - Radius of each point dot in pixels
    pointDotRadius: 4,
    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth: 1,
    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    //pointHitDetectionRadius : 20,
    //Boolean - Whether to show a stroke for datasets
    datasetStroke: false,
    //Number - Pixel width of dataset stroke
    datasetStrokeWidth: 5,
    //Boolean - Whether to fill the dataset with a colour
    datasetFill: true,
    //String - A legend template
    //legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
    legend: {
      display: false
    },
    scales: {
      xAxes: [{
        gridLines: {
          display: false
        }
      }],
      yAxes: [{
        ticks: {
          beginAtZero: true,
          maxTicksLimit: 5
        },
        gridLines: {
          color: 'rgba(0,0,0,.05)'
        },
        scaleLabel: {
          fontColor: '#ff0000'
        }
      }]
    },
    tooltips: {
      mode: 'x-axis',
      //yAlign: 'top',
      titleMarginBottom: 8,
      titleFontSize: 14,
      bodyFontSize: 14,
      bodySpacing: 6,
      caretSize: 0 //multiKeyBackground: 'transparent',

      /*custom: function(tooltip) {
          console.log(tooltip);
          // Tooltip Element
          var tooltipEl = document.getElementById('#chartjs-tooltip');
           var innerHtml = [
              (tooltip.beforeTitle || []).join('\n'), (tooltip.title || []).join('\n'), (tooltip.afterTitle || []).join('\n'), (tooltip.beforeBody || []).join('\n'), (tooltip.body || []).join('\n'), (tooltip.afterBody || []).join('\n'), (tooltip.beforeFooter || [])
              .join('\n'), (tooltip.footer || []).join('\n'), (tooltip.afterFooter || []).join('\n')
          ];
          tooltipEl.innerHTML = innerHtml.join('\n');
      }*/

    }
  };
  var maxColumns = 15;

  var dataGroup = function dataGroup(data) {
    var groupSize,
        dataset,
        tempDataset = [],
        tempLabels = [],
        accumulator = 0,
        label = '',
        first = true,
        dateStart,
        dateEnd;
    var dataSize = data.labels.length;
    if (dataSize <= maxColumns) return data;
    groupSize = Math.ceil(data.labels.length / maxColumns); // group data

    for (var i = 0; i < data.datasets.length; i++) {
      dataset = data.datasets[i].data;

      for (var j = 1; j <= dataset.length; j++) {
        accumulator += dataset[j - 1]; //console.log(j + ' - ' + (j % groupSize));

        if (j % groupSize === 0) {
          tempDataset.push(accumulator);
          accumulator = 0;
        }
      }

      if (j % dataset.length !== 0) {
        tempDataset.push(accumulator);
        accumulator = 0;
      }

      data.datasets[i].data = tempDataset;
      tempDataset = [];
    }

    if (data.datasetsSupp) {
      for (var i = 0; i < data.datasetsSupp.length; i++) {
        dataset = data.datasetsSupp[i].data;

        for (var j = 1; j <= dataset.length; j++) {
          accumulator += dataset[j - 1];

          if (j % groupSize === 0) {
            tempDataset.push(accumulator);
            accumulator = 0;
          }
        }

        if (j % dataset.length !== 0) {
          tempDataset.push(accumulator);
          accumulator = 0;
        }

        data.datasetsSupp[i].data = tempDataset;
        tempDataset = [];
      }
    } // group labels


    for (i = 1; i <= dataSize; i++) {
      if (first) {
        label = data.labels[i - 1];
        first = false;
      }

      if (i % groupSize === 0) {
        dateStart = label.split(' ');
        dateEnd = data.labels[i - 1].split(' ');

        if (dateStart !== dateEnd) {
          label += '-' + dateEnd[1];
        }

        tempLabels.push(label);
        first = true;
      }
    }

    if (!first) {
      dateStart = label.split(' ');
      dateEnd = data.labels[dataSize - 1].split(' ');

      if (dateStart !== dateEnd) {
        label += '-' + dateEnd[1];
      }

      tempLabels.push(label);
      first = true;
    }

    data.labels = tempLabels;
    return data;
  };

  return {
    clear: function clear() {
      if (charts.length > 0) {
        for (var i in charts) {
          charts[i].destroy();
        }
      }

      charts = [];
    },
    bar: function bar(ctx, data, hideLabels) {
      data = dataGroup(data);
      var these_options = options;
      these_options.scales.xAxes[0].display = true;

      if (hideLabels) {
        these_options.scales.xAxes[0].display = false;
      }

      var c = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: these_options
      });
      charts.push(c);
    },
    horizontalBar: function horizontalBar(ctx, data) {
      data = dataGroup(data);
      var custom_options = {
        legend: {
          display: true,
          position: 'bottom'
        },
        scales: {
          xAxes: [{
            gridLines: {
              display: false
            },
            stacked: true,
            scaleLabel: {
              display: true,
              labelString: 'Days'
            }
          }],
          yAxes: [{
            ticks: {
              beginAtZero: true,
              maxTicksLimit: 5
            },
            gridLines: {
              color: 'rgba(0,0,0,.05)'
            },
            scaleLabel: {
              fontColor: '#ff0000'
            },
            stacked: true
          }]
          /*animation: {
              onComplete: function () {
                  var chartInstance = this.chart;
                  var ctx = chartInstance.ctx;
                  ctx.textAlign = "left";
                  ctx.font = "9px Open Sans";
                  ctx.fillStyle = "#fff";
                   Chart.helpers.each(this.data.datasets.forEach(function (dataset, i) {
                      var meta = chartInstance.controller.getDatasetMeta(i);
                      Chart.helpers.each(meta.data.forEach(function (bar, index) {
                          data = dataset.data[index].toFixed(1);
                          if(i==0){
                              ctx.fillText(data, 50, bar._model.y);
                          } else {
                              ctx.fillText(data, bar._model.x-25, bar._model.y);
                          }
                      }),this)
                  }),this);
              }
          }*/

        }
      };
      var these_options = Object.assign({}, options, custom_options);
      var c = new Chart(ctx, {
        type: 'horizontalBar',
        data: data,
        options: these_options
      });
      charts.push(c);
    },
    line: function line(ctx, data, custom_options) {
      data = dataGroup(data);

      if (!custom_options) {
        //console.log('empty')
        custom_options = {};
      } else {//console.log(custom_options)
      }

      var these_options = Object.assign({}, options, custom_options); //console.log(these_options)

      these_options.scales.xAxes[0].display = true;
      var c = new Chart(ctx, {
        type: 'line',
        data: data,
        options: these_options
      });
      charts.push(c);
    },
    pie: function pie(ctx, data) {
      ctx.clearRect(0, 0, 0, 0);
      var c = new Chart(ctx, {
        type: 'pie',
        data: data,
        options: {
          legend: false,
          animation: false
        }
      });
      charts.push(c);
    },
    doughnut: function doughnut(ctx, data) {
      ctx.clearRect(0, 0, 0, 0);
      var c = new Chart(ctx, {
        type: 'doughnut',
        data: data,
        options: {
          legend: false,
          cutoutPercentage: 80,
          animation: false
        }
      });
      charts.push(c);
      return c;
    },
    polarArea: function polarArea(ctx, data) {
      ctx.clearRect(0, 0, 0, 0);
      var c = new Chart(ctx, {
        type: 'polarArea',
        data: data,
        options: {
          layout: {
            padding: {
              top: 10,
              bottom: 10
            }
          },
          legend: {
            display: false
          },
          animation: false,
          responsive: true,
          maintainAspectRatio: false,
          scale: {
            ticks: {
              stepSize: 0.5
            }
          }
        }
      });
      charts.push(c);
    },
    exportCSV: function exportCSV(title, data, isArray) {
      var csvContent = "data:text/csv;charset=utf-8,";

      if (isArray) {
        data.forEach(function (row) {
          csvContent += row.join(',') + '\n';
        });
      } else {
        var rows = Object.keys(data);

        for (var i = 0; i < rows.length; i++) {
          var row = rows[i];
          csvContent += rows[i] + ',' + data[row].join(',') + '\n';
        }
      }

      var encodedUri = encodeURI(csvContent).replace(/#/g, "%23");
      var downloadAttrSupported = "download" in document.createElement("a");

      if (window.navigator.msSaveOrOpenBlob) {
        var blob = new Blob([decodeURIComponent(encodedUri)], {
          type: "text/csv;charset=utf-8;"
        });
        navigator.msSaveBlob(blob, title + '.csv');
      } else if (downloadAttrSupported) {
        var downloadLink = document.createElement("a");
        downloadLink.href = encodedUri;
        downloadLink.download = title + '.csv';
        document.body.appendChild(downloadLink);
        downloadLink.click();
      } else {
        dialog.download({
          name: title + '.csv',
          data: encodedUri
        });
      }
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('CompanyService', ['AppClient', 'SharedData', 'RESTClient', '$q', '$rootScope', function (AppClient, SharedData, RESTClient, $q, $rootScope) {
  var company = SharedData.activeCompany.company; //console.log(company);

  var members = SharedData.activeCompany.members;
  var user = SharedData.user;
  var logging = false;

  var getMembersByIds = function getMembersByIds(ids) {
    return members.filter(function (member) {
      return ids.indexOf(member._id) > -1;
    });
  };

  var collections = [{
    name: 'Sources',
    item: 'Source'
    /*, {
       name: 'Reasons',
       item: 'Reason'
    }*/

  }]; // mapper for repedative CRUD actions

  /*const mapActions = collections => (collections.reduce((actions, collection) => {
      actions['get'+collection.name] = () => {
          var deferred = $q.defer();
          RESTClient['getCompany'+collection.name](company._id, function(error, result) {
              CompanyStore.mutations['set'+collection.name](result);
              deferred.resolve(true);
          });
          return deferred.promise;
      };
      actions['add'+collection.item] = item => {
          var deferred = $q.defer();
          RESTClient['addCompany'+collection.item](company._id, item, (error, result) => {
              CompanyStore.mutations['add'+collection.item](result)
              deferred.resolve(result);
          });
          return deferred.promise;
      };
      actions['update'+collection.item] = item => {
          var deferred = $q.defer();
          RESTClient['updateCompany'+collection.item](company._id, item._id, item, (error, result) => {
              CompanyStore.mutations['update'+collection.item](result)
              deferred.resolve(result);
          });
          return deferred.promise;
      };
      actions['delete'+collection.item] = id => {
          RESTClient['addCompany'+collection.item](company._id, id, (error, result) => {
              CompanyStore.mutations['delete'+collection.item](id)
          });
      }
      return actions;
  }, {}));*/
  //console.log(mapActions(collections));

  var CompanyStore = {
    // default state of the company store
    state: {
      plan: SharedData.activeCompany.company.plan,
      globalCommunication: SharedData.activeCompany.company.pricing === 'v7' && ['v7_bootstrap'].indexOf(SharedData.activeCompany.company.plan.id) === -1,
      sources: [],
      // populated on request
      reasons: SharedData.activeCompany.reasons,
      templates: {
        gdpr: []
      }
    },
    // getters are used for getting data from the store
    getters: {
      templates: function templates() {
        return CompanyStore.state.templates;
      },
      reasons: function reasons() {
        return CompanyStore.state.reasons;
      },
      settings: function settings(key) {
        return key.split('.').reduce(function (a, b) {
          return a[b];
        }, company.settings.ats);
      },
      memberById: function memberById(id) {
        return members.find(function (member) {
          return id === member._id;
        });
      },
      sources: function sources() {
        return CompanyStore.state.sources;
      },
      trial: function trial() {
        var trial = false,
            now = new Date().getTime(),
            end = new Date(company.trial_expiry_date).getTime();

        if (CompanyStore.state.plan.id === 'freebie' && now < end) {
          console.log('company is still in trial');
          trial = true;
        }

        return trial;
      }
    },
    // actions are used for fetching and updating data remotely
    actions: {
      //...mapActions(collections),
      getSources: function getSources() {
        var deferred = $q.defer();
        RESTClient.getCompanySources(company._id, function (error, result) {
          CompanyStore.mutations.setSources(result);
          deferred.resolve(true);
        });
        return deferred.promise;
      },
      addSource: function addSource(item) {
        var deferred = $q.defer();
        RESTClient.addCompanySource(company._id, item, function (error, result) {
          CompanyStore.mutations.addSource(result);
          deferred.resolve(result);
        });
        return deferred.promise;
      },
      getGDPRTemplates: function getGDPRTemplates() {
        var deferred = $q.defer();
        RESTClient.getGDPRTemplates(company._id, function (error, result) {
          CompanyStore.mutations.setGDPRTemplates(result);
          deferred.resolve(true);
        });
        return deferred.promise;
      }
    },
    // mutations are used for manipulating data in the store
    mutations: {
      updateReason: function updateReason(type, reason) {
        if (reason._id) {
          var index = CompanyStore.state.reasons[type].findIndex(function (original) {
            return original._id === reason._id;
          });

          if (index) {
            if (logging) console.log("Updating ".concat(type, ": \"").concat(reason.name, "\""));
            CompanyStore.state.reasons[type][index] = reason;
          }
        } else {
          if (logging) console.log("Adding ".concat(type, ": \"").concat(reason.name, "\""));
          CompanyStore.state.reasons[type].push(reason);
        }
      },
      deleteReason: function deleteReason(type, index) {
        CompanyStore.state.reasons[type].splice(index, 1);
      },
      setSources: function setSources(sources) {
        CompanyStore.state.sources = sources;
      },
      setGDPRTemplates: function setGDPRTemplates(templates) {
        CompanyStore.state.templates.gdpr = templates;
      },
      addSource: function addSource(source) {
        CompanyStore.state.sources.push(source);
      },
      updatePlan: function updatePlan(plan) {
        CompanyStore.state.plan = plan;
      }
    },
    // depricated in favor of getters
    local: {
      getMembers: function getMembers() {
        return members;
      },
      getMemberById: function getMemberById(id) {
        return members.find(function (member) {
          return id === member._id;
        });
      },
      getMembersByIds: getMembersByIds,
      getAdmins: function getAdmins() {
        return getMembersByIds(company.admins);
      },
      postingRequiresApproval: function postingRequiresApproval() {
        var approvalRequired = true; // no permissions required

        if (company.approval_workflow && company.approval_workflow.type === 'none') {
          approvalRequired = false; // chain of 1 and current user is that 1
        } else if (company.approval_workflow && company.approval_workflow.type === 'chain' && company.approval_workflow.approvers.length === 1 && company.approval_workflow.approvers[0] === user._id) {
          approvalRequired = false; // any admin and current user is admin
        } else if (company.approval_workflow && company.approval_workflow.type === 'any_admin' && company.is_admin) {
          approvalRequired = false; // no workflow set up only admins can post
        } else if (!company.approval_workflow && company.is_admin) {
          approvalRequired = false;
        }

        return approvalRequired;
      }
    },
    // depricated in favor of actions
    remote: {
      updateReasons: function updateReasons(reasons) {
        RESTClient.updateReasons(company._id, reasons, function (error, result) {
          SharedData.activeCompany.reasons = result;
          reasons = result;
        });
      }
    } //console.log(`globalCommunication: ${CompanyStore.state.globalCommunication}`);

  };
  return CompanyStore;
}]);
"use strict";

angular.module('BaseApp').factory('DateService', ['SharedData', function (SharedData) {
  return {
    getDateRange: function getDateRange(selected) {
      var value = selected.value || selected;
      var start = new Date();
      var end = new Date();
      var start_formatted_short, end_formatted_short, start_formatted_medium, end_formatted_medium;

      switch (value) {
        case 'today':
          break;

        case 'yesterday':
          start.setDate(start.getDate() - 1);
          end.setDate(end.getDate() - 1);
          break;

        case '7days':
        case 'last7Days':
          start.setDate(start.getDate() - 6);
          break;

        case 'twoWeeks':
          start.setDate(start.getDate() - 13);
          break;

        case '30days':
        case 'last30Days':
          start.setDate(start.getDate() - 29);
          break;

        case 'last90days':
        case 'last90Days':
          start.setDate(start.getDate() - 89);
          break;

        case 'last180days':
        case 'last180Days':
          start.setDate(start.getDate() - 179);
          break;

        case 'thisweek':
          start.setDate(start.getDate() - start.getDay());
          break;

        case 'lastweek':
          var tempStart = start.getDate() - start.getDay();
          start.setDate(tempStart - 7);
          end.setDate(tempStart);
          break;

        case 'thisMonth':
          start = moment().startOf('month')._d;
          end = moment().endOf('month')._d;
          break;

        case 'lastMonth':
          start = moment().subtract(1, 'months').startOf('month')._d;
          end = moment().subtract(1, 'months').endOf('month')._d;
          break;

        case 'customRange':
          start = new Date(selected.start);
          end = new Date(selected.end);
          start.setDate(start.getDate());
          end.setDate(end.getDate());
          break;

        default:
          console.log("".concat(value, " not found in getDateRange"));
          break;
      }

      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
      start_formatted_short = moment(start).format('MM-DD-YYYY');
      end_formatted_short = moment(end).format('MM-DD-YYYY');
      start_formatted_medium = moment(start).format('MMM Do, YYYY');
      end_formatted_medium = moment(end).format('MMM Do, YYYY');
      return {
        start: start.getTime(),
        end: end.getTime(),
        start_formatted_short: start_formatted_short,
        end_formatted_short: end_formatted_short,
        start_formatted_medium: start_formatted_medium,
        end_formatted_medium: end_formatted_medium
      };
    },
    getDateRangeOptions: function getDateRangeOptions() {
      var dateRanges = [{
        label: 'Today',
        value: 'today'
      }, {
        label: 'Yesterday',
        value: 'yesterday'
      }, {
        label: 'This Week (Sun - Today)',
        value: 'thisweek'
      }, {
        label: 'Last Week (Sun - Sat)',
        value: 'lastweek'
      }, {
        label: 'Last 7 Days',
        value: '7days'
      }, {
        label: 'Last 14 Days',
        value: 'twoWeeks'
      }, {
        label: 'Last 30 Days',
        value: '30days'
      }];
      dateRanges.push({
        label: 'Custom Range',
        value: 'customRange',
        start: null,
        end: null
      });
      return dateRanges;
    }
  };
}]);
'use strict';

angular.module('BaseApp').directive('closeDialogOnEnter', ['$document', function ($document) {
  return {
    restrict: 'A',
    scope: {
      onEnter: '&closeDialogOnEnter'
    },
    link: function link(scope, element, attrs) {
      var keypress = function keypress(e) {
        if (e.which === 13) {
          scope.onEnter();
        }
      };

      $document.bind('keypress', keypress);
      scope.$on('$destroy', function () {
        $document.unbind('keypress', keypress);
      });
    }
  };
}]).factory('dialog', ['$uibModal', function ($uibModal) {
  return {
    alert: function alert(_alert, callback) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/dialog/alert.html',
        controller: function controller($scope, $uibModalInstance, alert) {
          $scope.alert = alert;
          $scope.alert.button = $scope.alert.button || 'Okay';
          Mousetrap.bind('enter', function () {
            $scope.okay();
          });

          $scope.okay = function () {
            $uibModalInstance.close();
          };
        },
        size: 'sm',
        resolve: {
          alert: function alert() {
            return _alert;
          }
        }
      });
      modalInstance.result.then(function (result) {
        if (callback) callback(result);
      }, function () {});
    },
    question: function question(_question, callback) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/dialog/question.html',
        controller: function controller($scope, $uibModalInstance, question) {
          $scope.question = question;

          $scope.answer = function (answer) {
            console.log(answer);
            $uibModalInstance.close(answer);
          };
        },
        size: 'sm',
        resolve: {
          question: function question() {
            return _question;
          }
        }
      });
      modalInstance.result.then(function (result) {
        callback(result);
      }, function () {});
    },
    confirm: function confirm(_confirm, callback) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/dialog/confirm.html',
        controller: function controller($scope, $uibModalInstance, confirm) {
          $scope.confirm = confirm;
          Mousetrap.bind('enter', function () {
            $scope.yes();
          });

          $scope.yes = function () {
            $uibModalInstance.close(true);
          };

          $scope.no = function () {
            $uibModalInstance.close(false);
          };
        },
        size: 'sm',
        resolve: {
          confirm: function confirm() {
            return _confirm;
          }
        }
      });
      modalInstance.result.then(function (result) {
        callback(result);
      }, function () {});
    },
    download: function download(_download) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/dialog/download.html',
        controller: function controller($scope, $uibModalInstance, download) {
          $scope.download = download;

          $scope.open = function () {
            window.open($scope.download.data);
          };
        },
        size: 'sm',
        resolve: {
          download: function download() {
            return _download;
          }
        }
      });
      return modalInstance;
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('EmailTrackerService', [function emailTrackerService() {
  var convoIds = [];
  var convoCandidates = [];
  return {
    addId: function addId(id) {
      convoIds.push(id);
      convoCandidates.push(id);
      return;
    },
    lastConvoId: function lastConvoId(id) {
      var idx = convoIds.indexOf(id);
      return idx > -1 && idx === convoIds.length - 1;
    },
    lastConvoCandidate: function lastConvoCandidate(id) {
      var idx = convoCandidates.indexOf(id);
      return idx > -1 && idx === convoCandidates.length - 1;
    },
    clearConvoIds: function clearConvoIds() {
      convoIds = [];
      return;
    },
    clearConvoCandidates: function clearConvoCandidates() {
      convoCandidates = [];
      return;
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('FeaturesService', ['SharedData', 'dialog', 'ModalService', '$state', '$uibModalStack', '$http', '$q', function (SharedData, dialog, ModalService, $state, $uibModalStack, $http, $q) {
  var config = SharedData.activeCompany;
  var features = SharedData.activeCompany.company.features;
  var debug = false;
  var messages = {
    DEFAULT: 'This feature isn\'t available on your current plan. Would you like to review upgrade options?',
    video_interview: 'Live Video Meetings aren\'t available on your current plan. Would you like to review upgrade options?',
    bulk_candidate_messaging: 'Candidate mass-emailing is only available on paid subscriptions. Would you like to review upgrade options?',
    esig: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
    employee_portal: 'The Employee Portal isn\'t available on your current plan. Would you like to review upgrade options?',
    referral_portal: 'Internal job postings require the Employee Portal which isn\'t available on your current plan. Would you like to review upgrade options?'
  };
  var planPath = '/data/plans_trial_v7.json';
  var plansArray = [];

  var populatePlans = function populatePlans() {
    var deferred = $q.defer();
    $http.get(planPath).success(function (data) {
      FeaturesStore.mutations.setPlans(data);
      deferred.resolve(true);
    }).error(function (error) {
      console.log('Error fetching plans JSON!: ' + error);
    });
    return deferred.promise;
  };

  var plans = {
    v7: {
      startup: {
        name: 'Startup',
        features: ['email_integration', 'calendar_integration', 'custom_pipeline', 'stage_actions', 'tasks', 'reporting', 'eeo_reporting', 'slack_integration', 'bulk_candidate_messaging', 'video_response', 'video_interview', 'custom_domain', 'mobile']
      },
      business: {
        name: 'Business',
        features: ['multiple_pipeline', 'employee_portal', 'recruiter_portal', 'job_approvals', 'questionnaires', 'custom_scorecards', 'interview_kits', 'reference_checking', 'esig', 'document_signing', 'background_checks', 'hris', 'hello_messenger']
      },
      pro: {
        name: 'Pro',
        features: ['sso', 'advanced_reporting', 'developer_api', 'csv_export', 'custom_fields', 'custom_hris']
      }
    }
  };
  var featureDetails = {
    interview_kits: {
      name: 'Interview Guides',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Interview Guides help make sure your candidates interviews are productive, consistent and effective by keeping the entire interview team in-sync on the goals and objectives.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    custom_scorecards: {
      name: 'Scorecards',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Scorecards are a powerful way to gather custom, candidate feedback from your hiring teams and ultimately better, more objective hiring decisions.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    slack_integration: {
      name: "Slack Integration",
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/slack.jpg',
      message: 'Keep you and your team up-to-date on new candidates, submit scorecards and much more, all through the comfort of Slack.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    video_interview_archiving: {
      name: "Video Interview Recording",
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/slack.jpg',
      //message: 'Keep you and your team up-to-date on new candidates, submit scorecards and much more, all through the comfort of Slack.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    sso: {
      name: 'Single Sign-On',
      okta: {
        name: 'Okta Integration',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        //message: 'With Breezy\'s Okta integration, you can now ensure that every member of your team can seamlessly login to Breezy HR.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      saml: {
        name: 'SAML Integration',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        //message: 'With Breezy\'s Okta integration, you can now ensure that every member of your team can seamlessly login to Breezy HR.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      google: {
        name: 'Google Apps Integration',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        //message: 'With Breezy\'s Okta integration, you can now ensure that every member of your team can seamlessly login to Breezy HR.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    bulk_actions: {
      name: 'Bulk Actions',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    bulk_candidate_messaging: {
      name: 'Bulk Candidate Messaging',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      //message: 'Interview Guides are not available on your current plan.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    custom_domain: {
      name: 'Custom Domains',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      //message: 'Interview Guides are not available on your current plan.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    multiple_pipeline: {
      name: 'Multiple Pipelines',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      //message: 'Interview Guides are not available on your current plan.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    stage_actions: {
      name: 'Stage Actions',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Stage Actions let you automate common tasks & actions like candidate emails & background checks, while helping you keep your team on track by automatically creating tasks and sending feedback & scorecard requests.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    custom_fields: {
      name: 'Custom Fields',
      //message: 'Interview Guides are not available on your current plan.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    hris: {
      bamboo: {
        name: 'BambooHR',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/bamboohr.jpg',
        message: 'The #1 HR software for small and medium businesses. Breezy can seamlessly push new candidates straight into your BambooHR HRIS & onboarding process.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      namely: {
        name: 'Namely',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/namely.jpg',
        message: 'Namely\'s the all-in-one HR platform your employees will love. Breezy can seamlessly push new candidates straight into your Namely HRIS & onboarding process.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    background_checks: {
      name: 'Background Checks',
      goodhire: {
        name: 'GoodHire',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/goodhire.jpg',
        message: 'Maintain a great candidate experience even during the background check process with GoodHire.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      checkr: {
        name: 'Checkr',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/checkr.jpg',
        message: 'Enjoy faster & more compliant employment screening with Checkr.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    job_approvals: {
      name: 'Position Approvals',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      //message: 'Whether you need just one person to approve a Position or you need an entire chain of approvals, Breezy\'s Position Approvals are here to make the process seamless, effortless, and fast.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    reporting: {
      name: 'Reporting & Analytics',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Get actionable insight into every facet of your recruiting process so you can improve your process and ultimately make better, more informed hiring decisions.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    tasks: {
      name: 'Task Management',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/tasks.jpg',
      message: 'Your recruiting process has a ton of moving parts - with Breezy Tasks, you can keep track of every single one.',
      partial: '/templates/v2/app/partials/features/feature_template.html',
      request_scorecards: {
        name: 'Scorecards Requests',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/tasks.jpg',
        message: 'Scorecard Requests help keep your team on track by generating candidate specific tasks for the relevant team members.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    eeo_reporting: {
      eeo: {
        name: 'EEOC Compliance & Reporting',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Enable EEOC / OFCCP compliance surveys and reporting in two clicks, and we\'ll track your responses by stage, by position, and company-wide over in your Analytics.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      disposition: {
        name: 'Dispositions',
        //message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    employee_portal: {
      name: 'Employee Referrals',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/referrals.jpg',
      message: 'Employee-referred candidates cost less to recruit, get hired faster, and stay with your company longer. With Breezy, you can get your custom, branded Employee Referral Portal up and running in minutes.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    custom_pipeline: {
      name: 'Custom Pipelines',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/pipeline.jpg',
      message: 'Build custom recruiting pipelines for each and every one of your recruiting processes. A phone interview? Done. Two interview stages? Sure! An on-site test? You got it.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    video_response: {
      name: 'Video Responses',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/video-interview.jpg',
      message: 'Uncover new insights when you ask candidates to answer to your question in a short video format with Video Responses.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    video_interview: {
      name: 'Video Meetings',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/video-interview.jpg',
      message: 'Whether you\'re hiring remotely, not ready for the onsite, or always on the go, Breezy\'s integrated video meetings get everyone on the same page … err, the same screen … when the time is right.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    video_response_length: {
      name: 'Longer Video Responses',
      message: 'Sometimes 60 seconds isn\'t quite enough. No problem. Breezy also offers 2 and 5 minute options.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    reference_checking: {
      name: 'Reference Checking',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Ready to dig into your candidate\'s history? We’ve got you covered. Breezy can automatically send out a Questionnaire to ask your candidate for references at the stage you select.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    questionnaires: {
      name: 'Questionnaires',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/questionnaires.jpg',
      message: 'Qualify your applicants automatically with Breezy Questionnaires – a powerful way to turn your application form in an active screening tool.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    esig: {
      name: 'e-Signatures',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/esig.jpg',
      message: 'Breezy\'s Offer Management includes secure document signing, so you can send, receive and get status updates on eSignatures right in-app.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    email_integration: {
      google: {
        name: 'Google Email',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/google-email.jpg',
        message: 'Use your company email address while sending email using Breezy.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      outlook: {
        name: 'Outlook Email',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/outlook-email.jpg',
        message: 'Use your company email address while sending email using Breezy.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    calendar_integration: {
      google: {
        name: 'Google Calendar',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/google-calendar.jpg',
        message: 'Share your availability with your hiring team to save time scheduling meetings and interviews.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      outlook: {
        name: 'Outlook Calendar',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/outlook-calendar.jpg',
        message: 'Share your availability with your hiring team to save time scheduling meetings and interviews.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    assessments: {
      hackerrank: {
        name: 'HackerRank',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/hackerrank.jpg',
        message: 'Streamline your technical recruiting process with coding challenges to help you identify the best engineering talent in less time.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      criteriacorp: {
        name: 'Criteria Corp',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Criteria Corp\'s aptitude, personality, and skills tests provide relevant, objective data to help you make more informed hiring decisions.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      indeed: {
        name: 'Indeed',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: '',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      traitify: {
        name: 'Traitify',
        //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: '',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    },
    hello_messenger: {
      name: 'Hello Messenger',
      image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/hello.jpg',
      message: 'Hello is a first-of-its-kind, AI-assisted messenger to proactively engage with passive and semi-active candidates, collect their resumes & contact details and bring them into your candidate pool, right from your own careers site or jobs page.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    campaigns: {
      name: 'Nurture Campaigns',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Engage and nurture candidate relationships at scale with personalized, well-timed email campaigns.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    scheduling_links: {
      name: 'Scheduling Links',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Let the candidate pick the best time based on your teams availability.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    },
    multi_interview: {
      name: 'Multi-Scheduler',
      //image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
      message: 'Organize and schedule multiple candidate meetings at once.',
      partial: '/templates/v2/app/partials/features/feature_template.html'
    } //console.log(company);

  };
  if (debug) console.log("company has features: ".concat(features ? 'true' : 'false'));

  var getMessage = function getMessage(key) {
    var message = messages.DEFAULT;
    if (messages.hasOwnProperty(key)) message = messages[key];
    return message;
  };

  var plan = function plan(key) {
    var plan = 'bootstrap';
    Object.keys(plans[FeaturesStore.state.pricing]).forEach(function ($plan) {
      if (plans[FeaturesStore.state.pricing][$plan].features.indexOf(key) > -1) plan = plans[FeaturesStore.state.pricing][$plan];
    });
    return plan;
  };

  var available = function available(key) {
    var available = true;

    if (features && features.hasOwnProperty(key) && !features[key]) {
      available = false;
    }

    if (debug) console.log("company ".concat(features.hasOwnProperty(key) ? 'has' : 'does not have', " '").concat(key, "' = ").concat(features[key], " so it is ").concat(available ? 'AVAILABLE' : 'UNAVAILABLE')); //if (key === 'video_response_length') available = false;

    return available;
  };

  var feature = function feature(key, options) {
    options = options || {};

    if (featureDetails.hasOwnProperty(key) && options.hasOwnProperty('specific')) {
      return featureDetails[key][options.specific];
    } else if (featureDetails.hasOwnProperty(key)) {
      return featureDetails[key];
    } else {
      console.log("missing ".concat(key, " details"));
    }

    return {};
  };

  var upgrade = function upgrade(key, options) {
    options = options || {};
    var requested_feature = feature(key, options);

    if (FeaturesStore.state.pricing !== 'v7') {
      ModalService.companySettings("plan").then(function (result) {// do nothing
      });
    } else {
      requested_feature.plan = plan(key);
      $state.go('company.plans');
      setTimeout(function () {
        $uibModalStack.dismissAll();
      }, 500);
      /*ModalService.openPlanUpgrade(requested_feature)
          .then(() => {
              console.log('closed')
          });*/
    }
  };

  var block = function block(key, options) {
    // if available don't block
    options = options || {}; //ga('send', 'event', 'FeatureBlocking', FeaturesStore.currentPlan.id, key);

    if (available(key)) return false;
    var requested_feature = feature(key, options);

    if (FeaturesStore.state.pricing !== 'v7') {
      dialog.confirm({
        title: "Upgrade Required",
        message: getMessage(key)
      }, function (result) {
        if (result === true) {
          ModalService.companySettings("plan").then(function (result) {// do nothing
          });
        }
      });
    } else {
      requested_feature.plan = plan(key);
      ModalService.openPlanUpgrade(requested_feature).then(function () {
        console.log('closed');
      });
    }

    return true;
  };

  var FeaturesStore = {
    state: {
      pricing: SharedData.activeCompany.company.pricing,
      plans: [],
      currentPlan: SharedData.activeCompany.company.plan
    },
    getters: {
      available: available,
      feature: feature,
      upgradeOrDowngrade: function upgradeOrDowngrade(toPlan) {
        //console.log(FeaturesStore.state.currentPlan.id);
        //var planKeys = Object.keys(plans[FeaturesStore.state.pricing]);
        var planKeys = ['v7_bootstrap', 'v7_startup_monthly', 'v7_startup_annually', 'v7_business_monthly', 'v7_business_annually', 'v7_custom'];
        var billingChange = toPlan.split('_')[1] === FeaturesStore.state.currentPlan.id.split('_')[1];

        if (FeaturesStore.state.currentPlan.id === 'freebie' || billingChange) {
          return 'upgrade';
        } else if (planKeys.indexOf(toPlan) < planKeys.indexOf(FeaturesStore.state.currentPlan.id)) {
          return 'downgrade';
        } else {
          return 'upgrade';
        }
      },
      currentPlan: function currentPlan() {
        return FeaturesStore.state.currentPlan;
      },
      plan: function plan(planId) {
        return FeaturesStore.state.plans[planId];
      }
    },
    actions: {
      block: block,
      upgrade: upgrade,
      plans: populatePlans
    },
    mutations: {
      setPlans: function setPlans(data) {
        FeaturesStore.state.plans = data;
      },
      updatePlan: function updatePlan(plan) {
        FeaturesStore.state.currentPlan = plan;
      }
    }
  };
  return FeaturesStore;
}]);
'use strict';

angular.module('BaseApp').factory('HTML5NotifyClient', function ($http, $socket, SharedData) {
  var shared = SharedData;
  var win = window;
  var statusClass = {};
  var isIE = false;
  var isSupported = notify.isSupported;
  var messages = {
    notPinned: 'Pin current page in the taskbar in order to receive notifications',
    notSupported: '<strong>Desktop Notifications not supported!</strong> Check supported browsers table and project\'s GitHub page.'
  };
  var $scope;
  var $location;
  return {
    initialize: function initialize($s, $l) {
      $scope = $s;
      $location = $l;
      shared.html5Notifications.notification = {
        title: "Notification Title",
        body: "Notification Body",
        icon: "images/chat.ico"
      };
      shared.html5Notifications.permissionLevel = notify.permissionLevel();
      shared.html5Notifications.permissionsGranted = shared.html5Notifications.permissionLevel === notify.PERMISSION_GRANTED;

      try {
        isIE = win.external && win.external.msIsSiteMode() !== undefined;
      } catch (e) {}

      statusClass[notify.PERMISSION_DEFAULT] = 'alert';
      statusClass[notify.PERMISSION_GRANTED] = 'alert alert-success';
      statusClass[notify.PERMISSION_DENIED] = 'alert alert-error';
      messages[notify.PERMISSION_DEFAULT] = '<strong>Warning!</strong> Click to allow displaying desktop notifications.';
      messages[notify.PERMISSION_GRANTED] = '<strong>Success!</strong>';
      messages[notify.PERMISSION_DENIED] = '<strong>Denied!</strong>';
      shared.html5Notifications.status = isSupported ? statusClass[shared.html5Notifications.permissionLevel] : statusClass[notify.PERMISSION_DENIED];
      shared.html5Notifications.message = isSupported ? isIE ? messages.notPinned : messages[shared.html5Notifications.permissionLevel] : messages.notSupported;
    },
    requestPermission: function requestPermission() {
      if (shared.html5Notifications.permissionLevel === notify.PERMISSION_DEFAULT) {
        console.log('IN IT');
        notify.requestPermission(function () {
          $scope.$apply(function () {
            shared.html5Notifications.permissionLevel = notify.permissionLevel();
            shared.html5Notifications.permissionsGranted = shared.html5Notifications.permissionLevel === notify.PERMISSION_GRANTED;
            shared.html5Notifications.status = isSupported ? statusClass[shared.html5Notifications.permissionLevel] : statusClass[notify.PERMISSION_DENIED];
            shared.html5Notifications.message = isSupported ? isIE ? messages.notPinned : messages[shared.html5Notifications.permissionLevel] : messages.notSupported;
          });
        });
      }
    },
    showNotification: function showNotification(path, title, body, icon) {
      var n = notify.createNotification($location, path, title, {
        'body': body,
        'icon': icon
      });
      setTimeout(function () {
        n.close();
      }, 4000);
    }
  };
});
'use strict';

angular.module('BaseApp').factory('ModalService', ['$rootScope', 'AppClient', 'SharedData', '$uibModal', '$state', '$q', 'TaggingService', function ($rootScope, AppClient, SharedData, $uibModal, $state, $q, TaggingService) {
  var company = SharedData.activeCompany.company;

  var openCandidateSearch = function openCandidateSearch(type, list) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/general/candidate_search_modal.html',
      controller: 'CandidateSearchModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (result) {
      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings');
      deferred.resolve(result);
    }, function () {
      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings');
      deferred.reject();
    });
    return deferred.promise;
  };

  var openRecentlyViewed = function openRecentlyViewed(_type, list) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/general/recently_viewed_modal.html',
      controller: 'RecentlyViewedModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return _type;
        },
        recentlyViewed: function recentlyViewed(PositionsService, CandidatesService) {
          var recentlyViewed = [];

          if (_type === 'position') {
            recentlyViewed = PositionsService.local.getRecentlyViewed();
          } else if (_type === 'candidate') {
            recentlyViewed = CandidatesService.local.getRecentlyViewed();
          } else {
            recentlyViewed = list;
          }

          return recentlyViewed;
        }
      }
    });
    modalInstance.result.then(function (result) {
      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings');
      deferred.resolve(result);
    }, function () {
      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings');
      deferred.reject();
    });
    return deferred.promise;
  };

  var openWolfenstein = function openWolfenstein() {
    var modalInstance = $uibModal.open({
      template: '<div style="text-align:center;"><iframe id="wolfenstein" height="400" width="640" src="https://breezy-assets-cdn.s3.amazonaws.com/breezy-hr/konami/index.html"></iframe></div>',
      controller: function controller() {},
      size: 'xlg'
    });
  };

  var openCandidateModal = function openCandidateModal(_positionId, _candidateId, _candidates, _currentIndex, _defaultTab) {
    var deferred = $q.defer();
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };

    var unbindKeys = function unbindKeys() {
      console.log('unbinding candidate modal'); // admin shortcuts

      Mousetrap.unbind('m');
      Mousetrap.unbind('q');
      Mousetrap.unbind('r');
      Mousetrap.unbind('i');
      Mousetrap.unbind('command+s');
      Mousetrap.unbind('command+d');
      Mousetrap.unbind('command+m');
      Mousetrap.unbind('command+c');
      Mousetrap.unbind('command+shift+d'); // all

      Mousetrap.unbind('command+p');
      Mousetrap.unbind('n');
      Mousetrap.unbind('s');
      Mousetrap.unbind('j');
      Mousetrap.unbind('up');
      Mousetrap.unbind('k');
      Mousetrap.unbind('down'); // ⌘ p : Recent Positions / Pools
      // rebind this

      /*Mousetrap.bind('command+p', () => {
          ModalStore.openRecentlyViewed('position')
              .then(() => {});
          return false;
      });
      Mousetrap.bind('command+c', () => {
          ModalStore.openRecentlyViewed('candidate')
              .then(() => {});
          return false;
      });*/
    };

    var templateUrl = '/templates/v2/app/candidate/candidate_modal_v3.html';
    var modalSize;

    if (!_candidates || _candidates.length < 2) {
      //console.log('LG Modal');
      modalSize = 'lg';
    } else {
      //console.log('XLG Modal');
      modalSize = 'xlg';
    }

    modalSize = 'full';
    var modalInstance = $uibModal.open({
      templateUrl: templateUrl,
      controller: 'CandidateModalInstanceCtrl',
      size: 'full',
      resolve: {
        $parentScope: function $parentScope() {
          return {};
        },
        positionId: function positionId() {
          return _positionId;
        },
        candidateId: function candidateId() {
          return _candidateId;
        },
        candidates: function candidates() {
          return _candidates;
        },
        currentIndex: function currentIndex() {
          return _currentIndex;
        },
        defaultTab: function defaultTab() {
          return _defaultTab;
        }
      }
    });
    modalInstance.result.then(function () {
      console.log('resolve');
      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings'); //unbindKeys();

      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
      deferred.resolve();
    }, function () {
      console.log('reject'); //unbindKeys();

      Mousetrap.reset();
      $rootScope.$broadcast('reinitializeKeyBindings');
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
      deferred.reject();
    });
    return deferred.promise;
  }; // send candidate(s) a questionnaire


  var openSendQuestionnaire = function openSendQuestionnaire(_positionId2, _candidate, _candidateIds, _candidates2) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_questionnaire_modal.html',
      controller: 'CandidateQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId2;
        },
        candidate: function candidate() {
          return _candidate;
        },
        candidateIds: function candidateIds() {
          return _candidateIds;
        },
        candidates: function candidates() {
          return _candidates2;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openCandidateScorecard = function openCandidateScorecard(_scorecard, _candidate2) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/scorecard/scorecard_modal.html',
      controller: 'CandidateScorecardModalInstanceCtrl',
      size: 'sm',
      resolve: {
        scorecard: function scorecard() {
          return _scorecard;
        },
        candidate: function candidate() {
          return _candidate2;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openSendBackgroundCheck = function openSendBackgroundCheck(_positionId3, _candidate3, _candidateIds2, _candidates3) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_background_check_modal.html',
      controller: 'CandidateBackgroundCheckModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId3;
        },
        candidate: function candidate() {
          return _candidate3;
        },
        candidateIds: function candidateIds() {
          return _candidateIds2;
        },
        candidates: function candidates() {
          return _candidates3;
        },
        config: function config() {
          if (company.has_checkr) {
            return AppClient.getIntegration('checkr', company._id, _positionId3);
          }

          return false;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  }; // send candidate(s) an assessment


  var openSendAssessment = function openSendAssessment(_positionId4, _candidate4, _candidateIds3, _candidates4) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_assessment_modal.html',
      controller: 'CandidateAssessmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId4;
        },
        candidate: function candidate() {
          return _candidate4;
        },
        candidateIds: function candidateIds() {
          return _candidateIds3;
        },
        candidates: function candidates() {
          return _candidates4;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openAddSectionItem = function openAddSectionItem(_candidate5, _section, _item, _index) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_section_item_modal.html',
      controller: 'CandidateAddSectionItemModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate5;
        },
        section: function section() {
          return _section;
        },
        item: function item() {
          return _item;
        },
        index: function index() {
          return _index;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openEditCandidate = function openEditCandidate(_candidate6) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_edit_modal.html',
      controller: 'CandidateEditModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate6;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openEditCandidateSource = function openEditCandidateSource(_source) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_source_modal.html',
      controller: 'CandidateEditSourceModalInstanceCtrl',
      size: 'sm',
      resolve: {
        sources: function sources(CompanyService) {
          return CompanyService.actions.getSources();
        },
        source: function source() {
          return _source;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openScheduleInterview = function openScheduleInterview(_positionId5, _candidate7, _interview, scope) {
    var deferred = $q.defer();
    var modalOptions = {
      templateUrl: '/templates/v2/app/candidate_workflow/interview/index.html',
      controller: 'InterviewWorkflowModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId5;
        },
        candidate: function candidate() {
          return _candidate7;
        },
        interview: function interview() {
          return _interview;
        }
      }
    }; // if desktop load new scheduler

    if (document.body.clientWidth > 840) {
      modalOptions.templateUrl = '/templates/v2/app/candidate_workflow/interview/index_new.html';
      modalOptions.controller = 'InterviewWorkflowModalInstanceCtrlNew';
      modalOptions.size = 'full';
      modalOptions.resolve.schedule = AppClient.getUserCalendar(company._id, null).then(function (result) {
        return result;
      });
    }

    var modalInstance = $uibModal.open({
      templateUrl: modalOptions.templateUrl,
      controller: modalOptions.controller,
      size: modalOptions.size,
      resolve: modalOptions.resolve
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openPanelInterview = function openPanelInterview(_positionId6, _candidate8, _panel) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/interview/panel_interview.html',
      controller: 'CandidatePanelInterviewModalInstanceCtrl',
      size: 'md',
      windowClass: 'modal-max-height',
      resolve: {
        positionId: function positionId() {
          return _positionId6;
        },
        candidate: function candidate() {
          return _candidate8;
        },
        panel: function panel() {
          return _panel;
        },
        schedule: function schedule() {
          return AppClient.getUserCalendar(company._id, null);
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openRequestConsent = function openRequestConsent(_candidates5) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_consent_request_modal.html',
      controller: 'CandidateConsentRequestModalInstanceCtrl',
      size: 'sm',
      resolve: {
        templates: function templates(CompanyService) {
          return CompanyService.actions.getGDPRTemplates();
        },
        candidates: function candidates() {
          return _candidates5;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  }; // add tags to candidate or position

  /*
      objectType: 'candidate', 'position'
  */


  var addTags = function addTags(_objectType, _objectTags, _bulk) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/candidate_tagging_modal.html',
      controller: 'CandidateTaggingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        objectType: function objectType() {
          return _objectType;
        },
        companyTags: function companyTags(TaggingService) {
          return TaggingService.get(company._id);
        },
        objectTags: function objectTags() {
          return _objectTags || [];
        },
        bulk: function bulk() {
          return _bulk;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  }; //


  var openAddCandidate = function openAddCandidate(_position, _stage) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/upload/index.html',
      controller: 'CandidateUploadModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position;
        },
        stage: function stage() {
          return _stage;
        }
      },
      windowClass: 'minimizable'
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  };

  var openAddPositionStageActions = function openAddPositionStageActions(_position_admins, _overrides, _stage2, _pipeline) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/actions/position.pipeline.stage.html',
      controller: 'PositionStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position_admins: function position_admins() {
          return _position_admins;
        },
        overrides: function overrides() {
          return _overrides;
        },
        stage: function stage() {
          //console.log(selected_stage.actions);
          return _stage2;
        },
        pipeline: function pipeline() {
          return _pipeline;
        }
      }
    });
    modalInstance.result.then(function (result) {
      console.log(result);
      deferred.resolve(result);
    }, function () {
      deferred.reject();
    });
    return deferred.promise;
  }; // post team note on candidate


  var openPostNote = function openPostNote(_positionId7, _candidate9, _candidateIds4, _candidates6) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_post_note_modal.html',
      controller: 'CandidateNoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId7;
        },
        candidate: function candidate() {
          return _candidate9;
        },
        candidateIds: function candidateIds() {
          return _candidateIds4;
        },
        candidates: function candidates() {
          return _candidates6;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  };

  var openSMSMessage = function openSMSMessage(_positionId8, _candidate10, _candidateIds5, _candidates7) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_sms_modal.html',
      controller: 'CandidateSMSModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return _positionId8;
        },
        candidate: function candidate() {
          return _candidate10;
        },
        candidateIds: function candidateIds() {
          return _candidateIds5;
        },
        candidates: function candidates() {
          return _candidates7;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  };

  var openCandidateMoveReason = function openCandidateMoveReason(_type2, _candidate11, _stage3) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/reason/index.html',
      controller: 'CandidateReasonModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return _type2;
        },
        candidate: function candidate() {
          return _candidate11;
        },
        stage: function stage() {
          return _stage3;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  }; // add/edit task


  var addEditTask = function addEditTask(_task, _position2, _candidate12) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/task/index.html',
      controller: 'TaskCreateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        task: function task() {
          return _task;
        },
        position: function position() {
          return _position2;
        },
        candidate: function candidate() {
          return _candidate12;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var companySettings = function companySettings(tab) {
    var deferred = $q.defer();
    /*var currentStateData = {
        'name': $state.current.name,
        'params': $state.params
    };*/

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/settings.html',
      controller: 'CompanySettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return {};
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openGoogleCalendarSettings = function openGoogleCalendarSettings(_user) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/user_settings/_google_calendar_modal.html',
      controller: 'GoogleCalendarSettingsModalInstanceCtrl',
      size: 'sm',
      resolve: {
        user: function user() {
          return angular.copy(_user);
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openGoogleAuthSettings = function openGoogleAuthSettings(_settings) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_google_auth_settings_modal.html',
      controller: 'GoogleAuthSettingsModalInstanceCtrl',
      size: 'sm',
      resolve: {
        settings: function settings() {
          return angular.copy(_settings);
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openAutoJoinSettings = function openAutoJoinSettings(_settings2) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_autojoin_settings_modal.html',
      controller: 'AutoJoinSettingsModalInstanceCtrl',
      size: 'sm',
      resolve: {
        settings: function settings() {
          return angular.copy(_settings2);
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openAddReason = function openAddReason(_reason) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_add_reason_modal.html',
      controller: 'AddReasonModalInstanceCtrl',
      size: 'sm',
      resolve: {
        reason: function reason() {
          return angular.copy(_reason);
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var accountSettings = function accountSettings(tab) {
    var deferred = $q.defer();
    /*var currentStateData = {
        'name': $state.current.name,
        'params': $state.params
    };*/

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/settings.html',
      controller: 'AccountSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return {};
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openSMSSubscription = function openSMSSubscription() {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_plan_addon_sms.html',
      controller: 'SubscriptionAddonSMSModalInstanceCtrl',
      size: 'md',
      resolve: {
        plansData: function plansData($http) {
          var planPath = '/data/subscriptions.json';
          return $http.get(planPath).then(function (data) {
            return data.data;
          });
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  };

  var openTalentSearchSubscription = function openTalentSearchSubscription(_options) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_plan_addon_talent_search.html',
      controller: 'SubscriptionAddonTalentSearchModalInstanceCtrl',
      size: 'sm',
      resolve: {
        plansData: function plansData($http) {
          var planPath = '/data/subscriptions.json';
          return $http.get(planPath).then(function (data) {
            return data.data;
          });
        },
        options: function options() {
          return _options;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  };

  var openAddSchedulingLinks = function openAddSchedulingLinks(_link, _type3) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_scheduling_link.html',
      controller: 'AddSchedulingLinkModalInstanceCtrl',
      size: 'md',
      resolve: {
        link: function link() {
          return _link;
        },
        type: function type() {
          return _type3;
        }
      }
    });
    modalInstance.result.then(function (result) {
      deferred.resolve(result);
    }, function () {});
    return deferred.promise;
  };

  var openGDPRSettings = function openGDPRSettings(_gdpr) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_gdpr_settings_modal.html',
      controller: 'GDPRSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        templates: function templates(CompanyService) {
          return CompanyService.actions.getGDPRTemplates();
        },
        gdpr: function gdpr() {
          return _gdpr;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openAddGDPRApplied = function openAddGDPRApplied(_portal) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_add_gdpr_applied_modal.html',
      controller: 'AddGDPRAppliedModalInstanceCtrl',
      size: 'sm',
      resolve: {
        portal: function portal() {
          return _portal;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openEditGDPRTemplate = function openEditGDPRTemplate(_template) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_edit_gdpr_template_modal.html',
      controller: 'EditGDPRTemplateModalInstanceCtrl',
      size: 'md',
      resolve: {
        template: function template() {
          return _template;
        }
      }
    });
    modalInstance.result.then(function (template) {
      if (template) {
        deferred.resolve(template);
      }
    }, function () {});
    return deferred.promise;
  };

  var openPlanUpgrade = function openPlanUpgrade(_feature) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/plan_upgrade_modal.html',
      controller: 'CompanySettingsPlanUpgradeModalInstanceCtrl',
      size: 'feature',
      resolve: {
        feature: function feature() {
          return _feature;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openPlanDowngrade = function openPlanDowngrade(_plan, _billing, _card) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/plan_downgrade_modal.html',
      controller: 'CompanyPlanDowngradeV7InstanceCtrl',
      size: 'sm',
      resolve: {
        plan: function plan() {
          return _plan;
        },
        billing: function billing() {
          return _billing;
        },
        card: function card() {
          return _card;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openPlanConfirm = function openPlanConfirm(_plan2, _billing2, _card2) {
    var deferred = $q.defer();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/plan_confirm_v7_modal.html',
      controller: 'CompanyPlanConfirmV7InstanceCtrl',
      size: 'sm',
      resolve: {
        plan: function plan() {
          return _plan2;
        },
        billing: function billing() {
          return _billing2;
        },
        card: function card() {
          return _card2;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        deferred.resolve(result);
      }
    }, function () {});
    return deferred.promise;
  };

  var openShortcuts = function openShortcuts() {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/general/shortcuts_modal.html',
      controller: function controller($scope) {
        $scope.osKey = '⌘';
        if (navigator.appVersion.indexOf("Win") != -1) $scope.osKey = 'CTRL';

        $scope.close = function () {
          return modalInstance.close();
        };
      },
      size: 'xlg'
    });
  };

  var ModalStore = {
    // recently viewed stuff
    openRecentlyViewed: openRecentlyViewed,
    openCandidateSearch: openCandidateSearch,
    openWolfenstein: openWolfenstein,
    // tags stuff
    addTags: addTags,
    // position stuff
    openAddCandidate: openAddCandidate,
    openAddPositionStageActions: openAddPositionStageActions,
    // candidate stuff
    openCandidateModal: openCandidateModal,
    openSendQuestionnaire: openSendQuestionnaire,
    openCandidateScorecard: openCandidateScorecard,
    openSendBackgroundCheck: openSendBackgroundCheck,
    openSendAssessment: openSendAssessment,
    openPostNote: openPostNote,
    openSMSMessage: openSMSMessage,
    openTalentSearchSubscription: openTalentSearchSubscription,
    openCandidateMoveReason: openCandidateMoveReason,
    openAddSectionItem: openAddSectionItem,
    openEditCandidateSource: openEditCandidateSource,
    openScheduleInterview: openScheduleInterview,
    openPanelInterview: openPanelInterview,
    openRequestConsent: openRequestConsent,
    openEditCandidate: openEditCandidate,
    // task stuff
    addEditTask: addEditTask,
    // account stuff
    accountSettings: accountSettings,
    openSMSSubscription: openSMSSubscription,
    openAddSchedulingLinks: openAddSchedulingLinks,
    // company stuff
    companySettings: companySettings,
    openAddReason: openAddReason,
    openPlanUpgrade: openPlanUpgrade,
    openPlanConfirm: openPlanConfirm,
    openPlanDowngrade: openPlanDowngrade,
    openGoogleAuthSettings: openGoogleAuthSettings,
    openAutoJoinSettings: openAutoJoinSettings,
    openGoogleCalendarSettings: openGoogleCalendarSettings,
    openGDPRSettings: openGDPRSettings,
    openAddGDPRApplied: openAddGDPRApplied,
    openEditGDPRTemplate: openEditGDPRTemplate,
    // general
    openShortcuts: openShortcuts
  };
  return ModalStore;
}]);
'use strict';

angular.module('BaseApp').factory('PipelinesService', ['SharedData', 'FeaturesService', function (SharedData, FeaturesService) {
  var pipelines = SharedData.activeCompany.pipelines;
  return {
    local: {
      getPipelineByPosition: function getPipelineByPosition(position) {
        var pipelineId = position.pipeline_id;

        if (!FeaturesService.getters.available('multiple_pipeline') || !pipelineId || !pipelines.hasOwnProperty(pipelineId)) {
          pipelineId = position.org_type ? 'default_pool' : 'default';
        }

        return pipelines[pipelineId];
      },
      getPositionPipelineById: function getPositionPipelineById(pipelineId) {
        if (!pipelineId) {
          pipelineId = 'default';
        }

        return pipelines[pipelineId];
      },
      getPipelinesByIds: function getPipelinesByIds(pipelineIds) {
        return pipelineIds.reduce(function (filteredPipelines, pipelineId) {
          filteredPipelines[pipelineId] = pipelines[pipelineId];
          return filteredPipelines;
        }, {});
      },
      getStageTypesByPipelineId: function getStageTypesByPipelineId(pipelineId) {
        return pipelines[pipelineId].pipeline.filter(function (stage) {
          return stage.type.id === 'disqualified';
        });
      }
    }
  };
}]);
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

angular.module('BaseApp')
/* ===== WORD OF CAUTION ===== */
//
// Don't let this service scare you. It is all about normalizing data
// and allowing the Company Positions page
// to request just the item data they need. It is also designed to allow
// for multiple criteria on every options, IE: is, is_not, contains, etc.
// That will be phase 2.
//

/* =========================== */
.factory('PositionsFilterService', ['SharedData', 'RESTClient', '$q', function (SharedData, RESTClient, $q) {
  var tagsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    sort: 'label',
    values: function values(tags) {
      this.values = tags.filter(function (tag) {
        return tag.hasOwnProperty('id');
      }).map(function (tag) {
        return {
          label: tag.tag,
          value: tag.tag
        };
      });
    },
    multiple: true
  }];
  var pipelinesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(pipelines) {
      this.values = [];

      for (var key in pipelines) {
        this.values.push({
          label: pipelines[key].name,
          value: key
        });
      }
    },
    multiple: true
  }];

  var getDateRange = function getDateRange(values) {
    var id = values[0];
    var start = new Date();
    var end = new Date();

    if (id === "today") {
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
    } else if (id === "yesterday") {
      start.setDate(start.getDate() - 1);
      start.setHours(0, 0, 0, 0);
      end.setDate(end.getDate() - 1);
      end.setHours(23, 59, 59, 999);
    } else if (id === "7days") {
      start.setDate(start.getDate() - 7);
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
    } else if (id === "30days") {
      start.setDate(start.getDate() - 29);
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
    } else if (id === "thisweek") {
      start.setDate(start.getDate() - start.getDay());
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
    } else if (id === "lastweek") {
      start.setDate(start.getDate() - start.getDay() - 7);
      start.setHours(0, 0, 0, 0);
      end.setDate(start.getDate() - start.getDay() - 1);
      end.setHours(23, 59, 59, 999);
    } else {
      start.setYear(2013);
      end.setDate(end.getDate() + 1);
    }

    var obj = {
      start: start.getTime(),
      end: end.getTime()
    };
    return obj;
  };

  var typesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: [{
      label: 'Candidate Pool',
      value: 'pool'
    }, {
      label: 'Position',
      value: 'position'
    }],
    multiple: true
  }];
  var createDateFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: [{
      label: 'Last 30 Days',
      value: '30days'
    }, {
      label: 'Last 7 Days',
      value: '7days'
    }, {
      label: 'Last Week (Sun - Sat)',
      value: 'lastweek'
    }, {
      label: 'This Week (Sun - Today)',
      value: 'thisweek'
    }, {
      label: 'Yesterday',
      value: 'yesterday'
    }, {
      label: 'Today',
      value: 'today'
    }],
    postProcess: getDateRange,
    multiple: false
  }];
  var updateDateFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: [{
      label: 'Last 30 Days',
      value: '30days'
    }, {
      label: 'Last 7 Days',
      value: '7days'
    }, {
      label: 'Last Week (Sun - Sat)',
      value: 'lastweek'
    }, {
      label: 'This Week (Sun - Today)',
      value: 'thisweek'
    }, {
      label: 'Yesterday',
      value: 'yesterday'
    }, {
      label: 'Today',
      value: 'today'
    }],
    postProcess: getDateRange,
    multiple: false
  }];
  var stateFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(states) {
      this.values = states;
    },
    multiple: true
  }];
  var locationsFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(locations) {
      this.values = locations;
    },
    multiple: true
  }];
  var categoriesFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(categories) {
      this.values = categories.map(function (category) {
        return {
          label: category.name,
          value: category.id
        };
      });
    },
    multiple: true
  }];
  var memberFilterOptions = [{
    key: 'is',
    label: 'is',
    type: 'select',
    values: function values(users) {
      this.values = users.map(function (user) {
        return {
          label: user.name,
          value: user._id
        };
      });
    },
    multiple: true
  }];
  var availableFilters = {
    members: {
      active: false,
      icon: 'users',
      label: 'Members',
      key: 'members',
      options: memberFilterOptions,
      rules: [{
        is: null
      }]
    },
    state: {
      active: false,
      icon: 'circle',
      label: 'State',
      key: 'state',
      options: stateFilterOptions,
      rules: [{
        is: null
      }]
    },
    pipelines: {
      active: false,
      icon: 'list-ol',
      label: 'Pipeline',
      key: 'pipeline',
      options: pipelinesFilterOptions,
      rules: [{
        is: null
      }]
    },
    tags: {
      active: false,
      icon: 'tag',
      label: 'Tags',
      key: 'tags',
      options: tagsFilterOptions,
      rules: [{
        is: null
      }]
    },
    types: {
      active: false,
      icon: 'user-circle',
      label: 'Type',
      key: 'org_type',
      options: typesFilterOptions,
      rules: [{
        is: null
      }]
    },
    created_date: {
      active: false,
      icon: 'clock',
      label: 'Created',
      key: 'created_date',
      options: createDateFilterOptions,
      rules: [{
        is: null
      }]
    },
    updated_date: {
      active: false,
      icon: 'bolt',
      label: 'Last Updated',
      key: 'updated_date',
      options: updateDateFilterOptions,
      rules: [{
        is: null
      }]
    },
    locations: {
      active: false,
      icon: 'map-marker',
      label: 'Location',
      key: 'location',
      options: locationsFilterOptions,
      rules: [{
        is: null
      }]
    },
    categories: {
      active: false,
      icon: 'th-large',
      label: 'Category',
      key: 'category',
      options: categoriesFilterOptions,
      rules: [{
        is: null
      }]
    },
    archived: {
      active: false,
      icon: 'archive',
      label: 'Include Archived',
      key: 'archived'
    }
  };
  var masterFilters = {
    text: '',
    options: null
  };
  var segments = null;
  var segmentOptions = {};
  return {
    init: function init(filters) {
      // reset might be better here eventually rather than copy
      var availableFiltersCopy = angular.copy(availableFilters);
      masterFilters.options = Object.keys(filters).map(function (filter) {
        var data = filters[filter];
        filter = availableFiltersCopy[filter];

        if (filter.options && typeof filter.options[0].values === 'function') {
          //console.log('we have to init the data manually');
          data = data || [];
          filter.options[0].values(data);
        }

        return filter;
      });
      return masterFilters;
    },
    getOptions: function getOptions(filters) {
      var options = {};
      segmentOptions = {};
      filters.options.forEach(function (filter) {
        if (filter.active) {
          if (filter.hasOwnProperty('rules')) {
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
            var values = filter.rules.reduce(function (acc, rule) {
              //console.log(rule);
              return rule.hasOwnProperty('value') && typeof rule.value !== 'undefined' ? acc.concat(rule.value.value) : acc;
            }, []);

            if (values.length > 0) {
              // hard coded [0] because we only have the "is" option for now
              segmentOptions[filter.key] = values;

              if (filter.options[0].hasOwnProperty('postProcess')) {
                //console.log('doing postProcess on values');
                values = filter.options[0].postProcess(values); //values = values.map()
              }

              options[filter.key] = values;
            }
          } else {
            options[filter.key] = filter.active;
          }
        }
      });

      if (filters.text.length > 0) {
        options.filter_text = filters.text;
      }

      return options;
    },
    segmentStatus: function segmentStatus(options) {
      var match = null;
      if (Object.keys(options).length === 0) return segments[0];
      segments.forEach(function (segment) {
        if (angular.equals(segment.filters, segmentOptions)) {
          match = segment;
        }
      });
      return match;
    },
    getSegments: function getSegments() {
      segments = [{
        _id: "mine",
        name: "My Positions",
        filters: {
          members: [SharedData.user._id]
        },
        system: true
      }].concat(_toConsumableArray(SharedData.activeCompany.segments.filter(function (segment) {
        return segment.hasOwnProperty('type') && segment.type === 'position';
      })));

      if (SharedData.activeCompany.company.is_admin) {
        segments.unshift({
          _id: "all",
          name: "All Positions (Admin)",
          filters: {},
          system: true
        });
      }

      return segments;
    },
    setSegment: function setSegment(segmentId, segment) {
      var options = {};
      options = segment.filters; // turn options into filters

      masterFilters.options.forEach(function (filter) {
        if (options.hasOwnProperty(filter.key)) {
          filter.active = true;

          if (filter.key === 'archived') {// straight boolean
            // active is enough
          } else if (filter.options[0].hasOwnProperty('preProcess')) {
            // custom data convert
            filter.rules = filter.options[0].preProcess(options[filter.key]);
          } else {
            // standard data convert
            filter.rules = options[filter.key].map(function (segmentValue) {
              return {
                value: filter.options[0].values.find(function (optionValue) {
                  return optionValue.value == segmentValue;
                })
              };
            });
          }
        } else {
          // reset any existing filters
          filter.active = false;

          if (filter.key !== 'archived') {
            filter.rules = [{}];
          }
        }
      });

      if (options.filter_text) {
        masterFilters.text = options.filter_text;
      } else {
        masterFilters.text = '';
      }
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('PositionsService', ['AppClient', 'SharedData', 'RESTClient', '$q', '$http', '$rootScope', '$cookieStore', function (AppClient, SharedData, RESTClient, $q, $http, $rootScope, $cookieStore) {
  var logging = false;
  var company = SharedData.activeCompany.company;
  var user = SharedData.user;
  var positionsByKey = SharedData.activeCompany.positions;
  var positions = SharedData.positions;
  var recentlyViewed = [];
  if (positions.archived) delete positions.archived;
  var archivedRequested = false;
  var states = Object.keys(positions);
  var positionsArray = states.reduce(function (acc, state) {
    return acc.concat(positions[state]);
  }, []); //states.reduce((acc, state) => (acc.concat(positions[state])), []);

  var viewed = $cookieStore.get("PositionsViewed");

  if (!viewed) {
    viewed = {};
  } //var past = new Date(new Date().getTime() - 86400000 * 31);


  positionsArray.forEach(function (position) {
    if (viewed.hasOwnProperty(position._id)) {
      position.last_view_date = viewed[position._id] instanceof Date ? viewed[position._id].getTime() : viewed[position._id];
    } else {
      position.last_view_date = -1;
    }
  });
  $rootScope.$on('toggleStarPosition', function (event, data) {
    var position = _getPositionById(data._id);

    if (position) position.is_starred = !position.is_starred;
  }); //console.log(positionsArray);
  // watch the positions object and update the positionsArray when they change

  $rootScope.$watch(function () {
    return positions;
  }, function watchCallback(newValue, oldValue) {
    // may want to delete some shizzle here (like company) from position
    states = Object.keys(positions);
    positionsArray = states.reduce(function (acc, state) {
      return acc.concat(positions[state]);
    }, []);
    $rootScope.$broadcast('positions:updated');
  }, true);

  var _getPositionById = function getPositionById(positionId) {
    var position = null;

    for (var state in positions) {
      var group = positions[state];
      position = group.find(function (position) {
        return position._id === positionId;
      });
      if (position) break;
    }

    return position;
  };

  var _getPositionDetail = function getPositionDetail(companyId, positionId) {
    var deferred = $q.defer();
    RESTClient.getPositionDetail(companyId, positionId, function (error, result) {
      if (logging) console.log("".concat(result.name, " retrieved from server"));
      deferred.resolve(result);
    });
    return deferred.promise;
  };

  var filterPositions = function filterPositions(filter, position) {
    if (Object.keys(filter).length === 0) return true;
    var keep = false;

    for (var type in filter) {
      if (filters[type]) {
        keep = filters[type](filter[type], position);
        if (logging) console.log("".concat(position.name, " passed ").concat(type.toUpperCase(), ": ").concat(keep));
        if (!keep) break;
      } else {
        console.log("*** unable to find filters.".concat(type, " ***"));
        keep = true;
      }
    }

    if (logging) console.log("Keeping ".concat(position.name, ": ").concat(keep, "\n-----"));
    return keep;
  };

  var filters = {
    filter_text: function filter_text(criteria, position) {
      criteria = criteria.toLowerCase();
      return position.name.toLowerCase().indexOf(criteria) > -1 || position.location && position.location.name && position.location.name.toLowerCase().indexOf(criteria) > -1 || position.requisition_id && position.requisition_id.toLowerCase().indexOf(criteria) > -1;
    },
    members: function members(criteria, position) {
      return criteria.every(function (member) {
        return position.all_users.indexOf(member) > -1;
      });
    },
    state: function state(criteria, position) {
      return criteria.indexOf(position.state) > -1;
    },
    location: function location(criteria, position) {
      return position.location && criteria.indexOf(position.location.name) > -1;
    },
    pipeline: function pipeline(criteria, position) {
      position.pipeline_id = position.pipeline_id || 'default';
      return criteria.indexOf(position.pipeline_id) > -1;
    },
    org_type: function org_type(criteria, position) {
      return criteria.indexOf('position') > -1 && !position.hasOwnProperty('org_type') || criteria.indexOf('pool') > -1 && position.hasOwnProperty('org_type');
    },
    tags: function tags(criteria, position) {
      var tags = position.tags ? position.tags.map(function (tag) {
        return tag.toLowerCase();
      }) : [];
      return position.tags ? criteria.some(function (tag) {
        return tags.indexOf(tag.toLowerCase()) > -1;
      }) : false;
    },
    category: function category(criteria, position) {
      return position.category && criteria.indexOf(position.category.id) > -1;
    },
    created_date: function created_date(criteria, position) {
      var updated = new Date(position.created_date).getTime();
      return criteria.start < updated && updated < criteria.end;
    },
    updated_date: function updated_date(criteria, position) {
      var updated = new Date(position.updated_date).getTime();
      return criteria.start < updated && updated < criteria.end;
    }
  };
  return {
    getters: {
      isAdmin: function isAdmin(positionId) {
        return _getPositionById(positionId).is_admin;
      }
    },
    local: {
      getAllPositions: function getAllPositions() {
        return positionsArray.filter(function (position) {
          return position.state !== 'archived';
        });
      },
      getPublishPositionCount: function getPublishPositionCount() {
        return positionsArray.filter(function (position) {
          return position.state === 'published';
        }).length;
      },
      getFilteredPositions: function getFilteredPositions(filter) {
        var _this = this;

        var deferred = $q.defer();
        var showArchived = false;
        var result;

        if (!company.is_admin) {
          if (!filter.members) {
            filter.members = [user._id];
          } else {
            var index = filter.members.indexOf(user._id);

            if (index === -1) {
              filter.members.push(user._id);
            }
          }
        }

        this.getArchivedPositions(filter.archived).then(function (fetched) {
          result = positionsArray;

          if (filter.archived) {
            showArchived = true;
            delete filter.archived;
          }

          result = result.filter(function (position) {
            return showArchived || position.state !== 'archived';
          }).filter(filterPositions.bind(_this, filter));
          deferred.resolve(result);
        });
        return deferred.promise;
      },
      getPositionById: function getPositionById(positionId) {
        return _getPositionById(positionId);
      },
      getPositionDetail: function getPositionDetail(companyId, positionId) {
        return _getPositionDetail(companyId, positionId);
      },
      getMyMemberPositions: function getMyMemberPositions() {
        /*return [].concat([], positions.published, positions.draft, positions.closed).filter(
            (position) => (position.is_admin)
        );
        */
        var myPositions = [];

        for (var i in positions.published) {
          var p = positions.published[i]; //console.log(p.name + ' - ' + p.state + ' - ' + p.is_member);
          //if(p.is_member) {

          if (p.all_users.indexOf(user._id) > -1) {
            myPositions.push(p);
          }
        }

        for (var j in positions.draft) {
          var d = positions.draft[j]; //console.log(d.name + ' - ' + d.state + ' - ' + d.is_member);
          //if(d.is_member) {

          if (d.all_users.indexOf(user._id) > -1) {
            myPositions.push(d);
          }
        }

        for (var k in positions.closed) {
          var c = positions.closed[k]; //console.log(c.name + ' - ' + c.state + ' - ' + c.is_member);
          //if(c.is_member) {

          if (c.all_users.indexOf(user._id) > -1) {
            myPositions.push(c);
          }
        }

        return myPositions;
      },
      getMyPositions: function getMyPositions() {
        /*return [].concat([], positions.published, positions.draft, positions.closed).filter(
            (position) => (position.is_admin)
        );
        */
        var myPositions = [];

        for (var i in positions.published) {
          var p = positions.published[i];

          if (p.is_admin) {
            myPositions.push(p);
          }
        }

        for (var j in positions.draft) {
          var d = positions.draft[j];

          if (d.is_admin) {
            myPositions.push(d);
          }
        }

        for (var k in positions.closed) {
          var c = positions.closed[k];

          if (c.is_admin) {
            myPositions.push(c);
          }
        }

        return myPositions;
      },
      getMyMemberPositionsGroupedByState: function getMyMemberPositionsGroupedByState() {
        var myPositions = {};
        Object.keys(positions).forEach(function (stage) {
          return myPositions[stage] = positions[stage].filter(function (position) {
            return position.is_member;
          });
        });
        return myPositions;
        /*return [].concat([], positions.published, positions.draft, positions.closed).filter(
            (position) => (position.is_admin)
        );*/
      },
      getMyPositionsGroupedByState: function getMyPositionsGroupedByState() {
        var myPositions = {};
        Object.keys(positions).forEach(function (stage) {
          return myPositions[stage] = positions[stage].filter(function (position) {
            return position.is_admin;
          });
        });
        return myPositions;
        /*return [].concat([], positions.published, positions.draft, positions.closed).filter(
            (position) => (position.is_admin)
        );*/
      },
      getPositionLocations: function getPositionLocations() {
        var p = SharedData.activeCompany.positions;
        var locations = Object.keys(p).map(function (key) {
          return p[key];
        }).reduce(function (acc, position) {
          if (!position.location) return acc;
          if (position.state === 'archived') return acc;

          if (!acc.find(function (location) {
            return location.value === position.location.name;
          })) {
            return acc.concat({
              label: position.location.name,
              value: position.location.name
            });
          } else {
            return acc;
          }
        }, []);
        return locations.sort(function (a, b) {
          return a.label > b.label;
        });
      },
      isPositionReviewable: function isPositionReviewable(users) {
        return !!users.find(function (u) {
          return u._id === SharedData.user._id;
        });
      },
      getPendingPositions: function getPendingPositions() {
        return positionsArray.filter(function (position) {
          return position.is_pending;
        });
      },
      getReviewablePositions: function getReviewablePositions() {
        return positionsArray.filter(function (position) {
          return position.is_reviewable;
        });
      },
      getActivePoolPositions: function getActivePoolPositions() {
        return positionsArray.filter(function (position) {
          return position.hasOwnProperty('org_type') && position.org_type === 'pool';
        });
      },
      movePosition: function movePosition(id, stage) {// eventually
      },
      updatePositionByKeyValue: function updatePositionByKeyValue(positionId, key, value) {
        var position = _getPositionById(positionId);

        position[key] = value;
      },
      // remote
      getArchivedPositions: function getArchivedPositions(fetch) {
        var deferred = $q.defer();
        var resource = "/api/company/".concat(company._id, "/positions?state=archived"); // fetch archived

        if (fetch && !positions.hasOwnProperty('archived')) {
          $http.get(resource).then(function (result) {
            positions.archived = result.data; // update positionsByKey

            positions.archived.forEach(function (position) {
              positionsByKey[position._id] = position;
            }); // update positionArrays

            states = Object.keys(positions);
            positionsArray = states.reduce(function (acc, state) {
              return acc.concat(positions[state]);
            }, []);
            deferred.resolve(true);
          }); // already got 'em'
        } else {
          deferred.resolve(true);
        }

        return deferred.promise;
      },
      positionViewed: function positionViewed(positionId) {
        var viewed = $cookieStore.get("PositionsViewed");

        if (!viewed) {
          viewed = {};
        } //console.log(viewed);


        var current = new Date().getTime();
        viewed[positionId] = current;

        var position = _getPositionById(positionId);

        if (!position) return;
        position.last_view_date = current; // last 20 days max 50

        var times = [];
        Object.keys(viewed).forEach(function (key) {
          if (current - viewed[key] > 1728000000) {
            delete viewed[key];
          } else {
            times.push(viewed[key]);
          }
        });
        var max = 50;

        if (times.length > max) {
          times = times.sort().reverse().splice(max);
          Object.keys(viewed).forEach(function (key) {
            if (times.indexOf(viewed[key]) > -1) {
              delete viewed[key];
            }
          });
        } //console.log('viewed =');
        //console.log(viewed);


        $cookieStore.put("PositionsViewed", viewed, new Date(new Date().getTime() + 86400000 * 30)); // 30 days from now
      },
      getRecentlyViewed: function getRecentlyViewed() {
        return recentlyViewed;
      },
      setRecentlyViewed: function setRecentlyViewed(position) {
        var index = recentlyViewed.findIndex(function (recent) {
          return recent._id === position._id;
        });

        if (index > -1) {
          recentlyViewed.splice(index, 1);
        }

        recentlyViewed.unshift(position);
        recentlyViewed = recentlyViewed.slice(0, 10); //console.log(recentlyViewed);
      }
    },
    remote: {
      getApprovalByToken: function getApprovalByToken(id, token) {
        var deferred = $q.defer();
        var resource = "/api/position/".concat(id, "/approval?token=").concat(token);
        $http.get(resource).then(function (result) {
          deferred.resolve(result.data);
        });
        return deferred.promise;
      },
      getCategories: function getCategories() {
        var deferred = $q.defer();
        $http.get('/data/positionCategories.json').then(function (result) {
          deferred.resolve(result.data);
        });
        return deferred.promise;
      }
    },
    updateCandidateCount: function updateCandidateCount(positionId, change) {
      var position = _getPositionById(positionId);

      position.stats.applicant_count += change;
      if (logging) console.log("".concat(position.name, " candidate count changed to ").concat(position.stats.applicant_count));
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('ReasonService', ['AppClient', 'SharedData', '$q', 'dialog', 'ModalService', function (AppClient, SharedData, $q, dialog, ModalService) {
  var company = SharedData.activeCompany.company; // testing user cues

  /*SharedData.user_cues.active_cues.push({
      _id: 'seen_nurture_campaigns',
      title: 'hello',
      content: 'world'
  });*/

  var reasons = {
    schedule: {
      title: 'Missing email address',
      message: 'An email address is required for scheduling inteviews. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    email: {
      title: 'Missing email address',
      message: 'The candidate is missing an email address. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    questionnaire: {
      title: 'Missing email address',
      message: 'An email address is required for sending questionnaires. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    SMS: {
      title: 'Missing phone number',
      message: 'The candidate is missing a phone number. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    bulk_email: {
      title: 'Missing email address',
      message: 'One or more selected candidates are missing an email address.'
    },
    bulk_SMS: {
      title: 'Missing phone number',
      message: 'One or more selected candidates are missing a phone number.'
    },
    bulk_questionnaire: {
      title: 'Missing email address',
      message: 'One or more selected candidates are missing an email address.'
    },
    bulk_gdpr_consent: {
      title: 'Missing email address',
      message: 'One or more selected candidates are missing an email address.'
    },
    bulk_gdpr_data: {
      title: 'Missing email address',
      message: 'One or more selected candidates are missing an email address.'
    },
    background_check: {
      title: 'Not configured',
      message: 'You don\'t have any background check providers configured yet. Would you like to now?',
      action: ModalService.accountSettings
    },
    background_check_non_admin: {
      title: 'Not configured',
      message: 'You don\'t have any background check providers configured yet.'
    },
    background_check_email: {
      title: 'Missing email address',
      message: 'The candidate is missing an email address. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    assessments: {
      title: 'Not configured',
      message: 'You don\'t have any assessment providers configured yet. Would you like to now?',
      action: ModalService.accountSettings
    },
    assessments_non_admin: {
      title: 'Not configured',
      message: 'You don\'t have any assessment providers configured yet.'
    },
    assessments_email: {
      title: 'Missing email address',
      message: 'The candidate is missing an email address. Would you like to add one now?',
      action: ModalService.openEditCandidate
    },
    unpublished: {
      title: 'Unavailable',
      message: 'You cannot communicate with candidates on inactive positions.'
    }
  };
  var ReasonStore = {
    getMessage: function getMessage(type) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var deferred = $q.defer();

      if (['background_check', 'assessments'].indexOf(type) > -1 && company.user_role.id !== 'company_admin') {
        type += '_non_admin';
        dialog.alert(reasons[type], function (result) {
          deferred.resolve();
        });
      } else if (['bulk_email', 'bulk_questionnaire', 'bulk_gdpr_consent', 'bulk_gdpr_data', 'bulk_SMS', 'unpublished'].indexOf(type) > -1) {
        dialog.alert(reasons[type], function (result) {
          deferred.resolve();
        });
      } else {
        dialog.confirm(reasons[type], function (result) {
          if (result && reasons[type].action) {
            var _reasons$type;

            (_reasons$type = reasons[type]).action.apply(_reasons$type, args).then(function (result) {
              deferred.resolve(result);
            });
          } else {
            deferred.reject();
          }
        });
      }

      return deferred.promise;
    }
  };
  return ReasonStore;
}]);
'use strict';

angular.module('BaseApp').factory('ReportService', ['$uibModal', function ($uibModal) {
  //var colors = ['#d66c74','#A8DADC','#457B9D','#1D3557','#e25359','#5ac0e5','#b0c4de','#8fbc8f','#8b8878','#bdb76b','#9acd32','#2e8b57','#9acd32','#deb778','#daa520','#cd853f','#a0522d'];
  //var colors = ['#028090','#FF9B71','#3D315B','#444B6E','#05668D','#5ac0e5','#b0c4de','#8fbc8f','#8b8878','#bdb76b','#9acd32','#2e8b57','#9acd32','#deb778','#daa520','#cd853f','#a0522d'];
  //colors = ["rgba(255,99,132,.9)", "#ffcf9f", "#ffe6aa", "#a5dfdf", "#9ad0f5", "#c9cbcf", "#ff6384", "#ff9f40", "#ffcd56", "#4bc0c0", "#36a2eb", "#9966ff"]
  var opacities = [0.8, 0.65, 0.5, 0.35, 0.2];
  var base_colors = ['255,99,132', '54,162,235', '255,159,64', '75,192,192', '255,205,86', '153,102,255', '201,203,207'];
  var colors = [];
  opacities.forEach(function (opacity) {
    base_colors.forEach(function (color) {
      colors.push("rgba(".concat(color, ",").concat(opacity, ")"));
    });
  }); //colors = ['rgba(255,99,132,.9)']

  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
  var weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var lineDefaults = {
    fill: false,
    animation: false,
    datasetFill: false,
    pointBorderColor: "#fff",
    borderWidth: 4,
    pointRadius: 5,
    pointHoverRadius: 5,
    pointBorderWidth: 1
  };
  var pointOptions = {
    showLine: false,
    pointRadius: 10,
    pointHoverRadius: 10
  };
  var overviewFields = [{
    label: 'Total Applied',
    key: 'total'
  }, {
    label: 'Previous Total',
    key: 'total_previous'
  }, {
    label: 'Change',
    key: 'change',
    postfix: '%'
  }, {
    label: 'Avg. Score',
    key: 'average_score'
  }, {
    label: 'Previous Avg.',
    key: 'average_score_previous'
  }, {
    label: 'Change',
    key: 'score_change',
    postfix: '%'
  }];
  var mappers = {
    SourcesOverview: [{
      label: 'Sources',
      key: '_id.sourceName'
    }].concat(overviewFields),
    SourcerOverview: [{
      label: 'Sourcers',
      key: '_id'
    }].concat(overviewFields),
    ReferrerOverview: [{
      label: 'Referrer',
      key: '_id'
    }].concat(overviewFields),
    RecruiterOverview: [{
      label: 'Recruiter',
      key: '_id'
    }].concat(overviewFields),
    PipelineFunnel: [{
      label: 'Name',
      key: 'name'
    }, {
      label: 'Count',
      key: 'count'
    }, {
      label: '% Forward',
      key: 'percent_forward'
    }, {
      label: 'Prev. Count',
      key: 'previous_count'
    }, {
      label: 'Prev. % Forward',
      key: 'previous_percent_forward'
    }, {
      label: 'Change',
      key: 'change',
      postfix: '%'
    }],
    CategoryTimetofill: [{
      label: 'Category',
      key: 'name'
    }, {
      label: 'Avg. Time to Fill',
      key: 'avg_days_to_fill'
    }, {
      label: 'Avg. Time to Hire',
      key: 'avg_time_to_hire'
    }]
  };

  var getPieCSVData = function getPieCSVData(mapper, data) {
    var csvData = [];
    var headerRow = [];
    data.forEach(function (row, i) {
      var csvDataRow = [];
      mapper.forEach(function (field) {
        if (i === 0) {
          headerRow.push(field.label);
        }

        var value = row[field.key];
        csvDataRow.push(value);
      });
      csvData.push(csvDataRow);
    });
    csvData.unshift(headerRow);
    return csvData;
  };

  var getTableCSVData = function getTableCSVData(mapper, data) {
    var csvData = [];
    var headerRow = [];
    data.forEach(function (row, i) {
      var csvDataRow = [];
      mappers[mapper].forEach(function (field) {
        if (i === 0) {
          headerRow.push(field.label);
        }

        var value = field.key.split('.').reduce(function (o, i) {
          return o[i];
        }, row);

        if (field.postfix) {
          value += field.postfix;
        }

        csvDataRow.push(value);
      });
      csvData.push(csvDataRow);
    });
    csvData.unshift(headerRow);
    return csvData;
  };

  var getLineChartData = function getLineChartData(sources, data, field, overrideType) {
    var options = {};

    if (overrideType) {
      options = pointOptions;
    }

    var line = {
      labels: [],
      datasets: []
    };
    Object.keys(data).forEach(function (key) {
      var date = data[key];
      line.labels.push(date.label);
      sources.forEach(function (source, index) {
        if (date.data.hasOwnProperty(source.sourceId)) {
          if (typeof line.datasets[index] === 'undefined') {
            var dataset = Object.assign({}, lineDefaults, options, {
              borderColor: colors[index],
              pointBackgroundColor: colors[index],
              label: source.sourceName,
              data: []
            });
            line.datasets.push(dataset);
          }

          if (field) {
            line.datasets[index].data.push(date.data[source.sourceId][field]);
          } else {
            line.datasets[index].data.push(date.data[source.sourceId]);
          }
        }
      });
    });
    return line;
  };

  return {
    colors: colors,
    months: months,
    weekdays: weekdays,
    getTableCSVData: getTableCSVData,
    getPieCSVData: getPieCSVData,
    getLineChartData: getLineChartData
  };
}]);
'use strict';

angular.module('BaseApp').factory('RESTClient', function ($http, $upload, SharedData, $q) {
  var API_ROOT = '/api';

  var formatResource = function formatResource(resource, addToken) {
    var apiResource = API_ROOT + resource;

    if (addToken === true) {
      if (resource.indexOf("?") == -1) {
        apiResource += '?';
      } else {
        apiResource += '&';
      }
    }

    return apiResource;
  };

  var formatParams = function formatParams(params) {
    var arr = [];

    for (var key in params) {
      arr.push(key + '=' + params[key]);
    }

    return arr.join('&');
  };

  var get = function get(resource, callback) {
    var apiResource = formatResource(resource, true);
    $http.get(apiResource).success(function (data) {
      return callback(null, data);
    }).error(function (error) {
      if (!error) {
        error = {
          error: 'An unknown error occurred.'
        };
      }

      return callback(error);
    });
  };

  var getAsync = function getAsync(resource) {
    return $q(function (resolve, reject) {
      var apiResource = formatResource(resource, true);
      $http.get(apiResource).success(function (data) {
        resolve(data);
      }).error(function (error) {
        reject(error);
      });
    });
  };

  var del = function del(resource, callback) {
    var apiResource = formatResource(resource, true);
    $http.delete(apiResource).success(function (data) {
      return callback(null, data);
    }).error(function (error) {
      return callback(error);
    });
  };

  var delAsync = function delAsync(resource, callback) {
    return $q(function (resolve, reject) {
      var apiResource = formatResource(resource, true);
      $http.delete(apiResource).success(function (data) {
        resolve(data);
      }).error(function (error) {
        reject(error);
      });
    });
  };

  var put = function put(resource, data, callback) {
    var apiResource = formatResource(resource, false);
    $http.put(apiResource, data).success(function (data) {
      return callback(null, data);
    }).error(function (error) {
      return callback(error);
    });
  };

  var putAsync = function putAsync(resource, data) {
    return $q(function (resolve, reject) {
      var apiResource = formatResource(resource, false);
      $http.put(apiResource, data).success(function (data) {
        resolve(data);
      }).error(function (error) {
        reject(error);
      });
    });
  };

  var post = function post(resource, data, callback) {
    var apiResource = formatResource(resource, false);
    $http.post(apiResource, data).success(function (data) {
      return callback(null, data);
    }).error(function (error) {
      return callback(error);
    });
  };

  var postAsync = function postAsync(resource, data) {
    return $q(function (resolve, reject) {
      var apiResource = formatResource(resource, false);
      $http.post(apiResource, data).success(function (data) {
        resolve(data);
      }).error(function (error) {
        reject(error);
      });
    });
  };

  return {
    getAppStatus: function getAppStatus(callback) {
      get('/app_status', callback);
    },
    signin: function signin(data, callback) {
      post('/signin', data, callback);
    },
    signup: function signup(data, callback) {
      post('/signup', data, callback);
    },
    signout: function signout(callback) {
      get('/signout', callback);
    },
    requestQuote: function requestQuote(data, callback) {
      post('/quote-request', data, callback);
    },
    getReport: function getReport(reportType, companyId, positionId, filter, callback) {
      //console.log(`${reportType}, ${companyId}, ${positionId}, ${filter}`)
      if (positionId) {
        get('/company/' + companyId + '/position/' + positionId + '/reports/' + reportType + '?' + formatParams(filter), callback);
      } else {
        get('/company/' + companyId + '/reports/' + reportType + '?' + formatParams(filter), callback);
      }
    },
    getReportExport: function getReportExport(reportType, companyId, positionId, filter, callback) {
      var resource = '/company/' + companyId + '/reports/export/' + reportType + '?' + formatParams(filter);
      window.location = formatResource(resource);
    },
    getProductUpdates: function getProductUpdates(callback) {
      get('/updates', callback);
    },
    emailVerifyAndCreateAccount: function emailVerifyAndCreateAccount(tokenId, callback) {
      get('/signup/email/' + tokenId + '/verify', callback);
    },
    getUserSocketToken: function getUserSocketToken(callback) {
      get('/user/token', callback);
    },
    updatePortal: function updatePortal(portalSection, companyId, data, callback) {
      put("/company/".concat(companyId, "/portal/").concat(portalSection), data, callback);
    },
    updatePortalLayout: function updatePortalLayout(companyId, layout, callback) {
      put('/company/' + companyId + '/portal/layout', layout, callback);
    },
    updatePortalAppearance: function updatePortalAppearance(companyId, appearance, callback) {
      put('/company/' + companyId + '/portal/appearance', appearance, callback);
    },
    updatePortalMedia: function updatePortalMedia(companyId, media, callback) {
      put('/company/' + companyId + '/portal/media', media, callback);
    },
    updatePortalPerks: function updatePortalPerks(companyId, perks, callback) {
      put('/company/' + companyId + '/portal/perks', perks, callback);
    },
    updatePortalEmployees: function updatePortalEmployees(companyId, employees, callback) {
      put('/company/' + companyId + '/portal/employees', employees, callback);
    },
    updatePortalTestimonials: function updatePortalTestimonials(companyId, testimonials, callback) {
      put('/company/' + companyId + '/portal/testimonials', testimonials, callback);
    },
    updatePortalMessaging: function updatePortalMessaging(companyId, messaging, callback) {
      put('/company/' + companyId + '/portal/messaging', messaging, callback);
    },
    updatePortalSocial: function updatePortalSocial(companyId, social, callback) {
      put('/company/' + companyId + '/portal/social', social, callback);
    },
    updatePortalReferral: function updatePortalReferral(companyId, referral, callback) {
      put('/company/' + companyId + '/portal/referral', referral, callback);
    },
    updateMessenger: function updateMessenger(companyId, messenger, callback) {
      post('/company/' + companyId + '/messenger', messenger, callback);
    },
    getMessenger: function getMessenger(companyId, callback) {
      get('/company/' + companyId + '/messenger', callback);
    },
    addWidgetTemplate: function addWidgetTemplate(companyId, template, callback) {
      post('/company/' + companyId + '/widget/template', template, callback);
    },
    updateWidgetTemplate: function updateWidgetTemplate(companyId, template, callback) {
      put('/company/' + companyId + '/widget/template/' + template._id, template, callback);
    },
    deleteWidgetTemplate: function deleteWidgetTemplate(companyId, templateId, callback) {
      del('/company' + companyId + '/widget/template/' + templateId);
    },
    updateReferralPortalMessaging: function updateReferralPortalMessaging(companyId, messaging, callback) {
      put('/company/' + companyId + '/referral-portal/messaging', messaging, callback);
    },
    getUserCues: function getUserCues(companyId, callback) {
      get("/company/" + companyId + "/user/cues", callback);
    },
    setUserCue: function setUserCue(companyId, cueKey, callback) {
      put("/company/" + companyId + "/user/cue/" + cueKey, {}, callback);
    },
    getTaskMetadata: function getTaskMetadata(companyId, taskId, callback) {
      get("/company/" + companyId + "/task/" + taskId + "/meta", callback);
    },
    getTask: function getTask(taskId, companyId, callback) {
      get("/company/" + companyId + "/task/" + taskId, callback);
    },
    getTasks: function getTasks(options, params, companyId, callback) {
      var resource = "";

      if (options.candidateId) {
        resource = "/company/" + companyId + "/position/" + options.positionId + "/candidate/" + options.candidateId + "/tasks/" + options.type + "?";
      } else if (options.positionId) {
        resource = "/company/" + companyId + "/position/" + options.positionId + "/tasks/" + options.type + "?";
      } else {
        resource = "/company/" + companyId + "/tasks/" + options.type + "?";
      }

      if (params.include_completed) {
        resource += "&include_completed=true";
      }

      get(resource, callback);
    },
    createTask: function createTask(data, companyId, callback) {
      var path = "/company/" + companyId + "/tasks";

      if (data.candidate_id) {
        path = "/company/" + companyId + "/position/" + data.position_id + "/candidate/" + data.candidate_id + "/tasks";
      } else if (data.position_id) {
        path = "/company/" + companyId + "/position/" + data.position_id + "/tasks";
      }

      post(path, data, callback);
    },
    updateTask: function updateTask(data, companyId, callback) {
      var path = "/company/" + companyId + "/task/" + data._id;

      if (data.candidate_id) {
        path = "/company/" + companyId + "/position/" + data.position_id + "/candidate/" + data.candidate_id + "/task/" + data._id;
      } else if (data.position_id) {
        path = "/company/" + companyId + "/position/" + data.position_id + "/task/" + data._id;
      }

      put(path, data, callback);
    },
    deleteTask: function deleteTask(taskId, companyId, callback) {
      var path = "/company/" + companyId + "/task/" + taskId;
      del(path, callback);
    },
    markTaskComplete: function markTaskComplete(companyId, taskId, callback) {
      put('/company/' + companyId + '/task/' + taskId + '/complete', {}, callback);
    },
    getNotificationSettings: function getNotificationSettings(data, callback) {
      get('/user/settings/notifications', data, callback);
    },
    updateNotificationSettings: function updateNotificationSettings(data, callback) {
      put('/user/settings/notifications', data, callback);
    },
    updateUser: function updateUser(data, callback) {
      put('/user', data, callback);
    },
    getUserReferralUrl: function getUserReferralUrl(callback) {
      get('/user/referral', callback);
    },
    getUserCalendar: function getUserCalendar(companyId, callback) {
      get("/company/" + companyId + "/user/calendar", callback);
    },
    getGoogleFreebusy: function getGoogleFreebusy(companyId, additionalParticipants) {
      var data = {};
      if (additionalParticipants) data.additionalParticipants = additionalParticipants;
      return postAsync("/company/" + companyId + "/user/calendar/google-freebusy", data);
    },
    getOutlookFreebusy: function getOutlookFreebusy(companyId, additionalParticipants) {
      var data = {};
      if (additionalParticipants) data.additionalParticipants = additionalParticipants;
      return postAsync("/company/" + companyId + "/user/calendar/outlook-freebusy", data);
    },
    getUser: function getUser(callback) {
      get('/user', callback);
    },
    getUserById: function getUserById(userId, callback) {
      get('/user?user_id=' + userId, callback);
    },
    getUserByEmail: function getUserByEmail(email, callback) {
      get('/user?email=' + email, callback);
    },
    getUserByUsername: function getUserByUsername(username, callback) {
      get('/user?user_name=' + username, callback);
    },
    getUserCompanies: function getUserCompanies(callback) {
      get('/user/companies', callback);
    },
    getUserCompaniesDetail: function getUserCompaniesDetail(callback) {
      get('/user/companies/detail', callback);
    },
    getUserCompaniesMeta: function getUserCompaniesMeta(callback) {
      get('/user/companies/meta', callback);
    },
    cancelSubscription: function cancelSubscription(companyId, feedback, callback) {
      post("/company/" + companyId + "/cancel", feedback, callback);
    },
    closeCompanyAccount: function closeCompanyAccount(companyId, feedback, callback) {
      post("/company/" + companyId + "/close", feedback, callback);
    },
    addCompany: function addCompany(companyData, callback) {
      post('/company', companyData, callback);
    },
    updateDefaultSubject: function updateDefaultSubject(companyId, subject, callback) {
      var data = {
        'subject': subject
      };
      put('/company/' + companyId + '/subject', data, callback);
    },
    updateCompany: function updateCompany(companyId, companyData, callback) {
      put('/company/' + companyId, companyData, callback);
    },
    deleteSegment: function deleteSegment(segmentId, callback) {
      del('/user/segment/' + segmentId, callback);
    },
    addSegment: function addSegment(segment, callback) {
      post('/user/segments', segment, callback);
    },
    deleteDiscussionNote: function deleteDiscussionNote(companyId, positionId, candidateId, activityId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/stream/' + activityId, callback);
    },
    updateDiscussionNote: function updateDiscussionNote(data, companyId, positionId, candidateId, activityId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/stream/' + activityId, data, callback);
    },
    deleteCandidateNote: function deleteCandidateNote(companyId, positionId, candidateMetaId, noteId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateMetaId + '/note/' + noteId, callback);
    },
    addCandidateNote: function addCandidateNote(data, companyId, positionId, candidateMetaId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateMetaId + '/notes', data, callback);
    },
    updateCandidateNote: function updateCandidateNote(data, companyId, positionId, candidateMetaId, noteId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateMetaId + '/note/' + noteId, data, callback);
    },
    getCandidateScorecard: function getCandidateScorecard(companyId, positionId, candidateId, callback) {
      get("/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/scorecard"), callback);
    },
    addCandidateScorecard: function addCandidateScorecard(scorecard, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/scorecard', scorecard, callback);
    },
    deleteScorecard: function deleteScorecard(companyId, scorecardId, callback) {
      del('/company/' + companyId + '/scorecard/' + scorecardId, callback);
    },
    addScorecard: function addScorecard(companyId, scorecard, callback) {
      post('/company/' + companyId + '/scorecards', scorecard, callback);
    },
    updateScorecard: function updateScorecard(companyId, scorecard, callback) {
      put('/company/' + companyId + '/scorecard/' + scorecard._id, scorecard, callback);
    },
    getScorecards: function getScorecards(companyId, callback) {
      get('/company/' + companyId + '/scorecards', callback);
    },
    deleteInterviewGuide: function deleteInterviewGuide(companyId, guideId, callback) {
      del('/company/' + companyId + '/interviewguide/' + guideId, callback);
    },
    addInterviewGuide: function addInterviewGuide(companyId, guide, callback) {
      post('/company/' + companyId + '/interviewguides', guide, callback);
    },
    updateInterviewGuide: function updateInterviewGuide(companyId, guide, callback) {
      put('/company/' + companyId + '/interviewguide/' + guide._id, guide, callback);
    },
    // approvals
    requestPublishApproval: function requestPublishApproval(companyId, positionId, request, callback) {
      put("/company/".concat(companyId, "/position/").concat(positionId, "/approval"), request, callback);
    },
    approvePublishApproval: function approvePublishApproval(companyId, positionId, callback) {
      get("/company/".concat(companyId, "/position/").concat(positionId, "/approval/approve"), callback);
    },
    rejectPublishApproval: function rejectPublishApproval(companyId, positionId, callback) {
      get("/company/".concat(companyId, "/position/").concat(positionId, "/approval/reject"), callback);
    },
    cancelPublishApproval: function cancelPublishApproval(companyId, positionId, callback) {
      get("/company/".concat(companyId, "/position/").concat(positionId, "/approval/cancel"), callback);
    },
    deleteTeam: function deleteTeam(companyId, teamId, callback) {
      del('/company/' + companyId + '/teams/' + teamId, callback);
    },
    updateTeam: function updateTeam(companyId, team, callback) {
      put('/company/' + companyId + '/teams/' + team._id, team, callback);
    },
    addTeam: function addTeam(companyId, team, callback) {
      post('/company/' + companyId + '/teams', team, callback);
    },
    getTeams: function getTeams(companyId, callback) {
      get('/company/' + companyId + '/teams', callback);
    },
    deleteQuestionnaire: function deleteQuestionnaire(companyId, questionnaireId, callback) {
      del('/company/' + companyId + '/questionnaire/' + questionnaireId, callback);
    },
    addQuestionnaire: function addQuestionnaire(companyId, questionnaire, callback) {
      post('/company/' + companyId + '/questionnaires', questionnaire, callback);
    },
    addCandidateSchedulingLink: function addCandidateSchedulingLink(companyId, positionId, candidateId, schedulingLinkFriendlyId, data, callback) {
      if (schedulingLinkFriendlyId) {
        post("/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/scheduling-link/").concat(schedulingLinkFriendlyId), null, callback);
      } else {
        post("/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/scheduling-link"), data, callback);
      }
    },
    addCandidateQuestionnaire: function addCandidateQuestionnaire(companyId, positionId, candidateId, questionnaireId, callback) {
      get("/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/questionnaire/").concat(questionnaireId), callback);
    },
    addCompanySchedulingLink: function addCompanySchedulingLink(companyId, data, callback) {
      post("/company/".concat(companyId, "/scheduling-link"), data, callback);
    },
    updateCompanySchedulingLink: function updateCompanySchedulingLink(companyId, schedulingLinkId, data, callback) {
      put("/company/".concat(companyId, "/scheduling-link/").concat(schedulingLinkId), data, callback);
    },
    deleteCompanySchedulingLink: function deleteCompanySchedulingLink(companyId, schedulingLinkId, callback) {
      del("/company/".concat(companyId, "/scheduling-link/").concat(schedulingLinkId), callback);
    },
    updateQuestionnaire: function updateQuestionnaire(companyId, questionnaire, callback) {
      put('/company/' + companyId + '/questionnaire/' + questionnaire._id, questionnaire, callback);
    },
    getQuestionnaire: function getQuestionnaire(companyId, callback) {
      get('/company/' + companyId + '/questionnaires', callback);
    },
    getCustomAttributes: function getCustomAttributes(companyId, type, callback) {
      get("/company/".concat(companyId, "/customattributes/").concat(type), callback);
    },
    addReference: function addReference(companyId, positionId, candidateId, reference, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/reference', reference, callback);
    },
    updateReference: function updateReference(companyId, positionId, candidateId, reference, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/reference/' + reference._id, reference, callback);
    },
    getGDPRTemplates: function getGDPRTemplates(companyId, callback) {
      get("/company/".concat(companyId, "/templates/gdpr"), callback);
    },
    addCompanyTemplate: function addCompanyTemplate(companyId, template, callback) {
      post('/company/' + companyId + '/templates', template, callback);
    },
    deleteCompanyTemplate: function deleteCompanyTemplate(companyId, templateId, callback) {
      del('/company/' + companyId + '/template/' + templateId, callback);
    },
    updateCompanyTemplate: function updateCompanyTemplate(companyId, template, callback) {
      put('/company/' + companyId + '/template/' + template._id, template, callback);
    },
    addCompanyCampaign: function addCompanyCampaign(companyId, campaign, callback) {
      post('/company/' + companyId + '/campaigns', campaign, callback);
    },
    deleteCompanyCampaign: function deleteCompanyCampaign(companyId, campaignId, callback) {
      del('/company/' + companyId + '/campaign/' + campaignId, callback);
    },
    updateCompanyCampaign: function updateCompanyCampaign(companyId, campaign, callback) {
      put('/company/' + companyId + '/campaign/' + campaign._id, campaign, callback);
    },
    addCompanyFolder: function addCompanyFolder(companyId, folder, callback) {
      post('/company/' + companyId + '/folders', folder, callback);
    },
    updateCompanyFolder: function updateCompanyFolder(companyId, folder, callback) {
      put('/company/' + companyId + '/folder/' + folder._id, folder, callback);
    },
    deleteCompanyFolder: function deleteCompanyFolder(companyId, folderId, callback) {
      del('/company/' + companyId + '/folder/' + folderId, callback);
    },
    addCompanyCustomField: function addCompanyCustomField(companyId, customField, callback) {
      post('/company/' + companyId + '/custom-fields', customField, callback);
    },
    updateCompanyCustomField: function updateCompanyCustomField(companyId, customField, callback) {
      put('/company/' + companyId + '/custom-field/' + customField._id, customField, callback);
    },
    deleteCompanyCustomField: function deleteCompanyCustomField(companyId, customFieldId, callback) {
      del('/company/' + companyId + '/custom-field/' + customFieldId, callback);
    },
    updateReasons: function updateReasons(companyId, reasons, callback) {
      put("/company/".concat(companyId, "/reasons"), reasons, callback);
    },
    getLimitsByType: function getLimitsByType(companyId, type, callback) {
      get("/company/".concat(companyId, "/limit/").concat(type), callback);
    },
    // COMPANY SOURCES
    getCompanySources: function getCompanySources(companyId, callback) {
      get("/company/".concat(companyId, "/sources"), callback);
    },
    addCompanySource: function addCompanySource(companyId, source, callback) {
      post("/company/".concat(companyId, "/sources"), source, callback);
    },
    updateCompanySource: function updateCompanySource(companyId, source, callback) {
      put("/company/".concat(companyId, "/source/").concat(source._id), source, callback);
    },
    deleteCompanySources: function deleteCompanySources(companyId, sourceId, callback) {
      del("/company/".concat(companyId, "/source/").concat(sourceId), callback);
    },
    getCompanyWidget: function getCompanyWidget(companyId, callback) {
      get('/company/' + companyId + '/widget', callback);
    },
    updateCompanyWidget: function updateCompanyWidget(companyId, widget, callback) {
      put('/company/' + companyId + '/widget', widget, callback);
    },
    getCompanyTemplates: function getCompanyTemplates(companyId, callback) {
      get('/company/' + companyId + '/templates', callback);
    },
    getCompanyTeam: function getCompanyTeam(companyId, callback) {
      get('/company/' + companyId + '/members', callback);
    },
    setApprovalWorkflow: function setApprovalWorkflow(companyId, data, callback) {
      put("/company/".concat(companyId, "/approval-workflow"), data, callback);
    },
    getTags: function getTags(companyId, callback) {
      get('/company/' + companyId + '/tags', callback);
    },
    addTags: function addTags(companyId, tags, callback) {
      post('/company/' + companyId + '/tags', tags, callback);
    },
    deleteTags: function deleteTags(companyId, tags, callback) {
      put('/company/' + companyId + '/tags', tags, callback);
    },
    getPipelines: function getPipelines(companyId, callback) {
      get('/company/' + companyId + '/pipelines', callback);
    },
    addPipeline: function addPipeline(companyId, pipeline, callback) {
      post('/company/' + companyId + '/pipeline', pipeline, callback);
    },
    updatePipeline: function updatePipeline(companyId, pipelineId, pipeline, callback) {
      var endpoint = '/company/' + companyId + '/pipeline';
      if (pipelineId) endpoint += '/' + pipelineId;
      put(endpoint, pipeline, callback);
    },
    deletePipeline: function deletePipeline(companyId, pipelineId, callback) {
      del('/company/' + companyId + '/pipeline/' + pipelineId, callback);
    },
    setPositionPipeline: function setPositionPipeline(pipelineId, positionId, companyId, callback) {
      var data = {
        'pipeline_id': pipelineId
      };
      put('/company/' + companyId + '/position/' + positionId + '/pipeline', data, callback);
    },
    updateCompanySubscriptionPlan: function updateCompanySubscriptionPlan(companyId, type, planId, cancel, callback) {
      put('/company/' + companyId + '/plan', {
        'type': type,
        'plan_id': planId,
        'cancel': cancel
      }, callback);
    },
    getCompanySubscriptionPlan: function getCompanySubscriptionPlan(companyId, callback) {
      get('/company/' + companyId + '/plan', callback);
    },
    getCompanySubscriptionPlanCompare: function getCompanySubscriptionPlanCompare(companyId, planId, callback) {
      get('/company/' + companyId + '/plan/' + planId + '/compare', callback);
    },
    updateCompanyBillingDescription: function updateCompanyBillingDescription(companyId, data, callback) {
      put('/company/' + companyId + '/billing/description', data, callback);
    },
    getCompanyBillingDescription: function getCompanyBillingDescription(companyId, callback) {
      get('/company/' + companyId + '/billing/description', callback);
    },
    updateCompanyBillingAddress: function updateCompanyBillingAddress(companyId, billingAddress, callback) {
      put('/company/' + companyId + '/billing/address', billingAddress, callback);
    },
    getCompanyBillingAddress: function getCompanyBillingAddress(companyId, callback) {
      get('/company/' + companyId + '/billing/address', callback);
    },
    updateCompanyCreditCard: function updateCompanyCreditCard(companyId, token, callback) {
      put('/company/' + companyId + '/billing/card', {
        'token': token
      }, callback);
    },
    getCompanyCreditCard: function getCompanyCreditCard(companyId, callback) {
      get('/company/' + companyId + '/billing/card', callback);
    },
    getCompanyInvoices: function getCompanyInvoices(companyId, callback) {
      get('/company/' + companyId + '/billing/invoices', callback);
    },
    getCompany: function getCompany(companyId, callback) {
      get('/company/' + companyId, callback);
    },
    getCompanyDetail: function getCompanyDetail(companyId, callback) {
      get('/company/' + companyId + '/detail', callback);
    },
    getCompanyStream: function getCompanyStream(companyId, callback) {
      get('/company/' + companyId + '/stream', callback);
    },
    cancelInvitation: function cancelInvitation(companyId, inviteId, callback) {
      del('/company/' + companyId + '/invite/' + inviteId, callback);
    },
    updateMemberTeams: function updateMemberTeams(companyId, userId, data, callback) {
      post('/company/' + companyId + '/members/' + userId + '/teams', data, callback);
    },
    inviteCompanyUser: function inviteCompanyUser(companyId, data, callback) {
      post('/company/' + companyId + '/members/invitation', data, callback);
    },
    inviteCompanyMember: function inviteCompanyMember(companyId, inviteData, callback) {
      post('/company/' + companyId + '/members/invite', inviteData, callback);
    },
    inviteCompanyAdmin: function inviteCompanyAdmin(companyId, inviteData, callback) {
      post('/company/' + companyId + '/members/invite/admin', inviteData, callback);
    },
    removeCompanyMember: function removeCompanyMember(companyId, userId, callback) {
      del('/company/' + companyId + '/member/' + userId, callback);
    },
    addCompanyAdmin: function addCompanyAdmin(companyId, userId, callback) {
      put('/company/' + companyId + '/admins/' + userId, {}, callback);
    },
    removeCompanyAdmin: function removeCompanyAdmin(companyId, userId, callback) {
      del('/company/' + companyId + '/admins/' + userId, callback);
    },
    getInvitation: function getInvitation(inviteId, callback) {
      get('/invite/' + inviteId, callback);
    },
    getInvitations: function getInvitations(companyId, positionId, callback) {
      if (positionId) {
        get('/company/' + companyId + '/position/' + positionId + '/invites', callback);
      } else {
        get('/company/' + companyId + '/invites', callback);
      }
    },
    acceptInvitation: function acceptInvitation(inviteId, callback) {
      get('/invite/' + inviteId + '/accept', callback);
    },
    getJobBoards: function getJobBoards(callback) {
      get('/job-boards', callback);
    },
    disableIntegration: function disableIntegration(serviceId, companyId, callback) {
      del('/company/' + companyId + '/integrations/' + serviceId, callback);
    },
    getIntegrations: function getIntegrations(companyId, callback) {
      get('/company/' + companyId + '/integrations', callback);
    },
    testBambooHRConfig: function testBambooHRConfig(companyId, callback) {
      get('/company/' + companyId + '/integrations/bamboohr/test', callback);
    },
    updateBambooHRConfig: function updateBambooHRConfig(config, companyId, callback) {
      put('/company/' + companyId + '/integrations/bamboohr/config', config, callback);
    },
    updateCheckrConfig: function updateCheckrConfig(data) {
      return putAsync('/company/' + data.companyId + '/integrations/checkr/config', {
        'checkr': data.checkr
      });
    },
    updateIndeedSponsoredConfig: function updateIndeedSponsoredConfig(emailAddress, companyId, callback) {
      put('/company/' + companyId + '/integrations/indeed_sponsored/config', {
        'email_address': emailAddress
      }, callback);
    },
    updateFacebookFeedConfig: function updateFacebookFeedConfig(companyFullAddress, facebookUrl, companyId, callback) {
      put('/company/' + companyId + '/integrations/facebook_feed/config', {
        'company_full_address': companyFullAddress,
        'facebook_url': facebookUrl
      }, callback);
    },
    updateWorkableConfig: function updateWorkableConfig(subdomain, accessToken, companyId, callback) {
      put('/company/' + companyId + '/integrations/workable/config', {
        'subdomain': subdomain,
        access_token: accessToken
      }, callback);
    },
    startWorkableImport: function startWorkableImport(companyId, callback) {
      post('/company/' + companyId + '/integrations/workable/import', {}, callback);
    },
    updateNamelyConfig: function updateNamelyConfig(data, companyId, callback) {
      put('/company/' + companyId + '/integrations/namely/config', data, callback);
    },
    updateInovaPayrollConfig: function updateInovaPayrollConfig(data, callback) {
      put('/company/' + data.companyId + '/integrations/inovapayroll/config', {
        company_short_name: data.companyShortName,
        api_key: data.apiKey,
        username: data.username,
        password: data.password
      }, callback);
    },
    updateHackerRankConfig: function updateHackerRankConfig(apiKey, companyId, callback) {
      put('/company/' + companyId + '/integrations/hackerrank/config', {
        api_key: apiKey
      }, callback);
    },
    updateIndeedAssessmentsConfig: function updateIndeedAssessmentsConfig(apiKey, companyId, callback) {
      put('/company/' + companyId + '/integrations/indeedassessments/config', {
        api_key: apiKey
      }, callback);
    },
    updateTraitifyConfig: function updateTraitifyConfig(apiKey, companyId, callback) {
      put('/company/' + companyId + '/integrations/traitify/config', {
        api_key: apiKey
      }, callback);
    },
    updateXingConfig: function updateXingConfig(orderId, companyId, callback) {
      put('/company/' + companyId + '/integrations/xing/config', {
        order_id: orderId
      }, callback);
    },
    updateCriteriaCorpConfig: function updateCriteriaCorpConfig(data, callback) {
      var body = {
        account_id: data.account_id
      };
      put('/company/' + data.companyId + '/integrations/criteriacorp/config', body, callback);
    },
    updateDeputyConfig: function updateDeputyConfig(data, callback) {
      var body = {
        deputy: data.deputy
      };
      put('/company/' + data.companyId + '/integrations/deputy/config', body, callback);
    },
    // data - advertiser_ids, mandatory_standout, company_id
    updateSeekConfig: function updateSeekConfig(data, callback) {
      put('/company/' + data.company_id + '/integrations/seek/config', data, callback);
    },
    // data - username, password, companyId
    updateCvlibraryConfig: function updateCvlibraryConfig(data, callback) {
      put('/company/' + data.companyId + '/integrations/cvlibrary/config', {
        username: data.username,
        password: data.password
      }, callback);
    },
    updateSlackConfig: function updateSlackConfig(config, companyId, callback) {
      put('/company/' + companyId + '/integrations/slack/config', config, callback);
    },
    toggleStarPosition: function toggleStarPosition(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/star', callback);
    },
    getPosition: function getPosition(positionId, companyId, callback) {
      get('/company/' + companyId + '/position/' + positionId, callback);
    },
    addPosition: function addPosition(positionData, companyId, callback) {
      post('/company/' + companyId + '/positions', positionData, callback);
    },
    getPositionTemplates: function getPositionTemplates(callback) {
      get('/position/templates', callback);
    },
    getPositionTemplate: function getPositionTemplate(templateId, callback) {
      get("/position/template/".concat(templateId), callback);
    },
    updatePosition: function updatePosition(positionId, positionData, companyId, callback) {
      put('/company/' + companyId + '/position/' + positionId, positionData, callback);
    },
    addPool: function addPool(positionData, companyId, callback) {
      post('/company/' + companyId + '/pools', positionData, callback);
    },
    updatePool: function updatePool(positionId, positionData, companyId, callback) {
      put('/company/' + companyId + '/pool/' + positionId, positionData, callback);
    },
    setPositionState: function setPositionState(state, positionId, companyId, callback) {
      var data = {
        'state': state
      };
      put('/company/' + companyId + '/position/' + positionId + '/state', data, callback);
    },
    setPositionPromotionOption: function setPositionPromotionOption(name, value, positionId, companyId, promotionObject, callback) {
      var data = {
        'name': name,
        'value': value,
        'promotionObject': promotionObject
      };
      put('/company/' + companyId + '/position/' + positionId + '/promotion/option', data, callback);
    },
    updatePositionPromotion: function updatePositionPromotion(companyId, positionId, promotionId, updates, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/promotion/' + promotionId, updates, callback);
    },
    setPositionApplicationOption: function setPositionApplicationOption(name, value, positionId, companyId, callback) {
      var data = {
        'name': name,
        'value': value
      };
      put('/company/' + companyId + '/position/' + positionId + '/application/option', data, callback);
    },
    requestCandidateScorecardsCompletion: function requestCandidateScorecardsCompletion(candidateId, positionId, companyId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/scorecard/feedback', {}, callback);
    },
    setPositionScorecard: function setPositionScorecard(scorecardId, positionId, companyId, callback) {
      var data = {
        'scorecard_id': scorecardId
      };
      put('/company/' + companyId + '/position/' + positionId + '/scorecard', data, callback);
    },
    setPositionQuestionnaire: function setPositionQuestionnaire(questionnaireId, positionId, companyId, callback) {
      var data = {
        'questionnaire_id': questionnaireId
      };
      put('/company/' + companyId + '/position/' + positionId + '/questionnaire', data, callback);
    },
    getPositions: function getPositions(companyId, callback) {
      get('/company/' + companyId + '/positions', callback);
    },
    getPositionTeam: function getPositionTeam(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/team', callback);
    },
    setPositionsTeamMemberRole: function setPositionsTeamMemberRole(companyId, positionIds, userId, roleType, callback) {
      post('/company/' + companyId + '/positions/team', {
        'position_ids': positionIds,
        'user_id': userId,
        'role_type': roleType
      }, callback);
    },
    setPositionTeamRole: function setPositionTeamRole(companyId, positionId, teamId, roleType, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/teams/' + teamId + /role/ + roleType, {}, callback);
    },
    setPositionTeamMemberRole: function setPositionTeamMemberRole(companyId, positionId, userId, roleType, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/team/' + userId + /role/ + roleType, {}, callback);
    },
    addPositionAdmin: function addPositionAdmin(companyId, positionId, userId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/admins/' + userId, {}, callback);
    },
    removePositionAdmin: function removePositionAdmin(companyId, positionId, userId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/admins/' + userId, callback);
    },
    removePositionRecruiter: function removePositionRecruiter(recruiterId, companyId, positionId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/recruiters/' + recruiterId, callback);
    },
    addPositionRecruiter: function addPositionRecruiter(recruiter, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/recruiters', recruiter, callback);
    },
    getPositionDetail: function getPositionDetail(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '?verbose=true', callback);
    },
    getPositionRecruiters: function getPositionRecruiters(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/recruiters', callback);
    },
    addPositionTeamMember: function addPositionTeamMember(companyId, positionId, userId, callback) {
      var data = {
        'user_id': userId
      };
      put('/company/' + companyId + '/position/' + positionId + '/member', data, callback);
    },
    removePositionTeamMember: function removePositionTeamMember(userId, companyId, positionId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/member/' + userId, callback);
    },
    getFilteredPositionStream: function getFilteredPositionStream(filters, skip, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/stream?skip=' + skip, filters, callback);
    },
    getPositionStream: function getPositionStream(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/stream', callback);
    },
    getVideoToken: function getVideoToken(interviewId, callback) {
      get('/video/token/' + interviewId, callback);
    },
    getInterview: function getInterview(interviewId, callback) {
      get('/interview/' + interviewId, callback);
    },
    getFavorites: function getFavorites(companyId, callback) {
      get('/company/' + companyId + '/favorites', callback);
    },
    getFavorite: function getFavorite(companyId, favoriteId, callback) {
      get('/company/' + companyId + '/favorite/' + favoriteId, callback);
    },
    updateFavorite: function updateFavorite(favorite, companyId, callback) {
      put('/company/' + companyId + '/favorite/' + favorite._id, favorite, callback);
    },
    addCopyFavorite: function addCopyFavorite(companyId, favoriteId, targetPositionId, callback) {
      post('/company/' + companyId + '/favorite/' + favoriteId + '/copy', {
        'position_id': targetPositionId
      }, callback);
    },
    getFavoriteDocuments: function getFavoriteDocuments(companyId, favoriteId, callback) {
      get('/company/' + companyId + '/favorite/' + favoriteId + '/stream', callback);
    },
    deleteFavoriteDocument: function deleteFavoriteDocument(companyId, favoriteId, documentId, callback) {
      del('/company/' + companyId + '/favorite/' + favoriteId + '/document/' + documentId, callback);
    },
    getFavoriteStream: function getFavoriteStream(companyId, favoriteId, callback) {
      get('/company/' + companyId + '/favorite/' + favoriteId + '/stream', callback);
    },
    postFavoriteNote: function postFavoriteNote(body, attachment, companyId, favoriteId, callback) {
      var data = {
        'body': body.trim(),
        'attachment': attachment
      };
      post('/company/' + companyId + '/favorite/' + favoriteId + '/stream', data, callback);
    },
    moveCandidateToStage: function moveCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/move', {
        'target_position_id': targetPositionId,
        'target_stage_id': targetStageId,
        'stage_actions_enabled': actionsEnabled
      }, callback);
    },
    bulkMoveCandidates: function bulkMoveCandidates(companyId, candidateIds, targetPositionId, targetStageId, actionsEnabled, callback) {
      post('/company/' + companyId + '/candidates/bulk/move', {
        'target_position_id': targetPositionId,
        'target_stage_id': targetStageId,
        'stage_actions_enabled': actionsEnabled,
        'candidate_ids': candidateIds
      }, callback);
    },
    bulkMessageCandidates: function bulkMessageCandidates(message, companyId, candidateIds, callback) {
      post('/company/' + companyId + '/candidates/bulk/message', {
        'candidate_ids': candidateIds,
        'message': message
      }, callback);
    },
    copyCandidateToStage: function copyCandidateToStage(companyId, positionId, candidateId, targetPositionId, targetStageId, actionsEnabled, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/copy', {
        'position_id': targetPositionId,
        'stage_id': targetStageId,
        'stage_actions_enabled': actionsEnabled
      }, callback);
    },
    addCopyCandidate: function addCopyCandidate(companyId, positionId, candidateId, targetPositionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/copy', {
        'position_id': targetPositionId
      }, callback);
    },
    getCandidateMetadata: function getCandidateMetadata(companyId, positionId, candidateId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/meta', callback);
    },
    getCandidateStream: function getCandidateStream(companyId, positionId, candidateId, skip, callback) {
      var uri = "/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/stream");

      if (skip) {
        uri = uri + "?skip=" + skip;
      }

      get(uri, callback);
    },
    requestConsent: function requestConsent(companyId, positionId, candidateId, request, callback) {
      post("/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/consent"), request, callback);
    },
    scheduleCandidateDataRequest: function scheduleCandidateDataRequest(data, callback) {
      post("/company/".concat(data.companyId, "/position/").concat(data.positionId, "/candidate/").concat(data.candidateId, "/data-request"), {}, callback);
    },
    getCandidatesFilterMetadata: function getCandidatesFilterMetadata(companyId, callback) {
      get("/company/".concat(companyId, "/candidates/meta"), callback);
    },
    getCandidateQuestionnaires: function getCandidateQuestionnaires(companyId, positionId, candidateId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/questionnaires', callback);
    },
    getCandidateDocuments: function getCandidateDocuments(companyId, positionId, candidateId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/documents', callback);
    },
    deleteCandidateDocument: function deleteCandidateDocument(companyId, positionId, candidateId, documentId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/document/' + documentId, callback);
    },
    searchResources: function searchResources(searchTerm, callback) {
      console.log("Searching!");
      $http.get("https://resources.breezy.hr/api/search?q=" + encodeURIComponent(searchTerm)).success(function (data) {
        return callback(null, data.hits);
      }).error(function (error) {
        return callback(error);
      });
    },
    searchCandidates: function searchCandidates(searchTerm, companyId, callback) {
      get('/company/' + companyId + '/search?q=' + encodeURIComponent(searchTerm), callback);
    },
    updateCandidate: function updateCandidate(candidate, companyId, positionId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidate._id, candidate, callback);
    },
    addCandidate: function addCandidate(candidate, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidates', candidate, callback);
    },
    addCandidateFromWidget: function addCandidateFromWidget(candidate, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidates', candidate, callback);
    },
    addCandidateToStage: function addCandidateToStage(candidate, companyId, positionId, stageId, actionsEnabled, callback) {
      if (actionsEnabled) {
        candidate.stage_actions_enabled = true;
      }

      post('/company/' + companyId + '/position/' + positionId + '/stage/' + stageId + '/candidates', candidate, callback);
    },
    importSearchCandidate: function importSearchCandidate(candidate, companyId, positionId, stageId, actionsEnabled, callback) {
      if (actionsEnabled) {
        candidate.stage_actions_enabled = true;
      }

      post('/company/' + companyId + '/position/' + positionId + '/stage/' + stageId + '/candidates/import/search', candidate, callback);
    },
    importCandidates: function importCandidates(candidates, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidates/import', candidates, callback);
    },
    getCandidate: function getCandidate(companyId, positionId, candidateId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId, callback);
    },
    addSourcedLinkedInUrlCandidate: function addSourcedLinkedInUrlCandidate(url, status, emailAddress, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidates/sourced/linkedinurl', {
        "url": url,
        "email_address": emailAddress,
        "status": status
      }, callback);
    },
    addSourcedResumeCandidate: function addSourcedResumeCandidate(candidate, companyId, positionId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidates/sourced/resume', candidate, callback);
    },
    addCandidateToHRIS: function addCandidateToHRIS(companyId, positionId, candidateId, hrisType, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/hris/' + hrisType, {}, callback);
    },
    getCandidateConversation: function getCandidateConversation(companyId, positionId, candidateId, skip, callback) {
      var uri = "/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/conversation");

      if (skip) {
        uri = uri + "?skip=" + skip;
      }

      get(uri, callback);
    },
    deleteCompanyConversationThread: function deleteCompanyConversationThread(companyId, positionId, candidateId, callback) {
      var uri = '/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/conversation/thread';
      del(uri, callback);
    },
    getCompanyConversationThread: function getCompanyConversationThread(companyId, skip, filterByUser, callback) {
      var uri = '/company/' + companyId + '/conversation/thread?';

      if (skip) {
        uri = uri + "&skip=" + skip;
      }

      if (filterByUser) {
        uri = uri + "&filter_by_user=1";
      }

      get(uri, callback);
    },
    getCompanyInbox: function getCompanyInbox(companyId, filterByUser, sortType, limit, skip, callback) {
      var uri = '/company/' + companyId + '/inbox?';

      if (filterByUser) {
        uri = uri + "&filter_by_user=1";
      }

      if (sortType) {
        uri = uri + "&sort_type=" + sortType;
      }

      if (limit) {
        uri = uri + "&limit=" + limit;
      }

      if (skip) {
        uri = uri + "&skip=" + skip;
      }

      get(uri, callback);
    },
    getPositionConversationThread: function getPositionConversationThread(companyId, positionId, skip, filterByUser, callback) {
      var uri = '/company/' + companyId + '/position/' + positionId + '/conversation/thread?';

      if (skip) {
        uri = uri + "&skip=" + skip;
      }

      if (filterByUser) {
        uri = uri + "&filter_by_user=1";
      }

      get(uri, callback);
    },
    getPositionInbox: function getPositionInbox(companyId, positionId, filterByUser, sortType, callback) {
      var uri = '/company/' + companyId + '/position/' + positionId + '/inbox?';

      if (filterByUser) {
        uri = uri + "&filter_by_user=1";
      }

      if (sortType) {
        uri = uri + "&sort_type=" + sortType;
      }

      get(uri, callback);
    },
    getPositionSchedule: function getPositionSchedule(companyId, positionId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/schedule', callback);
    },
    getUserMetrics: function getUserMetrics(companyId, range, callback) {
      get('/company/' + companyId + '/dashboard/metrics?date_range=' + range, callback);
    },
    getUserCandidates: function getUserCandidates(companyId, options, callback) {
      post('/company/' + companyId + '/candidates', options, callback);
    },
    getCandidates: function getCandidates(companyId, positionId, status, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidates?status=' + status, callback);
    },
    getPipelineCandidates: function getPipelineCandidates(companyId, positionId, status, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/pipeline/candidates?status=' + status, callback);
    },
    assignCandidate: function assignCandidate(companyId, positionId, candidateId, memberId, callback) {
      var uri = "/company/".concat(companyId, "/position/").concat(positionId, "/candidate/").concat(candidateId, "/assign/");

      if (memberId) {
        uri += memberId;
      }

      put(uri, {}, callback);
    },
    getTalentNetwork: function getTalentNetwork(companyId, callback) {
      get('/company/' + companyId + '/talnet', callback);
    },
    getTalentNetworkCandidate: function getTalentNetworkCandidate(companyId, favoriteId, callback) {
      get('/company/' + companyId + '/talnet/' + favoriteId, callback);
    },
    addToTalentNetwork: function addToTalentNetwork(candidate, callback) {
      put('/company/' + candidate.company_id + '/talnet', candidate, callback);
    },
    setCandidateTags: function setCandidateTags(companyId, positionId, candidateId, tags, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/tags', {
        'tags': tags
      }, callback);
    },
    followCandidate: function followCandidate(companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/follow', {}, callback);
    },
    unfollowCandidate: function unfollowCandidate(companyId, positionId, candidateId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/follow', callback);
    },
    starCandidate: function starCandidate(companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/star', {}, callback);
    },
    unstarCandidate: function unstarCandidate(companyId, positionId, candidateId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/star', callback);
    },
    voteUpCandidate: function voteUpCandidate(companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/vote/up', {}, callback);
    },
    voteDownCandidate: function voteDownCandidate(companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/vote/down', {}, callback);
    },
    deleteCandidate: function deleteCandidate(companyId, positionId, candidateId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId, callback);
    },
    deleteCandidates: function deleteCandidates(companyId, candidateIds, callback) {
      var data = {
        'candidate_ids': candidateIds
      };
      put('/company/' + companyId + '/candidates/delete', data, callback);
    },
    setCandidateStatus: function setCandidateStatus(companyId, positionId, candidateId, data, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/status', data, callback);
    },
    setBulkCandidateStatus: function setBulkCandidateStatus(companyId, positionId, data, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidates/status', data, callback);
    },
    sendFeedbackRequest: function sendFeedbackRequest(body, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/feedback', {
        'body': body
      }, callback);
    },
    sendOfferLetter: function sendOfferLetter(offer, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/offer', offer, callback);
    },
    sendCancelInterview: function sendCancelInterview(interview, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/interview/cancel', interview, callback);
    },
    sendInterviewRequest: function sendInterviewRequest(interview, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/interview', interview, callback);
    },
    getPanelInterview: function getPanelInterview(panelInterviewId, companyId, positionId, candidateId, callback) {
      get('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/panel-interview/' + panelInterviewId, callback);
    },
    sendPanelInterviewRequest: function sendPanelInterviewRequest(interview, companyId, positionId, candidateId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/panel-interview', interview, callback);
    },
    updatePanelInterviewRequest: function updatePanelInterviewRequest(interview, companyId, positionId, candidateId, panelInterviewId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/panel-interview/' + panelInterviewId, interview, callback);
    },
    deletePanelInterview: function deletePanelInterview(companyId, positionId, candidateId, panelInterviewId, callback) {
      del('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/panel-interview/' + panelInterviewId, callback);
    },
    cancelReminder: function cancelReminder(companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/reminder/cancel', {}, callback);
    },
    setReminder: function setReminder(reminder, companyId, positionId, candidateId, callback) {
      put('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/reminder', reminder, callback);
    },
    getCompanyNotifications: function getCompanyNotifications(companyId, callback) {
      get('/company/' + companyId + '/notifications', callback);
    },
    getNotifications: function getNotifications(skip, callback) {
      get('/user/notifications', callback);
    },
    postQuestionnaireToCandidate: function postQuestionnaireToCandidate(questionnaire, companyId, positionId, candidateId, callback) {
      var data = {
        'questionnaire': questionnaire
      };
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/questionnaire', data, callback);
    },
    getCompanyAssessments: function getCompanyAssessments(data, callback) {
      if (data.positionId) {
        get('/company/' + data.companyId + '/position/' + data.positionId + '/integrations/assessments', callback);
      } else {
        get('/company/' + data.companyId + '/integrations/assessments', callback);
      }
    },
    getCompanyBackgroundCheckPackages: function getCompanyBackgroundCheckPackages(data, callback) {
      get('/company/' + data.companyId + '/position/' + data.positionId + '/integrations/background-check-packages', callback);
    },
    postAssessmentToCandidate: function postAssessmentToCandidate(data, callback) {
      var body = {
        test: data.test
      };
      post('/company/' + data.companyId + '/position/' + data.positionId + '/candidate/' + data.candidateId + '/integrations/' + data.serviceId + '/assessment/' + data.testId, body, callback);
    },
    postBackgroundCheckToCandidate: function postBackgroundCheckToCandidate(data, callback) {
      var body = {
        package: data.package
      };
      if (data.geo) body.geo = data.geo;
      post('/company/' + data.companyId + '/position/' + data.positionId + '/candidate/' + data.candidateId + '/integrations/' + data.serviceId + '/background-check/' + data.packageId, body, callback);
    },
    recordSignatureRequestToCandidate: function recordSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, callback) {
      var data = {
        'body': body.trim(),
        'attachments': attachments
      };

      if (subject) {
        data.subject = subject.trim();
      }

      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/offers/sent', data, callback);
    },
    postSignatureRequestToCandidate: function postSignatureRequestToCandidate(body, subject, attachments, companyId, positionId, candidateId, callback) {
      var data = {
        'body': body.trim(),
        'attachments': attachments
      };

      if (subject) {
        data.subject = subject.trim();
      }

      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/offers', data, callback);
    },
    postMessageToCandidate: function postMessageToCandidate(message, companyId, positionId, candidateId, callback) {
      post('/company/' + companyId + '/position/' + positionId + '/candidate/' + candidateId + '/conversation', message, callback);
    },
    cancelDelayMessage: function cancelDelayMessage(companyId, positionId, conversationId, callback) {
      put("/company/".concat(companyId, "/position/").concat(positionId, "/conversation/").concat(conversationId, "/cancel"), {}, callback);
    },
    forceDelayMessage: function forceDelayMessage(companyId, positionId, conversationId, callback) {
      put("/company/".concat(companyId, "/position/").concat(positionId, "/conversation/").concat(conversationId, "/force"), {}, callback);
    },
    postNote: function postNote(body, attachments, companyId, positionId, candidateId, callback) {
      var data = {
        'body': body.trim(),
        'attachments': attachments
      };

      if (positionId) {
        data.position_id = positionId;
      }

      if (candidateId) {
        data.candidate_id = candidateId;
      }

      post('/company/' + companyId + '/stream', data, callback);
    },
    getStream: function getStream(teamId, skip, callback) {
      get('/team/' + teamId + '/posts', callback);
    },
    deleteSlackTokens: function deleteSlackTokens(companyId, callback) {
      del('/auth/slack/user?company_id=' + companyId, callback);
    },
    deleteGoogleCalendarTokens: function deleteGoogleCalendarTokens(callback) {
      del('/auth/google/calendar', callback);
    },
    deleteOutlookCalendarTokens: function deleteOutlookCalendarTokens(callback) {
      del('/auth/outlook/calendar', callback);
    },
    deleteGoogleEmailTokens: function deleteGoogleEmailTokens(callback) {
      del('/auth/google/email', callback);
    },
    deleteOutlookEmailTokens: function deleteOutlookEmailTokens(callback) {
      del('/auth/outlook/email', callback);
    },
    // Async / Promise style below
    createSeekAdvertisement: function createSeekAdvertisement(companyId, positionId, advertisement) {
      return postAsync('/company/' + companyId + '/position/' + positionId + '/seek/advertisement', advertisement);
    },
    updateSeekAdvertisement: function updateSeekAdvertisement(companyId, positionId, advertisement) {
      return putAsync('/company/' + companyId + '/position/' + positionId + '/seek/advertisement', advertisement);
    },
    getSeekAdvertisement: function getSeekAdvertisement(companyId, positionId) {
      return getAsync('/company/' + companyId + '/position/' + positionId + '/seek/advertisement');
    },
    deleteSeekAdvertisement: function deleteSeekAdvertisement(companyId, positionId) {
      return delAsync('/company/' + companyId + '/position/' + positionId + '/seek/advertisement');
    },
    postCvlibraryJob: function postCvlibraryJob(companyId, positionId, job) {
      var query = {
        company_id: companyId,
        position_id: positionId
      };
      var resource = '/integration/cvlibrary/job?' + formatParams(query);
      return postAsync(resource, job);
    },
    doPeopleSearch: function doPeopleSearch(query) {
      var resource = '/people-search';
      return postAsync(resource, query);
    },
    deleteCvlibraryJob: function deleteCvlibraryJob(companyId, positionId, job) {
      var query = {
        company_id: companyId,
        position_id: positionId
      };
      var resource = '/integration/cvlibrary/job?' + formatParams(query);
      return delAsync(resource);
    },
    postTotalJob: function postTotalJob(companyId, positionId, job) {
      var query = {
        company_id: companyId,
        position_id: positionId
      };
      var resource = '/integration/totaljobs/job?' + formatParams(query);
      return postAsync(resource, job);
    },
    deleteTotalJob: function deleteTotalJob(companyId, positionId, job) {
      var query = {
        company_id: companyId,
        position_id: positionId
      };
      var resource = '/integration/totaljobs/job?' + formatParams(query);
      return delAsync(resource);
    },
    getDocSigningTemplates: function getDocSigningTemplates(companyId) {
      return getAsync('/company/' + companyId + '/hellosign/templates');
    },
    newDocSigningTemplate: function newDocSigningTemplate(companyId, data) {
      return postAsync('/company/' + companyId + '/hellosign/template', data);
    },
    addDocSigningTemplate: function addDocSigningTemplate(companyId, data) {
      return putAsync('/company/' + companyId + '/hellosign/template', data);
    },
    updateDocSigningTemplate: function updateDocSigningTemplate(companyId, templateId, data) {
      return putAsync('/company/' + companyId + '/hellosign/template/' + templateId, data);
    },
    editDocSigningTemplate: function editDocSigningTemplate(companyId, templateId) {
      return getAsync('/company/' + companyId + '/hellosign/template/' + templateId + '/edit-url');
    },
    deleteDocSigningTemplate: function deleteDocSigningTemplate(companyId, templateId) {
      return delAsync('/company/' + companyId + '/hellosign/template/' + templateId);
    },
    sendDocSigningTemplate: function sendDocSigningTemplate(data) {
      return postAsync('/company/' + data.companyId + '/position/' + data.positionId + '/candidate/' + data.candidateId + '/hellosign/template/' + data.templateId, data);
    },
    createGoodhireCompany: function createGoodhireCompany(data) {
      return postAsync('/company/' + data.companyId + '/goodhire/company', data.goodhireCompany);
    },
    createGoodhireRequestor: function createGoodhireRequestor(data) {
      var resource = '/company/' + data.companyId;
      if (data.positionId) resource += '/position/' + data.positionId;
      resource += '/goodhire/user';
      return postAsync(resource, {
        emailAddress: data.emailAddress
      });
    },
    enableGoodhireIntegration: function enableGoodhireIntegration(data) {
      return getAsync('/company/' + data.companyId + '/goodhire/company/enable');
    },
    disableGoodhireIntegration: function disableGoodhireIntegration(data) {
      return getAsync('/company/' + data.companyId + '/goodhire/company/disable');
    },
    getGoodhireSelectReportUrl: function getGoodhireSelectReportUrl(data) {
      var url = '/company/' + data.companyId + '/position/' + data.positionId + '/candidate/' + data.candidateId + '/goodhire/select-report-url';
      return postAsync(url, {
        userGoodhireId: data.userGoodhireId
      });
    },
    updateAsurintConfig: function updateAsurintConfig(data) {
      return putAsync('/company/' + data.companyId + '/integrations/asurint/config', data.asurint);
    },
    getIntegration: function getIntegration(serviceId, companyId, positionId) {
      if (positionId) {
        var url = '/company/' + companyId + '/position/' + positionId + '/integrations/' + serviceId;
      } else {
        var url = '/company/' + companyId + '/integrations/' + serviceId;
      }

      return getAsync(url);
    },
    getCheckrReport: function getCheckrReport(data) {
      var url = "/integrations/background-checks/company/".concat(data.companyId, "/service/checkr/report/").concat(data.reportId);
      return getAsync(url);
    },
    getCheckrGeos: function getCheckrGeos(data) {
      var url = "/integrations/background-checks/company/".concat(data.companyId, "/checkr/geos");
      return getAsync(url);
    },
    modifyCompany: function modifyCompany(companyId, updates) {
      var url = '/company/' + companyId + '/modify';
      return putAsync(url, updates);
    },
    refreshZenefitsIntegration: function refreshZenefitsIntegration(companyId) {
      var url = '/company/' + companyId + '/zenefits/refresh';
      return getAsync(url);
    },
    testIntegrationConfig: function testIntegrationConfig(serviceId, companyId, callback) {
      get('/company/' + companyId + '/integrations/' + serviceId + '/test', callback);
    },
    getDeputyLocations: function getDeputyLocations(companyId) {
      var query = {
        company_id: companyId
      };
      var resource = '/integration/deputy/locations?' + formatParams(query);
      return getAsync(resource);
    },
    getCompanyCustomFields: function getCompanyCustomFields(companyId) {
      var resource = '/company/' + companyId + '/custom-fields?';
      return getAsync(resource);
    }
  };
});
'use strict';

angular.module('BaseApp').factory('sharedDataUtils', ['SharedData', function (SharedData) {
  return {
    initializeMyPositions: function initializeMyPositions() {
      var myPositions = {};
      var positionKeys = Object.keys(SharedData.activeCompany.positions);

      for (var i = 0; i < positionKeys.length; i++) {
        var position = SharedData.activeCompany.positions[positionKeys[i]];

        if (position.state !== 'published') {
          continue;
        }

        if (_.contains(position.users, SharedData.user._id)) {
          myPositions[position._id] = position;
        }
      }

      SharedData.user.positions = myPositions;
    },
    getTeamMemberById: function getTeamMemberById(id) {
      return SharedData.activeCompany.members.filter(function (member) {
        return member._id === id;
      })[0];
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('SharedData', function () {
  var sharedModel = {
    'user': undefined,
    'activeCompany': undefined,
    'companies': {},
    'beta': false,
    'isAppInitialized': false,
    'isAppPreInit': false,
    'health': {
      'lastHeartbeat': undefined
    },
    'positionUserTypes': [{
      'name': 'Hiring Manager',
      'value': 'admin'
    }, {
      'name': 'Member',
      'value': 'member'
    }],
    'userTypes': [{
      'name': 'Administrator',
      'value': 'admin'
    }, {
      'name': 'Member',
      'value': 'member'
    }],
    'portalLanguageOptions': [{
      'name': 'Dynamic',
      'value': 'dynamic'
    }, {
      'name': 'English',
      'value': 'en'
    }, {
      'name': 'Finnish',
      'value': 'fi'
    }, {
      'name': 'French',
      'value': 'fr'
    }, {
      'name': 'German',
      'value': 'de'
    }, {
      'name': 'Italian',
      'value': 'it'
    }, {
      'name': 'Polish',
      'value': 'pl'
    }, {
      'name': 'Portuguese',
      'value': 'pt'
    }, {
      'name': 'Russian',
      'value': 'ru'
    }, {
      'name': 'Spanish',
      'value': 'es'
    }, {
      'name': 'Swedish',
      'value': 'sv'
    }],
    'templateVariables': [{
      'name': 'Candidate First Name',
      'value': '[[candidate_first_name]]'
    }, {
      'name': 'Candidate Full Name',
      'value': '[[candidate_name]]'
    }, {
      'name': 'Candidate Email Address',
      'value': '[[candidate_email_address]]'
    }, {
      'name': 'Position Title',
      'value': '[[position_title]]'
    }, {
      'name': 'Position Link',
      'value': '[[position_link]]'
    }, {
      'name': 'Company  Name',
      'value': '[[company_name]]'
    }, {
      'name': 'Company User',
      'value': '[[company_user]]'
    }, {
      'name': 'Company User First Name',
      'value': '[[company_user_first_name]]'
    }],
    "DefaultPoolPipeline": [{
      "id": 'applied',
      "name": "Default",
      "icon": "list-ul"
    }, {
      "id": 'available',
      "name": "Available",
      "icon": "list-ul"
    }, {
      "id": 'not_available',
      "name": "Not Available",
      "icon": "list-ul"
    }],
    "DefaultPipeline": [{
      "id": 'applied',
      "name": "Applied",
      "icon": "user"
    }, {
      "id": 'feedback',
      "name": "Feedback",
      "icon": "group"
    }, {
      "id": 'interviewing',
      "name": "Interviewing",
      "icon": "comments"
    }, {
      "id": 'offer',
      "name": "Made Offer",
      "action": "make_offer",
      "icon": "gift"
    }, {
      "id": 'disqualified',
      "name": "Disqualified",
      "action": "disqualify",
      "icon": "trash"
    }, {
      "id": 'hired',
      "name": "Hired",
      "icon": "trophy"
    }],
    'pipelineActionTypes': [{
      "id": "feedback",
      "name": "Feedback",
      "icon": "group"
    }, {
      "id": "schedule_interview",
      "name": "Interview",
      "icon": "comments"
    }, {
      "id": "schedule_phone_screen",
      "name": "Phone Screen",
      "icon": "phone"
    }, {
      "id": "offer",
      "name": "Make Offer",
      "icon": "gift"
    }, {
      "id": "disqualified",
      "name": "Disqualified",
      "icon": "trash"
    }, {
      "id": "hired",
      "name": "Hired",
      "icon": "trophy"
    }, {
      "id": "sourced",
      "name": "Sourced",
      "icon": "upload"
    }, {
      "id": "other",
      "name": "Other",
      "icon": "list-ul"
    }],
    'stageActionTypes': [{
      'id': 'template',
      'stage_action_id': 'message_template_id',
      'name': 'Send Email/SMS',
      'description': 'Automatically send an email or SMS to candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'campaign',
      'stage_action_id': 'campaign_id',
      'name': 'Nurture Campaign',
      'description': 'Trigger a nurture campaign for candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'questionnaire',
      'stage_action_id': 'questionnaire_id',
      'name': 'Send Questionnaire',
      'description': 'Automatically send a questionnaire to candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'send_assessment',
      'stage_action_id': 'send_assessment',
      'name': 'Send Assessment',
      'description': 'Automatically send an assessment to candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'request_feedback',
      'stage_action_id': 'request_feedback',
      'name': 'Team Feedback',
      'description': 'Request general feedback from the hiring team for candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'request_scorecards',
      'stage_action_id': 'request_scorecards',
      'name': 'Candidate Scorecards',
      'description': 'Automatically assign tasks to hiring team members to complete scorecards for candidates entering this stage.',
      'position_only': false
    }, {
      'id': 'assign_to',
      'stage_action_id': 'assign_to',
      'name': 'Assign Hiring Manager',
      'description': 'Automatically assign candidates entering this stage to a specific Hiring Manager.',
      'position_only': true
    }, {
      'id': 'inovapayroll_create_employee',
      'stage_action_id': 'inovapayroll_create_employee',
      'name': 'Add to Inova Payroll',
      'description': 'Automatically add candidates to Inova Payroll when they enter this stage.',
      'position_only': false
    }, {
      'id': 'namely_create_employee',
      'stage_action_id': 'namely_create_employee',
      'name': 'Add to Namely',
      'description': 'Automatically add candidates to Namely when they enter this stage.',
      'position_only': false
    }, {
      'id': 'bamboohr_create_employee',
      'stage_action_id': 'bamboohr_create_employee',
      'name': 'Add to BambooHR',
      'description': 'Automatically add candidates to BambooHR when they enter this stage.',
      'position_only': false
    }, {
      'id': 'zenefits_create_employee',
      'stage_action_id': 'zenefits_create_employee',
      'name': 'Add to Zenefits',
      'description': 'Automatically add candidates to Zenefits when they enter this stage.',
      'position_only': false
    }, {
      'id': 'deputy_create_employee',
      'stage_action_id': 'deputy_create_employee',
      'name': 'Add to Deputy',
      'description': 'Automatically add candidates to Deputy when they enter this stage.',
      'position_only': false
    }, {
      'id': 'backgroundcheck_result',
      'stage_action_id': 'backgroundcheck_result',
      'name': 'Background Check Result',
      'description': 'Automatically move candidates based on their background check result.',
      'position_only': false
    }],
    'notifications': {
      'unreadCount': 0,
      'stream': []
    },
    'html5Notifications': {},
    'positionTypes': {
      'fullTime': {
        'id': 'fullTime',
        'name': 'Full-Time'
      },
      'partTime': {
        'id': 'partTime',
        'name': 'Part-Time'
      },
      'freelance': {
        'id': 'freelance',
        'name': 'Freelance'
      },
      'volunteer': {
        'id': 'volunteer',
        'name': 'Volunteer'
      },
      'contract': {
        'id': 'contract',
        'name': 'Contract'
      }
    },
    'countries': {
      "US": {
        "id": "US",
        "name": "United States",
        "states": {
          "AL": {
            "id": "AL",
            "name": "Alabama"
          },
          "AK": {
            "id": "AK",
            "name": "Alaska"
          },
          "AZ": {
            "id": "AZ",
            "name": "Arizona"
          },
          "AR": {
            "id": "AR",
            "name": "Arkansas"
          },
          "CA": {
            "id": "CA",
            "name": "California"
          },
          "CO": {
            "id": "CO",
            "name": "Colorado"
          },
          "CT": {
            "id": "CT",
            "name": "Connecticut"
          },
          "DE": {
            "id": "DE",
            "name": "Delaware"
          },
          "FL": {
            "id": "FL",
            "name": "Florida"
          },
          "GA": {
            "id": "GA",
            "name": "Georgia"
          },
          "HI": {
            "id": "HI",
            "name": "Hawaii"
          },
          "ID": {
            "id": "ID",
            "name": "Idaho"
          },
          "IL": {
            "id": "IL",
            "name": "Illinois"
          },
          "IN": {
            "id": "IN",
            "name": "Indiana"
          },
          "IA": {
            "id": "IA",
            "name": "Iowa"
          },
          "KS": {
            "id": "KS",
            "name": "Kansas"
          },
          "KY": {
            "id": "KY",
            "name": "Kentucky"
          },
          "LA": {
            "id": "LA",
            "name": "Louisiana"
          },
          "ME": {
            "id": "ME",
            "name": "Maine"
          },
          "MD": {
            "id": "MD",
            "name": "Maryland"
          },
          "MA": {
            "id": "MA",
            "name": "Massachusetts"
          },
          "MI": {
            "id": "MI",
            "name": "Michigan"
          },
          "MN": {
            "id": "MN",
            "name": "Minnesota"
          },
          "MS": {
            "id": "MS",
            "name": "Mississippi"
          },
          "MO": {
            "id": "MO",
            "name": "Missouri"
          },
          "MT": {
            "id": "MT",
            "name": "Montana"
          },
          "NE": {
            "id": "NE",
            "name": "Nebraska"
          },
          "NV": {
            "id": "NV",
            "name": "Nevada"
          },
          "NH": {
            "id": "NH",
            "name": "New Hampshire"
          },
          "NJ": {
            "id": "NJ",
            "name": "New Jersey"
          },
          "NM": {
            "id": "NM",
            "name": "New Mexico"
          },
          "NY": {
            "id": "NY",
            "name": "New York"
          },
          "NC": {
            "id": "NC",
            "name": "North Carolina"
          },
          "ND": {
            "id": "ND",
            "name": "North Dakota"
          },
          "OH": {
            "id": "OH",
            "name": "Ohio"
          },
          "OK": {
            "id": "OK",
            "name": "Oklahoma"
          },
          "OR": {
            "id": "OR",
            "name": "Oregon"
          },
          "PA": {
            "id": "PA",
            "name": "Pennsylvania"
          },
          "RI": {
            "id": "RI",
            "name": "Rhode Island"
          },
          "SC": {
            "id": "SC",
            "name": "South Carolina"
          },
          "SD": {
            "id": "SD",
            "name": "South Dakota"
          },
          "TN": {
            "id": "TN",
            "name": "Tennessee"
          },
          "TX": {
            "id": "TX",
            "name": "Texas"
          },
          "UT": {
            "id": "UT",
            "name": "Utah"
          },
          "VT": {
            "id": "VT",
            "name": "Vermont"
          },
          "VA": {
            "id": "VA",
            "name": "Virginia"
          },
          "WA": {
            "id": "WA",
            "name": "Washington"
          },
          "WV": {
            "id": "WV",
            "name": "West Virginia"
          },
          "WI": {
            "id": "WI",
            "name": "Wisconsin"
          },
          "WY": {
            "id": "WY",
            "name": "Wyoming"
          }
        }
      },
      "AF": {
        "id": "AF",
        "name": "Afghanistan"
      },
      "AL": {
        "id": "AL",
        "name": "Albania"
      },
      "DZ": {
        "id": "DZ",
        "name": "Algeria"
      },
      "AS": {
        "id": "AS",
        "name": "Samoa American"
      },
      "AD": {
        "id": "AD",
        "name": "Andorra"
      },
      "AG": {
        "id": "AG",
        "name": "Antigua & Barbuda"
      },
      "AI": {
        "id": "AI",
        "name": "Anguilla"
      },
      "AR": {
        "id": "AR",
        "name": "Argentina"
      },
      "AA": {
        "id": "AA",
        "name": "Armenia"
      },
      "AW": {
        "id": "AW",
        "name": "Aruba"
      },
      "AU": {
        "id": "AU",
        "name": "Australia"
      },
      "AT": {
        "id": "AT",
        "name": "Austria"
      },
      "AZ": {
        "id": "AZ",
        "name": "Azerbaijan"
      },
      "BS": {
        "id": "BS",
        "name": "Bahamas"
      },
      "BH": {
        "id": "BH",
        "name": "Bahrain"
      },
      "BD": {
        "id": "BD",
        "name": "Bangladesh"
      },
      "BB": {
        "id": "BB",
        "name": "Barbados"
      },
      "BY": {
        "id": "BY",
        "name": "Belarus"
      },
      "BE": {
        "id": "BE",
        "name": "Belgium"
      },
      "BZ": {
        "id": "BZ",
        "name": "Belize"
      },
      "BJ": {
        "id": "BJ",
        "name": "Benin"
      },
      "BM": {
        "id": "BM",
        "name": "Bermuda"
      },
      "BT": {
        "id": "BT",
        "name": "Bhutan"
      },
      "BO": {
        "id": "BO",
        "name": "Bolivia"
      },
      "BL": {
        "id": "BL",
        "name": "Bonaire"
      },
      "BA": {
        "id": "BA",
        "name": "Bosnia & Herzegovina"
      },
      "BW": {
        "id": "BW",
        "name": "Botswana"
      },
      "BR": {
        "id": "BR",
        "name": "Brazil"
      },
      "BC": {
        "id": "BC",
        "name": "British Indian Ocean Ter"
      },
      "BN": {
        "id": "BN",
        "name": "Brunei"
      },
      "BG": {
        "id": "BG",
        "name": "Bulgaria"
      },
      "BF": {
        "id": "BF",
        "name": "Burkina Faso"
      },
      "BI": {
        "id": "BI",
        "name": "Burundi"
      },
      "KH": {
        "id": "KH",
        "name": "Cambodia"
      },
      "CM": {
        "id": "CM",
        "name": "Cameroon"
      },
      "CA": {
        "id": "CA",
        "name": "Canada"
      },
      "IC": {
        "id": "IC",
        "name": "Canary Islands"
      },
      "CV": {
        "id": "CV",
        "name": "Cape Verde"
      },
      "KY": {
        "id": "KY",
        "name": "Cayman Islands"
      },
      "CF": {
        "id": "CF",
        "name": "Central African Republic"
      },
      "TD": {
        "id": "TD",
        "name": "Chad"
      },
      "CD": {
        "id": "CD",
        "name": "Channel Islands"
      },
      "CL": {
        "id": "CL",
        "name": "Chile"
      },
      "CN": {
        "id": "CN",
        "name": "China"
      },
      "CI": {
        "id": "CI",
        "name": "Christmas Island"
      },
      "CS": {
        "id": "CS",
        "name": "Cocos Island"
      },
      "CO": {
        "id": "CO",
        "name": "Colombia"
      },
      "CC": {
        "id": "CC",
        "name": "Comoros"
      },
      "CG": {
        "id": "CG",
        "name": "Congo"
      },
      "CK": {
        "id": "CK",
        "name": "Cook Islands"
      },
      "CR": {
        "id": "CR",
        "name": "Costa Rica"
      },
      "CT": {
        "id": "CT",
        "name": "Cote D'Ivoire"
      },
      "HR": {
        "id": "HR",
        "name": "Croatia"
      },
      "CU": {
        "id": "CU",
        "name": "Cuba"
      },
      "CB": {
        "id": "CB",
        "name": "Curacao"
      },
      "CY": {
        "id": "CY",
        "name": "Cyprus"
      },
      "CZ": {
        "id": "CZ",
        "name": "Czech Republic"
      },
      "DK": {
        "id": "DK",
        "name": "Denmark"
      },
      "DJ": {
        "id": "DJ",
        "name": "Djibouti"
      },
      "DM": {
        "id": "DM",
        "name": "Dominica"
      },
      "DO": {
        "id": "DO",
        "name": "Dominican Republic"
      },
      "TM": {
        "id": "TM",
        "name": "East Timor"
      },
      "EC": {
        "id": "EC",
        "name": "Ecuador"
      },
      "EG": {
        "id": "EG",
        "name": "Egypt"
      },
      "SV": {
        "id": "SV",
        "name": "El Salvador"
      },
      "GQ": {
        "id": "GQ",
        "name": "Equatorial Guinea"
      },
      "ER": {
        "id": "ER",
        "name": "Eritrea"
      },
      "EE": {
        "id": "EE",
        "name": "Estonia"
      },
      "ET": {
        "id": "ET",
        "name": "Ethiopia"
      },
      "FA": {
        "id": "FA",
        "name": "Falkland Islands"
      },
      "FO": {
        "id": "FO",
        "name": "Faroe Islands"
      },
      "FJ": {
        "id": "FJ",
        "name": "Fiji"
      },
      "FI": {
        "id": "FI",
        "name": "Finland"
      },
      "FR": {
        "id": "FR",
        "name": "France"
      },
      "GF": {
        "id": "GF",
        "name": "French Guiana"
      },
      "PF": {
        "id": "PF",
        "name": "French Polynesia"
      },
      "FS": {
        "id": "FS",
        "name": "French Southern Ter"
      },
      "GA": {
        "id": "GA",
        "name": "Gabon"
      },
      "GM": {
        "id": "GM",
        "name": "Gambia"
      },
      "GE": {
        "id": "GE",
        "name": "Georgia"
      },
      "DE": {
        "id": "DE",
        "name": "Germany"
      },
      "GH": {
        "id": "GH",
        "name": "Ghana"
      },
      "GI": {
        "id": "GI",
        "name": "Gibraltar"
      },
      "GB": {
        "id": "GB",
        "name": "United Kingdom"
      },
      "GR": {
        "id": "GR",
        "name": "Greece"
      },
      "GL": {
        "id": "GL",
        "name": "Greenland"
      },
      "GD": {
        "id": "GD",
        "name": "Grenada"
      },
      "GP": {
        "id": "GP",
        "name": "Guadeloupe"
      },
      "GU": {
        "id": "GU",
        "name": "Guam"
      },
      "GT": {
        "id": "GT",
        "name": "Guatemala"
      },
      "GN": {
        "id": "GN",
        "name": "Guinea"
      },
      "GY": {
        "id": "GY",
        "name": "Guyana"
      },
      "HT": {
        "id": "HT",
        "name": "Haiti"
      },
      "HW": {
        "id": "HW",
        "name": "Hawaii"
      },
      "HN": {
        "id": "HN",
        "name": "Honduras"
      },
      "HK": {
        "id": "HK",
        "name": "Hong Kong"
      },
      "HU": {
        "id": "HU",
        "name": "Hungary"
      },
      "IS": {
        "id": "IS",
        "name": "Iceland"
      },
      "IN": {
        "id": "IN",
        "name": "India"
      },
      "ID": {
        "id": "ID",
        "name": "Indonesia"
      },
      "IA": {
        "id": "IA",
        "name": "Iran"
      },
      "IQ": {
        "id": "IQ",
        "name": "Iraq"
      },
      "IR": {
        "id": "IR",
        "name": "Ireland"
      },
      "IM": {
        "id": "IM",
        "name": "Isle of Man"
      },
      "IL": {
        "id": "IL",
        "name": "Israel"
      },
      "IT": {
        "id": "IT",
        "name": "Italy"
      },
      "JM": {
        "id": "JM",
        "name": "Jamaica"
      },
      "JP": {
        "id": "JP",
        "name": "Japan"
      },
      "JO": {
        "id": "JO",
        "name": "Jordan"
      },
      "KZ": {
        "id": "KZ",
        "name": "Kazakhstan"
      },
      "KE": {
        "id": "KE",
        "name": "Kenya"
      },
      "KI": {
        "id": "KI",
        "name": "Kiribati"
      },
      "NK": {
        "id": "NK",
        "name": "Korea North"
      },
      "KS": {
        "id": "KS",
        "name": "Korea South"
      },
      "KW": {
        "id": "KW",
        "name": "Kuwait"
      },
      "KG": {
        "id": "KG",
        "name": "Kyrgyzstan"
      },
      "LA": {
        "id": "LA",
        "name": "Laos"
      },
      "LV": {
        "id": "LV",
        "name": "Latvia"
      },
      "LB": {
        "id": "LB",
        "name": "Lebanon"
      },
      "LS": {
        "id": "LS",
        "name": "Lesotho"
      },
      "LR": {
        "id": "LR",
        "name": "Liberia"
      },
      "LY": {
        "id": "LY",
        "name": "Libya"
      },
      "LI": {
        "id": "LI",
        "name": "Liechtenstein"
      },
      "LT": {
        "id": "LT",
        "name": "Lithuania"
      },
      "LU": {
        "id": "LU",
        "name": "Luxembourg"
      },
      "MO": {
        "id": "MO",
        "name": "Macau"
      },
      "MK": {
        "id": "MK",
        "name": "Macedonia"
      },
      "MG": {
        "id": "MG",
        "name": "Madagascar"
      },
      "MY": {
        "id": "MY",
        "name": "Malaysia"
      },
      "MW": {
        "id": "MW",
        "name": "Malawi"
      },
      "MV": {
        "id": "MV",
        "name": "Maldives"
      },
      "ML": {
        "id": "ML",
        "name": "Mali"
      },
      "MT": {
        "id": "MT",
        "name": "Malta"
      },
      "MH": {
        "id": "MH",
        "name": "Marshall Islands"
      },
      "MQ": {
        "id": "MQ",
        "name": "Martinique"
      },
      "MR": {
        "id": "MR",
        "name": "Mauritania"
      },
      "MU": {
        "id": "MU",
        "name": "Mauritius"
      },
      "ME": {
        "id": "ME",
        "name": "Republic of Montenegro"
      },
      "MX": {
        "id": "MX",
        "name": "Mexico"
      },
      "MI": {
        "id": "MI",
        "name": "Midway Islands"
      },
      "MD": {
        "id": "MD",
        "name": "Moldova"
      },
      "MC": {
        "id": "MC",
        "name": "Monaco"
      },
      "MN": {
        "id": "MN",
        "name": "Mongolia"
      },
      "MS": {
        "id": "MS",
        "name": "Montserrat"
      },
      "MA": {
        "id": "MA",
        "name": "Morocco"
      },
      "MZ": {
        "id": "MZ",
        "name": "Mozambique"
      },
      "MM": {
        "id": "MM",
        "name": "Myanmar"
      },
      "NA": {
        "id": "NA",
        "name": "Nambia"
      },
      "NU": {
        "id": "NU",
        "name": "Nauru"
      },
      "NP": {
        "id": "NP",
        "name": "Nepal"
      },
      "AN": {
        "id": "AN",
        "name": "Netherland Antilles"
      },
      "NL": {
        "id": "NL",
        "name": "Netherlands (Holland, Europe)"
      },
      "NV": {
        "id": "NV",
        "name": "Nevis"
      },
      "NC": {
        "id": "NC",
        "name": "New Caledonia"
      },
      "NZ": {
        "id": "NZ",
        "name": "New Zealand"
      },
      "NI": {
        "id": "NI",
        "name": "Nicaragua"
      },
      "NE": {
        "id": "NE",
        "name": "Niger"
      },
      "NG": {
        "id": "NG",
        "name": "Nigeria"
      },
      "NW": {
        "id": "NW",
        "name": "Niue"
      },
      "NF": {
        "id": "NF",
        "name": "Norfolk Island"
      },
      "NO": {
        "id": "NO",
        "name": "Norway"
      },
      "OM": {
        "id": "OM",
        "name": "Oman"
      },
      "PK": {
        "id": "PK",
        "name": "Pakistan"
      },
      "PW": {
        "id": "PW",
        "name": "Palau Island"
      },
      "PS": {
        "id": "PS",
        "name": "Palestine"
      },
      "PA": {
        "id": "PA",
        "name": "Panama"
      },
      "PG": {
        "id": "PG",
        "name": "Papua New Guinea"
      },
      "PY": {
        "id": "PY",
        "name": "Paraguay"
      },
      "PE": {
        "id": "PE",
        "name": "Peru"
      },
      "PH": {
        "id": "PH",
        "name": "Philippines"
      },
      "PO": {
        "id": "PO",
        "name": "Pitcairn Island"
      },
      "PL": {
        "id": "PL",
        "name": "Poland"
      },
      "PT": {
        "id": "PT",
        "name": "Portugal"
      },
      "PR": {
        "id": "PR",
        "name": "Puerto Rico"
      },
      "QA": {
        "id": "QA",
        "name": "Qatar"
      },
      "RS": {
        "id": "RS",
        "name": "Serbia"
      },
      "RE": {
        "id": "RE",
        "name": "Reunion"
      },
      "RO": {
        "id": "RO",
        "name": "Romania"
      },
      "RU": {
        "id": "RU",
        "name": "Russia"
      },
      "RW": {
        "id": "RW",
        "name": "Rwanda"
      },
      "NT": {
        "id": "NT",
        "name": "St Barthelemy"
      },
      "EU": {
        "id": "EU",
        "name": "St Eustatius"
      },
      "HE": {
        "id": "HE",
        "name": "St Helena"
      },
      "KN": {
        "id": "KN",
        "name": "St Kitts-Nevis"
      },
      "LC": {
        "id": "LC",
        "name": "St Lucia"
      },
      "MB": {
        "id": "MB",
        "name": "St Maarten"
      },
      "PM": {
        "id": "PM",
        "name": "St Pierre & Miquelon"
      },
      "VC": {
        "id": "VC",
        "name": "St Vincent & Grenadines"
      },
      "SP": {
        "id": "SP",
        "name": "Saipan"
      },
      "SO": {
        "id": "SO",
        "name": "Samoa"
      },
      "SM": {
        "id": "SM",
        "name": "San Marino"
      },
      "ST": {
        "id": "ST",
        "name": "Sao Tome & Principe"
      },
      "SA": {
        "id": "SA",
        "name": "Saudi Arabia"
      },
      "SN": {
        "id": "SN",
        "name": "Senegal"
      },
      "SC": {
        "id": "SC",
        "name": "Seychelles"
      },
      "SL": {
        "id": "SL",
        "name": "Sierra Leone"
      },
      "SG": {
        "id": "SG",
        "name": "Singapore"
      },
      "SK": {
        "id": "SK",
        "name": "Slovakia"
      },
      "SI": {
        "id": "SI",
        "name": "Slovenia"
      },
      "SB": {
        "id": "SB",
        "name": "Solomon Islands"
      },
      "OI": {
        "id": "OI",
        "name": "Somalia"
      },
      "ZA": {
        "id": "ZA",
        "name": "South Africa"
      },
      "ES": {
        "id": "ES",
        "name": "Spain"
      },
      "LK": {
        "id": "LK",
        "name": "Sri Lanka"
      },
      "SD": {
        "id": "SD",
        "name": "Sudan"
      },
      "SR": {
        "id": "SR",
        "name": "Suriname"
      },
      "SZ": {
        "id": "SZ",
        "name": "Swaziland"
      },
      "SE": {
        "id": "SE",
        "name": "Sweden"
      },
      "CH": {
        "id": "CH",
        "name": "Switzerland"
      },
      "SY": {
        "id": "SY",
        "name": "Syria"
      },
      "TA": {
        "id": "TA",
        "name": "Tahiti"
      },
      "TW": {
        "id": "TW",
        "name": "Taiwan"
      },
      "TJ": {
        "id": "TJ",
        "name": "Tajikistan"
      },
      "TZ": {
        "id": "TZ",
        "name": "Tanzania"
      },
      "TH": {
        "id": "TH",
        "name": "Thailand"
      },
      "TG": {
        "id": "TG",
        "name": "Togo"
      },
      "TK": {
        "id": "TK",
        "name": "Tokelau"
      },
      "TO": {
        "id": "TO",
        "name": "Tonga"
      },
      "TT": {
        "id": "TT",
        "name": "Trinidad &amp; Tobago"
      },
      "TN": {
        "id": "TN",
        "name": "Tunisia"
      },
      "TR": {
        "id": "TR",
        "name": "Turkey"
      },
      "TU": {
        "id": "TU",
        "name": "Turkmenistan"
      },
      "TC": {
        "id": "TC",
        "name": "Turks &amp; Caicos Is"
      },
      "TV": {
        "id": "TV",
        "name": "Tuvalu"
      },
      "UG": {
        "id": "UG",
        "name": "Uganda"
      },
      "UA": {
        "id": "UA",
        "name": "Ukraine"
      },
      "AE": {
        "id": "AE",
        "name": "United Arab Emirates"
      },
      "UY": {
        "id": "UY",
        "name": "Uruguay"
      },
      "UZ": {
        "id": "UZ",
        "name": "Uzbekistan"
      },
      "VU": {
        "id": "VU",
        "name": "Vanuatu"
      },
      "VS": {
        "id": "VS",
        "name": "Vatican City State"
      },
      "VE": {
        "id": "VE",
        "name": "Venezuela"
      },
      "VN": {
        "id": "VN",
        "name": "Vietnam"
      },
      "VB": {
        "id": "VB",
        "name": "Virgin Islands (Brit)"
      },
      "VA": {
        "id": "VA",
        "name": "Virgin Islands (USA)"
      },
      "WK": {
        "id": "WK",
        "name": "Wake Island"
      },
      "WF": {
        "id": "WF",
        "name": "Wallis &amp; Futana Is"
      },
      "YE": {
        "id": "YE",
        "name": "Yemen"
      },
      "ZR": {
        "id": "ZR",
        "name": "Zaire"
      },
      "ZM": {
        "id": "ZM",
        "name": "Zambia"
      },
      "ZW": {
        "id": "ZW",
        "name": "Zimbabwe"
      }
    },
    'featureDetails': {
      interview_kits: {
        name: 'Interview Guides',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides help make sure your candidates interviews are productive, consistent and effective by keeping the entire interview team in-sync on the goals and objectives.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      custom_scorecards: {
        name: 'Scorecards',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Scorecards are a powerful way to gather custom, candidate feedback from your hiring teams and ultimately better, more objective hiring decisions.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      slack_integration: {
        name: "Slack Integration",
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/slack.jpg',
        message: 'Keep you and your team up-to-date on new candidates, submit scorecards and much more, all through the comfort of Slack.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      sso: {
        name: 'Single Sign-On',
        okta: {
          name: 'Okta Single Sign-On',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'With Breezy\'s Okta integration, you can now ensure that every member of your team can seamlessly login to Breezy HR.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      multiple_pipeline: {
        name: 'Multiple Pipelines',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      stage_actions: {
        name: 'Stage Actions',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Stage Actions let you automate common tasks & actions like candidate emails & background checks, while helping you keep your team on track by automatically creating tasks and sending feedback & scorecard requests.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      custom_fields: {
        name: 'Custom Fields',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      hris: {
        name: 'HRIS Integrations',
        inovapayroll: {
          name: 'Inova Payroll',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/bamboohr.jpg',
          message: 'The #1 HR software for small and medium businesses. Breezy can seamlessly push new candidates straight into your BambooHR HRIS & onboarding process.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        bamboo: {
          name: 'BambooHR',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/bamboohr.jpg',
          message: 'The #1 HR software for small and medium businesses. Breezy can seamlessly push new candidates straight into your BambooHR HRIS & onboarding process.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        namely: {
          name: 'Namely',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/namely.jpg',
          message: 'Namely\'s the all-in-one HR platform your employees will love. Breezy can seamlessly push new candidates straight into your Namely HRIS & onboarding process.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      background_checks: {
        name: 'Background Checks',
        goodhire: {
          name: 'GoodHire',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Maintain a great candidate experience even during the background check process with GoodHire.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        checkr: {
          name: 'Checkr',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Enjoy faster & more compliant employment screening with Checkr.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      job_approvals: {
        name: 'Position Approvals',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Whether you need just one person to approve a Position or you need an entire chain of approvals, Breezy\'s Position Approvals are here to make the process seamless, effortless, and fast.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      reporting: {
        name: 'Reporting & Analytics',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Get actionable insight into every facet of your recruiting process so you can improve your process and ultimately make better, more informed hiring decisions.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      tasks: {
        name: 'Task Management',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/tasks.jpg',
        message: 'Your recruiting process has a ton of moving parts - with Breezy Tasks, you can keep track of every single one.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      eeo_reporting: {
        name: 'EEOC Reporting',
        eeo: {
          name: 'EEOC Compliance & Reporting',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Interview Guides are not available on your current plan.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        disposition: {
          name: 'Dispositions',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Interview Guides are not available on your current plan.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      employee_portal: {
        name: 'Employee Referrals',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      custom_pipeline: {
        name: 'Custom Pipelines',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'The process you use to hire a sales person isn\'t the same one you\'d use to hire a software engineer. Create a pipeline to reflect the right process for the right role with Custom Pipelines.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      video_response: {
        name: 'Video Assessments',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      reference_checking: {
        name: 'Reference Checking',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Interview Guides are not available on your current plan.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      questionnaires: {
        name: 'Questionnaires',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/questionnaires.jpg',
        message: 'Questionnaires are a quick, simple way to customize the information gather from from candidates at any stage of the hiring process.',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      esig: {
        name: 'e-Signatures',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      email_integration: {
        name: 'Google & Outlook Mail Integration',
        google: {
          name: 'Google Email',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        outlook: {
          name: 'Outlook Email',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      calendar_integration: {
        name: 'Google & Outlook Calendar Integration',
        google: {
          name: 'Google Calendar',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        outlook: {
          name: 'Outlook Calendar',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      assessments: {
        name: 'Assessment Integrations',
        hackerrank: {
          name: 'HackerRank',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Streamline your technical recruiting process with coding challenges to help you identify the best engineering talent in less time.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        criteriacorp: {
          name: 'Criteria Corp',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'Criteria Corp\'s aptitude, personality, and skills tests provide relevant, objective data to help you make more informed hiring decisions.',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        },
        indeed: {
          name: 'Indeed',
          image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
          message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
          partial: '/templates/v2/app/partials/features/feature_template.html'
        }
      },
      hello_messenger: {
        name: 'Hello Messenger',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'e-Signatures aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      bulk_actions: {
        name: 'Bulk Actions',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Bulk Actions aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      custom_domain: {
        name: 'Custom Careers Site Domain',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Custom domain\'s aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      mobile: {
        name: 'Breezy iOS / Android Apps',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Breezy iOS & Android apps\'s aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      },
      video_interview: {
        name: 'Video Interviews',
        image: 'https://s3.amazonaws.com/breezy-assets-cdn/breezy-hr/images/feature-marketing/analytics.jpg',
        message: 'Video Interviews\'s aren\'t available on your current plan. Would you like to review upgrade options?',
        partial: '/templates/v2/app/partials/features/feature_template.html'
      }
    }
  };
  return sharedModel;
});
'use strict';

angular.module('BaseApp').factory('SocketClient', function ($http, $socket, SharedData, $sce, dialog) {
  var shared = SharedData;

  var addActivityToStreams = function addActivityToStreams($scope, activity, callback) {
    if (activity.object.company_id !== shared.activeCompany.company._id) {
      console.log('Activity from company not in focus: ' + activity.company_id);
      return callback();
    }

    activity.postPageload = true;

    if (activity.object.position_id) {
      var position = shared.activeCompany.positions[activity.object.position_id];

      if (!position || !position.stream) {
        console.log('Stream for position not in cache: ' + activity.object.position_id);
        return callback();
      }

      position.stream.unshift(activity);
    }
  };

  return {
    initialize: function initialize($scope, $rootScope, appClient) {
      $socket.removeAllListeners();
      $socket.on('ping', $scope, function (data) {
        shared.heartbeat = new Date();
        shared.health.lastHeartbeat = new Date();
        $socket.emit('pong', {
          '_id': shared.user._id,
          'name': shared.user.name,
          'profile_photo_url': shared.user.profile_photo_url
        });
      });
      $socket.on('authenticationRequest', $scope, function () {
        console.log('authenticationRequest recvd');
        appClient.getUserSocketToken(function (error, data) {
          if (error) {
            console.log('Error authenticating socket');
            return;
          }

          if (shared.activeCompany && shared.activeCompany.company) {
            //paranoia
            data.company_id = shared.activeCompany.company._id;
            data.friendly_id = shared.activeCompany.company.friendly_id;
          }

          $socket.emit('authenticate', data);
        });
      });
      $socket.on('authenticationSuccess', $scope, function (data) {
        console.log('authenticationSuccess: ' + JSON.stringify(data));
      });
      $socket.on('authenticationFailure', $scope, function (data) {
        console.log('authenticationFailure: ' + JSON.stringify(data));
      });
      $socket.on('forcedRefresh', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        console.log('forcedRefresh: ' + JSON.stringify(data));
        $rootScope.$broadcast(data.type, data);
      });
      $socket.on('forcedLogout', $scope, function (data) {
        if (data.user_id !== shared.user._id) {
          return;
        }

        console.log('forcedLogout: ' + JSON.stringify(data));
        $rootScope.$broadcast(data.type, data);
      });
      $socket.on('companyAdded', $scope, function () {
        $socket.emit('refreshSubscriptions', {});
      });
      $socket.on('companyPipelineUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('pipelineUpdated', data);
      });
      $socket.on('companyPositionAdded', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var position = data.object.position;
        position.postPageload = true;
        $rootScope.$broadcast('positionAdded', position);
      });
      $socket.on('companyPositionStateUpdated', $scope, function (data) {
        console.log('companyPositionStateUpdated');

        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var position = data.object.position;
        $rootScope.$broadcast('positionStateUpdated', data);

        if (shared.user._id == data.object.acting_user._id) {
          return;
        }

        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        if (_.contains(p.all_users, shared.user._id)) {
          shared.activeCompany.notifications.general.unshift(data);
        }
      });
      $socket.on('companyPositionUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var position = data.object.position;
        shared.activeCompany.positions[position._id] = position;
        $rootScope.$broadcast('positionUpdated', position);
      });
      $socket.on('candidateAssignedPosted', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateAssignedPosted', data.object);

        if (!data.object.member || data.object.member._id != shared.user._id) {
          return;
        }

        shared.activeCompany.notifications.candidate.unshift(data);

        if (data.object.acting_user._id == shared.user._id) {
          return;
        }

        appClient.displayDesktopNotification(null, data.object.acting_user.name + ' assigned you to ' + data.object.candidate.name, data.object.body, data.object.acting_user.profile_photo_url, 'Purr');
      });
      $socket.on('companyNotePosted', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var position = data.object.position;
        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        if (shared.user._id != data.object.acting_user._id) {
          if (data.object.mentioned[shared.user._id]) {
            if (!data.object.acting_user.profile_photo_url) {
              data.object.acting_user.profile_photo_url = 'https://s3.amazonaws.com/nimble-assets/favicon_128.png';
            }

            var mention = angular.copy(data);
            mention.type = 'mentionPosted';
            shared.activeCompany.notifications.user.unshift(mention);
            appClient.displayDesktopNotification(null, data.object.acting_user.name + ' mentioned you in a note.', data.object.body, data.object.acting_user.profile_photo_url, 'Purr');
            $rootScope.$broadcast('mentionPosted', mention);
          } else if (_.contains(p.all_users, shared.user._id)) {
            if (!data.object.acting_user.profile_photo_url) {
              data.object.acting_user.profile_photo_url = 'https://s3.amazonaws.com/nimble-assets/favicon_128.png';
            }

            appClient.displayDesktopNotification(null, data.object.acting_user.name + ' on Breezy', data.object.body, data.object.acting_user.profile_photo_url, 'Purr');
          }
        }

        $rootScope.$broadcast('notePosted', data);
      });
      $socket.on('candidateResumeAttached', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateResumeAttached', data);
      });
      $socket.on('companyTeamDeleted', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          return;
        }

        $rootScope.$broadcast('companyTeamsChanged', data);
      });
      $socket.on('companyTeamUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          return;
        }

        $rootScope.$broadcast('companyTeamsChanged', data);
      });
      $socket.on('companyTeamAdded', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          return;
        }

        $rootScope.$broadcast('companyTeamsChanged', data);
      });
      $socket.on('positionTeamRoleUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          return;
        }

        $rootScope.$broadcast('positionTeamRoleUpdated', data);
      });
      $socket.on('positionTeamMemberRoleUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          return;
        }

        $rootScope.$broadcast('positionTeamMemberRoleUpdated', data);
      });
      $socket.on('candidateUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateUpdated', data.object.candidate);
      });
      $socket.on('candidateTagsSet', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateTagsSet', data);
      });
      $socket.on('candidatesImported', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidatesImported', data);
      });
      $socket.on('candidateAdded', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var candidate = data.object.candidate;
        var position = data.object.position;
        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        candidate.postPageLoad = true;

        if (p.candidates) {
          p.candidates.unshift(candidate);
        }

        if (_.contains(p.all_users, shared.user._id)) {
          shared.activeCompany.notifications.candidate.unshift(data);
          shared.activeCompany.notifications.candidate_unread = true;

          if (!candidate.profile_photo_url) {
            candidate.profile_photo_url = 'https://s3.amazonaws.com/nimble-assets/favicon_128.png';
          }

          if (candidate.sourced_by) {
            if (candidate.sourced_by._id != shared.user._id) {
              appClient.displayDesktopNotification('/app/c/' + shared.activeCompany.company.friendly_id + '/p/' + position._id + '/candidates/' + candidate._id + '/experience', 'New sourced candidate on Breezy', candidate.name + ' just applied to ' + position.name, candidate.profile_photo_url, 'Purr');
            }
          } else {
            appClient.displayDesktopNotification('/app/c/' + shared.activeCompany.company.friendly_id + '/p/' + position._id + '/candidates/' + candidate._id + '/experience', 'New candidate on Breezy', candidate.name + ' just applied to ' + position.name, candidate.profile_photo_url, 'Purr');
          }
        }

        $rootScope.$broadcast('candidateAdded', data);
      });
      $socket.on('candidateDeleted', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var positionId = data.object.position_id;
        var p = shared.activeCompany.positions[positionId];

        if (!p) {
          return;
        }

        $rootScope.$broadcast('candidateDeleted', data);

        if (_.contains(p.all_users, shared.user._id)) {
          shared.activeCompany.notifications.candidate.unshift(data);
        }
      });
      $socket.on('candidateDocumentAdded', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateDocumentAdded', data);
      });
      $socket.on('candidateDocumentDeleted', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        console.log('candidateDocumentDeleted');
        $rootScope.$broadcast('candidateDocumentDeleted', data);
      });
      $socket.on('candidateStatusUpdated', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        console.log('candidateStatusUpdated');
        var candidate = data.object.candidate;
        var position = data.object.position;
        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        $rootScope.$broadcast('candidateStatusUpdated', data);

        if (shared.user._id == data.object.acting_user._id) {
          return;
        }

        if (_.contains(p.all_users, shared.user._id)) {
          shared.activeCompany.notifications.general.unshift(data);
        }
      });
      $socket.on('candidateInterviewAdded', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        } //console.log('candidateInterviewAdded');


        var interview = data.object.interview;

        if (_.contains(interview.attendee_ids, shared.user._id)) {
          for (var i in shared.activeCompany.agenda) {
            if (shared.activeCompany.agenda[i]._id === interview._id) {
              console.log("Item already on agenda");
              return;
            }
          }

          console.log("Adding event to agenda");
          shared.activeCompany.agenda.unshift(interview);
        }

        $rootScope.$broadcast('candidateInterviewAdded', data);
      });
      $socket.on('candidateInterviewCancel', $scope, function (data) {
        if (data.stream_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        } //console.log('candidateInterviewCancel');


        var interview = data.object.interview;

        if (_.contains(interview.attendee_ids, shared.user._id)) {
          var remove;

          for (var i in shared.activeCompany.agenda) {
            var n = shared.activeCompany.agenda[i];

            if (n._id === interview._id) {
              remove = i;
            }
          }

          if (remove) shared.activeCompany.agenda.splice(remove, 1);
        }

        $rootScope.$broadcast('candidateInterviewCancel', data);
      });
      $socket.on('questionnaireResponsePosted', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        console.log('questionnaireResponsePosted');
        var candidate = data.object.candidate;
        var position = data.object.position;

        if (!candidate.profile_photo_url) {
          candidate.profile_photo_url = 'https://s3.amazonaws.com/nimble-assets/favicon_128.png';
        }

        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        if (_.contains(p.all_admins, shared.user._id)) {
          appClient.displayDesktopNotification('/app/c/' + shared.activeCompany.company.friendly_id + '/p/' + position._id + '/candidates/' + candidate._id + '/questionnaires', 'Questionnaire completed by ' + candidate.name, data.object.body, candidate.profile_photo_url, 'Purr');
          var remove;

          for (var i in shared.activeCompany.notifications.candidate) {
            var n = shared.activeCompany.notifications.candidate[i];

            if (n.type === 'questionnaireResponsePosted' && n.object.candidate._id === candidate._id) {
              remove = i;
            }
          }

          shared.activeCompany.notifications.candidate.splice(remove, 1);
          shared.activeCompany.notifications.candidate.unshift(data);
        }

        $rootScope.$broadcast('questionnaireResponsePosted', data);
      });
      $socket.on('questionnaireToCandidatePosted', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        console.log('questionnaireToCandidatePosted');
        $rootScope.$broadcast('questionnairePosted', data);
      });
      $socket.on('messageFromCandidatePosted', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        var candidate = data.object.candidate;
        var position = data.object.position;

        if (!candidate.profile_photo_url) {
          candidate.profile_photo_url = 'https://s3.amazonaws.com/nimble-assets/favicon_128.png';
        }

        var p = shared.activeCompany.positions[position._id];

        if (!p) {
          return;
        }

        if (_.contains(p.all_admins, shared.user._id)) {
          appClient.displayDesktopNotification('/app/c/' + shared.activeCompany.company.friendly_id + '/p/' + position._id + '/candidates/' + candidate._id + '/conversation', 'Message from ' + candidate.name, data.object.body, candidate.profile_photo_url, 'Purr');
          var remove;

          for (var i in shared.activeCompany.notifications.candidate_message) {
            var n = shared.activeCompany.notifications.candidate_message[i];

            if (n.type === 'messageFromCandidatePosted' && n.object.candidate._id === candidate._id) {
              remove = i;
            }
          }

          shared.activeCompany.notifications.candidate_message.splice(remove, 1);
          shared.activeCompany.notifications.candidate_message.unshift(data);
          $rootScope.$broadcast('candidateConversationMessagePosted', data);
        }
      });
      $socket.on('messageToCandidatePosted', $scope, function (data) {
        console.log('messageToCandidatePosted');

        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('candidateConversationMessagePosted', data);
      });
      $socket.on('positionApprovalRequested', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('positionApprovalRequested', data);
      });
      $socket.on('positionApprovalUpdated', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('positionApprovalUpdated', data);
      });
      $socket.on('messageToCandidateSent', $scope, function (data) {
        if (data.object.company_id !== shared.activeCompany.company._id) {
          // console.log('Socket data not for company: ' + JSON.stringify(data));
          return;
        }

        $rootScope.$broadcast('messageToCandidateSent', data);
      }); // generic socket events distributed only to company channels
      //

      /*
        types: leave this for code searching of usage
          candidateNoteDeleted
          candidateNoteAdded
          candidateNoteUpdated
          candidateConversationThreadClosed
          companyScorecardUpdated
          companyScorecardAdded
          candidateScoreUpdated
          candidateScorecardUpdated
          candidateScorecardAdded
          messageSeenByCandidate
          candidateDocumentSignatureViewed
          candidateDocumentSignatureSigned
          candidateDocumentSignatureCompleted
          candidateBackgroundCheckMissingInput
          candidateBackgroundCheckProcessing
          candidateBackgroundCheckCompletedClear
          candidateBackgroundCheckCompletedAlert
          candidateAssessmentSent
          candidateAssessmentCompleted
          companyNoteUpdated
          companyNoteDeleted
      */

      $socket.on('companyEvent', $scope, function (data) {
        switch (data.type) {
          case 'candidateBackgroundCheckMissingInput':
          case 'candidateBackgroundCheckProcessing':
          case 'candidateBackgroundCheckCompletedClear':
          case 'candidateBackgroundCheckCompletedAlert':
          case 'candidateDocumentSignatureViewed':
          case 'candidateDocumentSignatureSigned':
          case 'candidateDocumentSignatureCompleted':
          case 'candidateAssessmentSent':
          case 'candidateAssessmentCompleted':
          case 'candidateConsentRequested':
          case 'candidateConsentUpdated':
          case 'candidateMoved':
          case 'messageToCandidateErrored':
          case 'candidatePanelInterviewAdded':
            $rootScope.$broadcast(data.type, data);
            break;

          default:
            $rootScope.$broadcast(data.type, data.object);
            break;
        }
      }); // generic socket events distributed only to user channels
      //

      /*
        types:
          backendError
      */

      $socket.on('userEvent', $scope, function (data) {
        $rootScope.$broadcast(data.type, data.object);
      });
      $socket.on('taskEvent', $scope, function (data) {
        //console.log('taskEvent', data.type, data.object);
        $rootScope.$broadcast(data.type, data.object);
      });
    }
  };
});
"use strict";

angular.module('BaseApp').factory('TaggingService', ['RESTClient', '$q', function (RESTClient, $q) {
  var tags = [];
  return {
    get: function get(companyId) {
      var deferred = $q.defer();
      RESTClient.getTags(companyId, function (error, result) {
        tags = result;
        deferred.resolve(tags);
      });
      return deferred.promise;
    },
    set: function set(companyId, positionId, candidateId, allTags) {
      var tags = [];

      if (allTags) {
        allTags.forEach(function (tag) {
          tags.push(tag.tag);
        });
      }

      var deferred = $q.defer();
      RESTClient.setCandidateTags(companyId, positionId, candidateId, tags, function (error, finalTags) {
        deferred.resolve(finalTags);
      });
      return deferred.promise;
    },
    add: function add(companyId, tags) {
      var deferred = $q.defer();
      RESTClient.addTags(companyId, tags, function (error, result) {
        deferred.resolve(result);
      });
      return deferred.promise;
    },
    delete: function _delete(companyId, tags) {
      var deferred = $q.defer();
      RESTClient.deleteTags(companyId, tags, function (error, result) {
        deferred.resolve(result);
      });
      return deferred.promise;
    }
  };
}]);
'use strict';

angular.module('appController').factory('TasksService', ['AppClient', 'SharedData', 'RESTClient', '$q', 'CompanyService', '$rootScope', function (AppClient, SharedData, RESTClient, $q, CompanyService, $rootScope) {
  var logging = false;
  var appClient = AppClient;
  var company = SharedData.activeCompany.company;
  var user = SharedData.user;
  var myTasks = []; //SharedData.activeCompany.tasks;

  var type = null;
  var filters = ['overdue', 'today', 'upcoming'];
  var positionId = null;
  $rootScope.$watch(function () {
    return myTasks;
  }, function watchCallback(newValue, oldValue) {
    //console.log('update client');
    $rootScope.$broadcast('tasks:updated');
  }, true);

  var findTaskById = function findTaskById(taskId) {
    return myTasks.filter(filterTask).find(function (task) {
      return task._id === taskId;
    });
  };

  var findTaskIndexById = function findTaskIndexById(taskId) {
    return myTasks.filter(filterTask).findIndex(function (task) {
      return task._id === taskId;
    });
  };

  var filterTask = function filterTask(task) {
    if (filters.indexOf(task.group_type) <= -1) {
      return false;
    }

    if (positionId && (!task.hasOwnProperty('position_id') || positionId !== task.position_id)) {
      return false;
    }

    return true;
  };

  var _formatTask = function formatTask(task) {
    // grouping
    var groupType = 'today';

    if (task.completed) {
      groupType = 'complete';
    } else if (moment(task.due_date).isBefore(moment().startOf('day'))) {
      groupType = 'overdue';
    } else if (moment(task.due_date).isAfter(moment().endOf('day'))) {
      groupType = 'upcoming';
    }

    task.group_type = groupType; // friendly date

    /*
    this crap isn't working
    http://momentjs.com/docs/#/customization/calendar/
    {
        lastDay : '[Yesterday]',
        sameDay : '[Today]',
        nextDay : '[Tomorrow]',
        lastWeek : '[last] dddd',
        nextWeek : 'dddd',
        sameElse : 'L'
    }*/

    task.owner = task.acting_user._id === user._id;
    task.assigned = task.users.indexOf(user._id) > -1;
    task.assigned_to = CompanyService.local.getMemberById(task.users[0]);
    task.friendly_created_date = moment(task.creation_date).format('dddd');
    task.friendly_due_date = moment(task.due_date).calendar().replace(/\sat .*$/g, '').replace(/\sLast/g, 'last');
    return task;
  };

  var addTask = function addTask(task) {
    if (type === 'member' && task.users.indexOf(user._id) > -1) {
      task = _formatTask(task);
      myTasks.push(task);
    } else if (type === 'creator' && task.acting_user._id === user._id) {
      task = _formatTask(task);
      myTasks.push(task);
    } else if (type === 'team') {
      console.log('team');
    }
  };

  var _updateTask = function updateTask(task) {
    var index = findTaskIndexById(task._id);

    if (index > -1) {
      myTasks[index] = _formatTask(task);
    }
  };

  var _deleteTask = function deleteTask(task) {
    var index = findTaskIndexById(task._id);

    if (index > -1) {
      myTasks.splice(index, 1);
    }
  };

  var completeTask = function completeTask(task) {
    //task.active = false;
    //task.completed = true;
    var index = findTaskIndexById(task._id);

    if (index > -1) {//myTasks.splice(index, 1);
      //myTasks[index] = formatTask(task);
    }
  };

  myTasks.forEach(_formatTask);
  return {
    getMyTasks: function getMyTasks() {
      return myTasks;
    },
    showTasks: function showTasks() {
      return myTasks.filter(filterTask).length > 0;
    },
    getTasksByGroupType: function getTasksByGroupType() {
      var groups = {
        overdue: [],
        today: [],
        upcoming: [],
        complete: []
      };
      return myTasks.filter(filterTask).reduce(function (obj, task) {
        groups[task.group_type].push(task);
        return groups;
      }, groups);
    },
    formatTask: function formatTask(tasks) {
      tasks.forEach(_formatTask);
      return tasks;
    },
    getTasksByCandidateId: function getTasksByCandidateId(candidateId) {
      return myTasks.filter(function (task) {
        return task.candidate_id && task.candidate_id === candidateId;
      });
    },
    getTaskById: findTaskById,
    getFirstTask: function getFirstTask() {
      if (myTasks.length <= 0) {
        return null;
      }

      return myTasks.filter(filterTask).sort(function (a, b) {
        return a.due_date > b.due_date;
      })[0];
    },
    getTask: function getTask(taskId) {
      var deferred = $q.defer();
      RESTClient.getTask(taskId, company._id, function (error, result) {
        deferred.resolve(result);
      });
      return deferred.promise;
    },
    getTasks: function getTasks(options) {
      // tasksType is "creator" or "member"
      options = options || {};
      var params = {};

      if (!options.hasOwnProperty('type')) {
        options.type = "member";
      }

      if (filters.indexOf('complete') > -1) {
        params.include_completed = true;
      }

      type = options.type;
      var deferred = $q.defer();
      RESTClient.getTasks(options, params, company._id, function (error, result) {
        result.forEach(_formatTask);
        myTasks = result;
        deferred.resolve(myTasks);
      });
      return deferred.promise;
    },
    resetFilters: function resetFilters() {
      filters = ['overdue', 'today', 'upcoming'];
      positionId = null;
    },
    setPosition: function setPosition(id) {
      positionId = id;
    },
    setFilters: function setFilters(newFilters) {
      filters = newFilters;
    },
    createTask: function createTask(task) {
      var deferred = $q.defer();
      RESTClient.createTask(task, company._id, function (error, task) {
        if (error || !task) {
          deferred.reject();
        } else {
          //console.log(task);
          addTask(task);
          deferred.resolve(task);
        }
      });
      return deferred.promise;
    },
    updateTask: function updateTask(task) {
      var deferred = $q.defer();
      RESTClient.updateTask(task, company._id, function (error, task) {
        if (error || !task) {
          deferred.reject();
        } else {
          task = _updateTask(task);
          deferred.resolve(task);
        }
      });
      return deferred.promise;
    },
    deleteTask: function deleteTask(task) {
      var deferred = $q.defer();
      RESTClient.deleteTask(task._id, company._id, function (error, result) {
        _deleteTask(task);

        deferred.resolve(task);
      });
      return deferred.promise;
    },
    getTaskMetadata: function getTaskMetadata(taskId) {
      var deferred = $q.defer();
      RESTClient.getTaskMetadata(company._id, taskId, function (error, metadata) {
        if (error || !metadata) {
          deferred.reject();
        } else {
          deferred.resolve(metadata);
        }
      });
      return deferred.promise;
    },
    markComplete: function markComplete(task) {
      var deferred = $q.defer();
      task.active = true;
      completeTask(task);
      appClient.markTaskComplete(company._id, task._id, function () {
        setTimeout(function () {
          completeTask(task); //myTasks.splice(index, 1);

          deferred.resolve(true);
        }, 250);
      });
      return deferred.promise;
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('UploadService', ['SharedData', '$upload', function (SharedData, $upload) {
  var companyId = SharedData.activeCompany.company._id;

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $upload.upload({
        url: '/api/company/' + companyId + '/logo',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  return {
    upload: upload
  };
}]);
'use strict';

angular.module('BaseApp').factory('UserService', ['AppClient', 'SharedData', 'RESTClient', '$q', '$rootScope', function (AppClient, SharedData, RESTClient, $q, $rootScope) {
  var companyId = SharedData.activeCompany.company._id;
  var activeCues = ['seen_move_candidate']; // testing user cues

  /*SharedData.user_cues.active_cues.push({
      _id: 'seen_multi_interview',
      title: 'hello',
      content: 'world'
  });*/

  var UserStore = {
    // default state of the company store
    state: {
      cues: SharedData.user_cues ? SharedData.user_cues : {
        active_cues: []
      }
    },
    // getters are used for getting data from the store
    getters: {
      //cue: key => (UserStore.state.cues.hasOwnProperty(key) && UserStore.state.cues[key]),
      cue: function cue(key) {
        return UserStore.state.cues.active_cues.find(function (cue) {
          return cue._id === key;
        });
      } //cueTemplate: key => (UserStore.state.cues.active_cues.find(cue => (cue._id === key)))

    },
    // actions are used for fetching and updating data remotely
    actions: {
      //...mapActions(collections),
      updateCue: function updateCue(key) {
        var deferred = $q.defer();
        RESTClient.setUserCue(companyId, key, function (error, result) {
          if (error) deferred.reject(error);
          var index = UserStore.state.cues.active_cues.findIndex(function (cue) {
            return cue._id === key;
          });
          UserStore.mutations.setCue(index);
          deferred.resolve(true);
        });
        return deferred.promise;
      }
    },
    // mutations are used for manipulating data in the store
    mutations: {
      setCue: function setCue(index) {
        UserStore.state.cues.active_cues.splice(index, 1);
        $rootScope.$broadcast('cue:refresh', {});
      }
    }
  };
  return UserStore;
}]);
'use strict';

angular.module('BaseApp').factory('utils', ['marked', '$sce', function (marked, $sce) {
  return {
    HTMLtoMarkdown: function HTMLtoMarkdown(html) {
      html = html.replace(/(\r\n|\n|\r)/gm, '<br/>');
      html = toMarkdown(html, {
        gfm: true
      });
      html = html.replace(/<[//]{0,1}(p|span|img|div|u|a|figure)[^><]*>/gm, '');
      html = html.replace('<br/>', '\r\n');
      return html;
    },
    markdownToHTML: function markdownToHTML(markdown) {
      var html = marked(markdown || '');
      html = html.replace(/(\r\n|\n|\r)/gm, '');
      return html;
    },
    stripMarkdown: function stripMarkdown(md) {
      var output = md;
      output = output.replace(/^([\s\t]*)([\*\-\+]|\d\.)\s+/gm, '$1');
      output = output // Header
      .replace(/\n={2,}/g, '\n') // Strikethrough
      .replace(/~~/g, '') // Fenced codeblocks
      .replace(/`{3}.*\n/g, '');
      output = output // Remove HTML tags
      .replace(/<(.*?)>/g, '$1') // Remove setext-style headers
      .replace(/^[=\-]{2,}\s*$/g, '') // Remove footnotes?
      .replace(/\[\^.+?\](\: .*?$)?/g, '').replace(/\s{0,2}\[.*?\]: .*?$/g, '') // Remove images
      .replace(/\!\[.*?\][\[\(].*?[\]\)]/g, '') // Remove inline links
      .replace(/\[(.*?)\][\[\(].*?[\]\)]/g, '$1') // Remove Blockquotes
      .replace(/>/g, '') // Remove reference-style links?
      .replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g, '') // Remove atx-style headers
      .replace(/^\#{1,6}\s*([^#]*)\s*(\#{1,6})?/gm, '$1').replace(/([\*_]{1,3})(\S.*?\S)\1/g, '$2').replace(/(`{3,})(.*?)\1/gm, '$2').replace(/^-{3,}\s*$/g, '').replace(/`(.+?)`/g, '$1').replace(/\n{2,}/g, '\n\n');
      return output;
    },
    formatText: function formatText(value) {
      if (!value) {
        return;
      } //value = value.replace("<", "");
      //value = value.replace(">", "");
      //value = value.replace(/\</g, "&lt;");
      //value = value.replace(/\>/g, "&gt;");
      // Emoticons


      value = value.replace(/\(heart\)/g, "<i class='fa fa-heart'></i>");
      value = value.replace(/\(love\)/g, "<i class='fa fa-heart'></i>");
      value = value.replace(/\(happy\)/g, "<i class='fa fa-smile-o'></i>");
      value = value.replace(/\(sad\)/g, "<i class='fa fa-frown-o'></i>");
      value = value.replace(/\(meh\)/g, "<i class='fa fa-meh-o'></i>");
      value = value.replace(/\(y\)/g, "<i class='fa fa-thumbs-up'></i>");
      value = value.replace(/\(n\)/g, "<i class='fa fa-thumbs-down'></i>");
      value = value.replace(/:love:/g, "<i class='fa fa-heart'></i>");
      value = value.replace(/:heart:/g, "<i class='fa fa-heart'></i>");
      value = value.replace(/:thumbsup:/g, "<i class='fa fa-thumbs-up'></i>");
      value = value.replace(/:thumbsdown:/g, "<i class='fa fa-thumbs-down'></i>");
      value = value.replace(/:grin:/g, "<i class='fa fa-smile-o'></i>");
      value = value.replace(/:smile:/g, "<i class='fa fa-smile-o'></i>");
      value = value.replace(/:grinning:/g, "<i class='fa fa-smile-o'></i>");
      value = value.replace(/:sad:/g, "<i class='fa fa-frown-o'></i>");
      value = value.replace(/:frown:/g, "<i class='fa fa-frown-o'></i>");
      value = value.replace(/\:pensive:/g, "<i class='fa fa-meh-o'></i>"); // Keep newlines
      //value = value.replace(/\n/g, '<br />');
      // Usernames

      var idx = value.indexOf('<p>@');

      if (idx === 0) {
        var endIndex = value.indexOf(' ') === -1 ? value.indexOf('</p>') : value.indexOf(' ');
        var mention = value.substring(value.indexOf('@'), endIndex);
        value = value.replace(mention, "<span class='username'>" + mention + "</span>");
      } //value = value.replace(/^(@\w+)/ig, "<span class='username'>$1</span>");


      value = value.replace(/\s(@\w+)/ig, " <span class='username'>$1</span>");
      return value;
    }
  };
}]);
'use strict';

angular.module('BaseApp').factory('VideoService', function () {
  return {
    initialize: function initialize() {
      var gotStream = function gotStream(stream) {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        var audioContext = new AudioContext(); // Create an AudioNode from the stream

        var mediaStreamSource = audioContext.createMediaStreamSource(stream); // Connect it to destination to hear yourself
        // or any other node for processing!

        mediaStreamSource.connect(audioContext.destination);
      };

      navigator.getUserMedia({
        audio: true
      }, gotStream);
    }
  };
});
'use strict';

angular.module('BaseApp').directive('datepickerWithPresets', [function () {
  return {
    restrict: 'EC',
    replace: false,
    templateUrl: '/templates/v2/app/partials/datepicker_with_presets.html',
    scope: {
      presets: '=',
      onSelect: '&'
    },
    link: function link(scope, element, attrs) {
      scope.tomorrow = new Date();
      scope.tomorrow.setDate(scope.tomorrow.getDate() + 1);
      scope.customDelay = {
        date: null
      };

      scope.presetSelected = function (delay) {
        scope.onSelect()(delay);
      };

      scope.$watch('customDelay.date', function (delayDate) {
        if (delayDate) {
          //var now = new Date().getTime();
          var begin = new Date().setHours(0, 0, 0, 0);
          var end = new Date(delayDate).getTime();
          var sendDelay = end - begin; //scope.sendMessage(sendDelay);

          scope.onSelect()(sendDelay);
        }
      });
    }
  };
}]);
'use strict';

angular.module('BaseApp').directive('featureBlocker', ['FeaturesService', function (FeaturesService) {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: '/templates/v2/app/partials/feature_blocker.html',
    scope: {
      featureKey: '@featureBlocker',
      exists: '=?featureExists',
      specific: '@?featureSpecific',
      partial: '@?featurePartial',
      type: '@featureBlockerType'
    },
    link: function link(scope, element, attrs) {
      var options = {};

      if (angular.isDefined(scope.specific)) {
        options.specific = scope.specific;
      }

      scope.showWarning = false;

      if (!FeaturesService.getters.available(scope.featureKey) && angular.isDefined(scope.exists)) {
        scope.showWarning = scope.exists;
      }

      scope.feature = FeaturesService.getters.feature(scope.featureKey, options);
      scope.block = !FeaturesService.getters.available(scope.featureKey) && (scope.exists || scope.type === 'full');

      scope.planUpgrade = function () {
        FeaturesService.actions.upgrade(scope.featureKey, options);
      };
    }
  };
}]);
'use strict';

angular.module('BaseApp').directive('breezyOnboarding', ['AppClient', 'SharedData', 'ModalService', '$uibModal', '$state', '$cookieStore', function (AppClient, SharedData, ModalService, $uibModal, $state, $cookieStore) {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: '/templates/v2/app/partials/onboarding.html',
    scope: {},
    link: function link(scope, element, attrs) {
      scope.minimized = $cookieStore.get('minimizeOnboarding') ? $cookieStore.get('minimizeOnboarding') : false;
      scope.hidden = true;
      scope.appClient = AppClient;
      scope.shared = SharedData;
      scope.onboardingCompleted = 0;
      scope.onboardingTotal = 3;
      var completed = true;
      scope.gaEventTracker = scope.appClient.gaEventTracker;

      function initialize(controller) {
        var skipped = $cookieStore.get('skipOnboarding') ? $cookieStore.get('skipOnboarding') : false;
        scope.hidden = completed || skipped || controller === 'CompanyHomeCtrl' && Object.keys(scope.shared.positions).length === 0 || controller === 'CompanyPlansCtrl';
      }

      function initializeTodos() {
        scope.onboardingCompleted = 0;
        scope.action = {
          addPosition: Object.keys(scope.shared.positions).length > 0,
          inviteTeam: $cookieStore.get("CompanyMemberInvited") || scope.shared.activeCompany.members.length > 1,
          portalLogo: scope.shared.activeCompany.portal.layout.type !== 'bold' || scope.shared.activeCompany.portal.appearance.logo_url //watchIntro: $cookieStore.get("WatchIntroVideo") ? true : false

        };
        completed = true;
        Object.keys(scope.action).forEach(function (key) {
          if (!scope.action[key]) {
            completed = false;
          } else {
            scope.onboardingCompleted++;
          }
        });

        if (completed) {
          scope.hidden = true;
        }
      }

      initializeTodos();
      initialize($state.current.controller);
      scope.$root.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
        initialize(toState.controller);
      });
      scope.$root.$on('positionAdded', function (event, data) {
        initializeTodos();
        initialize();
      });
      scope.$root.$on('userUpdated', function (event, data) {
        initializeTodos();
      });
      scope.$root.$on('updatePortalAppearance', function (event, data) {
        initializeTodos();
      });
      scope.$root.$on('companyUpdated', function (event, data) {
        initializeTodos();
      });
      scope.$root.$on('companyMemberInvited', function (event, data) {
        initializeTodos();
      });
      scope.$root.$on('watchIntroVideo', function (event, data) {
        initializeTodos();
      });

      scope.minimize = function (e) {
        scope.minimized = true;
        scope.gaEventTracker('OnboardingMaximized');
        $cookieStore.put('minimizeOnboarding', scope.minimized);
        e.cancelBubble = true;
        e.stopPropagation();
      };

      scope.maximize = function () {
        scope.minimized = false;
        scope.gaEventTracker('OnboardingMinimized');
        $cookieStore.put('minimizeOnboarding', scope.minimized);
      };

      scope.skip = function () {
        $cookieStore.put('skipOnboarding', true);
        scope.gaEventTracker('OnboardingSkipped');
        element.remove();
      };

      scope.newPosition = function () {
        scope.gaEventTracker('OnboardingAction');
        var modalInstance = $uibModal.open({
          templateUrl: '/templates/v2/app/position/new/new.html',
          controller: 'PositionNewModalInstanceCtrl',
          size: 'md',
          resolve: {
            defaultTab: function defaultTab() {
              return 'description';
            },
            position: function position() {
              return null;
            },
            orgType: function orgType() {
              return null;
            },
            clonePosition: function clonePosition() {
              return null;
            },
            $parentScope: function $parentScope() {
              return scope;
            }
          },
          windowClass: 'new-position-modal'
        });
        modalInstance.result.then(function (position) {//$scope.updatePosition(position);
        }, function () {
          /*$state.transitionTo(currentStateData.name, currentStateData.params, {
              location: true,
              inherit: true,
              relative: $state.$current,
              notify: false
          });*/
        });
      };

      scope.videoIntroModal = function () {
        var modalInstance = $uibModal.open({
          templateUrl: '/templates/v2/app/onboarding/intro_video.html',
          controller: 'IntroVideoModalInstanceCtrl',
          size: 'welcome',
          resolve: {
            $parentScope: function $parentScope() {
              return scope;
            }
          }
        });
      };

      scope.companySettings = function (tab) {
        scope.gaEventTracker('OnboardingAction');
        ModalService.companySettings(tab);
      };

      scope.jobPortalSettings = function (tab) {
        scope.gaEventTracker('OnboardingAction');
        var modalInstance = $uibModal.open({
          templateUrl: '/templates/v2/app/portal/settings.html',
          controller: 'JobPortalSettingsModalInstanceCtrl',
          size: 'md',
          resolve: {
            defaultTab: function defaultTab() {
              return tab;
            },
            $parentScope: function $parentScope() {
              return scope;
            }
          }
        });
        modalInstance.result.then(function (selectedItem) {}, function () {});
      };
    }
  };
}]);
'use strict';

angular.module('BaseApp').directive('userCues', ['UserService', function (UserService) {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: '/templates/v2/app/partials/user_cues.html',
    scope: {
      cueKey: '@userCues',
      cueClasses: '@?userCuesClasses',
      cuePlacement: '@?userCuesPlacement',
      cueNoAction: '@?userCuesNoAction',
      goto: '&userCuesGoto'
    },
    link: function link(scope, element, attrs) {
      if (!angular.isDefined(scope.cuePlacement)) {
        scope.cuePlacement = 'bottom';
      }

      if (!angular.isDefined(scope.cueClasses)) {
        scope.cueClasses = 'bg-black';
      }

      if (angular.isDefined(scope.cueNoAction) && scope.cueNoAction) {
        scope.hasPassthrough = false;
      } else {
        scope.hasPassthrough = true;
      }

      var popover = {
        templateUrl: 'userCueTemplate.html'
      };
      scope.cue = UserService.getters.cue(scope.cueKey);

      if (scope.cue) {
        scope.isSeen = false;
        popover.title = scope.cue.title;
        popover.content = scope.cue.description;
      } else {
        scope.isSeen = true;
      }

      scope.$on('cue:refresh', function () {//scope.isSeen = UserService.getters.cue(scope.cueKey);
      }); //console.log(cue);

      scope.isOpen = false;
      if (scope.cueKey === "seen_move_candidate") popover = {
        templateUrl: 'userCueTemplate.html',
        title: '👩➡️ Move Candidates',
        content: 'Our new Candidate Move feature lets you move candidates, along with all their information, to another Position or Candidate Pool!'
      };else if (scope.cueKey === "seen_interview_request_scorecards") popover = {
        templateUrl: 'userCueTemplate.html',
        title: '👍👎 Request Scorecards',
        content: 'Now Breezy can automatically request the team members attending an interview complete their candidate scorecard after the meeting ends.'
      };else if (scope.cueKey === "seen_feature_requests") {
        popover = {
          templateUrl: 'userCueTemplate.html',
          title: '🎁 Feature Requests',
          content: 'We\'re always looking for ways to improve. That\s why we\'ve added a dedicated Features Request section. Now you can share your own ideas and also vote up ideas from other users right inside Breezy!'
        };
      } //console.log(popover);

      scope.dynamicPopover = popover;

      scope.toggleOpen = function (e) {
        if (e) {
          e.stopPropagation();
          e.preventDefault();
        }

        ga('send', 'event', 'UserCue', scope.cueKey);
        scope.isOpen = !scope.isOpen;
      };

      scope.passthrough = function () {
        scope.dismiss();
        scope.goto();
      };

      scope.dismiss = function (e) {
        if (e) {
          e.stopPropagation();
          e.preventDefault();
        }

        scope.seen();
        scope.toggleOpen();
      };

      scope.seen = function () {
        setTimeout(function () {
          scope.isOpen = false;
        }, 1);

        if (!scope.isSeen) {
          scope.isSeen = true;
          UserService.actions.updateCue(scope.cueKey); //console.log(cue);
        }
      };
    }
  };
}]);
angular.module('BaseApp').directive('userCuesRelative', ['UserService', function (UserService) {
  return {
    restrict: 'A',
    transclude: true,
    templateUrl: '/templates/v2/app/partials/user_cues_relative.html',
    scope: {
      cueKey: '@userCuesRelative',
      cueClasses: '@?userCuesClasses',
      cuePlacement: '@?userCuesPlacement',
      cueNoAction: '@?userCuesNoAction',
      goto: '&userCuesGoto'
    },
    link: function link(scope, element, attrs) {
      if (!angular.isDefined(scope.cuePlacement)) {
        scope.cuePlacement = 'bottom';
      }

      if (!angular.isDefined(scope.cueClasses)) {
        scope.cueClasses = 'bg-black';
      }

      if (angular.isDefined(scope.cueNoAction) && scope.cueNoAction) {
        scope.hasPassthrough = false;
      } else {
        scope.hasPassthrough = true;
      }

      var popover = {
        templateUrl: 'userCueTemplate.html'
      };
      scope.cue = UserService.getters.cue(scope.cueKey);

      if (scope.cue) {
        scope.isSeen = false;
        popover.title = scope.cue.title;
        popover.content = scope.cue.description;
      } else {
        scope.isSeen = true;
      }

      scope.$on('cue:refresh', function () {//scope.isSeen = UserService.getters.cue(scope.cueKey);
      }); //console.log(cue);

      scope.isOpen = false;
      if (scope.cueKey === "seen_move_candidate") popover = {
        templateUrl: 'userCueTemplate.html',
        title: '👩➡️ Move Candidates',
        content: 'Our new Candidate Move feature lets you move candidates, along with all their information, to another Position or Candidate Pool!'
      };else if (scope.cueKey === "seen_interview_request_scorecards") popover = {
        templateUrl: 'userCueTemplate.html',
        title: '👍👎 Request Scorecards',
        content: 'Now Breezy can automatically request the team members attending an interview complete their candidate scorecard after the meeting ends.'
      };else if (scope.cueKey === "seen_feature_requests") {
        popover = {
          templateUrl: 'userCueTemplate.html',
          title: '🎁 Feature Requests',
          content: 'We\'re always looking for ways to improve. That\s why we\'ve added a dedicated Features Request section. Now you can share your own ideas and also vote up ideas from other users right inside Breezy!'
        };
      } //console.log(popover);

      scope.dynamicPopover = popover;

      scope.toggleOpen = function (e) {
        if (e) {
          e.stopPropagation();
          e.preventDefault();
        }

        ga('send', 'event', 'UserCue', scope.cueKey);
        scope.isOpen = !scope.isOpen;
      };

      scope.passthrough = function () {
        scope.dismiss();
        scope.goto();
      };

      scope.dismiss = function (e) {
        if (e) {
          e.stopPropagation();
          e.preventDefault();
        }

        scope.seen();
        scope.toggleOpen();
      };

      scope.seen = function () {
        setTimeout(function () {
          scope.isOpen = false;
        }, 1);

        if (!scope.isSeen) {
          scope.isSeen = true;
          UserService.actions.updateCue(scope.cueKey); //console.log(cue);
        }
      };
    }
  };
}]);
'use strict';

angular.module('appController').controller('AnalyticsDispositionsViewCtrl', ['$scope', '$rootScope', '$state', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $state, $stateParams, ReportService, ChartsService) {
  console.log('AnalyticsDispositionsViewCtrl init');
  $scope.reports = {};
  $scope.colorMapper = {};
  var chartData = {};

  var initializReport = function initializReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.name);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);

        if (type === 'total') {
          total += item[type];
        } else if (item[type] > total) {
          total = item[type];
        }

        $scope.colorMapper[item._id._id] = $scope.colors[i];
        tableData.push({
          id: item._id._id,
          label: item._id.name,
          value: item[type],
          color: $scope.colors[i]
        });
      } //console.log($scope.colorMapper);


      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addChart = function addChart(id, data) {
      var line1 = document.getElementById(id).getContext("2d");
      ChartsService.line(line1, data);
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    $scope.appClient.getReport('dispositions', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true; //console.log(report);

      report.sources = Object.keys(report.dispositions.reasons).map(function (key) {
        var source = report.dispositions.reasons[key];
        return {
          sourceId: source._id,
          sourceName: source.name
        };
      });
      chartData.DispositionVolumeHistory = ReportService.getLineChartData(report.sources, report.dispositions.volume_history, null);
      addChart("volume-history-by-disposition", chartData.DispositionVolumeHistory);
      report.disposition_totals = getSourceChartData('total', report.dispositions.disposition_vol);
      addPieChart('dispositions-totals', report.disposition_totals.data);
      $scope.report = report;
    });
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('DispositionVolumeHistory', chart), csvData);
  };

  var mappers = {
    DispositionTotals: [{
      label: 'Reason',
      key: 'label'
    }, {
      label: 'Volume',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('DispositionTotals', mapper), csvData, true);
  };

  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initializReport();
    }
  });
  initializReport();
}]);
'use strict';

angular.module('appController').controller('AnalyticsEEOCViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ChartsService', function ($scope, $rootScope, $stateParams, ChartsService) {
  $scope.reports = {};
  var EEOCHeaders = ['Name', 'Email', 'Applied', 'Position', 'Gender', 'Ethnicity', 'Disability Status', 'Veteran Status'];
  $scope.colors = ['#f6ab74', '#f183a1', '#7d669e', '#ed8989', '#e25359', '#5ac0e5', '#b0c4de', '#8fbc8f', '#8b8878', '#bdb76b', '#9acd32', '#2e8b57', '#9acd32', '#deb778', '#daa520', '#cd853f', '#a0522d'];

  var tabularizeData = function tabularizeData(report) {
    var rows = [];

    function generateColumns(position) {
      for (var candidateRef in position.candidates) {
        var candidate = position.candidates[candidateRef];
        var columns = [];
        columns.push(candidate.name || '');
        columns.push(candidate.email_address || '');
        columns.push(moment(candidate.creation_date).format('MM-DD-YYYY'));
        columns.push(position.position_name || '');
        columns.push(candidate.eeoc.gender || '');
        columns.push(candidate.eeoc.race_ethnicity || '');
        columns.push(candidate.eeoc.disability_status || '');
        columns.push(candidate.eeoc.veteran_status || '');
        rows.push(columns);
      }
    }

    if (!report.hasOwnProperty('candidates')) {
      for (var positionId in report) {
        var position = report[positionId];
        generateColumns(position);
      }
    } else {
      generateColumns(report);
    }

    return rows;
  };

  var initializeReport = function initializeReport() {
    // only run on single positions
    if ($scope.selectedReportCriteria.id) {
      $scope.appClient.getReport('eeoc', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
        $scope.reports.pipeline_movement = report.pipeline_movement;
      });
    }

    $scope.appClient.getReport('eeoc-detail', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      $scope.reports.eeoc_detail = report;
    });
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();

  $scope.exportDetail = function () {
    //console.log(this.report);
    //return;
    var csvData = tabularizeData(this.report || $scope.reports.eeoc_detail);
    csvData.unshift(EEOCHeaders);
    ChartsService.exportCSV('breezy-report-eeoc-detail', csvData);
  };

  $scope.reportExport = function (position_ids) {
    if (position_ids === 'all') {
      return;
    }

    var params = Object.assign({}, $scope.params, {
      position_ids: position_ids
    }); //return;

    $scope.appClient.getReportExport('eeoc', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, params, function (error, result) {
      console.log(error);
      console.log(result);
    }); //var url = '/api/v1/reports/export/questionnaire?company_id=&position_ids=&date_range=&acting_user_id=&questionnaire_id='
  };

  $scope.export = function (name) {
    function Create2DArray(rows, columns) {
      var x = new Array(rows);

      for (var i = 0; i < rows; i++) {
        x[i] = new Array(columns);
      }

      return x;
    }

    var report = $scope.reports.pipeline_movement[name];

    var _c = Object.keys(report);

    var _r = Object.keys(report[_c[0]].data);

    var rows = new Create2DArray(_r.length, _c.length + 1);
    var header = [];
    var i = 0;
    var j = 0;

    for (var key in report) {
      var data = report[key];
      header.push(data.label);
      j = 0;

      for (var stage in data.data) {
        var item = data.data[stage];

        if (i === 0) {
          rows[j][i] = item.label;
        } //console.log(`rows[${j}][${i+1}]`)


        rows[j][i + 1] = item.total;
        j++;
      }

      i++;
    }

    rows.unshift(header);
    ChartsService.exportCSV('breezy-report-' + name, rows);
  };

  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsGDPRViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ChartsService', function ($scope, $rootScope, $stateParams, ChartsService) {
  $scope.reports = {};
  var GDPRHeaders = ['Position', 'Count'];
  $scope.colors = ['#f6ab74', '#f183a1', '#7d669e', '#ed8989', '#e25359', '#5ac0e5', '#b0c4de', '#8fbc8f', '#8b8878', '#bdb76b', '#9acd32', '#2e8b57', '#9acd32', '#deb778', '#daa520', '#cd853f', '#a0522d'];

  var tabularizeData = function tabularizeData(report) {
    var rows = [];

    for (var positionRef in report) {
      var position = report[positionRef];
      var columns = [];
      columns.push(position.name || '');
      columns.push(position.total || '');
      rows.push(columns);
    }

    return rows;
  };

  var initializeReport = function initializeReport() {
    // only run on single positions
    $scope.appClient.getReport('gdpr', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      $scope.reports = report; //$scope.reports.pipeline_movement = report.pipeline_movement;
    });
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();

  $scope.exportDetail = function () {
    //console.log(this.report);
    //return;
    var csvData = tabularizeData($scope.reports.position_delete_counts);
    csvData.unshift(GDPRHeaders);
    ChartsService.exportCSV('breezy-report-gdpr-detail', csvData);
  };

  $scope.reportExport = function (position_ids) {
    if (position_ids === 'all') {
      return;
    }

    var params = Object.assign({}, $scope.params, {
      position_ids: position_ids
    }); //console.log(params);
    //return;

    $scope.appClient.getReportExport('gdpr', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, params, function (error, result) {
      console.log(error);
      console.log(result);
    }); //var url = '/api/v1/reports/export/questionnaire?company_id=&position_ids=&date_range=&acting_user_id=&questionnaire_id='
  };

  $scope.export = function (name) {
    function Create2DArray(rows, columns) {
      var x = new Array(rows);

      for (var i = 0; i < rows; i++) {
        x[i] = new Array(columns);
      }

      return x;
    }

    var report = $scope.reports.pipeline_movement[name];

    var _c = Object.keys(report);

    var _r = Object.keys(report[_c[0]].data);

    var rows = new Create2DArray(_r.length, _c.length + 1);
    var header = [];
    var i = 0;
    var j = 0;

    for (var key in report) {
      var data = report[key];
      header.push(data.label);
      j = 0;

      for (var stage in data.data) {
        var item = data.data[stage];

        if (i === 0) {
          rows[j][i] = item.label;
        } //console.log(`rows[${j}][${i+1}]`)


        rows[j][i + 1] = item.total;
        j++;
      }

      i++;
    }

    rows.unshift(header);
    ChartsService.exportCSV('breezy-report-' + name, rows);
  };

  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsMessagingViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.totalMemberVolume = 0;
  $scope.totalCandidateVolume = 0;
  $scope.reports = {};

  var initializReport = function initializReport() {
    ChartsService.clear();

    var getChartData = function getChartData(report) {
      var getLabels = function getLabels(report) {
        var arr = [];
        var keys = Object.keys(report);

        for (var i in keys) {
          arr.push(report[keys[i]].label);
        }

        return arr;
      };

      var initializeDatasets = function initializeDatasets(report) {
        var datasets = [];
        var first = report[Object.keys(report)[0]];
        var keys = Object.keys(first.data);

        for (var i in keys) {
          var key = keys[i];
          var color, label;

          if (key === "messages_to") {
            color = $scope.colors[0];
            label = 'Team (Email)';
          } else if (key === "messages_sms_to") {
            color = $scope.colors[1];
            label = 'Team (SMS)';
          } else if (key === "messages_from") {
            color = $scope.colors[2];
            label = 'Candidate (Email)';
          } else if (key === "messages_sms_from") {
            color = $scope.colors[3];
            label = 'Candidate (SMS)';
          }

          datasets.push({
            fill: false,
            animation: false,
            datasetFill: false,
            borderColor: $scope.colors[i],
            pointBackgroundColor: $scope.colors[i],
            label: label,
            pointBorderColor: "#fff",
            borderWidth: 4,
            pointRadius: 5,
            pointHoverRadius: 5,
            pointBorderWidth: 1,
            'data': []
          });
        }

        return datasets;
      };

      var populateDatasets = function populateDatasets(datasets, report) {
        var keys = Object.keys(report);

        for (var i in keys) {
          var item = report[keys[i]];
          var dataKeys = Object.keys(item.data);
          var count = 0;

          for (var d in dataKeys) {
            var val = item.data[dataKeys[d]];
            datasets[count].data.push(val);
            count++;
          }
        }

        return datasets;
      };

      var labels = getLabels(report);
      var datasets = initializeDatasets(report);
      populateDatasets(datasets, report);
      var data = {
        labels: labels,
        datasets: datasets
      };
      return data;
    };

    var addChart = function addChart(data) {
      var line1 = document.getElementById("candidates-history-chart").getContext("2d");
      ChartsService.line(line1, data);
    };

    var getVolumeChartData = function getVolumeChartData(data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.userName);
        chartData.datasets[0].data.push(item.total);
        chartData.datasets[0].backgroundColor.push(item._id.userId === "other" ? "#9da6ad" : $scope.colors[i]);
        tableData.push({
          id: item._id.userId,
          label: item._id.userName,
          value: item.total,
          color: item._id.userId === "other" ? "#9da6ad" : $scope.colors[i]
        });
        total += item.total;
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    $scope.appClient.getReport('messaging', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      addChart(getChartData(report.messaging.volume_history));
      var candidateVolume = getVolumeChartData(report.messaging.candidate_volume);
      addPieChart('candidate-senders-chart', candidateVolume.data);
      var candidateVolumeSms = getVolumeChartData(report.messaging.candidate_volume_sms);
      addPieChart('candidate-senders-chart-sms', candidateVolumeSms.data);
      var memberVolume = getVolumeChartData(report.messaging.member_volume);
      addPieChart('member-senders-chart', memberVolume.data);
      var memberVolumeSms = getVolumeChartData(report.messaging.member_volume_sms);
      addPieChart('member-senders-chart-sms', memberVolumeSms.data);
      $scope.reports.volume_history = report.messaging.volume_history;
      $scope.reports.candidate_volume = candidateVolume;
      $scope.reports.member_volume = memberVolume;
      $scope.reports.candidate_volume_sms = candidateVolumeSms;
      $scope.reports.member_volume_sms = memberVolumeSms;
    });
  };

  var mappers = {
    MembersByEmailSent: [{
      label: 'Member',
      key: 'label'
    }, {
      label: 'Emails Sent',
      key: 'value'
    }],
    MembersBySMSSent: [{
      label: 'Member',
      key: 'label'
    }, {
      label: 'SMS Sent',
      key: 'value'
    }],
    CandidatesByEmailSent: [{
      label: 'Candidate',
      key: 'label'
    }, {
      label: 'Emails Sent',
      key: 'value'
    }],
    CandidatesBySmsSent: [{
      label: 'Candidate',
      key: 'label'
    }, {
      label: 'SMS Sent',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('Messaging', mapper), csvData, true);
  };

  $scope.export = function () {
    var csvData = {
      dates: [],
      team: [],
      candidates: []
    };

    for (var date in $scope.reports.volume_history) {
      var item = $scope.reports.volume_history[date];
      csvData.dates.push(item.label);
      csvData.team.push(item.data.messages_to);
      csvData.candidates.push(item.data.messages_from);
    }

    ChartsService.exportCSV($scope.getCSVTitle('Messaging', 'VolumeHistory'), csvData);
  };

  var initialize = function initialize() {
    $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
    initializReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsOpenPositionsViewCtrl', ['$scope', '$rootScope', '$stateParams', '$timeout', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, $timeout, ReportService, ChartsService) {
  $scope.reports = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;
      var count = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item.label);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[count]);
        total += item[type];
        tableData.push({
          label: item.label,
          value: item[type],
          color: $scope.colors[count]
        });
        count++;
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addBarChart = function addBarChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.bar(ctx1, data, true);
      } catch (e) {}
    };

    $scope.appClient.getReport('open-positions', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      $timeout(function () {
        for (var i = 0; i < report.data.length; i++) {
          var totalPostions = getSourceChartData('postion_count', report.data[i].users);
          addPieChart('position-count-chart-' + report.data[i].id, totalPostions.data);
          $scope.reports['total_positions_' + report.data[i].id] = totalPostions;
          var avgOpenTime = getSourceChartData('days_open_average', report.data[i].users);
          addBarChart('average-days-open-chart-' + report.data[i].id, avgOpenTime.data);
          $scope.reports['avg_open_time_' + report.data[i].id] = avgOpenTime;
        }
      });
      $scope.positions = report.positions;
      $scope.reports.openpositions = report.data; //console.log($scope.reports);
    });
  };

  var mappers = {
    PositionCountByUser: [{
      label: 'Member',
      key: 'label'
    }, {
      label: 'Open Positions',
      key: 'value'
    }],
    AverageDaysOpenByUser: [{
      label: 'Member',
      key: 'label'
    }, {
      label: 'Average Days Open',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, pipeline_name, data) {
    pipeline_name = pipeline_name.replace(' ', '');
    var subreport = "".concat(mapper, "_").concat(pipeline_name);
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('OpenPositions', subreport, true), csvData);
  };

  $scope.export = function (pipeline_name, pipeline_id) {
    var csvData = {
      Position: []
    };
    pipeline_name = pipeline_name.replace(' ', '');
    var subreport = "Statistics_".concat(pipeline_name);

    for (var i = 0; i < $scope.reports.openpositions.length; i++) {
      if ($scope.reports.openpositions[i].id == pipeline_id) {
        csvData.Position.push("Requisition ID");
        csvData.Position.push("Creator");
        csvData.Position.push("Location");
        csvData.Position.push("Days Open");
        var pipeline = $scope.reports.openpositions[i];

        for (var j = 0; j < pipeline.positions.length; j++) {
          var this_pos = pipeline.positions[j];
          csvData[j + 1 + ') ' + this_pos.name] = [];

          if (!this_pos.requisition_id) {
            this_pos.requisition_id = "";
          }

          csvData[j + 1 + ') ' + this_pos.name].push('"' + this_pos.requisition_id + '"');
          csvData[j + 1 + ') ' + this_pos.name].push('"' + this_pos.creator + '"');

          if (!this_pos.location) {
            this_pos.location = {};
            this_pos.location.name = '';
          }

          csvData[j + 1 + ') ' + this_pos.name].push('"' + this_pos.location.name + '"');
          csvData[j + 1 + ') ' + this_pos.name].push(this_pos.days_open);

          for (var p = 0; p < pipeline.data.length; p++) {
            if (j === 0) csvData.Position.push(pipeline.data[p].label);
            csvData[j + 1 + ') ' + this_pos.name].push(pipeline.data[p].data[this_pos._id].total);
          }
        }
      }
    }

    ChartsService.exportCSV($scope.getCSVTitle('OpenPositions', subreport, true), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsOverviewViewCtrl', ['$scope', '$rootScope', '$state', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $state, $stateParams, ReportService, ChartsService) {
  console.log('AnalyticsOverviewViewCtrl init');
  $scope.reports = {};
  var chartData = {};

  var initializeOverviewReport = function initializeOverviewReport() {
    ChartsService.clear();

    var getChartData = function getChartData(report) {
      var getLabels = function getLabels(report) {
        var arr = [];
        var keys = Object.keys(report);

        for (var i in keys) {
          arr.push(report[keys[i]].label);
        }

        return arr;
      };

      var initializeDatasets = function initializeDatasets(report, allowedKeys) {
        var datasets = [];
        var first = report[Object.keys(report)[0]];
        var keys = Object.keys(first.data);

        for (var i in keys) {
          var key = keys[i];
          var label;

          if (allowedKeys.indexOf(key) === -1) {
            continue;
          }

          if (key === "candidates") {
            label = "Applied";
          } else if (key === "views") {
            label = "Views";
          } else if (key === "sourced") {
            label = "Sourced";
          } else if (key === "referred") {
            label = "Referred";
          } else if (key === "recruited") {
            label = "Recruited";
          } else if (key === "hired") {
            label = "Hired";
          } else if (key === "interviewed") {
            label = "Interviewed";
          } else if (key === "disqualified") {
            label = "Disqualified";
          }

          datasets.push({
            fill: false,
            animation: false,
            datasetFill: false,
            borderColor: $scope.colors[i],
            pointBackgroundColor: $scope.colors[i],
            label: label,
            pointBorderColor: "#fff",
            borderWidth: 4,
            pointRadius: 5,
            pointHoverRadius: 5,
            pointBorderWidth: 1,
            'data': []
          });
        }

        return datasets;
      };

      var populateDatasets = function populateDatasets(datasets, report, allowedKeys) {
        var keys = Object.keys(report);

        for (var i in keys) {
          var item = report[keys[i]];
          var dataKeys = Object.keys(item.data);
          var count = 0;

          for (var d in dataKeys) {
            if (allowedKeys.indexOf(dataKeys[d]) === -1) {
              continue;
            }

            var val = item.data[dataKeys[d]];
            datasets[count].data.push(val);
            count++;
          }
        }

        return datasets;
      };

      var labels = getLabels(report);
      var datasets = initializeDatasets(report, ['candidates', 'views', 'sourced', 'referred', 'recruited']);
      var datasetsSupp = initializeDatasets(report, ['interviewed', 'disqualified', 'hired']);
      populateDatasets(datasets, report, ['candidates', 'views', 'sourced', 'referred', 'recruited']);
      populateDatasets(datasetsSupp, report, ['interviewed', 'disqualified', 'hired']);
      var data = {
        labels: labels,
        datasets: datasets,
        datasetsSupp: datasetsSupp
      };
      return data;
    };

    var addLineChart = function addLineChart(id, data) {
      var line1 = document.getElementById(id).getContext("2d");
      ChartsService.line(line1, data, false);
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        var c = ChartsService.pie(ctx1, data);
      } catch (e) {
        console.log(e);
      }
    };

    var getStageName = function getStageName(stageId) {
      for (var i in $scope.pipeline) {
        var stage = $scope.pipeline[i];

        if (stage.id === stageId) {
          return stage.name;
        }
      }

      return '<removed>';
    };

    var getPipelineChartData = function getPipelineChartData(data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(getStageName(item._id.stageId));
        chartData.datasets[0].data.push(item.total);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);
        tableData.push({
          id: item._id.stageId,
          label: getStageName(item._id.stageId),
          value: item.total,
          color: $scope.colors[i]
        });
        /*chartData.push({
            value: item.total,
            color: $scope.colors[i],
            label: getStageName(item._id.stageId)
        });*/

        total += item.total;
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var getSourcesChartData = function getSourcesChartData(data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: []
        }]
      };
      var tableData = [];

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.source);
        chartData.datasets[0].data.push(item.total);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);
        tableData.push({
          id: item._id.sourceId,
          label: item._id.source,
          value: item.total,
          color: $scope.colors[i]
        });
      }

      return {
        data: chartData,
        table: tableData
      };
    };

    $scope.appClient.getReport('overview', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      chartData.analyticsOverviewData = getChartData(report.candidates.volume_history);
      addLineChart('candidates-history-chart', chartData.analyticsOverviewData);
      var candidateSourceData = getSourcesChartData(report.sources.candidates);
      addPieChart('applicant-sources-chart', candidateSourceData.data);
      var viewSourceData = getSourcesChartData(report.sources.views);
      addPieChart('view-sources-chart', viewSourceData.data);
      var pipelineData = getPipelineChartData(report.pipeline.overview);
      addPieChart('candidates-state-chart', pipelineData.data);
      $scope.reports.overview = {};
      $scope.reports.overview.volume_history = report.candidates.volume_history;
      delete report.candidates.volume_history;
      Object.keys(report.candidates).forEach(function (key) {
        var change = (report.candidates[key] - report.last_period[key]) / report.last_period[key] * 100;
        var postfix = '%';

        if (isFinite(change) && change !== 0) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        if (!report.last_period[key]) change = '';
        $scope.reports.overview[key] = {
          total: report.candidates[key],
          change: change,
          postfix: postfix
        };
      });
      var pipelineReport = [];

      for (var o in report.pipeline) {
        pipelineReport.push(report.pipeline[o]);
      }

      $scope.reports.overview.pipeline = pipelineData;
      $scope.reports.overview.sources = report.sources;
      $scope.reports.overview.viewSources = viewSourceData;
      $scope.reports.overview.candidateSources = candidateSourceData;
    });
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    chartData[chart].datasetsSupp.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('Overview', 'Candidates'), csvData);
  };

  var mappers = {
    ViewSources: [{
      label: 'View Sources',
      key: 'label'
    }, {
      label: 'Value',
      key: 'value'
    }],
    CandidateSources: [{
      label: 'Apply Sources',
      key: 'label'
    }, {
      label: 'Value',
      key: 'value'
    }],
    PipelineStages: [{
      label: 'Stage',
      key: 'label'
    }, {
      label: 'Value',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('Overview', mapper), csvData, true);
  };

  var initialize = function initialize() {
    initializeOverviewReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

angular.module('appController').controller('AnalyticsPipelineViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.reports = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(data) {
      var chartData = {};
      chartData.labels = data.positions;
      chartData.type = 'position';
      chartData.ids = data.position_objects.map(function (object) {
        return object._id;
      });
      chartData.datasets = data.datasets.map(function (set, index) {
        return {
          data: set,
          label: data.stages[index],
          backgroundColor: $scope.colors[index]
        };
      });
      return {
        id: data._id,
        name: data.name,
        data: chartData
      };
    };

    var getChartData = function getChartData(report) {
      var getLabels = function getLabels(report) {
        var arr = [];
        var keys = Object.keys(report);

        for (var i in keys) {
          arr.push(report[keys[i]].label);
        }

        return arr;
      };

      var initializeDatasets = function initializeDatasets(report) {
        var datasets = [];
        var first = report[Object.keys(report)[0]];
        var keys = Object.keys(first.data);

        for (var i in keys) {
          var key = keys[i];
          var color = "#fc6774";
          datasets.push({
            animation: false,
            fill: false,
            borderColor: color,
            pointBackgroundColor: color,
            pointBorderColor: "#fff",
            borderWidth: 4,
            pointRadius: 5,
            pointHoverRadius: 5,
            pointBorderWidth: 1,
            'data': []
          });
        }

        return datasets;
      };

      var populateDatasets = function populateDatasets(datasets, report) {
        var keys = Object.keys(report);

        for (var i in keys) {
          var item = report[keys[i]];
          var dataKeys = Object.keys(item.data);
          var count = 0;

          for (var d in dataKeys) {
            var val = item.data[dataKeys[d]];
            datasets[count].data.push(val);
            count++;
          }
        }

        return datasets;
      };

      var labels = getLabels(report); //console.log(JSON.stringify(labels));

      var datasets = initializeDatasets(report); //console.log("DATASETS: " + JSON.stringify(datasets));

      populateDatasets(datasets, report);
      var data = {
        labels: labels,
        datasets: datasets
      };
      return data;
    };

    var addChart = function addChart(data) {
      try {
        var line1 = document.getElementById("candidates-history-chart").getContext("2d");
        ChartsService.line(line1, data);
      } catch (e) {}
    };

    var getStageName = function getStageName(stageId) {
      for (var i in $scope.pipeline) {
        var stage = $scope.pipeline[i];

        if (stage.id === stageId) {
          return stage.name;
        }
      }
    };

    var getPerformanceChartData = function getPerformanceChartData(data) {
      console.log('Getting performance data');
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        var stageName = getStageName(item._id);
        var value = Math.round(item.averageTime / (1000 * 60 * 60) % 24 * 10) / 10;

        if (item._id === "initial") {
          stageName = "Initial";
        }

        if (!stageName) {
          continue;
        }

        if (!item.averageTime || item.averageTime === 0) {
          continue;
        }

        chartData.labels.push(stageName);
        chartData.datasets[0].data.push(value);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);
        tableData.push({
          label: stageName,
          value: value,
          color: $scope.colors[i]
        });
        total += value;
      }

      return {
        data: chartData,
        table: tableData,
        total: total,
        average: Math.round(total / chartData.length * 10) / 10
      };
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addHorizontalBarChart = function addHorizontalBarChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.horizontalBar(ctx1, data);
      } catch (e) {
        console.log('error!');
        console.log(e);
      }
    };

    $scope.appClient.getReport('pipeline', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      addChart(getChartData(report.movement_history));
      var performanceData = getPerformanceChartData(report.performance.data);
      addPieChart('stage-performance-chart', performanceData.data);
      $scope.reports.timeinstage = [];
      $scope.reports.stagecolors = [];
      report.time_in_stage.data.forEach(function (data) {
        var stageColors = data.stages.reduce(function (obj, stage, index) {
          obj[stage] = $scope.colors[index];
          return obj;
        }, {});
        $scope.reports.timeinstage.push(getSourceChartData(data));
        $scope.reports.stagecolors.push(stageColors);
      });
      report.time_in_stage.pipeline_progression.forEach(function (pipeline) {
        var lastCount = null;
        var lastPrevCount = null;
        pipeline.stages.forEach(function (stage) {
          var percentForward = '-';
          var prevPercentForward = '-';

          if (lastCount) {
            percentForward = (stage.count / lastCount * 100).toFixed(1) + '%';
          } else {
            lastCount = stage.count;
          }

          if (lastPrevCount) {
            prevPercentForward = (stage.previous_count / lastPrevCount * 100).toFixed(1) + '%';
          } else {
            lastPrevCount = stage.previous_count;
          }

          stage.percent_forward = percentForward;
          stage.previous_percent_forward = prevPercentForward; // ===========

          var change = (stage.count - stage.previous_count) / stage.previous_count * 100;
          var postfix = '%';

          if (isFinite(change)) {
            change = change.toFixed(1);
          } else {
            change = '-';
            postfix = '';
          }

          stage.change = change;
          stage.postfix = postfix;
        });
      });
      $scope.reports.pipeline_progression = report.time_in_stage.pipeline_progression; //addHorizontalBarChart('time-in-stage', timeInStageData.data);

      $scope.reports.overview = {};
      $scope.reports.movement_history = report.movement_history;
      $scope.reports.overview.movement = report.movement;
      $scope.reports.performance_info = performanceData; //$scope.reports.timeinstage = timeInStageData;
    });
  };

  $scope.exportTableData = function (mapper, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    ChartsService.exportCSV('breezy-' + mapper, csvData, true);
  };

  $scope.exportTimeInStage = function (pipeline) {
    var headers = ['Position'];
    var rows = pipeline.data.labels.map(function (label, index) {
      //console.log(label);
      var row = {
        label: label,
        data: [],
        total: 0
      };
      pipeline.data.datasets.forEach(function (dataset) {
        //console.log(dataset);
        if (index === 0) {
          headers.push(dataset.label);
        }

        row.data.push(dataset.data[index].toFixed(1));
        row.total += dataset.data[index];
      });
      return row;
    });
    var csvData = [];
    csvData.push(headers);
    rows.forEach(function (row) {
      csvData.push([row.label].concat(_toConsumableArray(row.data)));
    });
    ChartsService.exportCSV('breezy-timeInStage', csvData, true);
  };

  $scope.export = function () {
    var csvData = {
      dates: []
    };

    for (var row in $scope.pipeline) {
      csvData[$scope.pipeline[row].name] = [];
    }

    for (var date in $scope.reports.overview.movement) {
      var item = $scope.reports.overview.movement[date];
      csvData.dates.push(item.label);

      for (var stage in $scope.pipeline) {
        csvData[$scope.pipeline[stage].name].push(item.data[$scope.pipeline[stage].id].total);
      }
    }

    ChartsService.exportCSV('breezy-report-pipeline', csvData);
  }; // charts charts


  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsQuestionnairesViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.reports = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getChartData = function getChartData(report) {
      var getLabels = function getLabels(report) {
        var arr = [];
        var keys = Object.keys(report);

        for (var i in keys) {
          arr.push(report[keys[i]].label);
        }

        return arr;
      };

      var initializeDatasets = function initializeDatasets(report) {
        var datasets = [];
        var first = report[Object.keys(report)[0]];
        var keys = Object.keys(first.data);

        for (var i in keys) {
          var key = keys[i];
          var color, label;

          if (key === "questionnaires_to") {
            label = 'To Candidates';
          } else if (key === "questionnaire_responses_from") {
            label = 'From Candidates';
          }

          datasets.push({
            fill: false,
            animation: false,
            datasetFill: false,
            borderColor: $scope.colors[i],
            pointBackgroundColor: $scope.colors[i],
            //backgroundColor: $scope.colors[i],
            label: label,
            pointBorderColor: "#fff",
            borderWidth: 4,
            pointRadius: 5,
            pointHoverRadius: 5,
            pointBorderWidth: 1,
            data: []
          });
          /*datasets.push({
              strokeColor: color,
              fillColor: color,
              animation : false,
              datasetFill: false,
              pointColor: color,
              pointStrokeColor: "#fff",
              datasetStrokeWidth : 2,
              'data': []
          });*/
        }

        return datasets;
      };

      var populateDatasets = function populateDatasets(datasets, report) {
        var keys = Object.keys(report);

        for (var i in keys) {
          var item = report[keys[i]]; //console.log("ITEM: " + JSON.stringify(item));

          var dataKeys = Object.keys(item.data);
          var count = 0;

          for (var d in dataKeys) {
            var val = item.data[dataKeys[d]];
            datasets[count].data.push(val);
            count++;
          }
        }

        return datasets;
      };

      var labels = getLabels(report);
      var datasets = initializeDatasets(report);
      populateDatasets(datasets, report);
      var data = {
        labels: labels,
        datasets: datasets
      };
      return data;
    };

    var addChart = function addChart(data) {
      var line1 = document.getElementById("candidates-history-chart").getContext("2d");
      ChartsService.line(line1, data);
      /*var c = new Chart(line1).Bar(data, {
          scaleShowGridLines : true,
          animation : false,
          scaleGridLineColor : "rgba(0,0,0,.05)",
          scaleGridLineWidth : 1,
          scaleIntegersOnly: true,
          scaleBeginAtZero: false,
          scaleFontFamily: "'Helvetica Neue',Helvetica,Arial,sans-serif",
          scaleFontSize: 14,
          scaleFontStyle: "normal",
          scaleFontColor: "#778591",
          scaleShowHorizontalLines: true,
          scaleShowVerticalLines: false,
          bezierCurve : true,
          bezierCurveTension : 0.4,
          pointDot : true,
          pointDotRadius : 4,
          pointDotStrokeWidth : 1,
          datasetStroke : false,
          datasetStrokeWidth : 5,
          datasetFill : true,
          legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
      });
      charts.push(c);*/
    };

    var getVolumeChartData = function getVolumeChartData(data) {
      $scope.totalCandidateVolume = 0;
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.userName);
        chartData.datasets[0].data.push(item.total);
        chartData.datasets[0].backgroundColor.push(item._id.userId === "other" ? "#9da6ad" : $scope.colors[i]);
        tableData.push({
          id: item._id.userId,
          label: item._id.userName,
          value: item.total,
          color: item._id.userId === "other" ? "#9da6ad" : $scope.colors[i]
        });
        total += item.total;
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    }; //console.log($scope.selectedReportCriteria.id);


    $scope.appClient.getReport('questionnaires', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      addChart(getChartData(report.questionnaires.volume_history));
      var candidateVolume = getVolumeChartData(report.questionnaires.candidate_volume);
      addPieChart('candidate-senders-chart', candidateVolume.data);
      $scope.candidateVolumeTotal = candidateVolume.total;
      var memberVolume = getVolumeChartData(report.questionnaires.member_volume);
      addPieChart('member-senders-chart', memberVolume.data);
      $scope.memberVolumeTotal = memberVolume.total;
      $scope.reports.all_data = report.questionnaires.alldata;
      $scope.reports.volume_history = report.questionnaires.volume_history;
      $scope.reports.candidate_volume = candidateVolume;
      $scope.reports.member_volume = memberVolume;
    });
  };

  var tabularizeHeader = function tabularizeHeader(questions) {
    var header = ['Name', 'Email', 'Response Date'];

    if (questions) {
      questions.forEach(function (question) {
        header.push('"' + question.text + '"');
      });
    }

    return header;
  };

  var formatCell = function formatCell(text) {
    if (text && typeof text === 'string') {
      text = text.replace(/"/g, '""');
      text = text.replace(/\n/g, " ");

      if (text.indexOf(',') >= 0) {
        text = '"' + text + '"';
      }
    }

    return text;
  };

  var tabularizeData = function tabularizeData(responses) {
    var rows = [];
    responses.forEach(function (response) {
      var columns = [];
      columns.push(response.candidate_name || '');
      columns.push(response.candidate_email_address || '');
      columns.push(response.creation_date || '');
      response.answers.forEach(function (answer) {
        columns.push(formatCell(answer));
      });
      rows.push(columns);
    });
    return rows;
  };

  var mappers = {
    MembersByQuestionnairesSent: [{
      label: 'Member',
      key: 'label'
    }, {
      label: 'Questionnaires Sent',
      key: 'value'
    }],
    CandidatesByResponsesReceived: [{
      label: 'Candidate',
      key: 'label'
    }, {
      label: 'Responses Received',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('Questionnaires', mapper), csvData, true);
  };

  $scope.exportDetail = function (name) {
    name = name.replace(' ', '');
    var csvHeader = tabularizeHeader(this.report.questions);
    var csvData = tabularizeData(this.report.responses);
    csvData.unshift(csvHeader); //console.log(csvData);
    //return;

    ChartsService.exportCSV($scope.getCSVTitle('Questionnaires', name), csvData);
  };

  $scope.reportExport = function (questionnaire_id) {
    //return;
    var params = Object.assign({}, $scope.params, {
      questionnaire_id: questionnaire_id
    }); //console.log(params);
    //console.log($scope.selectedReportCriteria.id);
    //return;

    $scope.appClient.getReportExport('questionnaire', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, params, function (error, result) {//console.log(error);
      //console.log(result);
    }); //var url = '/api/v1/reports/export/questionnaire?company_id=&position_ids=&date_range=&acting_user_id=&questionnaire_id='
  };

  $scope.export = function () {
    var csvData = {
      dates: [],
      'responses from': [],
      to: []
    };

    for (var date in $scope.reports.volume_history) {
      var item = $scope.reports.volume_history[date];
      csvData.dates.push(item.label);
      csvData['responses from'].push(item.data.questionnaire_responses_from);
      csvData.to.push(item.data.questionnaires_to);
    }

    ChartsService.exportCSV($scope.getCSVTitle('Questionnaires', 'VolumeHistory'), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsRecruitedViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.reports = {};
  $scope.colorMapper = {};
  var chartData = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getRecruitedChartData = function getRecruitedChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.sourceName || item._id);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);

        if (type === 'total') {
          total += item[type];
        } else if (item[type] > total) {
          total = item[type];
        }

        $scope.colorMapper[item._id.sourceName || item._id] = $scope.colors[i];
        tableData.push({
          id: item._id.sourceId,
          label: item._id.sourceName || item._id,
          value: item[type],
          color: $scope.colors[i]
        });
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addChart = function addChart(id, data) {
      var line1 = document.getElementById(id).getContext("2d");
      ChartsService.line(line1, data);
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addPolarAreaChart = function addPolarAreaChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.polarArea(ctx1, data);
      } catch (e) {}
    };

    $scope.params.include_ids = true;
    $scope.appClient.getReport('recruited', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      var sources = report.recruiters.map(function (recruiter) {
        return {
          sourceId: recruiter._id.sourceId,
          sourceName: recruiter._id.sourceName
        };
      });
      chartData.RecruiterVolumeHistory = ReportService.getLineChartData(sources, report.recruiter_volume, 'total');
      addChart("volume-history-by-recruiter", chartData.RecruiterVolumeHistory);
      chartData.ScoreHistoryByRecruiter = ReportService.getLineChartData(sources, report.score_history, 'average_score', 'point');
      addChart('score-history-by-recruiter', chartData.ScoreHistoryByRecruiter);
      var topRecruiters = getRecruitedChartData('total', report.recruiters);
      addPieChart('candidates-state-chart', topRecruiters.data);
      var recruiterScores = getRecruitedChartData('average', report.scores_by_recruiter);
      addPolarAreaChart('candidates-recruiter-chart', recruiterScores.data);
      report.recruiters.forEach(function (source) {
        var change = (source.total - source.total_previous) / source.total_previous * 100;
        var postfix = '%';

        if (isFinite(change)) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        source.sourceId = source._id.sourceId;
        source._id = source._id.sourceName;
        source.change = change;
        source.postfix = postfix;
        var score_change = (source.average_score - source.average_score_previous) / source.average_score_previous * 100;
        var score_postfix = '%';

        if (isFinite(score_change)) {
          score_change = score_change.toFixed(1);

          if (source.average_score > source.average_score_previous) {
            score_change *= -1;
          }
        } else {
          score_change = '-';
          score_postfix = '';
        }

        source.score_change = score_change;
        source.score_postfix = score_postfix;
      });
      $scope.reports.recruiters_table = report.recruiters;
      $scope.recruiters = report.recruiters;
      $scope.reports.top_recruiters = topRecruiters;
      $scope.reports.recruiter_scores = recruiterScores;
      $scope.reports.recruiter_volume = report.recruiter_volume;
      $scope.reports.stages_by_recruiter = report.stages_by_recruiter;
      $scope.reports.recruited_overview = report.recruited_overview;
    });
  };

  $scope.exportTableData = function (mapper, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    ChartsService.exportCSV($scope.getCSVTitle('RecruitedCandidates', mapper), csvData, true);
  };

  var mappers = {
    VolumeByRecruiter: [{
      label: 'Recruiter',
      key: 'label'
    }, {
      label: 'Volume',
      key: 'value'
    }],
    ScoreByRecruiter: [{
      label: 'Recruiter',
      key: 'label'
    }, {
      label: 'Score',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('RecruitedCandidates', mapper), csvData, true);
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('RecruitedCandidates', chart), csvData);
  };

  $scope.export = function () {
    var csvData = {
      dates: []
    };

    for (var row in $scope.recruiters) {
      csvData[$scope.recruiters[row]._id.sourceName] = [];
    }

    for (row in $scope.reports.recruiter_volume) {
      var item = $scope.reports.recruiter_volume[row];
      csvData.dates.push(item.label);

      for (var i = 0; i < $scope.recruiters.length; i++) {
        csvData[$scope.recruiters[i]._id.sourceName].push(item.data[$scope.recruiters[i]._id.sourceId].total || 0);
      }
    }

    ChartsService.exportCSV('breezy-report-recruiters', csvData);
  };

  $scope.exportStages = function () {
    var csvData = {
      recruiters: []
    };

    for (var stage in $scope.pipeline) {
      csvData[$scope.pipeline[stage].name] = [];
    }

    for (var row in $scope.reports.stages_by_recruiter) {
      var item = $scope.reports.stages_by_recruiter[row];
      csvData.recruiters.push(item.label);

      for (var i = 0; i < $scope.pipeline.length; i++) {
        if (item.data[$scope.pipeline[i].id]) {
          csvData[$scope.pipeline[i].name].push(item.data[$scope.pipeline[i].id].total || 0);
        } else {
          csvData[$scope.pipeline[i].name].push(0);
        }
      }
    }

    ChartsService.exportCSV($scope.getCSVTitle('RecruitedCandidates', 'StagesByRecruiter'), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsReferredViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.reports = {};
  $scope.colorMapper = {};
  var chartData = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getReferredChartData = function getReferredChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.sourceName || item._id);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);

        if (type === 'total') {
          total += item[type];
        } else if (item[type] > total) {
          total = item[type];
        }

        $scope.colorMapper[item._id.sourceName || item._id] = $scope.colors[i];
        tableData.push({
          id: item._id.sourceId,
          label: item._id.sourceName || item._id,
          value: item[type],
          color: $scope.colors[i]
        });
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addChart = function addChart(id, data) {
      var line1 = document.getElementById(id).getContext("2d");
      ChartsService.line(line1, data);
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addPolarAreaChart = function addPolarAreaChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.polarArea(ctx1, data);
      } catch (e) {}
    };

    $scope.params.include_ids = true;
    $scope.appClient.getReport('referred', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true; //var overview = getChartData(report.referred_overview);
      //addChart("candidates-history-chart", overview);

      var sources = report.referrers.map(function (referrer) {
        return {
          sourceId: referrer._id.sourceId,
          sourceName: referrer._id.sourceName
        };
      });
      chartData.ReferrerVolumeHistory = ReportService.getLineChartData(sources, report.referrer_volume, 'total'); // getVolumeLineChartData(report.referrers, report.referrer_volume);

      addChart("volume-history-by-referrer", chartData.ReferrerVolumeHistory);
      chartData.ScoreHistoryByReferrer = ReportService.getLineChartData(sources, report.score_history, 'average_score', 'point');
      addChart('score-history-by-referrer', chartData.ScoreHistoryByReferrer);
      var topReferrers = getReferredChartData('total', report.referrers);
      addPieChart('candidates-state-chart', topReferrers.data);
      var referrerScores = getReferredChartData('average', report.scores_by_referrer);
      addPolarAreaChart('candidates-referrer-chart', referrerScores.data);
      report.referrers.forEach(function (source) {
        var change = (source.total - source.total_previous) / source.total_previous * 100;
        var postfix = '%';

        if (isFinite(change)) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        source.sourceId = source._id.sourceId;
        source._id = source._id.sourceName;
        source.change = change;
        source.postfix = postfix;
        var score_change = (source.average_score - source.average_score_previous) / source.average_score_previous * 100;
        var score_postfix = '%';

        if (isFinite(score_change)) {
          score_change = score_change.toFixed(1);

          if (source.average_score > source.average_score_previous) {
            score_change *= -1;
          }
        } else {
          score_change = '-';
          score_postfix = '';
        }

        source.score_change = score_change;
        source.score_postfix = score_postfix;
      });
      $scope.reports.referrers_table = report.referrers;
      $scope.referrers = report.referrers;
      $scope.reports.top_referrers = topReferrers;
      $scope.reports.referrer_scores = referrerScores;
      $scope.reports.referrer_volume = report.referrer_volume;
      $scope.reports.stages_by_referrer = report.stages_by_referrer;
      $scope.reports.referred_overview = report.referred_overview;
    });
  };

  $scope.exportTableData = function (mapper, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    ChartsService.exportCSV($scope.getCSVTitle('ReferredCandidates', mapper), csvData, true);
  };

  var mappers = {
    VolumeByReferrer: [{
      label: 'Referrer',
      key: 'label'
    }, {
      label: 'Volume',
      key: 'value'
    }],
    ScoreByReferrer: [{
      label: 'Referrer',
      key: 'label'
    }, {
      label: 'Score',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('ReferredCandidates', mapper), csvData, true);
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('ReferredCandidates', chart), csvData);
  };

  $scope.export = function () {
    var csvData = {
      dates: []
    };

    for (var row in $scope.referrers) {
      csvData[$scope.referrers[row]._id.sourceName] = [];
    }

    for (row in $scope.reports.referrer_volume) {
      var item = $scope.reports.referrer_volume[row];
      csvData.dates.push(item.label);

      for (var i = 0; i < $scope.referrers.length; i++) {
        csvData[$scope.referrers[i]._id.sourceName].push(item.data[$scope.referrers[i]._id.sourceId].total || 0);
      }
    }

    ChartsService.exportCSV('breezy-report-referrers', csvData);
  };

  $scope.exportStages = function () {
    var csvData = {
      referrers: []
    };

    for (var stage in $scope.pipeline) {
      csvData[$scope.pipeline[stage].name] = [];
    }

    for (var row in $scope.reports.stages_by_referrer) {
      var item = $scope.reports.stages_by_referrer[row];
      csvData.referrers.push(item.label);

      for (var i = 0; i < $scope.pipeline.length; i++) {
        if (item.data[$scope.pipeline[i].id]) {
          csvData[$scope.pipeline[i].name].push(item.data[$scope.pipeline[i].id].total || 0);
        } else {
          csvData[$scope.pipeline[i].name].push(0);
        }
      }
    }

    ChartsService.exportCSV($scope.getCSVTitle('SourcedCandidates', 'StagesByReferrer'), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsSourceViewCtrl', ['$scope', '$stateParams', 'ChartsService', function ($scope, $stateParams, ChartsService) {
  $scope.reports = {};
  $scope.sourceId = $stateParams.sourceId;

  if (!$scope.sourceId) {}

  var getVolumnLineChartData = function getVolumnLineChartData(data) {
    var line = {
      labels: [],
      datasets: []
    };
    Object.keys(data).forEach(function (key) {
      var date = data[key];
      line.labels.push(date.label);

      if (line.datasets[0]) {
        line.datasets[0].data.push(date.data.total);
      } else {
        line.datasets.push({
          fill: false,
          animation: false,
          datasetFill: false,
          borderColor: $scope.colors[0],
          pointBackgroundColor: $scope.colors[0],
          //backgroundColor: $scope.colors[i],
          label: 'Source Volume',
          pointBorderColor: "#fff",
          borderWidth: 4,
          pointRadius: 5,
          pointHoverRadius: 5,
          pointBorderWidth: 1,
          data: [date.data.total]
        });
      }
    });
    return line;
  };

  var getScoreAvgLineChartData = function getScoreAvgLineChartData(data) {
    var line = {
      labels: [],
      datasets: []
    };
    Object.keys(data).forEach(function (key) {
      var date = data[key];
      line.labels.push(date.label);

      if (line.datasets[0]) {
        line.datasets[0].data.push(date.data.score);
      } else {
        line.datasets.push({
          fill: false,
          animation: false,
          datasetFill: false,
          borderColor: $scope.colors[1],
          pointBackgroundColor: $scope.colors[1],
          //backgroundColor: $scope.colors[i],
          label: 'Source Volume',
          pointBorderColor: "#fff",
          borderWidth: 4,
          pointRadius: 5,
          pointHoverRadius: 5,
          pointBorderWidth: 1,
          data: [date.data.total]
        });
      }
    });
    return line;
  };

  var getSourceChartData = function getSourceChartData(data) {
    var chartData = {};
    chartData.labels = data.positions;
    chartData.datasets = data.datasets.map(function (set, index) {
      return {
        data: set,
        label: data.stages[index],
        backgroundColor: $scope.colors[index]
      };
    });
    return {
      id: data._id,
      name: data.name,
      data: chartData
    };
  };

  var getCategoryChartData = function getCategoryChartData(data) {
    var chartData = {};
    chartData.labels = data.categories;
    chartData.datasets = data.category_datasets.map(function (set, index) {
      return {
        data: set,
        label: data.stages[index],
        backgroundColor: $scope.colors[index]
      };
    });
    return {
      id: data._id,
      name: data.name,
      data: chartData
    };
  };

  var addLineChart = function addLineChart(id, data) {
    try {
      var ctx1 = document.getElementById(id).getContext("2d");
      ChartsService.line(ctx1, data);
    } catch (e) {}
  };

  ChartsService.clear();
  $scope.appClient.getReport("source/".concat($scope.sourceId), $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
    $scope.isViewInitialized = true;
    var all_sources = Object.keys(report.all_sources).map(function (key) {
      return {
        name: report.all_sources[key].name,
        value: report.all_sources[key].id
      };
    }); //console.log(all_sources);
    //$scope.sources = all_sources;

    $scope.reports = report;
    $scope.reports.timeinstage = [];
    $scope.reports.category = [];
    var source_volume = getVolumnLineChartData(report.source_volume_history);
    addLineChart('source-volume-chart', source_volume);
    var source_average = getScoreAvgLineChartData(report.score_history);
    addLineChart('source-average-chart', source_average);
    report.time_in_stage.data.forEach(function (data) {
      $scope.reports.timeinstage.push(getSourceChartData(data));
      $scope.reports.category.push(getCategoryChartData(data));
    });
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsSourcedViewCtrl', ['$scope', '$rootScope', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, ReportService, ChartsService) {
  $scope.reports = {};
  $scope.colorMapper = {};
  var chartData = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);

        if (type === 'total') {
          total += item[type];
        } else if (item[type] > total) {
          total = item[type];
        }

        $scope.colorMapper[item._id.sourceId] = $scope.colors[i];
        tableData.push({
          id: item.sourceId,
          label: item._id,
          value: item[type],
          color: $scope.colors[i]
        });
      } //console.log($scope.colorMapper);


      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addChart = function addChart(id, data, options) {
      var line1 = document.getElementById(id).getContext("2d");
      ChartsService.line(line1, data, options);
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addPolarAreaChart = function addPolarAreaChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.polarArea(ctx1, data);
      } catch (e) {}
    };

    $scope.params.include_ids = true;
    $scope.appClient.getReport('sourced', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      chartData.SourcerVolumeHistory = ReportService.getLineChartData(report.sources, report.sourcer_volume, 'total');
      addChart("volume-history-by-sourcer", chartData.SourcerVolumeHistory, {
        tooltips: {
          enabled: false,
          mode: 'index',
          intersect: false,
          position: 'average',
          titleMarginBottom: 8,
          titleFontSize: 14,
          bodyFontSize: 14,
          bodySpacing: 6,
          caretSize: 0,
          custom: function customLineChartTooltip(tooltipModel) {
            // Tooltip Element
            var tooltipEl = document.getElementById('chartjs-tooltip'); // Create element on first render

            if (!tooltipEl) {
              tooltipEl = document.createElement('div');
              tooltipEl.id = 'chartjs-tooltip';
              tooltipEl.innerHTML = "<table></table>";
              document.body.appendChild(tooltipEl);
            } // Hide if no tooltip


            if (tooltipModel.opacity === 0) {
              tooltipEl.style.opacity = 0;
              return;
            } // Set caret Position


            tooltipEl.classList.remove('above', 'below', 'no-transform');

            if (tooltipModel.yAlign) {
              tooltipEl.classList.add(tooltipModel.yAlign);
            } else {
              tooltipEl.classList.add('no-transform');
            }

            function getBody(bodyItem) {
              return bodyItem.lines;
            } // Set Text


            if (tooltipModel.body) {
              var titleLines = tooltipModel.title || [];
              var bodyLines = tooltipModel.body.map(getBody);
              var innerHtml = '<thead>';
              titleLines.forEach(function (title) {
                innerHtml += '<tr><th style="padding-bottom: 8px; font-weight: bold;" >' + title + '</th></tr>';
              });
              innerHtml += '</thead><tbody>';
              bodyLines.forEach(function (body, i) {
                var colors = tooltipModel.labelColors[i];
                var style = 'background:' + colors.backgroundColor;
                style += '; border-color:' + colors.borderColor;
                style += '; border-width: 1px; border-style: solid;';
                var colorSpan = '<span class="chartjs-tooltip-key" style="' + style + '"></span>';
                var itemSpan = '<span class="chartjs-tooltip-item">' + body + '</span>';
                innerHtml += '<tr><td style=" font-weight: 400;" >' + colorSpan + itemSpan + '</td></tr>';
              });
              innerHtml += '</tbody>';
              var tableRoot = tooltipEl.querySelector('table');
              tableRoot.innerHTML = innerHtml;
            } // `this` will be the overall tooltip


            var position = this._chart.canvas.getBoundingClientRect(); // Display, position, and set styles for font


            tooltipEl.style.opacity = 1;
            tooltipEl.style.position = 'absolute';
            tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
            tooltipEl.style.top = position.top + tooltipModel.caretY + 'px';
            tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
            tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
            tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
            tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
          }
        }
      });
      chartData.ScoreHistoryBySourcer = ReportService.getLineChartData(report.sources, report.score_history, 'average_score', 'point');
      addChart('score-history-by-sourcer', chartData.ScoreHistoryBySourcer);
      report.top_sourcers.forEach(function (sourcer) {
        sourcer.sourceId = report.sources.find(function (source) {
          return source.sourceName === sourcer._id;
        }).sourceId;
      });
      var topSources = getSourceChartData('total', report.top_sourcers);
      addPieChart('candidates-state-chart', topSources.data);
      report.scores_by_sourcer.forEach(function (sourcer) {
        sourcer.sourceId = report.sources.find(function (source) {
          return source.sourceName === sourcer._id;
        }).sourceId;
      });
      var sourceScores = getSourceChartData('average', report.scores_by_sourcer);
      addPolarAreaChart('candidates-source-chart', sourceScores.data);
      report.top_sourcers.forEach(function (source) {
        var change = (source.total - source.total_previous) / source.total_previous * 100;
        var postfix = '%';

        if (isFinite(change)) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        source.change = change;
        source.postfix = postfix;
        var score_change = (source.average_score - source.average_score_previous) / source.average_score_previous * 100;
        var score_postfix = '%';

        if (isFinite(score_change)) {
          score_change = score_change.toFixed(1);

          if (source.average_score > source.average_score_previous) {
            score_change *= -1;
          }
        } else {
          score_change = '-';
          score_postfix = '';
        }

        source.score_change = score_change;
        source.score_postfix = score_postfix;
      });
      $scope.reports.sourcers_table = report.top_sourcers;
      $scope.sources = report.sources;
      $scope.reports.top_sourcers = topSources;
      $scope.reports.sourcer_scores = sourceScores;
      $scope.reports.sourcer_volume = report.sourcer_volume;
      $scope.reports.stages_by_sourcer = report.stages_by_sourcer;
    });
  };

  $scope.exportTableData = function (mapper, data, customLabel) {
    var csvData = ReportService.getTableCSVData(mapper, data, customLabel);
    ChartsService.exportCSV($scope.getCSVTitle('SourcedCandidates', mapper), csvData, true);
  };

  var mappers = {
    VolumeBySourcer: [{
      label: 'Sourcer',
      key: 'label'
    }, {
      label: 'Volume',
      key: 'value'
    }],
    ScoreBySourcer: [{
      label: 'Sourcer',
      key: 'label'
    }, {
      label: 'Score',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('SourcedCandidates', mapper), csvData, true);
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('SourcedCandidates', chart), csvData);
  };

  $scope.export = function () {
    var csvData = {
      dates: []
    };

    for (var row in $scope.sources) {
      csvData[$scope.sources[row].sourceName] = [];
    }

    for (row in $scope.reports.sourcer_volume) {
      var item = $scope.reports.sourcer_volume[row];
      csvData.dates.push(item.label);

      for (var i = 0; i < $scope.sources.length; i++) {
        csvData[$scope.sources[i].sourceName].push(item.data[$scope.sources[i].sourceId].total || 0);
      }
    }

    ChartsService.exportCSV('breezy-report-sourcers', csvData);
  };

  $scope.exportStages = function () {
    var csvData = {
      sourcers: []
    };

    for (var stage in $scope.pipeline) {
      csvData[$scope.pipeline[stage].name] = [];
    }

    for (var row in $scope.reports.stages_by_sourcer) {
      var item = $scope.reports.stages_by_sourcer[row];
      csvData.sourcers.push(item.label);

      for (var i = 0; i < $scope.pipeline.length; i++) {
        if (item.data[$scope.pipeline[i].id]) {
          csvData[$scope.pipeline[i].name].push(item.data[$scope.pipeline[i].id].total || 0);
        } else {
          csvData[$scope.pipeline[i].name].push(0);
        }
      }
    }

    ChartsService.exportCSV($scope.getCSVTitle('SourcedCandidates', 'StagesBySourcer'), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsSourcesViewCtrl', ['$scope', '$rootScope', '$parse', '$stateParams', 'ReportService', 'ChartsService', function ($scope, $rootScope, $parse, $stateParams, ReportService, ChartsService) {
  $scope.totalSources = 0;
  $scope.totalScore = 0;
  $scope.reports = {};
  var chartData = {};
  $scope.colorMapper = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item._id.sourceName);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[i]);

        if (type === 'total') {
          total += item[type];
        } else if (item[type] > total) {
          total = item[type];
        }

        $scope.colorMapper[item._id.sourceName] = $scope.colors[i];
        tableData.push({
          id: item._id.sourceId,
          label: item._id.sourceName,
          value: item[type],
          color: $scope.colors[i]
        });
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addLineChart = function addLineChart(id, data, options) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.line(ctx1, data, options);
      } catch (e) {}
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addPolarAreaChart = function addPolarAreaChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.polarArea(ctx1, data);
      } catch (e) {}
    };

    $scope.appClient.getReport('sources', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      chartData.SourcesVolumeHistory = ReportService.getLineChartData(report.sources, report.source_volume, 'total');
      addLineChart('sources-volume-history', chartData.SourcesVolumeHistory, {
        tooltips: {
          enabled: false,
          mode: 'index',
          intersect: false,
          position: 'nearest',
          titleMarginBottom: 8,
          titleFontSize: 14,
          bodyFontSize: 14,
          bodySpacing: 6,
          caretSize: 0,
          custom: function customLineChartTooltip(tooltipModel) {
            // Tooltip Element
            var tooltipEl = document.getElementById('chartjs-tooltip'); // Create element on first render

            if (!tooltipEl) {
              tooltipEl = document.createElement('div');
              tooltipEl.id = 'chartjs-tooltip';
              tooltipEl.innerHTML = "<table></table>";
              document.body.appendChild(tooltipEl);
            } // Hide if no tooltip


            if (tooltipModel.opacity === 0) {
              tooltipEl.style.opacity = 0;
              return;
            } // Set caret Position


            tooltipEl.classList.remove('above', 'below', 'no-transform');

            if (tooltipModel.yAlign) {
              tooltipEl.classList.add(tooltipModel.yAlign);
            } else {
              tooltipEl.classList.add('no-transform');
            }

            function getBody(bodyItem) {
              return bodyItem.lines;
            } // Set Text


            if (tooltipModel.body) {
              var titleLines = tooltipModel.title || [];
              var bodyLines = tooltipModel.body.map(getBody);
              var innerHtml = '<thead>';
              titleLines.forEach(function (title) {
                innerHtml += '<tr><th style="padding-bottom: 8px; font-weight: bold;" >' + title + '</th></tr>';
              });
              innerHtml += '</thead><tbody>';
              bodyLines.forEach(function (body, i) {
                var colors = tooltipModel.labelColors[i];
                var style = 'background:' + colors.backgroundColor;
                style += '; border-color:' + colors.borderColor;
                style += '; border-width: 1px; border-style: solid;';
                var colorSpan = '<span class="chartjs-tooltip-key" style="' + style + '"></span>';
                var itemSpan = '<span class="chartjs-tooltip-item">' + body + '</span>';
                innerHtml += '<tr><td style=" font-weight: 400;" >' + colorSpan + itemSpan + '</td></tr>';
              });
              innerHtml += '</tbody>';
              var tableRoot = tooltipEl.querySelector('table');
              tableRoot.innerHTML = innerHtml;
            } // `this` will be the overall tooltip


            var position = this._chart.canvas.getBoundingClientRect(); // Display, position, and set styles for font


            tooltipEl.style.opacity = 1;
            tooltipEl.style.position = 'absolute';
            tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
            tooltipEl.style.top = position.top + tooltipModel.caretY + 'px';
            tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
            tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
            tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
            tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
          }
        }
      });
      chartData.ScoreHistoryBySource = ReportService.getLineChartData(report.sources, report.score_history, 'average_score', 'point');
      addLineChart('score-history-by-source', chartData.ScoreHistoryBySource);
      var topSources = getSourceChartData('total', report.top_sources);
      addPieChart('candidates-state-chart', topSources.data);
      var sourceScores = getSourceChartData('average', report.scores_by_source);
      addPolarAreaChart('candidates-source-chart', sourceScores.data);
      report.top_sources.forEach(function (source) {
        var change = (source.total - source.total_previous) / source.total_previous * 100;
        var postfix = '%';

        if (isFinite(change)) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        source.change = change;
        source.postfix = postfix;
        if (source.average_score) source.average_score = source.average_score.toFixed(1);
        if (source.average_score_previous) source.average_score_previous = source.average_score_previous.toFixed(1);
        var score_change = (source.average_score - source.average_score_previous) / source.average_score_previous * 100;
        var score_postfix = '%';

        if (isFinite(score_change)) {
          score_change = score_change.toFixed(1);

          if (source.average_score > source.average_score_previous) {
            score_change *= -1;
          }
        } else {
          score_change = '-';
          score_postfix = '';
        }

        source.score_change = score_change;
        source.score_postfix = score_postfix;
      });
      $scope.reports.sources_table = report.top_sources;
      $scope.sources = report.sources;
      $scope.reports.top_sources = topSources;
      $scope.reports.source_scores = sourceScores;
      $scope.reports.source_volume = report.source_volume;
    });
  };

  $scope.exportTableData = function (mapper, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    ChartsService.exportCSV($scope.getCSVTitle('AppliedCandidates', mapper), csvData, true);
  };

  var mappers = {
    VolumeBySource: [{
      label: 'Source',
      key: 'label'
    }, {
      label: 'Volume',
      key: 'value'
    }],
    ScoreBySource: [{
      label: 'Source',
      key: 'label'
    }, {
      label: 'Score',
      key: 'value'
    }]
  };

  $scope.exportPieChart = function (mapper, data) {
    var csvData = ReportService.getPieCSVData(mappers[mapper], data);
    ChartsService.exportCSV($scope.getCSVTitle('AppliedCandidates', mapper), csvData, true);
  };

  $scope.exportLineChart = function (chart) {
    var csvData = {};
    csvData.Date = chartData[chart].labels;
    chartData[chart].datasets.forEach(function (dataset) {
      csvData[dataset.label] = dataset.data;
    });
    ChartsService.exportCSV($scope.getCSVTitle('AppliedCandidates', chart), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
  $rootScope.$on('positionUpdated', function (event, data) {
    if ($scope.positionId != data._id) {
      return;
    }

    $scope.position = data;
  });
}]);
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

angular.module('appController').controller('AnalyticsTimeInStageViewCtrl', ['$scope', '$rootScope', '$stateParams', '$timeout', 'ReportService', 'ChartsService', 'PipelinesService', function ($scope, $rootScope, $stateParams, $timeout, ReportService, ChartsService, PipelinesService) {
  $scope.reports = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(data) {
      var chartData = {};
      chartData.labels = data.positions;
      chartData.type = 'position';
      chartData.ids = data.position_objects.map(function (object) {
        return object._id;
      });
      chartData.datasets = data.datasets.map(function (set, index) {
        return {
          data: set,
          label: data.stages[index],
          backgroundColor: $scope.colors[index]
        };
      });
      return {
        id: data._id,
        name: data.name,
        data: chartData
      };
    };

    var getCategoryChartData = function getCategoryChartData(data) {
      var chartData = {};
      chartData.labels = data.categories;
      chartData.type = 'category';
      chartData.ids = data.category_objects.map(function (object) {
        return object.id;
      });
      chartData.datasets = data.category_datasets.map(function (set, index) {
        return {
          data: set,
          label: data.stages[index],
          backgroundColor: $scope.colors[index]
        };
      });
      return {
        id: data._id,
        name: data.name,
        data: chartData
      };
    };

    var addHorizontalBarChart = function addHorizontalBarChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.horizontalBar(ctx1, data);
      } catch (e) {
        console.log('error!');
        console.log(e);
      }
    };

    $scope.appClient.getReport('time-in-stage', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      $scope.reports.timeinstage = [];
      $scope.reports.category = [];
      $scope.reports.stagecolors = [];
      $scope.reports.movement = [];
      $scope.reports.stages = [];
      report.data.forEach(function (data) {
        var stageColors = data.stages.reduce(function (obj, stage, index) {
          obj[stage] = $scope.colors[index];
          return obj;
        }, {});
        $scope.reports.timeinstage.push(getSourceChartData(data));
        $scope.reports.category.push(getCategoryChartData(data));
        $scope.reports.stagecolors.push(stageColors);
        $scope.reports.movement.push(data.movement);
        $scope.reports.stages.push(data.all_stages);
      });
      report.pipeline_progression.forEach(function (pipeline) {
        var lastCount = null;
        var lastPrevCount = null;
        pipeline.stages.forEach(function (stage) {
          var percentForward = '-';
          var prevPercentForward = '-';

          if (lastCount) {
            percentForward = (stage.count / lastCount * 100).toFixed(1) + '%';
          } else {
            lastCount = stage.count;
          }

          if (lastPrevCount) {
            prevPercentForward = (stage.previous_count / lastPrevCount * 100).toFixed(1) + '%';
          } else {
            lastPrevCount = stage.previous_count;
          }

          stage.percent_forward = percentForward;
          stage.previous_percent_forward = prevPercentForward; // ===========

          var change = (stage.count - stage.previous_count) / stage.previous_count * 100;
          var postfix = '%';

          if (isFinite(change)) {
            change = change.toFixed(1);
          } else {
            change = '-';
            postfix = '';
          }

          stage.change = change;
          stage.postfix = postfix;
          var stage_filter = {
            is: [stage.id]
          };

          if (stage.id === 'applied') {
            var all_stages = PipelinesService.local.getPositionPipelineById(pipeline._id).pipeline;
            stage_filter = {
              is_not: all_stages.reduce(function (acc, _stage) {
                if (_stage.id !== 'applied') {
                  acc.push(_stage.id);
                }

                return acc;
              }, [])
            };
          }

          stage.filters = {
            pipeline: stage_filter,
            stage_pipelines: [pipeline._id]
          };
        }); // total candidates

        var change = (pipeline.total - pipeline.previous_total) / pipeline.previous_total * 100;
        var postfix = '%';

        if (isFinite(change)) {
          change = change.toFixed(1);
        } else {
          change = '-';
          postfix = '';
        }

        pipeline.stages.unshift({
          name: 'Total Candidates',
          count: pipeline.total,
          percent_forward: '-',
          previous_count: pipeline.previous_total,
          previous_percent_forward: '-',
          change: change,
          postfix: postfix
        });
      });
      $scope.reports.pipeline_progression = report.pipeline_progression;
      $scope.reports.data = report.data;
      /*setTimeout(function() {
          $scope.reports.timeinstage.forEach(chart => {
              addHorizontalBarChart("time-in-stage-"+chart.id, chart.data);
          });
      }, 0);*/
    });
  };

  $scope.exportTableData = function (mapper, pipeline_name, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    pipeline_name = pipeline_name.replace(' ', '');
    var subreport = "".concat(mapper, "_").concat(pipeline_name);
    ChartsService.exportCSV($scope.getCSVTitle('PipelinePerformance', subreport), csvData, true);
  };

  $scope.export = function (index) {
    var csvData = {
      dates: []
    };

    for (var row in $scope.reports.stages[index]) {
      csvData[$scope.reports.stages[index][row].name] = [];
    }

    for (var date in $scope.reports.movement[index]) {
      var item = $scope.reports.movement[index][date];
      csvData.dates.push(item.label);

      for (var stage in $scope.reports.stages[index]) {
        csvData[$scope.reports.stages[index][stage].name].push(item.data[$scope.reports.stages[index][stage].id].total);
      }
    }

    ChartsService.exportCSV('breezy-report-pipeline-movement', csvData);
  };

  $scope.exportTimeInStage = function (name, pipeline) {
    var headers = ['Position'];
    var pipeline_name = pipeline.name.replace(' ', '');
    var subreport = "".concat(name, "_").concat(pipeline_name);
    var rows = pipeline.data.labels.map(function (label, index) {
      //console.log(label);
      var row = {
        label: label,
        data: [],
        total: 0
      };
      pipeline.data.datasets.forEach(function (dataset) {
        //console.log(dataset);
        if (index === 0) {
          headers.push(dataset.label);
        }

        row.data.push(dataset.data[index].toFixed(1));
        row.total += dataset.data[index];
      });
      return row;
    });
    var csvData = [];
    csvData.push(headers);
    rows.forEach(function (row) {
      csvData.push([row.label].concat(_toConsumableArray(row.data)));
    });
    ChartsService.exportCSV($scope.getCSVTitle('PipelinePerformance', subreport), csvData, true);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsTimeToFillViewCtrl', ['$scope', '$rootScope', '$stateParams', '$timeout', 'ReportService', 'ChartsService', function ($scope, $rootScope, $stateParams, $timeout, ReportService, ChartsService) {
  $scope.reports = {};

  var initializeReport = function initializeReport() {
    ChartsService.clear();

    var getSourceChartData = function getSourceChartData(type, data) {
      var chartData = {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [],
          hoverBackgroundColor: []
        }]
      };
      var tableData = [];
      var total = 0;
      var count = 0;

      for (var i in data) {
        var item = data[i];
        chartData.labels.push(item.label);
        chartData.datasets[0].data.push(item[type]);
        chartData.datasets[0].backgroundColor.push($scope.colors[count]);
        total += item[type];
        tableData.push({
          label: item.label,
          value: item[type],
          color: $scope.colors[count]
        });
        count++;
      }

      return {
        data: chartData,
        table: tableData,
        total: total
      };
    };

    var addPieChart = function addPieChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.pie(ctx1, data);
      } catch (e) {}
    };

    var addBarChart = function addBarChart(id, data) {
      try {
        var ctx1 = document.getElementById(id).getContext("2d");
        ChartsService.bar(ctx1, data, true);
      } catch (e) {}
    };

    $scope.appClient.getReport('time-to-fill', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
      var totalPostions = getSourceChartData('postion_count', report.users);
      addPieChart('position-count-chart', totalPostions.data);
      $scope.reports.total_positions = totalPostions;
      var avgTimeToFill = getSourceChartData('average_days_to_fill', report.users);
      addBarChart('average-time-to-fill-chart', avgTimeToFill.data);
      $scope.reports.avg_time_to_fill = avgTimeToFill;
      var max_days_to_fill = Math.max.apply(Math, report.data.map(function (o) {
        return o.days_to_fill;
      }));
      report.data.forEach(function (position) {
        var difference = position.days_to_fill / max_days_to_fill * 100;
        position.difference = difference;
      });
      $scope.reports.timetofill = report.data;
      $scope.reports.category_timetofill = report.category_data;
      $scope.reports.aggregates = report.aggregates;
    });
  };

  $scope.exportTableData = function (mapper, data) {
    var csvData = ReportService.getTableCSVData(mapper, data);
    ChartsService.exportCSV($scope.getCSVTitle('TimeToFill', mapper, true), csvData, true);
  };

  $scope.export = function (pipeline_id) {
    var csvData = {
      Position: []
    };
    csvData.Position.push("Creator");
    csvData.Position.push("Location");
    csvData.Position.push("Date Created");
    csvData.Position.push("Date Filled");
    csvData.Position.push("Time to Fill");
    csvData.Position.push("Average Time to Hire");

    for (var j = 0; j < $scope.reports.timetofill.length; j++) {
      var this_pos = $scope.reports.timetofill[j];
      csvData[this_pos.name + ' ' + j] = [];
      csvData[this_pos.name + ' ' + j].push('"' + this_pos.creator + '"');
      csvData[this_pos.name + ' ' + j].push('"' + this_pos.location.name + '"');
      csvData[this_pos.name + ' ' + j].push(this_pos.creation_date);
      csvData[this_pos.name + ' ' + j].push(this_pos.fill_date);
      csvData[this_pos.name + ' ' + j].push(this_pos.days_to_fill);
      csvData[this_pos.name + ' ' + j].push(this_pos.avg_time_to_hire);
    }

    ChartsService.exportCSV($scope.getCSVTitle('TimeToFill', 'PositionTimetofill', true), csvData);
  };

  var initialize = function initialize() {
    initializeReport();
  };

  initialize();
  $scope.$on('reportUpdate', function () {
    if ($scope.selectedDateRange.date_range !== 'customRange' || $scope.params.start_date && $scope.params.end_date) {
      $scope.isViewInitialized = false;
      initialize();
    }
  });
}]);
'use strict';

angular.module('appController').controller('AnalyticsUserViewCtrl', ['$scope', '$stateParams', 'ChartsService', 'CompanyService', function ($scope, $stateParams, ChartsService, CompanyService) {
  $scope.userId = $stateParams.userId;

  if (!$scope.userId) {}

  $scope.user = CompanyService.local.getMemberById($scope.userId);

  if (!$scope.user) {
    $scope.user = {
      name: 'Jim Bob'
    };
  } //console.log($stateParams);
  // /api/v1/reports/source/:sourceId?company_id=<company_id>
  // /api/v1/reports/user/:userId?company_id=<company_id>
  //console.log(metadata);


  $scope.mapper = {
    candidate_volume_history: {
      label: 'Candidates',
      key: 'total'
    },
    email_volume_history: {
      label: 'Emails Sent',
      key: 'emails_sent'
    },
    questionnaire_volume_history: {
      label: 'Questionnaires Sent',
      key: 'questionnaires_sent'
    },
    scorecard_volume_history: {
      label: 'Scorecards Completed',
      key: 'scorecards_completed'
    }
  };

  var getVolumnLineChartData = function getVolumnLineChartData(data) {
    var line = {
      labels: [],
      datasets: []
    };
    Object.keys(data).forEach(function (key, index) {
      var source = data[key];
      line.datasets.push({
        fill: false,
        animation: false,
        datasetFill: false,
        borderColor: $scope.colors[index],
        pointBackgroundColor: $scope.colors[index],
        //backgroundColor: $scope.colors[i],
        label: $scope.mapper[key].label,
        pointBorderColor: "#fff",
        borderWidth: 4,
        pointRadius: 5,
        pointHoverRadius: 5,
        pointBorderWidth: 1,
        data: []
      });
      Object.keys(source).forEach(function (date, index1) {
        var dataset = source[date];

        if (index === 0) {
          line.labels.push(date);
        }

        line.datasets[index].data.push(dataset.data[$scope.mapper[key].key]);
      });
    });
    return line;
  };

  var getTimeinstageChartData = function getTimeinstageChartData(data) {
    var chartData = {};
    chartData.labels = data.positions;
    chartData.datasets = data.datasets.map(function (set, index) {
      return {
        data: set,
        label: data.stages[index],
        backgroundColor: $scope.colors[index]
      };
    });
    return {
      id: data._id,
      name: data.name,
      data: chartData
    };
  };

  var getTimeinstageCatChartData = function getTimeinstageCatChartData(data) {
    var chartData = {};
    chartData.labels = data.categories;
    chartData.datasets = data.category_datasets.map(function (set, index) {
      return {
        data: set,
        label: data.stages[index],
        backgroundColor: $scope.colors[index]
      };
    });
    return {
      id: data._id,
      name: data.name,
      data: chartData
    };
  };

  var addLineChart = function addLineChart(id, data) {
    try {
      var ctx1 = document.getElementById(id).getContext("2d");
      ChartsService.line(ctx1, data);
    } catch (e) {}
  };

  ChartsService.clear();
  $scope.appClient.getReport("user/".concat($scope.userId), $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
    $scope.isViewInitialized = true;
    $scope.reports = report;
    $scope.reports.timeinstage = [];
    $scope.reports.category = [];
    var source_volume = getVolumnLineChartData({
      candidate_volume_history: report.candidate_volume_history,
      email_volume_history: report.email_volume_history,
      questionnaire_volume_history: report.questionnaire_volume_history,
      scorecard_volume_history: report.scorecard_volume_history
    });
    addLineChart('source-volume-chart', source_volume);
    report.time_in_stage.data.forEach(function (data) {
      $scope.reports.timeinstage.push(getTimeinstageChartData(data));
      $scope.reports.category.push(getTimeinstageCatChartData(data));
    });
  });
  /*$scope.appClient.getReport(`source/${sourceId}`, $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, $scope.params, function (error, report) {
      $scope.isViewInitialized = true;
       var all_sources = Object.keys(report.all_sources).map(key => ({
          name: report.all_sources[key].name,
          value: report.all_sources[key].id
      }));
      //console.log(all_sources);
      $scope.$parent.sources = all_sources;
       //console.log(report);
      $scope.reports = report;
      $scope.reports.timeinstage = [];
      $scope.reports.category = [];
       var source_volume = getLineChartData(report.source_volume_history);
      addLineChart('source-volume-chart', source_volume);
       var source_average = getLineChartData(report.score_history);
      addLineChart('source-average-chart', source_average);
       report.time_in_stage.data.forEach(data => {
          $scope.reports.timeinstage.push(getSourceChartData(data));
          $scope.reports.category.push(getCategoryChartData(data));
      });
   });*/
}]);
'use strict';

angular.module('BaseApp').directive('chartHorizontalStackedBar', ['ReportService', function (ReportService) {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: '/templates/v2/app/analytics_views/_chart.horizontal.stacked.bar.html',
    scope: {
      chart: '=',
      action: '&'
    },
    link: function link(scope, element, attrs) {
      console.log('chartHorizontalStackedBar directive');
      scope.horizontalStackedBarCount = new Array(5);
      scope.colors = ReportService.colors;
      scope.largest = 0;
      scope.is_empty = false;
      scope.rows = scope.chart.data.labels.map(function (label, index) {
        //console.log(label);
        var row = {
          label: label,
          data: [],
          total: 0
        }; //console.log(scope.cart)

        if (scope.chart.data.type === 'position') {
          row.filter = {
            position_ids: [scope.chart.data.ids[index]]
          };
        } else {
          row.filter = {
            category: [scope.chart.data.ids[index]]
          };
        }

        scope.chart.data.datasets.forEach(function (dataset) {
          //console.log(dataset);
          var datapoint = dataset.data[index];

          if (datapoint) {
            datapoint = datapoint.toFixed(1);
          }

          row.data.push(datapoint);
          row.total += dataset.data[index];
        });

        if (row.total > scope.largest) {
          scope.largest = row.total;
        }

        return row;
      }); // set a default for empty result set

      if (scope.largest === 0) {
        scope.largest = 20;
        scope.is_empty = true;
      }

      scope.axisCount = Math.trunc(scope.largest / scope.horizontalStackedBarCount.length); //console.log(axisthing);
      //console.log('==============')
    }
  };
}]);
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

angular.module('appController').directive('candidateGridRow', ['$rootScope', '$templateRequest', '$compile', 'CandidatesService', function ($rootScope, $templateRequest, $compile, CandidatesService) {
  return {
    restrict: 'A',
    templateUrl: '/templates/v2/app/partials/candidate_grid_row.html',
    replace: true,
    scope: false,
    link: function link(scope, element, attrs) {
      // local changes made. refresh candidate
      scope.$on("candidate:".concat(scope.candidate._id), function (event, data) {
        scope.candidate = data; //console.log(scope.candidate);

        var candidateTemplate = '/templates/v2/app/partials/candidate_grid_row.html';
        $templateRequest(candidateTemplate).then(function (html) {
          var template = $compile(angular.element(html))(scope);
          window.setTimeout(function () {
            //console.log(element);
            element[0].childNodes.forEach(function (cell, i) {
              // cells to skip to not overwrite click events
              if ([0, 15].indexOf(i) < 0) {
                //console.log(cell);
                angular.element(cell).replaceWith(template[0].childNodes[i].cloneNode(true)); //cell.innerHTML = template[0].childNodes[i].innerHTML;
              }
            });
          }, 0);
        });
      });
      element.on('$destroy', function () {});
    }
  };
}]);
angular.module('appController').controller('CompanyCandidatesGridViewCtrl', ['$scope', '$rootScope', '$cookieStore', 'SharedData', '$state', '$stateParams', 'CompanyService', 'PositionsService', 'PipelinesService', '$location', '$uibModal', '$timeout', 'dialog', 'tags', 'CandidatesService', 'CandidatesFilterService', 'metadata', 'TaggingService', 'ModalService', 'categories', 'FeaturesService', '$filter', 'ReasonService', function ($scope, $rootScope, $cookieStore, SharedData, $state, $stateParams, CompanyService, PositionsService, PipelinesService, $location, $uibModal, $timeout, dialog, tags, CandidatesService, CandidatesFilterService, metadata, TaggingService, ModalService, categories, FeaturesService, $filter, ReasonService) {
  console.log('CompanyCandidatesGridViewCtrl: init');
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.loadingMoreText = 'Load More';
  $scope.selected = -1;

  var initializeKeyBindings = function initializeKeyBindings() {
    // down : selected next position row
    Mousetrap.bind('down', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected++;

      if ($scope.selected > $scope.candidates.length - 1 && $scope.candidates.length < $scope.candidatesMeta.count) {
        $scope.getMoreCandidates();
      } else if ($scope.selected > $scope.candidates.length - 1) {
        $scope.selected = 0;
      }

      $scope.$apply();
    }); // up : selected previous position row

    Mousetrap.bind('up', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected--;

      if ($scope.selected < 0) {
        $scope.selected = $scope.candidates.length - 1;
      }

      $scope.$apply();
    });
    Mousetrap.bind('esc', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected = -1;
      $scope.$apply();
    });
    Mousetrap.bind('enter', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      if ($scope.selected === -1) return;
      var sortedCandidates = $filter('orderBy')($scope.candidates, $scope.predicate, $scope.reverse);
      var item = sortedCandidates[$scope.selected]; //var item = $scope.candidates[$scope.selected];

      ModalService.openCandidateModal(item.position_id, item._id).then(function () {}, function () {}); //$state.go('company.position.pipeline', {positionId: item._id});
    }); // check selected position

    Mousetrap.bind('space', function () {
      if ($scope.selected === -1) return;
      var sortedCandidates = $filter('orderBy')($scope.candidates, $scope.predicate, $scope.reverse);
      var selectedCandidate = sortedCandidates[$scope.selected];
      $scope.toggleCheck(selectedCandidate);
      selectedCandidate.checked = !selectedCandidate.checked;
      $scope.$apply();
      return false;
    }); // check all position

    Mousetrap.bind('shift+space', function () {
      $scope.selectAllCandidates = true;
      $scope.toggleAllCandidates();
      return false;
    });
    Mousetrap.bind('t', function () {
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.tagCandidates();
    });
    Mousetrap.bind('n', function () {
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openPostNote();
    });
    Mousetrap.bind('q', function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openSendQuestionnaire();
    });
    Mousetrap.bind('m', function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openPostMessage();
    });
    Mousetrap.bind(['command+shift+d', 'ctrl+shift+d'], function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.deleteCandidates();
      return false;
    });
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  });
  $scope.candidateId = $stateParams.candidateId;
  $scope.section = $stateParams.section;
  var companyAdmin = SharedData.activeCompany.company.user_role.id === 'company_admin';
  $scope.state = $location.search().state;
  $scope.upload = $location.search().upload;
  var queryText = $location.search().q;
  $scope.Utils = {
    keys: Object.keys
  };
  $scope.segmentStatus = {
    changed: false
  };
  $scope.filtering = false;
  $scope.predicate = 'updated_date';
  $scope.reverse = true;
  $scope.candidates = [];
  $scope.candidatesMeta = {};
  $scope.today = new Date();
  $scope.showCandidatesFilter = true;

  if (typeof $cookieStore.get('showCandidatesGridFilter') !== 'undefined') {
    $scope.showCandidatesFilter = $cookieStore.get('showCandidatesGridFilter');
  }

  $scope.enterApplyFilter = function (e) {
    if (e.keyCode == 13) {
      //console.log(e)
      $scope.filters.text = e.target.value;
      e.preventDefault();
      $scope.applyFilter();
      return false;
    }
  };

  $scope.toggleShowCandidatesFilter = function () {
    $scope.showCandidatesFilter = !$scope.showCandidatesFilter;
    $cookieStore.put('showCandidatesGridFilter', $scope.showCandidatesFilter);
    $cookieStore.get('showCandidatesGridFilter');
  };

  var getDisplayColumns = function getDisplayColumns() {
    return Object.keys($scope.displayColumn).reduce(function (columns, column) {
      if ($scope.displayColumn[column]) {
        columns.push("cell-".concat(column));
      }

      return columns;
    }, []).join(' ');
  };

  $scope.displayColumn = {
    avatar: true,
    score: true,
    headline: false,
    resume: false,
    tags: false,
    email: true,
    gdprExpiration: false,
    gdprStatus: false,
    phone: false,
    position: true,
    location: false,
    stage: true,
    source: true,
    added: true,
    lastActivity: true
  };
  var positionStageMap = {}; //var myPositionIds = Object.keys(SharedData.user.positions);

  var myPositions = companyAdmin ? PositionsService.local.getAllPositions() : PositionsService.local.getMyMemberPositions();

  var getPositionPipelineIds = function getPositionPipelineIds(acc, position) {
    var pipelineId = 'default';
    if (position.org_type) pipelineId = 'default_pool';

    if (FeaturesService.getters.available('multiple_pipeline')) {
      if (position.pipeline_id) pipelineId = position.pipeline_id;
    }

    if (acc.indexOf(pipelineId) === -1) acc.push(pipelineId);
    return acc;
  };

  var myPipelineIds = myPositions.reduce(getPositionPipelineIds, []); // generate a correct candidate stage name mapping

  /*
  PositionsService.local.getMyMemberPositions().forEach(position => {
      positionStageMap[position._id] = {};
      $scope.shared.activeCompany.pipelines[position.pipeline_id || 'default'].pipeline.forEach(stage => {
          positionStageMap[position._id][stage.id] = stage;
      });
  }); */

  var availablePipelines = angular.copy($scope.shared.activeCompany.pipelines);

  if (!FeaturesService.getters.available('multiple_pipeline')) {
    availablePipelines = {
      default: availablePipelines.default,
      default_pool: availablePipelines.default_pool //console.log(availablePipelines)

    };
  }

  var filters = {
    positions: myPositions,
    locations: PositionsService.local.getPositionLocations(),
    categories: categories,
    pipelines: companyAdmin ? availablePipelines : PipelinesService.local.getPipelinesByIds(myPipelineIds),
    tags: tags,
    date_range: true,
    updated_date: true,
    candidate_type: true,
    source: metadata.sources,
    assigned: angular.copy($scope.shared.activeCompany.members),
    sourcers: metadata.sourcers,
    referrers: metadata.referrers,
    recruiters: angular.copy($scope.shared.activeCompany.recruiters),
    unseen: true,
    starred: true,
    archived: true,
    all_positions: true
  };

  if ($scope.gdprEnabled) {
    filters.gdpr_status = [{
      id: 'all',
      name: 'All'
    }, {
      id: 'expired',
      name: 'Consent Expired'
    }, {
      id: 'consented',
      name: 'Consented'
    }, {
      id: 'pending',
      name: 'Consent Pending'
    }, {
      id: 'declined',
      name: 'Consent Declined'
    }, {
      id: "expiring",
      name: "Consent Expiring"
    }, {
      id: "needsconsent",
      name: "Needs Consent"
    }];
    filters.expiry_date = true;
  } //console.log(filters.pipelines);


  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        //console.log(rule)
        filter[rule] = false;
      });
    });
  }; // positions is not an array


  $scope.filters = CandidatesFilterService.init(filters, 'CompanyCandidatesGridViewCtrl');

  $scope.getFilterIndex = function (key) {
    return Object.keys(filters).indexOf(key);
  };

  if (queryText) {
    $scope.filters.text = queryText;
  }

  var currentFilter = {};

  if ($stateParams.filters) {
    CandidatesFilterService.setSegment(null, {
      filters: $stateParams.filters
    });
  }

  $scope.segments = CandidatesFilterService.getSegments(); //console.log($scope.segments)

  $scope.activePipeline = null;

  var checkActivePipeline = function checkActivePipeline(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value') || $scope.activePipeline === rules[0].value.pipeline) return;
    $scope.activePipeline = rules[0].value.pipeline;
    if (manualSubmit) return;
    rules.length = 1;
  };

  var pipelineNames = [];

  var checkActivePosition = function checkActivePosition(rules) {
    pipelineNames = [];

    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return;
    }

    var pipelineIds = rules.map(function (rule) {
      return rule.value;
    }).reduce(getPositionPipelineIds, []);
    var pipelines = PipelinesService.local.getPipelinesByIds(pipelineIds);
    pipelineNames = Object.keys(pipelines).reduce(function (acc, pipeline) {
      acc.push(pipelines[pipeline].name);
      return acc;
    }, []);
  };

  $scope.filterPipelinesGroup = function (items) {
    if (pipelineNames.length === 0) return items;
    var result;
    result = Object.keys(items).filter(function (key) {
      return pipelineNames.includes(key);
    }).reduce(function (obj, key) {
      obj[key] = items[key];
      return obj;
    }, {});
    return result;
  };

  var checkTagOperator = function checkTagOperator(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return false;
    } else if ($scope.tagOperatorLabel === 'AND') {
      return true;
    }

    return false;
  };

  $scope.tagOperatorLabel = 'OR';

  $scope.toggleTagOperator = function () {
    if ($scope.tagOperatorLabel === 'OR') {
      $scope.tagOperatorLabel = 'AND';
    } else {
      $scope.tagOperatorLabel = 'OR';
    } // manually run filters update


    watchFilters($scope.filters);
  };

  var positionFilter = $scope.filters.options.find(function (option) {
    return option.key === 'position_ids';
  });
  var pipelineFilter = $scope.filters.options.find(function (option) {
    return option.key === 'pipeline';
  });
  var tagsFilter = $scope.filters.options.find(function (option) {
    return option.key === 'tags';
  });
  $scope.filterButtons = {
    saveDisabled: true,
    applyDisabled: true
  };
  var manualSubmit = false;

  var watchFilters = function watchFilters(filters) {
    if (CandidatesFilterService.getActiveController() !== 'CompanyCandidatesGridViewCtrl') return;
    $scope.closeFilterDropdown();
    checkActivePipeline(pipelineFilter.rules);
    var options = CandidatesFilterService.getOptions(filters);

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    if (!angular.equals(options, currentFilter)) {
      checkActivePosition(positionFilter.rules);
      $scope.filterButtons.saveDisabled = true;
      $scope.filterButtons.applyDisabled = false; // for segment select

      if (manualSubmit) $scope.applyFilter(options);
    } else {
      $scope.filterButtons.applyDisabled = true;
    }
  };

  $scope.$watch('filters', watchFilters, true);

  var formatCandidate = function formatCandidate(candidate) {
    candidate.position = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position_id]; //console.log(candidate.consent);

    candidate.source = candidate.source || {
      name: ''
    };

    if (candidate.overall_score) {
      candidate.overall_score.score_sort = candidate.overall_score.score == 0 ? 0.01 : candidate.overall_score.score;
    } else {
      candidate.overall_score = {};
    } //console.log(`${$scope.gdprEnabled} && ${candidate.position.application_form.gdpr && candidate.position.application_form.gdpr === 'required'} && ${!candidate.consent)}`);


    if ($scope.gdprEnabled && candidate.position.application_form && candidate.position.application_form.gdpr && candidate.position.application_form.gdpr === 'required' && !candidate.consent) {
      candidate.consent = {
        status: {
          id: "needsconsent",
          name: "Needs Consent"
        }
      };
    }
  };

  $scope.groupCandidates = function (options) {
    //console.log('CompanyCandidatesGridViewCtrl: get candidates');
    $scope.filtering = Object.keys(currentFilter) > 0 ? true : false;
    options = options || currentFilter;
    options.get_totals = true;
    $scope.isViewInitialized = false;
    $scope.selected = -1;
    $scope.candidatesMeta.count = undefined;
    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, results) {
      results.data.forEach(formatCandidate);
      $scope.candidatesMeta.count = results.total;
      $scope.candidates = results.data;
      $timeout(function () {
        $scope.isViewInitialized = true;
      }, 1000);
    });
  };

  $scope.applyFilter = function () {
    var options = CandidatesFilterService.getOptions($scope.filters);

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    currentFilter = angular.copy(options); //$scope.segmentStatus.changed = true;

    var match = CandidatesFilterService.segmentStatus(options);

    if (match) {
      $scope.segmentStatus.changed = false;
      $scope.segment = match;
    } else {
      $scope.segmentStatus.changed = true;
      $scope.segment = {
        name: 'Custom Filters'
      };
    }

    manualSubmit = false;
    $scope.groupCandidates(options);
    $scope.filterButtons.applyDisabled = true;

    if ($scope.segmentStatus.changed) {
      $scope.filterButtons.saveDisabled = false;
    }
  };

  $scope.applyFilter();

  $scope.filterToggleActive = function () {//console.log(this);
  };

  $scope.filterRuleAdd = function () {
    //console.log(this);
    this.filter.rules.push({});
  };

  $scope.filterRuleDelete = function (filterIndex, ruleIndex) {
    $scope.filters.options[filterIndex].rules.splice(ruleIndex, 1);

    if ($scope.filters.options[filterIndex].rules.length <= 0) {
      $scope.filters.options[filterIndex].active = false;
      $scope.filters.options[filterIndex].rules.push({
        is: null
      });
    }
  };

  $scope.filterFocused = false;

  $scope.filterFocus = function (state) {
    if (state == 1) {
      $scope.filterFocused = true;
    } else {
      setTimeout(function () {
        $scope.filterFocused = false;
      }, 100);
    }
  };

  $scope.selectedCandidateIds = [];
  $scope.selectedCandidates = [];
  $scope.selectedMissingEmailAddress = [];
  $scope.selectedMissingPhoneNumber = [];
  $scope.selectedNotPositionAdmin = [];
  $scope.selectedNotPublishedPosition = [];
  $scope.selectedNotCandidatePoolMessaging = [];
  $scope.selectAllCandidates = false;
  $scope.isViewInitialized = false;

  $scope.isCandidateScored = function (candidate) {
    return $scope.appClient.isCandidateScored(candidate);
  };

  $scope.deleteSegment = function (idx) {
    var segment = $scope.segments[idx];
    var segmentId = segment._id;
    $scope.appClient.deleteSegment(segmentId, function (error, result) {
      $scope.segments.splice(idx, 1);
      var idx1 = $scope.shared.activeCompany.segments.findIndex(function (segment) {
        return segment._id === segmentId;
      });
      $scope.shared.activeCompany.segments.splice(idx1, 1);
    });
  };

  $scope.checkAbility = function (type, func) {
    var allow = true;
    allow = !($scope.selectedNotPublishedPosition.length > 0 && ($scope.shared.activeCompany.company.plan.id === 'freebie' || !$scope.globalCommunication));

    if (!allow) {
      type = 'unpublished';
    }

    if (['bulk_email', 'bulk_questionnaire', 'bulk_gdpr_consent', 'bulk_gdpr_data'].indexOf(type) > -1) {
      allow = allow && $scope.selectedMissingEmailAddress.length === 0;

      if (!allow) {
        ReasonService.getMessage(type).then();
        /*var message = messages[type];
        message.message = message.message.replace('[[count]]', $scope.selectedMissingEmailAddress.length)
        dialog.alert(message, result => {
        });*/
      }
    } else if (['bulk_SMS'].indexOf(type) > -1) {
      allow = allow && $scope.selectedMissingPhoneNumber.length === 0;

      if (!allow) {
        ReasonService.getMessage(type).then();
        /*var message = messages[type];
        message.message = message.message.replace('[[count]]', $scope.selectedMissingEmailAddress.length)
        dialog.alert(message, result => {
        });*/
      }
    } else if (['unpublished'].indexOf(type) > -1) {
      ReasonService.getMessage(type).then();
    }

    return allow;
  };

  $scope.openEditCandidate = function (_candidate) {
    $scope.gaEventTracker("OpenEditCandidate");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_edit_modal.html',
      controller: 'CandidateEditModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate;
        }
      }
    });
    modalInstance.result.then(function (data) {
      if (data) {
        var c = $scope.candidates.find(function (candidate) {
          return data._id === candidate._id;
        });

        if (c) {
          c.phone_number = data.phone_number;
          c.email_address = data.email_address;
          $scope.refreshCandidate(_candidate);
        }
      }
    }, function () {});
  };

  $scope.openAddSegment = function () {
    var options = angular.copy(currentFilter);
    var type;

    if (options.hasOwnProperty('date_range')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'date_range';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.date_range = [type];
      }
    }

    if (options.hasOwnProperty('updated_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'updated_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.updated_date = [type];
      }
    }

    if (options.hasOwnProperty('expiry_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'expiry_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.expiry_date = [type];
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates/_add_segment_modal.html',
      controller: 'AddSegmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'candidate';
        },
        segmentData: function segmentData() {
          return options;
        }
      }
    });
    modalInstance.result.then(function (savedSegment) {
      if (savedSegment) {
        $scope.segment = savedSegment;
        $scope.segments.push(savedSegment);
        $scope.segmentStatus.changed = false;
        $scope.shared.activeCompany.segments.push(savedSegment);
        $scope.filterButtons.saveDisabled = true;
      }
    }, function () {});
  }; //$scope.segment = $scope.segments[0];


  $scope.setSegment = function (segmentId, segment) {
    //console.log(segment);
    manualSubmit = true;

    if (segment.filters.hasOwnProperty('tags_operator')) {
      $scope.tagOperatorLabel = 'AND';
    }

    ;
    CandidatesFilterService.setSegment(segmentId, segment);
    $scope.segment = segment;
  };

  $scope.uploadCandidate = function (position, stage) {
    ModalService.openAddCandidate(position, stage).then(function () {// do nothing
    });
  };

  $scope.exportCandidates = function () {
    //if (FeaturesService.actions.block('csv_export')) return;
    if ($scope.selectedCandidateIds.length > 0 && $scope.selectedCandidateIds.length === $scope.candidates.length && $scope.selectedCandidateIds.length < $scope.candidatesMeta.count) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/candidates/_export_candidates_modal.html',
        controller: function controller($scope, $uibModalInstance, total) {
          $scope.exportType = 'all';
          $scope.total = total;

          $scope.closeModal = function () {
            $uibModalInstance.close(null);
          };

          $scope.exportCandidates = function () {
            $uibModalInstance.close($scope.exportType);
          };
        },
        size: 'sm',
        resolve: {
          total: function total() {
            return {
              selected: $scope.selectedCandidateIds.length,
              all: $scope.candidatesMeta.count
            };
          }
        }
      });
      modalInstance.result.then(function (result) {
        if (result) {
          if (result === 'selected') {
            generateCSV();
          } else if (result === 'all') {
            serverCSV();
          }
        }
      }, function () {});
    } else {
      generateCSV();
    }

    $scope.gaEventTracker("ExportCandidates");
  };

  var serverCSV = function serverCSV() {
    var options = angular.copy(currentFilter);
    options.export = true;
    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidates) {
      dialog.alert({
        title: 'Processing',
        message: 'We are generating your file and will email you the link within an hour.'
      }, function () {});
    });
  };

  var generateCSV = function generateCSV() {
    var formatCell = function formatCell(value) {
      if (value && value.indexOf(',') > -1) {
        value = '"' + value + '"';
      }

      return value;
    };

    var stripQuotes = function stripQuotes(text) {
      return text.replace(/['"]+/g, '').trim();
    };

    var fields = Object.keys($scope.displayColumn);
    fields = fields.reduce(function (acc, field) {
      if (field === 'avatar') return acc;

      if ($scope.displayColumn[field]) {
        acc.push(field);
      }

      return acc;
    }, []);
    fields.unshift('name');
    var csvContent = "data:text/csv;charset=utf-8,";
    var header = fields.join(',') + '\n';
    csvContent += header;
    $scope.selectedCandidates.forEach(function (candidate, index) {
      var line = '';
      fields.forEach(function (field, i) {
        switch (field) {
          case 'score':
            if (candidate.overall_score && candidate.overall_score.score) {
              line += candidate.overall_score.score;
            }

            break;

          case 'resume':
            if (candidate.resume) {
              line += candidate.resume.url;
            }

            break;

          case 'stage':
          case 'source':
          case 'position':
            if (candidate[field]) {
              line += formatCell(candidate[field].name);
            }

            break;

          case 'location':
            try {
              if (candidate.position.location) {
                line += formatCell(candidate.position.location.name);
              }
            } catch (e) {}

            break;

          case 'added':
            if (candidate.creation_date) {
              line += candidate.creation_date;
            }

            break;

          case 'email':
            if (candidate.email_address) {
              line += candidate.email_address;
            }

            break;

          case 'lastActivity':
            if (candidate.updated_date) {
              line += candidate.updated_date;
            }

            break;

          case 'tags':
            if (candidate[field]) {
              line += formatCell(candidate[field].join(','));
            }

            break;

          case 'phone':
            if (candidate.phone_number) {
              line += candidate.phone_number;
            }

            break;

          default:
            if (candidate[field]) {
              line += formatCell(candidate[field]);
            }

            break;
        }

        if (i < fields.length - 1) {
          line += ',';
        }
      });
      csvContent += line + '\n';
    });
    var encodedUri = encodeURI(csvContent); // window.open(encodedUri);

    var downloadLink = document.createElement("a");
    downloadLink.href = encodedUri;
    downloadLink.download = "breezy-candidates.csv";
    document.body.appendChild(downloadLink);
    downloadLink.click();
  };

  $scope.toggleSortBy = function (type) {
    if ($scope.predicate == type) {
      $scope.reverse = !$scope.reverse;
    } else {
      $scope.predicate = type;

      if (type == 'updated_date' || type == 'creation_date') {
        $scope.reverse = true;
      } else {
        $scope.reverse = false;
      }
    }
  };

  $scope.openMoveCandidates = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_move_stage_modal.html',
      controller: 'CandidateMoveModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return null;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function (stage) {
      for (var i in $scope.selectedCandidates) {
        var candidate = $scope.selectedCandidates[i];
        candidate.stage = stage;
      }
    }, function () {
      $scope.selectedCandidateIds = [];
      $scope.selectedCandidates = [];
    });
  };

  $scope.openSendQuestionnaire = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_questionnaire_modal.html',
      controller: 'CandidateQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return null;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function () {
      // reset
      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {});
  };

  $scope.moveCandidates = function () {
    var candidateIDs = $scope.selectedCandidates.map(function (c) {
      return c._id;
    });
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/move/index.html',
      controller: 'MoveCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return null;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return candidateIDs;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function () {
      // do nothing
      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    });
  };

  $scope.tagCandidates = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/candidate_tagging_modal.html',
      controller: 'CandidateTaggingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        objectType: function objectType() {
          return 'candidate';
        },
        companyTags: function companyTags(TaggingService) {
          return TaggingService.get($scope.shared.activeCompany.company._id);
        },
        objectTags: function objectTags() {
          return [];
        },
        bulk: function bulk() {
          return $scope.selectedCandidates.length;
        }
      }
    });
    modalInstance.result.then(function (tags) {
      if (tags) {
        //console.log(tags)
        var new_tags = [];
        $scope.selectedCandidates.forEach(function (candidate) {
          new_tags = tags.filter(function (tag) {
            return candidate.tags.indexOf(tag.tag) === -1;
          }); // merge new tags into original tags

          candidate.tag_list = (candidate.tag_list || []).concat(new_tags);
          TaggingService.set($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, candidate.tag_list).then(function (tags) {
            candidate.tags = tags;
            $scope.refreshCandidate(candidate);
          }); // reset

          $scope.selectAllCandidates = false;
          $scope.toggleAllCandidates();
        });
      }
    }, function () {});
  };

  $scope.openSMSMessage = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    ModalService.openSMSMessage(null, null, $scope.selectedCandidateIds, $scope.selectedCandidates).then(function (result) {// nothing
    });
  };

  $scope.openPostMessage = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    var creationDate = new Date($scope.shared.activeCompany.company.creation_date);

    if ($scope.selectedCandidateIds.length > 1 || $scope.selectedCandidates.length > 1) {
      if ((new Date().getTime() - creationDate.getTime()) / (1000 * 60 * 60 * 24) < 1) {
        dialog.alert({
          title: "Mass-Messaging",
          message: "Candidate mass-emailing will be enabled 24 hours after creating your company. Need it sooner? Email support@breezyhr.com."
        }, function (result) {});
        return;
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return null;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem; // reset

      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {});
  };

  $scope.openSendConsentRequest = function () {
    ModalService.openRequestConsent($scope.selectedCandidates).then(function () {
      console.log('requests sent');
    });
  };

  $scope.scheduleCandidateDataRequest = function () {
    var message = "Are you sure you want to send these ".concat($scope.selectedCandidates.length, " candidates their data?");

    if ($scope.selectedCandidates.length === 1) {
      message = "Are you sure you want to send ".concat($scope.selectedCandidates[0].name, " their data?");
    }

    dialog.confirm({
      title: "Send Candidate Data",
      message: message
    }, function (result) {
      if (result === true) {
        $scope.selectedCandidates.forEach(function (candidate) {
          $scope.appClient.scheduleCandidateDataRequest({
            companyId: $scope.shared.activeCompany.company._id,
            positionId: candidate.position_id,
            candidateId: candidate._id
          }, function () {});
        });
      }
    });
  };

  $scope.openPostNote = function () {
    ModalService.openPostNote(null, null, $scope.selectedCandidateIds, $scope.selectedCandidates).then(function (selectedItem) {
      $scope.selected = selectedItem; // reset

      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    });
  };

  $scope.deleteCandidates = function () {
    var header = "Delete Candidates";
    var message = 'Are you sure you want to delete these candidate(s)?';

    if ($scope.selectedCandidateIds.length == 1) {
      header = "Delete Candidate";
      message = 'Are you sure you want to delete this candidate?';
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidates($scope.shared.activeCompany.company._id, $scope.selectedCandidateIds, function (error, result) {});
        $scope.selectedCandidateIds = [];
        $scope.selectedCandidates = [];
        setTimeout(function () {
          $scope.groupCandidates();
        }, 500);
      }
    });
  };

  $scope.toggleColumn = function () {
    setTimeout(function () {
      var str = JSON.stringify($scope.displayColumn);
      $cookieStore.put("CandidatesGridColumns", str);
    }, 1000);
    $scope.displayColumns = getDisplayColumns();
  };

  $scope.isEmailDisabled = function () {
    if ($scope.selectedNotCandidatePoolMessaging.length > 0) {
      return true;
    }

    if ($scope.selectedNotPositionAdmin.length > 0) {
      return true;
    }
    /*if($scope.selectedMissingEmailAddress.length > 0) {
        return true;
    }*/

    /*if($scope.selectedNotPublishedPosition.length > 0 && ($scope.shared.activeCompany.company.plan.id === 'freebie' || !$scope.globalCommunication)) {
        return true;
    }*/


    return false;
  };

  $scope.isPositionAdmin = function (positionId) {
    if (positionId) {
      return $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[positionId].is_admin;
    } else {
      return false;
    }
  };

  $scope.toggleCheck = function (candidate) {
    var index = $scope.selectedCandidateIds.indexOf(candidate._id),
        selectedPosition;

    if (index > -1) {
      $scope.selectedCandidateIds.splice(index, 1);
      $scope.selectedCandidates.splice(index, 1);
      var idx;

      if (!candidate.email_address) {
        idx = $scope.selectedMissingEmailAddress.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingEmailAddress.splice(idx, 1);
        }
      }

      if (!candidate.phone_number) {
        idx = $scope.selectedMissingPhoneNumber.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingPhoneNumber.splice(idx, 1);
        }
      }

      selectedPosition = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position._id];

      if (!selectedPosition.is_admin) {
        idx = $scope.selectedNotPositionAdmin.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedNotPositionAdmin.splice(idx, 1);
        }
      }
      /*
      if(selectedPosition.org_type === "pool" && $scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
          idx = $scope.selectedNotCandidatePoolMessaging.indexOf(candidate._id);
          if(idx > -1) {
              $scope.selectedNotCandidatePoolMessaging.splice(idx, 1);
          }
      }
      */


      if (selectedPosition.state !== "published") {
        idx = $scope.selectedNotPublishedPosition.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedNotPublishedPosition.splice(idx, 1);
        }
      }
    } else {
      $scope.selectedCandidateIds.push(candidate._id);
      $scope.selectedCandidates.push(candidate);

      if (!candidate.email_address) {
        $scope.selectedMissingEmailAddress.push(candidate._id);
      }

      if (!candidate.phone_number) {
        $scope.selectedMissingPhoneNumber.push(candidate._id);
      }

      selectedPosition = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position._id];

      if (!selectedPosition.is_admin) {
        $scope.selectedNotPositionAdmin.push(candidate._id);
      }
      /*
      if(selectedPosition.org_type == "pool" && $scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
          console.log("Candidate selected but pool messaging disabled");
          $scope.selectedNotPositionAdmin.push(candidate._id);
      }
      */


      if (selectedPosition.state !== "published") {
        $scope.selectedNotPublishedPosition.push(candidate._id);
      }
    } //console.log(JSON.stringify($scope.selectedNotPublishedPosition));

  };

  $scope.isCheckedCandidate = function (candidate) {
    return $scope.selectedCandidateIds.indexOf(candidate._id) > -1;
  };

  $scope.toggleAllCandidates = function () {
    $scope.selectedCandidateIds = [];
    $scope.selectedCandidates = [];
    $scope.selectedMissingEmailAddress = [];
    $scope.selectedNotPublishedPosition = [];
    $scope.selectedNotPositionAdmin = [];
    $scope.selectedMissingPhoneNumber = [];
    var candidate;

    if ($scope.selectAllCandidates) {
      console.log('checking');

      for (var i in $scope.candidates) {
        candidate = $scope.candidates[i];
        candidate.checked = true;
        $scope.toggleCheck(candidate);
      }
    } else {
      console.log('unchecking');

      for (var j in $scope.candidates) {
        candidate = $scope.candidates[j];
        candidate.checked = false;
      }
    }
  };

  var fetching = false;

  $scope.getMoreCandidates = function () {
    if (fetching) return;
    fetching = true;
    $scope.loadingMoreText = 'Loading..';
    var options = {};
    if (currentFilter) options = angular.copy(currentFilter);
    options.skip = $scope.candidates.length;
    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidates) {
      candidates.forEach(formatCandidate);
      $scope.candidates = $scope.candidates.concat(candidates);
      fetching = false;
      $scope.loadingMoreText = 'Load More';
    });
  };

  var deleteCandidate = function deleteCandidate(candidateId) {
    var index = -1;

    for (var i = 0; i < $scope.candidates.length; i++) {
      $scope.selectedCandidateIds.splice(index, 1);

      if ($scope.candidates[i]._id == candidateId) {
        $scope.selectedCandidateIds.splice(index, 1);
        index = i;
        break;
      }
    }

    if (index > -1) {
      $scope.candidates.splice(index, 1);
    }
  };

  $scope.isCandidateUnseen = function (candidate) {
    return $scope.appClient.isCandidateUnseen(candidate);
  };

  $scope.isCandidateFollowed = function (candidate) {
    return $scope.appClient.isCandidateFollowed(candidate);
  };

  $scope.toggleFollowCandidate = function (candidate) {
    $scope.appClient.toggleFollowCandidate(candidate, function () {});
  };

  $scope.isCandidateStarred = function (candidate) {
    return $scope.appClient.isCandidateStarred(candidate);
  };

  $scope.toggleStarCandidate = function (candidate) {
    $scope.appClient.toggleStarCandidate(candidate, function () {
      $rootScope.$broadcast('toggleStarCandidate', {
        name: candidate.name,
        _id: candidate._id,
        position_id: candidate.position_id
      });
    });
  };

  var initialize = function initialize() {
    var d = $cookieStore.get("CandidatesGridColumns");

    if (d) {
      var displayColumn = JSON.parse(d);

      if (displayColumn && _typeof(displayColumn) === 'object') {
        $scope.displayColumn = displayColumn;
      }
    }

    $scope.displayColumns = getDisplayColumns();
  };

  $scope.$on('candidateMovedLocal', function (event, candidate) {
    formatCandidate(candidate);
    $rootScope.$broadcast('candidate:' + candidate._id, candidate);
  });
  $scope.$on('candidateMoved', function (event, data) {
    // if (data.object && data.object.acting_user._id === $scope.shared.user._id) {
    //     return;
    // }
    CandidatesService.remote.getCandidateById(data.object.position_id, data.object.candidate_id).then(function (candidate) {
      var index = $scope.candidates.findIndex(function (c) {
        return c._id === candidate._id;
      });

      if (index > -1) {
        formatCandidate(candidate);
        Object.keys(candidate).forEach(function (key) {
          $scope.candidates[index][key] = candidate[key];
        });
        $scope.refreshCandidate($scope.candidates[index]);
      }
    });
  });
  $scope.$on('candidateUpdatedLocal', function (event, data) {
    var index = $scope.candidates.findIndex(function (candidate) {
      return data._id === candidate._id;
    });

    if (index > -1) {
      if (data.position) {
        data.position = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[data.position._id];
      }

      if (data.source) {
        data.source = data.source || {
          name: ''
        };
      }

      if (data.overall_score) {
        data.overall_score.score_sort = data.overall_score.score == 0 ? 0.01 : data.overall_score.score;
      } //delete data._id;
      //console.log(`${$scope.candidates[index].name} updated locally`);


      Object.keys(data).forEach(function (key) {
        if (key !== '_id') {
          $scope.candidates[index][key] = data[key];
        }
      }); //console.log(candidate);
      // limit items that are updatable
      //var replacement = Object.assign({}, $scope.candidates[index], data);

      $scope.refreshCandidate($scope.candidates[index]); //$scope.candidates[index] = data;
      //$scope.candidates.splice(index, 1, replacement);
    }
  });

  $scope.refreshCandidate = function (candidate) {
    //$scope.candidates = angular.copy($scope.candidates);
    console.log('refresh: ' + candidate._id);
    $rootScope.$broadcast('candidate:' + candidate._id, candidate);
  };

  $rootScope.$on('candidateScoreUpdated', function (event, data) {
    var candidate = $scope.candidates.find(function (candidate) {
      return data.candidate_id === candidate._id;
    });

    if (candidate) {
      candidate.overall_score = data.score; //candidate.display_score = CandidatesService.local.getDisplayScore(candidate);

      $scope.refreshCandidate(candidate);
    }
  });
  $rootScope.$on('candidateSeenPosted', function (event, data) {
    var match, c;

    for (var i in $scope.candidates) {
      c = $scope.candidates[i];

      if (c._id == data.candidate_id) {
        match = i;
        break;
      }
    }

    if (match) {
      c = $scope.candidates[match];

      if (!c.viewed_by) {
        c.viewed_by = [];
      }

      if (c.viewed_by.indexOf(data.acting_user_id) == -1) {
        c.viewed_by.push(data.acting_user_id);
      }
    }
  });
  $rootScope.$on('candidateStatusUpdated', function (event, data) {
    var candidate = data.object.candidate;
    var match;

    for (var i in $scope.candidates) {
      var c = $scope.candidates[i];

      if (c._id == candidate._id) {
        match = i;
        break;
      }
    }

    if (match) {
      $scope.candidates[match].stage = data.object.stage;
      $scope.refreshCandidate($scope.candidates[match]);
    }
  });
  $rootScope.$on('candidateDeleted', function (event, data) {
    var candidate = data.object.candidate;
    deleteCandidate(candidate._id);
  });
  $rootScope.$on('candidateAdded', function (event, data) {
    var candidate = data.object.candidate;
    var options = angular.copy(currentFilter);
    options.ids = true;
    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidateIds) {
      if (candidateIds.indexOf(candidate._id) > -1) {
        formatCandidate(candidate);
        $scope.candidates.unshift(candidate);
      }
    }); //$scope.groupCandidates();
    //
  });
  initialize();
}]);
'use strict';

angular.module('appController').directive('candidateSplitView', ['$window', '$document', '$state', function ($window, $document, $state) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      var body = angular.element($document.body);
      var split = false;
      var navMap = {
        left: ['details', 'experience', 'questionnaires', 'references', 'attachments', 'resume', 'backgroundchecks', 'assessments'],
        right: ['discussion', 'emails', 'scorecards', 'calendar', 'notes', 'tasks']
      };
      var defaultLeft = 'experience';

      if (scope.pdfEmbed) {
        defaultLeft = "resume";
      }

      var defaultRight = 'discussion';

      if (scope.defaultTab && navMap.left.indexOf(scope.defaultTab) > -1) {
        defaultLeft = scope.defaultTab;
      }

      if (scope.defaultTab && navMap.right.indexOf(scope.defaultTab) > -1) {
        defaultRight = scope.defaultTab;
      }

      var withSidebar = scope.candidates ? true : false;
      var resizeAt = withSidebar ? 1420 : 1200; //resizeAt = 1419;

      resizeAt = 1345;

      function init() {
        if (scope.fullScreenVideo) return;
        var screenWidth = document.body.clientWidth;

        if (screenWidth >= resizeAt) {
          split = true;
        } else {
          split = false;
        } // backwards compat


        if ($state.params.section === "description") {
          $state.params.section = "details";
        }

        if ($state.params.section === "conversation") {
          $state.params.section = "emails";
        }

        if ($state.params.section === "activity" || $state.params.section === "feedback") {
          $state.params.section = "discussion";
        }

        if (split) {
          // check route for default tab selected
          if ($state.params.section) {
            if (navMap.left.indexOf($state.params.section) > -1) defaultLeft = $state.params.section;
            if (navMap.right.indexOf($state.params.section) > -1) defaultRight = $state.params.section;
          }

          if (!scope.activeTabLeft) scope.activeTabLeft = defaultLeft;
          if (!scope.activeTabRight) scope.activeTabRight = defaultRight;
          scope.activeTab = 'both';
          element[0].classList.add('candidate-split-view');
        } else {
          var tab = null;
          if ($state.params.section) tab = $state.params.section;
          element[0].classList.remove('candidate-split-view');
          scope.setTabActive(tab);
        }
      }

      scope.setTabActive = function (tab) {
        if (!tab) {
          tab = 'experience';

          if (scope.pdfEmbed) {
            tab = "resume";
          }
        }

        $state.transitionTo('company.position.candidate', {
          positionId: scope.positionId,
          candidateId: scope.candidateId,
          section: tab
        }, {
          location: true,
          inherit: true,
          relative: $state.$current,
          notify: false
        });

        if (navMap.left.indexOf(tab) > -1) {
          scope.activeTab = 'left';
          scope.activeTabLeft = tab;
          scope.activeTabRight = null;
        }

        if (navMap.right.indexOf(tab) > -1) {
          scope.activeTab = 'right';
          scope.activeTabRight = tab;
          scope.activeTabLeft = null;
        } //scope.activeTab = tab;

      };

      angular.element($window).bind('resize', init);
      scope.setTabActive($state.params.section);
      init();
    }
  };
}]);
angular.module('appController').filter('formatGoodhireStatus', function () {
  return function (status) {
    switch (status) {
      case 'MissingInput':
      case 'missing_input':
      case 'sent':
        return 'Awaiting Candidate Info';

      case 'RequiresAdditionalInfo':
      case 'requires_additional_info':
        return 'Awaiting Candidate Consent';

      case 'Processing':
      case 'processing':
        return 'Processing';

      case 'CompletedClear':
      case 'completed_clear':
        return 'Completed & Cleared';

      case 'CompletedAlert':
      case 'completed_alert':
        return 'Completed with Alerts';

      default:
        return status;
    }
  };
});
angular.module('appController').controller('CandidateModalInstanceCtrl', ['$scope', '$window', '$state', '$rootScope', '$sce', '$uibModal', '$uibModalInstance', '$http', '$upload', '$location', 'AppClient', 'SharedData', '$parentScope', 'defaultTab', 'positionId', 'candidateId', 'candidates', 'currentIndex', 'uiCalendarConfig', 'dialog', 'utils', 'TaggingService', 'CompanyService', 'PositionsService', 'PipelinesService', 'CandidatesService', 'ModalService', 'TasksService', 'FeaturesService', 'ReasonService', function ($scope, $window, $state, $rootScope, $sce, $uibModal, $uibModalInstance, $http, $upload, $location, AppClient, SharedData, $parentScope, defaultTab, positionId, candidateId, candidates, currentIndex, uiCalendarConfig, dialog, utils, TaggingService, CompanyService, PositionsService, PipelinesService, CandidatesService, ModalService, TasksService, FeaturesService, ReasonService) {
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.gaEventTracker = $scope.appClient.gaEventTracker;
  var gaEventTracker = $scope.appClient.gaEventTracker;
  $scope.candidateId = candidateId;
  $scope.positionId = positionId;
  $scope.candidates = candidates; //console.log($scope.candidates);

  $scope.predicate = 'updated_date';
  $scope.reverse = true;
  $scope.defaultTab = defaultTab;
  $scope.fullScreenVideo = false;
  $scope.Math = window.Math;
  $scope.bzEvents = [];
  $scope.eventSources = [];
  $scope.work = undefined;
  $scope.education = undefined;
  $scope.candidate = {};
  $scope.initializingCandidate = false;
  $scope.initializingCandidateMeta = false;
  $scope.suggestions = [];
  $scope.autoCompleteSelectedIndex = -1;
  $scope.message = {};
  $scope.subject = {
    'body': ''
  };
  $scope.showComposer = {
    type: ''
  };
  $scope.note = {};
  $scope.documents = [];
  $scope.other_documents = [];
  $scope.showAddTags = false;
  $scope.newTags = {};
  $scope.scorecard = {};
  $scope.overallScorecard = {
    'scored': {
      'very_good': [],
      'good': [],
      'poor': [],
      'very_poor': []
    },
    'notes': []
  };
  $scope.notes = [];
  $scope.streamAttachments = []; // The actively selected note

  $scope.candidateNote = {
    'body': '',
    'attachments': [],
    'private': true
  };
  $scope.editorIds = {
    email: "email_".concat(new Date().getTime()),
    sms: "sms_".concat(new Date().getTime())
  };

  $scope.setComposerType = function (type) {
    $scope.showComposer.type = type;
  };

  CompanyService.actions.getSources().then(function () {
    $scope.companySources = CompanyService.getters.sources();
  });

  $scope.updateCandidateSource = function ($item, $model) {
    $item.name = $item.name.replace(" (New source)", "");
  };

  $scope.refreshSourceResults = function ($select) {
    var search = $select.search,
        list = angular.copy($select.items),
        MATCH = -1,
        FLAG = -1; //remove last user input

    list = list.filter(function (item) {
      return item.id !== FLAG;
    });
    MATCH = list.findIndex(function (item) {
      return item.name.toLowerCase() === search.toLowerCase();
    });

    if (!search || !MATCH) {
      //use the predefined list
      $select.items = list;
    } else {
      //manually add user input and set selection
      var userInputItem = {
        id: FLAG,
        name: search + " (New source)"
      };
      $select.items = [userInputItem].concat(list);
      $select.selected = userInputItem;
    }
  };

  $scope.customAttributes = [];
  $scope.candidateScorecard = undefined;
  $scope.storageTypes = [{
    'typeName': 'Unencrypted',
    'type': 'plaintext'
  }, {
    'typeName': 'Encrypted',
    'type': 'encrypted'
  }]; //-$scope.newSocialProfile = {};

  $scope.socialProfileTypes = [{
    'typeName': 'Facebook',
    'type': 'facebook'
  }, {
    'typeName': 'LinkedIn',
    'type': 'linkedin'
  }, {
    'typeName': 'Twitter',
    'type': 'twitter'
  }, {
    'typeName': 'Dribbble',
    'type': 'dribbble'
  }, {
    'typeName': 'Instagram',
    'type': 'instagram'
  }, {
    'typeName': 'Behance',
    'type': 'behance'
  }, {
    'typeName': 'AngelList',
    'type': 'angellist'
  }, {
    'typeName': 'Flickr',
    'type': 'flickr'
  }, {
    'typeName': 'Github',
    'type': 'github'
  }, {
    'typeName': 'YouTube',
    'type': 'youtube'
  }, {
    'typeName': 'GooglePlus',
    'type': 'google-plus'
  }, {
    'typeName': 'Skype',
    'type': 'skype'
  }, {
    'typeName': 'Website',
    'type': 'globe'
  }];
  $scope.team_members = angular.copy(SharedData.activeCompany.members);
  $scope.team_members.push({
    'name': 'Hiring Team',
    'username': 'team',
    'initial': 't',
    'hex_color': 'color4'
  });
  $scope.team_members.push({
    'name': 'All Members',
    'username': 'all',
    'initial': 'a',
    'hex_color': 'color3'
  }); //$scope.keyCount = $parentScope.keyCount;

  $scope.newTask = function (_position, _candidate) {
    if (FeaturesService.actions.block('tasks')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/task/index.html',
      controller: 'TaskCreateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position;
        },
        candidate: function candidate() {
          return _candidate;
        },
        task: function task() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (task) {
      if (task) {//initializeNewCandidates();
      }
    }, function () {});
  };

  $scope.openCopyCandidateToCompany = function (_candidate2) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/company_copy/index.html',
      controller: 'CopyCompanyCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate2;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
  };

  $scope.navigateToCandidate = function (candidate) {
    $scope.closeModal();
    window.setTimeout(function () {
      $state.go('company.position.candidate', {
        companyId: $scope.shared.activeCompany.company.friendly_id,
        positionId: candidate.position._id,
        candidateId: candidate._id,
        section: 'experience'
      });
    }, 10); //$location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + candidate.position._id + '/candidates/' + candidate._id + '/experience');
  };

  $scope.connectWithCheckr = function () {
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/checkr?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + $scope.candidate.position._id + '/candidates/' + $scope.candidate._id + '/experience';
    gaEventTracker("ConnectWithCheckrPartner");
  };

  $scope.isCandidateScored = function () {
    return $scope.appClient.isCandidateScored($scope.candidate);
  };

  $scope.openPrintCandidate = function () {
    var prefix = window.location.protocol + "//" + window.location.hostname;

    if (window.location.port !== 80) {
      prefix += ":" + window.location.port;
    }

    window.open(prefix + "/print/" + $scope.candidate._id, '_blank');
    gaEventTracker("PrintCandidate");
  };

  $scope.navigateToSearchResults = function (searchTerm) {
    $scope.closeModal();
    window.setTimeout(function () {
      $state.go('company.candidates', {
        companyId: $scope.shared.activeCompany.company.friendly_id,
        positionId: $scope.candidate.position._id,
        searchTerm: searchTerm
      });
    }, 10);
  };

  $scope.openCandidateShare = function () {
    gaEventTracker("OpenCandidateShare");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_share_modal.html',
      controller: 'CandidateShareModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return $scope.candidate;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {}, function () {});
  };

  $scope.openSendConsentRequest = function () {
    ModalService.openRequestConsent($scope.candidate).then(function () {
      console.log('requests sent');
    });
  };

  $scope.scheduleCandidateDataRequest = function () {
    dialog.confirm({
      title: "Send Candidate Data",
      message: "Are you sure you want to send this candidate their data?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.scheduleCandidateDataRequest({
          companyId: $scope.shared.activeCompany.company._id,
          positionId: $scope.candidate.position_id,
          candidateId: $scope.candidate._id
        }, function () {});
      }
    });
  };

  $scope.openCandidateScorecard = function () {
    var scorecard = $scope.candidateScorecard ? $scope.candidateScorecard : $scope.scorecard;
    ModalService.openCandidateScorecard(scorecard, $scope.candidate).then(function (result) {});
    gaEventTracker("OpenCandidateScorecard");
  };

  $scope.openInterviewDetail = function (_interview, _position2, callback) {
    var modalInstance;
    /*if (interview.type === 'panel') {
        modalInstance = $uibModal.open({
            templateUrl: '/templates/v2/app/candidate_workflow/interview/interview_multi_detail_modal.html',
            controller: 'InterviewMultiDetailModalInstanceCtrl',
            size: 'sm',
            resolve: {
                panel: function () {
                    return $scope.appClient.getPanelInterview(interview.panel_interview_id, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id);
                },
                position: function () {
                    return position;
                }
            }
        });
    } else {*/

    modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/interview/interview_detail_modal.html',
      controller: 'InterviewDetailModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview: function interview() {
          return _interview;
        },
        position: function position() {
          return _position2;
        }
      }
    }); //}

    modalInstance.result.then(function (result) {
      callback(result);
    }, function () {});
  };

  $scope.eventClick = function (data, jsEvent, view) {
    $scope.openInterviewDetail(data.data, $scope.position, function (result) {
      if (result && result.action == "cancelled") {
        var idx = -1;
        idx = $scope.schedule.findIndex(function (event) {
          return event._id === data.data._id;
        });
        $scope.schedule.splice(idx, 1);
        delete $scope.nextEvent;
        initializeCalendar();
      }
    });
  };

  $scope.uiConfig = {
    calendar: {
      eventClick: $scope.eventClick,
      contentHeight: 'auto'
    }
  };
  $scope.updateNotesVisible = false;
  $scope.updateSubjectVisible = false;
  $scope.updateWorkHistoryVisible = false;
  $scope.updateEducationVisible = false;
  $scope.updateSummaryVisible = false;
  $scope.updateCoverLetterVisible = false;
  $scope.updateContactDetails = false;
  $scope.updateCustomDetailsVisible = false;
  $scope.sendMessageButtonText = "Send Email";
  $scope.postNoteButtonText = "Post";
  $scope.temp = {};

  if (candidates) {
    Mousetrap.bind(['j', 'down'], function () {
      currentIndex--;

      if (currentIndex < 0) {
        currentIndex = candidates.length - 1;
      }

      var prevCandidate = candidates[currentIndex];
      $scope.initializeCandidate(prevCandidate); //$parentScope.navigateToCandidateKeys(prevCandidate._id, prevCandidate.position_id, candidates, currentIndex - 1);

      return false;
    });
    Mousetrap.bind(['k', 'up'], function () {
      currentIndex++;

      if (currentIndex >= candidates.length) {
        currentIndex = 0;
      }

      var nextCandidate = candidates[currentIndex];
      $scope.initializeCandidate(nextCandidate); //$parentScope.navigateToCandidateKeys(nextCandidate._id, nextCandidate.position_id, candidates, currentIndex + 1);

      return false;
    });
  }

  $scope.updateCandidate = function (callback) {
    $scope.updateSuccess = undefined;
    $scope.messageStatus = "Updating...";

    for (var i in $scope.candidateCopy.social_profiles) {
      var socialProfile = $scope.candidateCopy.social_profiles[i];

      if (socialProfile.type === "skype" && socialProfile.url) {
        socialProfile.url = "skype://" + socialProfile.url;
      } else if (socialProfile.url) {
        if (socialProfile.url.indexOf("http") === -1) {
          socialProfile.url = "http://" + socialProfile.url;
        }
      } else {
        socialProfile.type = "";
        socialProfile.typeName = "";
      }
    }

    $scope.candidateCopy.custom_fields = $scope.custom_fields;
    $scope.appClient.updateCandidate($scope.candidateCopy, $scope.shared.activeCompany.company._id, $scope.positionId, function (error, result) {
      if (error) {
        return callback(error);
      }

      $scope.messageStatus = "Updated.";
      $scope.candidate = result;
      $scope.candidateCopy = angular.copy($scope.candidate);
      $rootScope.$broadcast("candidateUpdatedLocal", result); //$rootScope.$broadcast("candidateUpdatedLocal", result);

      $scope.updateSuccess = true; //initializeHiringTeam();

      setTimeout(function () {
        $scope.updateSuccess = false;

        if (callback) {
          return callback();
        }
      }, 1000);
    });
  };

  $scope.$watch('activeTabLeft', function (tab) {
    if (tab === 'questionnaires') {
      setTimeout(function () {
        angular.element(document.querySelectorAll('video.video-response')).bind('webkitfullscreenchange mozfullscreenchange fullscreenchange', function (e) {
          var state = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;
          $scope.fullScreenVideo = state ? true : false;
        });
      }, 0);
    }
  });
  $scope.$watch('activeTabRight', function (tab) {
    if (tab === 'calendar') {
      // make sure tab is shown before rendering
      setTimeout(function () {
        $('#candidateCalendar').fullCalendar('rerenderEvents');
      }, 0);
    }
  });

  $scope.toggleUpdateSubject = function () {
    $scope.updateSubjectVisible = !$scope.updateSubjectVisible;
  };

  $scope.updateWorkHistory = function () {
    $scope.updateCandidate(function (error) {
      if (!error) {
        $scope.toggleUpdateWorkHistory();
      }
    });
  };

  $scope.updateEducation = function () {
    $scope.updateCandidate(function (error) {
      if (!error) {
        $scope.toggleUpdateEducation();
      }
    });
  };

  $scope.updateSummary = function () {
    $scope.updateCandidate(function (error) {
      if (!error) {
        $scope.toggleUpdateSummary();
      }
    });
  };

  $scope.updateCoverLetter = function () {
    $scope.updateCandidate(function (error) {
      if (!error) {
        $scope.toggleUpdateCoverLetter();
      }
    });
  };

  $scope.updateSummary = function () {
    $scope.updateCandidate();
    $scope.toggleUpdateSummary();
  };

  var formatDatesForEdit = function formatDatesForEdit(items) {
    items.forEach(function (item) {
      ['start_date', 'end_date'].forEach(function (key) {
        item[key].month = {
          id: item[key].month,
          name: item[key].month + ''
        };
        item[key].year = {
          id: item[key].year,
          name: item[key].year + ''
        };
      });
    });
  };

  var formatDatesForSave = function formatDatesForSave(items) {
    items.forEach(function (item) {
      ['start_date', 'end_date'].forEach(function (date) {
        if (item.hasOwnProperty(date)) {
          var parts = Object.keys(item[date]);
          parts.forEach(function (part) {
            item[date][part] = item[date][part].id;
          });
        }
      });
    });
  };

  $scope.sections = {
    summary: {
      editing: false
    },
    work_history: {
      editing: false,
      data: [],
      save_format: formatDatesForSave
    }
  };

  $scope.openAddSectionItem = function (section, item) {
    var index;

    if (item) {
      index = $scope.candidateCopy[section].indexOf(item);
    }

    ModalService.openAddSectionItem($scope.candidateCopy, section, item, index).then(function (candidate) {
      if (candidate) {
        $rootScope.$broadcast("candidateUpdated", candidate);
        $rootScope.$broadcast("candidateUpdatedLocal", candidate);
        $scope.candidate = candidate;
        $scope.candidateCopy = angular.copy($scope.candidate); //initializeWorkExperience();
      }
    });
  };

  $scope.toggleSection = function (section) {
    $scope.sections[section].editing = !$scope.sections[section].editing;
  };

  $scope.editSection = function (section) {
    if ($scope.sections[section].hasOwnProperty('edit_format')) {
      $scope.sections[section].edit_format($scope.candidateCopy[section]);
    }

    $scope.toggleSection(section);
  };

  $scope.cancelEditSection = function (section) {
    $scope.candidateCopy[section] = angular.copy($scope.candidate[section]);
    $scope.toggleSection(section);
  };

  $scope.updateSection = function (section) {
    if ($scope.sections[section].hasOwnProperty('save_format')) {
      if ($scope.sections[section].hasOwnProperty('data')) {
        $scope.candidateCopy[section] = angular.copy($scope.sections[section].data);
      }

      $scope.sections[section].save_format($scope.candidateCopy[section]);
    }

    $scope.updateCandidate(function (error) {
      if (!error) $scope.toggleSection(section);
    });
  };

  $scope.updateCoverLetter = function () {
    $scope.updateCandidate();
    $scope.toggleUpdateCoverLetter();
  };

  $scope.otherPositionsVisible = false;

  $scope.toggleOtherPositions = function () {
    $scope.otherPositionsVisible = !$scope.otherPositionsVisible;
  };

  $scope.toggleUpdateSubject = function () {
    $scope.updateSubjectVisible = !$scope.updateSubjectVisible;
  };

  $scope.toggleUpdateWorkHistory = function () {
    $scope.work = {
      'start_date': {},
      'end_date': {}
    };
    $scope.temp.work_history = angular.copy($scope.candidate.work_history);
    $scope.updateWorkHistoryVisible = !$scope.updateWorkHistoryVisible;
  };

  $scope.toggleUpdateEducation = function () {
    $scope.education = {
      'start_date': {},
      'end_date': {}
    };
    $scope.temp.education = angular.copy($scope.candidate.education);
    $scope.updateEducationVisible = !$scope.updateEducationVisible;
  };

  $scope.toggleUpdateContactDetails = function () {
    $scope.temp.contactDetails = {};
    $scope.temp.contactDetails.profile_photo_url = angular.copy($scope.candidate.profile_photo_url);
    $scope.temp.contactDetails.name = angular.copy($scope.candidate.name);
    $scope.temp.contactDetails.address = angular.copy($scope.candidate.address);
    $scope.temp.contactDetails.email_address = angular.copy($scope.candidate.email_address);
    $scope.temp.contactDetails.phone_number = angular.copy($scope.candidate.phone_number);
    $scope.temp.contactDetails.alt_phone_number = angular.copy($scope.candidate.alt_phone_number);
    $scope.temp.contactDetails.social_profiles = angular.copy($scope.candidate.social_profiles);
    $scope.updateContactDetailsVisible = !$scope.updateContactDetailsVisible;
  };
  /*
      $scope.toggleUpdateCustomDetails = function () {
          $scope.temp.customDetails = {};
          $scope.temp.contactDetails.custom_attributes = angular.copy($scope.candidate.custom_attributes);
  
          $scope.updateCustomDetailsVisible = !$scope.updateCustomDetailsVisible;
      };
  */


  $scope.toggleEditCandidateDetails = function () {
    $scope.editCandidateDetailsVisible = !$scope.editCandidateDetailsVisible;
  };

  $scope.editCandidateDetails = function () {
    $scope.candidateCopy = angular.copy($scope.candidate);
    $scope.toggleEditCandidateDetails();
  };

  $scope.cancelEditCandidateDetails = function () {
    $scope.toggleEditCandidateDetails();
  };

  $scope.updateCandidateDetails = function () {
    if ($scope.candidateCopy.source && $scope.candidateCopy.source.id === -1) {
      CompanyService.actions.addSource({
        name: $scope.candidateCopy.source.name
      }).then(function (source) {
        $scope.candidateCopy.source = source;
        $scope.updateCandidate(function (error) {
          if (!error) $scope.toggleEditCandidateDetails();
        });
      });
    } else {
      $scope.updateCandidate(function (error) {
        if (!error) $scope.toggleEditCandidateDetails();
      });
    }
  };

  $scope.toggleUpdateNotes = function () {
    $scope.temp.notes = angular.copy($scope.notes);
    $scope.updateNotesVisible = !$scope.updateNotesVisible;
  };

  $scope.toggleUpdateSummary = function () {
    $scope.temp.summary = angular.copy($scope.candidate.summary);
    $scope.updateSummaryVisible = !$scope.updateSummaryVisible;
  };

  $scope.toggleUpdateCoverLetter = function () {
    $scope.temp.cover_letter = angular.copy($scope.candidate.cover_letter);
    $scope.updateCoverLetterVisible = !$scope.updateCoverLetterVisible;
  }; //$scope.cancelUpdateCustomDetails = function () {
  //    $scope.candidateCopy = $scope.candidate;
  //$scope.candidate.custom_attributes = $scope.temp.customDetails.custom_attributes;
  //};


  $scope.cancelUpdateWorkHistory = function () {
    $scope.candidateCopy.work_history = $scope.temp.work_history;
    $scope.updateWorkHistoryVisible = !$scope.updateWorkHistoryVisible;
  };

  $scope.cancelUpdateEducation = function () {
    $scope.candidateCopy.education = $scope.temp.education;
    $scope.updateEducationVisible = !$scope.updateEducationVisible;
  };

  $scope.cancelUpdateNotes = function () {
    $scope.notes = $scope.temp.notes;
    $scope.updatNotesVisible = !$scope.updateNotesVisible;
  };

  $scope.cancelUpdateSummary = function () {
    $scope.candidateCopy.summary = $scope.temp.summary;
    $scope.updateSummaryVisible = !$scope.updateSummaryVisible;
  };

  $scope.cancelUpdateCoverLetter = function () {
    $scope.candidateCopy.cover_letter = $scope.temp.cover_letter;
    $scope.updateCoverLetterVisible = !$scope.updateCoverLetterVisible;
  };

  $scope.removeWorkHistory = function (item) {
    var index = $scope.candidateCopy.work_history.indexOf(item);
    dialog.confirm({
      title: "Remove Work Experience",
      message: "Are you sure you want to remove this?"
    }, function (result) {
      if (result === true) {
        $scope.candidateCopy.work_history.splice(index, 1);
        $scope.updateCandidate(function () {});
      }
    });
    /*        if(confirm('Are you sure you want to remove this?')) {
                $scope.candidateCopy.work_history.splice(index, 1);
                $scope.updateCandidate(function() {
    
                });
            }
    */
  };

  $scope.removeEducation = function (item, $index) {
    var index = $scope.candidateCopy.education.indexOf(item);
    dialog.confirm({
      title: "Remove Education",
      message: "Are you sure you want to remove this?"
    }, function (result) {
      if (result === true) {
        $scope.candidateCopy.education.splice(index, 1);
        $scope.updateCandidate(function () {});
      }
    });
    /*
            if(confirm('Are you sure you want to remove this?')) {
                $scope.candidateCopy.education.splice(index, 1);
                $scope.updateCandidate(function() {
    
                });
            }
    */
  };

  $scope.addEducation = function (education) {
    if (!education.school_name) {
      return;
    }

    $scope.education = {
      'start_date': {},
      'end_date': {}
    };
    var obj = {
      'school_name': education.school_name,
      'field_of_study': education.field_of_study
    };

    if (education.start_date.year) {
      if (!obj.start_date) {
        obj.start_date = {};
      }

      obj.start_date.year = education.start_date.year.id;
    }

    if (education.end_date.year) {
      if (!obj.end_date) {
        obj.end_date = {};
      }

      obj.end_date.year = education.end_date.year.id;
    }

    $scope.candidateCopy.education.push(obj);
  };

  $scope.addWorkHistory = function (work) {
    if (!work.company_name || !work.title) {
      return;
    }

    $scope.work = {
      'start_date': {},
      'end_date': {}
    };
    var obj = {
      'company_name': work.company_name,
      'title': work.title
    };

    if (work.start_date.month) {
      if (!obj.start_date) {
        obj.start_date = {};
      }

      obj.start_date.month = work.start_date.month.id;
    }

    if (work.start_date.year) {
      if (!obj.start_date) {
        obj.start_date = {};
      }

      obj.start_date.year = work.start_date.year.id;
    }

    if (work.end_date.month) {
      if (!obj.end_date) {
        obj.end_date = {};
      }

      obj.end_date.month = work.end_date.month.id;
    }

    if (work.end_date.year) {
      if (!obj.end_date) {
        obj.end_date = {};
      }

      obj.end_date.year = work.end_date.year.id;
    }

    $scope.candidateCopy.work_history.push(obj);
  };

  $scope.removeSocialProfile = function (item, $index) {
    if (confirm('Are you sure you want to remove this?')) {
      $scope.candidateCopy.social_profiles.splice($index, 1);
    }
  };

  $scope.removeCustomDetail = function (item, $index) {
    if (confirm('Are you sure you want to remove this?')) {
      $scope.candidateCopy.custom_attributes.splice($index, 1);
    }
  };

  $scope.addCustomDetail = function () {
    if (FeaturesService.actions.block('custom_fields')) return;
    $scope.newCustomDetail = {
      'storage_type': $scope.storageTypes[0]
    };

    if (!$scope.candidateCopy.custom_attributes) {
      $scope.candidateCopy.custom_attributes = [];
    }

    $scope.candidateCopy.custom_attributes.push({});
  };

  $scope.normalizeText = function (text) {
    if (!text) return;
    text = text.replace(/^•/g, '\n*');
    text = text.replace(/\n•/g, '\n*');
    text = text.replace(/^●/g, '\n*');
    text = text.replace(/\n●/g, '\n*');
    text = text.replace(/^-\s/g, '\n*\s');
    text = text.replace(/\n-\s/g, '\n*\s');
    return text;
  };

  $scope.updateSocialProfileType = function (socialProfile, item, model) {
    //console.log("Social Profile (Before): " + JSON.stringify(socialProfile));
    //console.log("Model: " + JSON.stringify(model));
    //console.log("Item: " + JSON.stringify(item));
    socialProfile.type = model.type;
    socialProfile.typeId = socialProfile.type;
    socialProfile.typeName = model.typeName;

    if (socialProfile.type === "skype" && socialProfile.url) {
      socialProfile.url = "skype://" + socialProfile.url;
    } else if (socialProfile.url) {
      if (socialProfile.url.indexOf("http") < 0) {
        socialProfile.url = "http://" + socialProfile.url;
      }
    }
  };

  $scope.addSocialProfile = function () {
    if (!$scope.candidateCopy.social_profiles) {
      $scope.candidateCopy.social_profiles = [];
    }

    $scope.candidateCopy.social_profiles.push({});
  };

  $scope.closeCandidate = function () {
    $uibModalInstance.close($scope.candidate);
  };

  $scope.editTemplates = function () {
    $uibModalInstance.close($scope.candidate);
    ModalService.accountSettings('templates').then(function () {}); //$parentScope.accountSettings("templates");
  };

  $scope.completeTask = function (task, event) {
    var taskId = task._id;
    dialog.confirm({
      title: "Mark task complete?"
    }, function (result) {
      if (result === false) return;
      TasksService.markComplete(task).then(function (done) {
        // remove local tasks
        Object.keys($scope.tasks).forEach(function (group) {
          var index = $scope.tasks[group].findIndex(function (task) {
            return task._id === taskId;
          });

          if (index > -1) {
            $scope.tasks[group].splice(index, 1);
          }
        });
      });
    });
    event.stopPropagation();
  };

  $scope.getShowInterview = function (action) {
    if (!action) {
      return false;
    }

    var endTime = new Date(Date.parse(action.end_time));

    if (new Date().getTime() > endTime.getTime()) {
      return false;
    }

    return true;
  };

  $scope.getShowReminder = function (reminder) {
    if (!reminder) {
      return false;
    }

    var startTime = new Date(reminder.date);

    if (new Date().getTime() > startTime.getTime()) {
      return false;
    }

    return true;
  };

  $scope.addCandidateToHRIS = function (hrisType) {
    $scope.appClient.addCandidateToHRIS($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, hrisType, function (error, result) {
      if (!error) {
        $scope.candidate['has_' + hrisType] = new Date();
        $rootScope.$broadcast("candidateUpdated", $scope.candidate);
      }
    });
  };

  $scope.setCustomAttribute = function (item) {
    $scope.candidateCopy.custom_attributes[this.$index] = item;
  };

  $scope.cancelReminder = function () {
    if (!confirm("Are you sure you want to cancel this?")) {
      return;
    }

    $scope.appClient.cancelReminder($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, result) {
      delete $scope.candidate.reminder;
    });
  };

  $scope.removeTag = function ($index) {
    $scope.candidate.tags.splice($index, 1);
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, $scope.candidate.tags, function (error, finalTags) {
      // update tags on candidate grid
      $scope.candidate.tags = finalTags;
      $scope.candidate._id = $scope.candidateId;
      $rootScope.$broadcast('candidateUpdatedLocal', $scope.candidate);
    });
    gaEventTracker("RemoveTags");
  };

  $scope.addTags = function () {
    if (!$scope.newTags.text) {
      $scope.toggleAddTags();
      return;
    }

    var newTags = $scope.newTags.text.split(',');
    var tags = $scope.candidate.tags;

    if (!tags) {
      tags = [];
    }

    var all = tags.concat(newTags);
    var keys = {};

    for (var i in all) {
      var tag = all[i].trim();

      if (tag && tag.length > 0) {
        keys[tag] = true;
      }
    }

    var allTags = Object.keys(keys).sort();
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, allTags, function (error, finalTags) {
      $scope.newTags.text = '';
      $scope.candidate.tags = allTags;
      $scope.toggleAddTags();
    });
  };

  $scope.toggleAddTags = function () {
    $scope.showAddTags = !$scope.showAddTags;
  };

  $scope.openAddTags = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/candidate_tagging_modal.html',
      controller: 'CandidateTaggingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        objectType: function objectType() {
          return 'candidate';
        },
        companyTags: function companyTags(TaggingService) {
          return TaggingService.get($scope.shared.activeCompany.company._id);
        },
        objectTags: function objectTags() {
          return $scope.candidate.tag_list || [];
        },
        bulk: function bulk() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (tags) {
      if (tags) {
        $scope.candidate.tag_list = tags;
        TaggingService.set($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, tags).then(function (tags) {
          // update tags on candidate grid
          $scope.candidate.tags = tags;
          $rootScope.$broadcast('candidateUpdatedLocal', $scope.candidate);
        });
      }
    }, function () {});
  };

  $scope.onResumeFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data) {
        $scope.candidate = data;
        $scope.candidateCopy = angular.copy(data);
        $rootScope.$broadcast("candidateUpdated", data);
        $rootScope.$broadcast("candidateUpdatedLocal", {
          _id: $scope.candidate._id,
          resume: $scope.candidate.resume
        });
      }

      if (data.resume) {
        console.log('Resume upload complete.');

        if ($scope.candidateCopy.resume.pdf_url.indexOf(".pdf") > -1) {
          $scope.pdfEmbed = $sce.trustAsResourceUrl("https://attachments-cdn.breezy.hr/pdfviewer/web/viewer.html?file=" + encodeURIComponent($scope.candidateCopy.resume.pdf_url) + "&embedded=true");
        } else {
          $scope.pdfEmbed = $sce.trustAsResourceUrl("https://docs.google.com/gview?url=" + encodeURIComponent($scope.candidateCopy.resume.pdf_url) + "&embedded=true");
        }

        $scope.resumeUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      $scope.resumeUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/position/' + $scope.candidateCopy.position_id + '/candidate/' + $scope.candidateCopy._id + '/resume',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.onAvatarFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      console.log('Upload success: ' + data);

      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.candidateCopy.profile_photo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/user/avatar',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      $scope.documentUploading = false;

      if (data) {
        $scope.documents.unshift(data);
      }
    },
        onError = function onError() {
      $scope.documentUploading = false;
    };

    for (var i in $files) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.documentUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.candidate.company_id + '/position/' + $scope.positionId + '/candidate/' + $scope.candidateId + '/documents',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      callback(null, data);
    },
        onError = function onError() {};

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.candidate.company_id + '/position/' + $scope.positionId + '/candidate/' + $scope.candidateId + '/stream/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.uploadToNote = function ($files) {
    $scope.candidateNoteAttachmentUploading = true;
    $scope.candidateNoteAttachmentStatus = "Uploading...";
    upload($files, function (error, data) {
      $scope.candidateNoteAttachmentUploading = false;

      if (data) {
        console.log(data);
        $scope.candidateNote.attachments.unshift(data);
        console.log($scope.candidateNote);
        $scope.candidateNoteAttachmentStatus = undefined;
      } else {
        $scope.candidateNoteAttachmentStatus = "Problem uploading.";
      }

      gaEventTracker("CandidateEditNoteAttachmentAdded");
    });
  };

  $scope.uploadToEditNote = function ($files) {
    $scope.candidateEditNoteAttachmentUploading = true;
    $scope.candidateEditNoteAttachmentStatus = "Uploading...";
    upload($files, function (error, data) {
      $scope.candidateEditNoteAttachmentUploading = false;

      if (data) {
        $scope.editCandidateNote.attachments.unshift(data);
        $scope.candidateEditNoteAttachmentStatus = undefined;
      } else {
        $scope.candidateEditNoteAttachmentStatus = "Problem uploading.";
      }

      gaEventTracker("CandidateEditNoteAttachmentAdded");
    });
  };

  $scope.uploadToEditDiscussionNote = function ($files) {
    $scope.editDiscussionNoteAttachmentUploading = true;
    $scope.editDiscussionNoteAttachmentStatus = "Uploading...";
    upload($files, function (error, data) {
      $scope.editDiscussionNoteAttachmentUploading = false;

      if (data) {
        $scope.selectedDiscussionNote.attachments.unshift(data);
        $scope.editDiscussionNoteAttachmentStatus = undefined;
      } else {
        $scope.editDiscussionNoteAttachmentStatus = "Problem uploading.";
      }

      gaEventTracker("CandidateEditDiscussionNoteAttachmentAdded");
    });
  };

  $scope.uploadToStream = function ($files) {
    $scope.streamUploading = true;
    $scope.streamAttachmentStatus = "Uploading...";
    upload($files, function (error, data) {
      $scope.streamUploading = false;

      if (data) {
        $scope.streamAttachments.unshift(data);
        $scope.streamAttachmentStatus = undefined;
      } else {
        $scope.streamAttachmentStatus = "Problem uploading.";
      }

      gaEventTracker("StreamFileAttachmentAdded");
    });
  };

  $scope.uploadToConversation = function ($files) {
    $scope.conversationUploading = true;
    $scope.conversationAttachmentStatus = "Uploading...";
    upload($files, function (error, data) {
      $scope.conversationUploading = false;

      if (data) {
        $scope.conversationAttachment = data;
        $scope.conversationAttachmentStatus = undefined;
      } else {
        $scope.conversationAttachmentStatus = "Problem uploading.";
      }

      gaEventTracker("ConversationFileAttachmentAdded");
    });
  };

  $scope.removeConversationAttachment = function () {
    $scope.conversationAttachment = undefined;
  };

  $scope.removeStreamAttachment = function () {
    var index = this.$index;
    $scope.streamAttachments.splice(index, 1); //$scope.streamAttachment = undefined;
  };

  $scope.copyCandidate = function (targetPosition) {
    dialog.confirm({
      title: "Copy Candidate",
      message: "Copy " + $scope.candidate.name + " to the " + targetPosition.name + " position?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.addCopyCandidate($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, targetPosition._id, function () {
          $scope.note.body = '';
          $scope.streamAttachments = [];
          $scope.messageStatus = "Posted!";
          gaEventTracker("CandidateCopied");
          PositionsService.updateCandidateCount(targetPosition._id, 1);
        });
      }
    });
  };

  $scope.setTemplate = function (template) {
    $scope.message.body = $scope.appClient.processTemplate(template.body, {
      'candidate': $scope.candidate,
      'position': $scope.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
    $scope.message.body = utils.markdownToHTML($scope.message.body);

    if (!$scope.message.attachments) {
      $scope.message.attachments = [];
    }

    gaEventTracker("TemplateSelected");
  };

  $scope.openAddReference = function (_reference) {
    /*if($scope.shared.activeCompany.company.features.reference_checking !== true) {
        dialog.confirm({title: "Upgrade Required", message:"Reference Checking isn't available on your current plan. Would you like to review upgrade options?"}, function (result) {
            if(result === true) {
                $parentScope.companySettings("plan");
            }
        });
        return false;
    }*/
    gaEventTracker("OpenAddReference");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/reference/index.html',
      controller: 'AddReferenceModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return $scope.candidate;
        },
        reference: function reference() {
          return _reference;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        var index = $scope.references.findIndex(function (ref) {
          return ref._id === result._id;
        });

        if (index === -1) {
          $scope.references.unshift(result);
        } else {
          $scope.references[index] = result;
        }
      }
    });
  }; // stop multiple modal openings by setting to true


  $scope.scheduleInterviewModalOpened = false;

  $scope.scheduleInterview = function (interview) {
    gaEventTracker("OpenRescheduleInterview");
    $scope.scheduleInterviewModalOpened = true;
    ModalService.openScheduleInterview(positionId, $scope.candidate, interview, $scope).then(function (result) {
      // do nothing
      $scope.scheduleInterviewModalOpened = false;
    }).catch(function () {
      $scope.scheduleInterviewModalOpened = false;
    });
  };

  $scope.openPanelInterview = function (interview) {
    ModalService.openPanelInterview(positionId, $scope.candidate, interview).then(function (result) {});
  };

  $scope.rescheduleInterview = function (interview) {
    gaEventTracker("OpenRescheduleInterview");

    if (interview.type === 'panel') {
      $scope.appClient.getPanelInterview(interview.panel_interview_id, $scope.shared.activeCompany.company._id, interview.position_id, interview.candidate._id).then(function (panel) {
        ModalService.openPanelInterview(interview.position_id, interview.candidate, panel).then(function (result) {});
      });
    } else {
      ModalService.openScheduleInterview(positionId, $scope.candidate, interview, $scope).then(function (result) {// do nothing
      });
    }
  }; // ~~~ BACKGROUND CHECKS ~~~


  $scope.openCheckrReport = function (reportId) {
    var win = window.open('', '_blank');
    $scope.appClient.getCheckrReport({
      companyId: $scope.shared.activeCompany.company._id,
      reportId: reportId
    }).then(function (result) {
      win.location = result.report_url;
    }).catch(function (err) {
      win.close();
      console.error('Error retrieving checkr background check', err);
    });
  };

  $scope.openSendBackgroundCheck = function () {
    gaEventTracker("OpenSendBackgroundCheck");
    var company = $scope.shared.activeCompany.company;
    var hasGoodhire = company.has_goodhire;
    var hasAsurint = company.has_asurint;
    var hasCheckr = company.has_checkr;
    var hasGoodhireRequestorId = $scope.shared.activeCompany.user_settings.goodhire && $scope.shared.activeCompany.user_settings.goodhire.goodhire_id;

    if (hasGoodhire && !hasGoodhireRequestorId) {
      // create goodhire account for this user if it doesnt exist
      showGoodhireRequesterModal(false); // } else if (hasAsurint && !hasCheckr && !hasGoodhire) {
      //     openAsurintWindow()
    } else {
      ModalService.openSendBackgroundCheck($scope.positionId, $scope.candidate, null, null).then(function (result) {});
    }
  };

  function showGoodhireRequesterModal(showEmailConflictError) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_create_goodhire_requestor_modal.html',
      controller: 'GoodhireCreateRequestorModalInstanceCtrl',
      size: 'sm',
      resolve: {
        emailConflict: function emailConflict() {
          return showEmailConflictError;
        },
        position: function position() {
          return $scope.position;
        },
        candidate: function candidate() {
          return $scope.candidate;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.shared.activeCompany.user_settings.goodhire = {
          goodhire_id: result.goodhire_id
        };
        initializeBackgroundCheckPackages();
        showGoodhireEnabledConfirmModal();
      }
    }, function () {});
  }

  function showGoodhireEnabledConfirmModal() {
    dialog.confirm({
      title: "Background Checks",
      message: "Background checks are now enabled. Would you like to run the background check now?"
    }, function (result) {
      if (result === true) {
        $scope.openSendBackgroundCheck($scope.positionId, $scope.candidate, null, null);
      }
    });
  }

  $scope.enableGoodhire = function () {
    if (!$scope.shared.activeCompany.company.has_goodhire) {
      // need info to create goodhire company
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/settings/_create_goodhire_modal.html',
        controller: 'GoodhireCreateModalInstanceCtrl',
        size: 'sm',
        resolve: {}
      });
      modalInstance.result.then(function (result) {
        if (result) {
          $scope.shared.activeCompany.company.has_goodhire = true;
          showGoodhireEnabledConfirmModal();
        }
      }, function () {});
    } else {
      // goodhire company exists but is disabled
      $scope.appClient.enableGoodhireIntegration({
        companyId: $scope.shared.activeCompany.company._id
      }).then(function () {
        $scope.shared.activeCompany.company.has_goodhire = true;
        var hasGoodhireRequestorId = $scope.shared.activeCompany.user_settings.goodhire && $scope.shared.activeCompany.user_settings.goodhire.goodhire_id;

        if (!hasGoodhireRequestorId) {
          showGoodhireRequesterModal(false);
        } else {
          showGoodhireEnabledConfirmModal();
        }
      });
    }
  };

  $scope.getBackgroundCheckStatusClass = function (status) {
    switch (status) {
      case 'MissingInput':
      case 'missing_input':
      case 'sent':
        return 'missing-input';

      case 'RequiresAdditionalInfo':
      case 'requires_additional_info':
        return 'requires-additional-info';

      case 'Processing':
      case 'processing':
        return 'processing';

      case 'CompletedClear':
      case 'completed_clear':
        return 'completed-clear';

      case 'CompletedAlert':
      case 'completed_alert':
        return 'completed-alert';

      default:
        return status;
    }
  }; // ~~~ END BACKGROUND CHECKS


  $scope.openSetReminder = function () {
    gaEventTracker("OpenSetReminder");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/reminder/index.html',
      controller: 'CandidateReminderModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return $scope.candidateCopy;
        }
      }
    });
    modalInstance.result.then(function (candidate) {
      if (candidate) {
        $scope.candidate = candidate;
        $scope.candidateCopy = angular.copy($scope.candidate);
      }
    }, function () {});
  };

  $scope.openEditCandidate = function () {
    gaEventTracker("OpenEditCandidate");
    ModalService.openEditCandidate($scope.candidateCopy).then(function (result) {
      if (result) {
        $scope.candidate = result;
        $scope.candidateCopy = angular.copy($scope.candidate);
      }
    });
    /*var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/candidate/candidate_edit_modal.html',
        controller: 'CandidateEditModalInstanceCtrl',
        size: 'sm',
        resolve: {
            candidate: function () {
                return $scope.candidateCopy;
            }
        }
    });
    modalInstance.result.then(function (candidate) {
        if(candidate) {
            $scope.candidate = candidate;
             $scope.candidateCopy = angular.copy($scope.candidate);
        }
    }, function () {
     });*/
  };

  $scope.openMoveCandidates = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_move_stage_modal.html',
      controller: 'CandidateMoveModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.candidate.position._id;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (stage) {
      console.log(stage); //$scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openMoveCandidateModal = function () {
    gaEventTracker("OpenMoveCandidateModal");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/move/index.html',
      controller: 'MoveCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.candidate.position._id;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (candidate) {
      if (candidate) {
        $scope.positionId = candidate.position_id;
        $scope.candidate = candidate;
        $scope.pipeline = PipelinesService.local.getPipelineByPosition($scope.shared.activeCompany.positions[$scope.positionId]).pipeline; //initialize();
      }
    }, function () {});
  };

  $scope.openCopyCandidateModal = function () {
    gaEventTracker("OpenCopyCandidateModal");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/copy/index.html',
      controller: 'CandidateCopyModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.candidate.position._id;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openMessageActionModal = function (_position3, _candidate3, _template, _subjectTemplate) {
    gaEventTracker("OpenMessageAction");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_message_action_modal.html',
      controller: 'CandidateMessageActionModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position3;
        },
        candidate: function candidate() {
          return _candidate3;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        },
        template: function template() {
          return _template;
        },
        subjectTemplate: function subjectTemplate() {
          return _subjectTemplate;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openVideoInterviewArchiveModal = function (_archive) {
    gaEventTracker("openVideoInterviewArchive");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate.video.interview.modal.html',
      controller: 'CandidateVideoInterviewArchiveModalInstanceCtrl',
      size: 'sm',
      resolve: {
        archive: function archive() {
          return _archive;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {}, function () {});
  };

  $scope.openRequestScorecards = function () {
    gaEventTracker("RequestCandidateScorecardsCompletion");
    if (FeaturesService.actions.block('tasks', {
      specific: 'request_scorecards'
    })) return;
    dialog.confirm({
      title: "Request Scorecards",
      message: "Request remaining team members complete their scorecards?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.requestCandidateScorecardsCompletion($scope.candidate._id, $scope.candidate.position._id, $scope.shared.activeCompany.company._id, function () {});
      }
    });
  };

  $scope.openSendQuestionnaire = function () {
    if (FeaturesService.actions.block('questionnaires')) return;
    gaEventTracker("OpenSendQuestionnaire");
    ModalService.openSendQuestionnaire($scope.positionId, $scope.candidate, null, null).then(function (result) {// do nothing
    });
  }; // $scope.openSendBackgroundCheck = function () {
  //     //$parentScope.gaEventTracker("OpenSendBackgroundCheck");
  //     if (FeaturesService.actions.block('background_checks')) return;
  //     ModalService.openSendBackgroundCheck($scope.positionId, $scope.candidate, null, null)
  //         .then(result => {
  //             // do nothing
  //         });
  // };


  $scope.openSendAssessment = function () {
    gaEventTracker("OpenSendAssessment");
    ModalService.openSendAssessment($scope.positionId, $scope.candidate, null, null).then(function (result) {// do nothing
    });
  };

  function initializeAssessments() {
    $scope.appClient.getCompanyAssessments({
      companyId: $scope.shared.activeCompany.company._id,
      positionId: $scope.positionId
    }, function (error, data) {
      if (error || !data) {
        $scope.shared.activeCompany.assessments = [];
        return;
      }

      $scope.shared.activeCompany.assessments = data;
    });
  }

  function initializeBackgroundCheckPackages() {
    $scope.appClient.getCompanyBackgroundCheckPackages({
      companyId: $scope.shared.activeCompany.company._id,
      positionId: $scope.positionId
    }, function (error, data) {
      if (error || !data) {
        $scope.shared.activeCompany.backgroundCheckPackages = [];
        return;
      }

      $scope.shared.activeCompany.backgroundCheckPackages = data;
    });
  }

  $scope.openSendOffer = function () {
    gaEventTracker("OpenSendOffer");
    if (FeaturesService.actions.block('esig')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_offer_modal.html',
      controller: 'CandidateOfferModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openSMSMessage = function () {
    ModalService.openSMSMessage($scope.positionId, $scope.candidate).then(function (result) {// nothing
    });
  };

  $scope.openPostMessage = function () {
    gaEventTracker("OpenPostMessage");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  }; // Discussion Note


  $scope.editingDiscussionNote = false;

  $scope.editDiscussionNote = function ($index, note) {
    $scope.editingDiscussionNote = true;
    $scope.discussionNoteSelected = $index;
    $scope.selectedDiscussionNote = {
      _id: note._id,
      body: utils.markdownToHTML(note.object.body),
      attachments: note.object.attachments
    };
    window.setTimeout(function () {
      var editModal = document.querySelector('.edit-discussion-note-modal').clientHeight;
      document.querySelector('.edit-discussion-note-dialog .textarea').style.maxHeight = editModal - 142 + 'px';
    }, 0);
  };

  $scope.cancelEditDiscussionNote = function () {
    $scope.editingDiscussionNote = false;
  };

  $scope.deleteEditDiscussionNoteAttachment = function () {
    var index = this.$index;
    $scope.selectedDiscussionNote.attachments.splice(index, 1);
  };

  $scope.deleteDiscussionNoteAttachment = function () {
    var index = this.$index;
    $scope.discussionNote.attachments.splice(index, 1);
  };

  $scope.toggleDiscussionNoteEditor = function ($index, note) {
    $scope.discussionNote = {
      body: '',
      attachments: []
    };
    $scope.discussionNotesEditorVisible = !$scope.discussionNotesEditorVisible;
    gaEventTracker("ToggleDiscussionNoteEditor");
  };

  $scope.deleteDiscussionNote = function ($index, note) {
    var header = "Delete Message";
    var message = "Are you sure you want to delete this message?";
    $scope.openConfirm(header, message, function (result) {
      if (result === true) {
        $scope.appClient.deleteDiscussionNote($scope.candidate.position_id, $scope.candidate._id, note._id, function () {
          gaEventTracker("DiscussionNoteDeleted");
          $scope.stream.splice($index, 1);
        });
      }
    });
  }; // Candidate Notes


  $scope.editingNote = false;

  $scope.editNote = function ($index, note) {
    $scope.editingNote = true;
    $scope.candidateNoteSelected = $index;
    $scope.editCandidateNote = {
      _id: note._id,
      body: utils.markdownToHTML(note.body),
      private: note.private,
      attachments: note.attachments
    };
    window.setTimeout(function () {
      var editModal = document.querySelector('.edit-note-modal').clientHeight;
      document.querySelector('.edit-note-dialog .textarea').style.maxHeight = editModal - 142 + 'px';
    }, 0);
  };

  $scope.cancelEditNote = function () {
    $scope.editingNote = false;
  };

  $scope.deleteEditNoteAttachment = function () {
    var index = this.$index;
    $scope.editCandidateNote.attachments.splice(index, 1);
  };

  $scope.deleteNoteAttachment = function () {
    var index = this.$index;
    $scope.candidateNote.attachments.splice(index, 1);
  };

  $scope.toggleEditNotePrivacy = function () {
    $scope.editCandidateNote.private = !$scope.editCandidateNote.private;
    gaEventTracker("ToggleNotePrivacy");
  };

  $scope.toggleNotePrivacy = function () {
    $scope.candidateNote.private = !$scope.candidateNote.private;
    gaEventTracker("ToggleNotePrivacy");
  };

  $scope.toggleNoteEditor = function ($index, note) {
    $scope.candidateNote = {
      'body': '',
      'attachments': [],
      'private': true
    };
    $scope.notesEditorVisible = !$scope.notesEditorVisible;
    gaEventTracker("ToggleNoteEditor");
  };

  $scope.deleteCandidateNote = function ($index, note) {
    var header = "Delete Note";
    var message = "Are you sure you want to delete this note?";
    $scope.openConfirm(header, message, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidateNote($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate.meta_id, note._id, function () {
          gaEventTracker("CandidateNoteDeleted");
          $scope.notes.splice($index, 1);
        });
      }
    });
  };

  $scope.updateDiscussionNote = function () {
    var data = $scope.selectedDiscussionNote;

    if (!data.body) {
      return;
    }

    data.body = utils.HTMLtoMarkdown(data.body);
    $scope.addCandiateNoteStatus = "Saving...";
    var updatedDiscussionNote = {
      body: data.body,
      attachments: data.attachments
    };
    $scope.appClient.updateDiscussionNote(updatedDiscussionNote, $scope.candidate.position_id, $scope.candidate._id, data._id, function (error, note) {
      $scope.stream[$scope.discussionNoteSelected].body = updatedDiscussionNote.body;
      $scope.stream[$scope.discussionNoteSelected].attachments = updatedDiscussionNote.attachments;
      $scope.stream[$scope.discussionNoteSelected].updated_date = new Date();
      $scope.editingDiscussionNote = false;
      $scope.selectedDiscussionNote = {};
      delete $scope.DiscussionNoteSelected; //data.updated_date = new Date();

      gaEventTracker("DiscussionNoteUpdated");
    });
  };

  $scope.openConfirm = function (_header, _message, callback) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/confirm/index.html',
      controller: 'ConfirmModalInstanceCtrl',
      size: 'sm',
      resolve: {
        header: function header() {
          return _header;
        },
        message: function message() {
          return _message;
        }
      }
    });
    modalInstance.result.then(function (result) {
      callback(result);
    }, function () {});
  };

  $scope.updateCandidateNote = function () {
    var data = $scope.editCandidateNote; //console.log(data);

    if (!data.body) {
      return;
    }

    data.body = utils.HTMLtoMarkdown(data.body);
    $scope.addCandiateNoteStatus = "Saving...";
    var updatedNote = {
      body: data.body,
      attachments: data.attachments,
      private: data.private
    };
    $scope.appClient.updateCandidateNote(updatedNote, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate.meta_id, data._id, function (error, note) {
      $scope.notes[$scope.candidateNoteSelected].body = updatedNote.body;
      $scope.notes[$scope.candidateNoteSelected].attachments = updatedNote.attachments;
      $scope.notes[$scope.candidateNoteSelected].private = updatedNote.private;
      $scope.notes[$scope.candidateNoteSelected].updated_date = new Date();
      $scope.editingNote = false;
      $scope.editCandidateNote = {};
      delete $scope.candidateNoteSelected; //data.updated_date = new Date();

      gaEventTracker("CandidateNoteUpdated");
    });
  };

  $scope.addCandidateNote = function (data) {
    if (!data.body) {
      return;
    }

    $scope.addCandiateNoteStatus = "Saving...";
    data.body = utils.HTMLtoMarkdown(data.body);
    $scope.appClient.addCandidateNote(data, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate.meta_id, function (error, note) {
      if (note) {
        $scope.notes.unshift(note);
        $scope.candiateNote = {};
        $scope.addCandidateNoteStatus = "Saved!";
        gaEventTracker("CandidateNoteAdded");
        $scope.toggleNoteEditor();
      }
    });
  };

  $scope.sendMessage = function () {
    if (!$scope.message.body) {
      return;
    }

    $scope.messageStatus = "Sending...";
    $scope.sendMessageButtonText = "Sending...";
    var body = '';
    body = utils.HTMLtoMarkdown($scope.message.body);
    $scope.appClient.postMessageToCandidate(body, $scope.subject.body, $scope.conversationAttachment, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function () {
      $scope.message.body = '';
      $scope.conversationAttachment = undefined;
      $scope.messageStatus = "Email sent!";
      $scope.sendMessageButtonText = "Send Email";
      gaEventTracker("CandidateMessagePosted");
    });
  };

  var tempNoteIds = [];

  $scope.postNote = function () {
    if (!$scope.note.body) {
      return;
    }

    $scope.messageStatus = "Posting...";
    $scope.postNoteButtonText = "Posting...";
    var body = '';
    body = utils.HTMLtoMarkdown($scope.note.body);
    $scope.appClient.postNote(body, $scope.streamAttachments, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, function () {
      var tempId = String(Math.round(Math.random() * 1000));
      tempNoteIds.push(tempId);
      $scope.stream.unshift({
        _id: tempId,
        type: 'companyNotePosted',
        stream_id: String(Math.round(Math.random() * 1000)),
        timestamp: moment(new Date()),
        postPageLoad: true,
        object: {
          acting_user: $scope.shared.user,
          attachments: $scope.streamAttachments,
          body: body,
          candidate: $scope.candidate,
          candidate_id: $scope.candidateId,
          company_id: $scope.shared.activeCompany.company._id,
          mentioned: false,
          position: $scope.position,
          position_id: $scope.positionId
        }
      });
      $scope.note.body = '';
      $scope.streamAttachments = [];
      $scope.messageStatus = "Posted!";
      $scope.postNoteButtonText = "Post";
      gaEventTracker("NotePosted");
    });
  };

  var allow_close = false; // setTimeout to clear after $destroy event on candidateMessageCompose directive firing after modal close event

  var clearEmailFromStorage = function clearEmailFromStorage() {
    setTimeout(function () {
      if (window.localStorage && window.localStorage.getItem('breezy' + $scope.candidate._id)) {
        window.localStorage.removeItem('breezy' + $scope.candidate._id);
      }
    }, 1000);
  };

  $scope.$on('modal.closing', function (event, reason, closing) {
    if (allow_close || $scope.activeTabRight !== 'notes') {
      clearEmailFromStorage();
      return;
    }

    if ($scope.candidateNote.body.length > 0) {
      event.preventDefault();
      dialog.confirm({
        title: "Unsaved Changes",
        message: "Are you sure you wish to close?"
      }, function (result) {
        if (result === true) {
          allow_close = true;
          $uibModalInstance.close();
          clearEmailFromStorage();
        }
      });
    }
  });

  $scope.openPostNote = function () {
    gaEventTracker("OpenPostNote");
    ModalService.openPostNote($scope.positionId, $scope.candidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.toggleBackgroundCheck = function ($index, check) {
    gaEventTracker("ToggleBackgroundCheck");
    check.open = !check.open;
  };

  $scope.toggleAssessment = function ($index, assessment) {
    gaEventTracker("toggleAssessment");
    assessment.open = !assessment.open;
  };

  $scope.toggleQuestionnaire = function ($index, questionnaire) {
    gaEventTracker("ToggleQuestionnaire");
    questionnaire.open = !questionnaire.open;
  };

  $scope.toggleReference = function ($index, reference) {
    gaEventTracker("ToggleReference");
    reference.open = !reference.open;
  };

  $scope.openDocument = function ($index, doc) {
    gaEventTracker("OpenDocument");
    var doc_url = doc.file_url || doc.url;

    if (doc_url.indexOf("attachments-cdn") > -1) {
      var win = window.open(doc_url);
      win.focus();
    } else {
      window.location = doc_url;
    }
  };

  $scope.deleteDocument = function ($index, doc) {
    var header = "Delete Document";
    var message = "Are you sure you want to delete this document?";
    $scope.openConfirm(header, message, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidateDocument($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, doc._id, function (error, result) {
          $scope.documents.splice($index, 1);
        });
      }
    });
  };

  $scope.deleteCandidate = function (candidate) {
    var header = "Delete Candidate";
    var message = "Are you sure you want to delete this candidate?";
    $scope.openConfirm(header, message, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidate($scope.shared.activeCompany.company._id, $scope.candidate.position_id, candidate._id, function (error, result) {
          $scope.closeModal();
        });
      }
    });
  };

  $scope.assignCandidate = function (member) {
    var fullMember = angular.copy(member);
    member = member === 'unassign' ? null : member._id;
    var header;
    var message;

    if (fullMember && fullMember._id) {
      header = "Assign Candidate";
      message = "Assign " + $scope.candidate.name + " to " + fullMember.name + "?";
    } else {
      header = "Unassign Candidate";
      message = "Unassign " + $scope.candidate.name + " from member?";
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.assignCandidate($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, member, function (error, result) {
          if (!error) {
            $scope.candidate.assigned_to = fullMember;
          }
        });
      }
    });
  };

  $scope.setCandidateStatus = function (candidate, stage) {
    CandidatesService.remote.updateCandidateStatus(candidate, stage, function (error, result) {
      if (!error) {
        candidate.status = stage.id;
        candidate.stage = stage; // update resume on candidate grid

        $rootScope.$broadcast("candidateUpdatedLocal", {
          candidate: candidate //_id: candidate._id,
          //state: stage.id,
          //stage: stage

        });

        if ($scope.candidate.email_address && !stage.actions) {
          if (stage.action_template_id) {
            var template;

            for (var i in $scope.shared.activeCompany.templates) {
              template = $scope.shared.activeCompany.templates[i];

              if (template && template._id === stage.action_template_id) {
                $scope.openMessageActionModal($scope.position, $scope.candidate, template, $scope.shared.activeCompany.messaging.subject_template);
              }
            }
          }
        }

        initializeNextAction();
      }
    });
  };

  $scope.openWindow = function (title, url, h, w) {
    var left = screen.width / 2 - w / 2;
    var top = screen.height / 2 - h / 2;
    return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
  };

  $scope.openVideoStream = function (candidate) {
    var width = 788;
    var height = 400;
    var url = '/v/c/' + $scope.shared.activeCompany.company.friendly_id + '/p/' + $scope.positionId + '/candidate/' + $scope.candidateId + '/video';
    var title = "Conversation with " + candidate.name;
    $scope.openWindow(title, url, height, width);
  };

  $scope.isCandidateFollowed = function (candidate) {
    return $scope.appClient.isCandidateFollowed(candidate);
  };

  $scope.toggleFollowCandidate = function (candidate) {
    $scope.appClient.toggleFollowCandidate(candidate, function () {
      $scope.isFollowed = $scope.isCandidateFollowed(candidate);
    });
  };

  $scope.isCandidateStarred = function (candidate) {
    return $scope.appClient.isCandidateStarred(candidate);
  };

  $scope.toggleStarCandidate = function (candidate) {
    $scope.appClient.toggleStarCandidate(candidate, function (stuff) {
      CandidatesService.local.updateStarredBy(candidate._id, candidate.starred_by);
      $rootScope.$broadcast('toggleStarCandidate', {
        name: candidate.name,
        _id: candidate._id,
        position_id: candidate.position_id
      });
    });
  };

  $scope.getMoreStream = function () {
    $scope.appClient.getCandidateStream($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, $scope.stream.length, function (error, result) {
      $scope.stream = $scope.stream.concat(result);
    });
  };

  $scope.getMoreConversation = function () {
    $scope.appClient.getCandidateConversation($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, $scope.conversation.length, function (error, result) {
      $scope.conversation = $scope.conversation.concat(result);
    });
  };

  $scope.$on('panelInterviewDelete', function (event, panel_interview_id) {
    var panel_interviews = $scope.schedule.reduce(function (acc, event) {
      if (event.panel_interview_id === panel_interview_id) {
        acc.push(event);
      }

      return acc;
    }, []);
    panel_interviews.forEach(function (panel_interview) {
      var idx = $scope.schedule.findIndex(function (event) {
        return event._id === panel_interview._id;
      });
      console.log("idx = ".concat(idx));
      $scope.schedule.splice(idx, 1);
    });
    delete $scope.nextEvent;
    initializeCalendar();
  });
  $scope.$on('taskEvent', function (event, data) {
    if (data.task.candidate_id && data.task.candidate_id === $scope.candidate._id) {
      // get tasks
      AppClient.getTasks({
        type: $scope.selectedTaskGroupType.value,
        positionId: $scope.candidate.position_id,
        candidateId: $scope.candidate._id
      }, {}, $scope.shared.activeCompany.company._id, function (error, result) {
        $scope.tasks[$scope.selectedTaskGroupType.value] = result;
        $scope.myTasks = TasksService.formatTask(result);
      });
    }
  });
  $scope.$on('companyNoteUpdated', function (event, data) {
    if (data.candidate_id !== $scope.candidate._id) return;
    var notes = $scope.stream;
    var noteFound;

    for (var i in notes) {
      var note = notes[i];
      if (note._id === data._id) noteFound = i;
    }

    if (noteFound) {
      $scope.stream[noteFound].object.body = data.body;
      $scope.stream[noteFound].object.attachments = data.attachments;
      $scope.stream[noteFound].updated_date = new Date();
    }
  });
  $scope.$on('companyNoteDeleted', function (event, data) {
    if (data.candidate_id !== $scope.candidate._id) return;
    var stream = $scope.stream;
    var noteFound;

    for (var i in stream) {
      var note = stream[i];
      if (note._id === data._id) noteFound = i;
    }

    if (noteFound) $scope.stream.splice(noteFound, 1);
  });
  $scope.$on('candidateNoteAdded', function (event, data) {
    if (data.candidate_meta_id !== $scope.candidate.meta_id) {
      return;
    }

    data.postPageLoad = true;

    if ($scope.team_notepad.users[data.acting_user_id]) {
      $scope.team_notepad.users[data.acting_user_id].notes.unshift(data);
    }
  });
  $scope.$on('candidateNoteUpdated', function (event, data) {
    if (data.candidate_meta_id !== $scope.candidate.meta_id) {
      return;
    }

    if (!$scope.team_notepad.users[data.acting_user_id]) {
      return;
    }

    var notes = $scope.team_notepad.users[data.acting_user_id].notes;
    var noteFound;

    for (var i in notes) {
      var note = notes[i];

      if (note._id === data._id) {
        noteFound = i;
      }
    }

    if (noteFound) $scope.team_notepad.users[data.acting_user_id].notes[noteFound] = data;
  });
  $scope.$on('candidateNoteDeleted', function (event, data) {
    if (data.candidate_meta_id !== $scope.candidate.meta_id) {
      return;
    }

    if (!$scope.team_notepad.users[data.acting_user_id]) {
      return;
    }

    var notes = $scope.team_notepad.users[data.acting_user_id].notes;
    var noteFound;

    for (var i in notes) {
      var note = notes[i];

      if (note._id === data._id) {
        noteFound = i;
      }
    }

    if (noteFound) $scope.team_notepad.users[data.acting_user_id].notes.splice(noteFound, 1);
  });
  $scope.$on('messageSeenByCandidate', function (event, data) {
    if (data.candidate_id == $scope.candidateId) {
      for (var i in $scope.conversation) {
        var message = $scope.conversation[i];

        if (message._id === data.message_id) {
          message.last_message_seen = new Date();
        }
      }
    }
  });
  $scope.$on('questionnairePosted', function (event, data) {
    if (data.object.candidate_id == $scope.candidateId) {
      data.postPageLoad = true;
      var idx;

      for (var i in $scope.questionnaires) {
        var questionnaire = $scope.questionnaires[i];

        if (questionnaire._id === data.object._id) {
          idx = i;
        }
      }

      if (!idx) {
        $scope.questionnaires.unshift(data.object);
      } else {
        $scope.questionnaires[idx] = data.object;
      }
    }
  });
  $scope.$on('candidateSeenPosted', function (event, data) {
    if (data.candidate_id !== $scope.candidateId) {
      return;
    }

    if (!$scope.candidate.viewed_by) {
      $scope.candidate.viewed_by = [];
    }

    if ($scope.candidate.viewed_by.indexOf(data.acting_user_id) == -1) {
      $scope.candidate.viewed_by.push(data.acting_user_id);
    }
  });
  $scope.$on('candidateScoreUpdated', function (event, data) {
    if (data.candidate_id !== $scope.candidateId) {
      return;
    }

    $scope.candidate.overall_score = data.score;
    $scope.candidateCopy.overall_score = data.score; //$scope.candidate.display_score = CandidatesService.local.getDisplayScore($scope.candidate);
  });
  $scope.$on('candidateScorecardAdded', function (event, data) {
    if (data.candidate_id !== $scope.candidateId) {
      return;
    }

    $scope.scorecards.push(data);
    initializeOverviewScorecard();
  });
  $scope.$on('candidateScorecardUpdated', function (event, data) {
    if (data.candidate_id !== $scope.candidateId) {
      return;
    }

    var idx;

    for (var i in $scope.scorecards) {
      var item = $scope.scorecards[i]; //console.log("Scorecard: " + JSON.stringify(data));

      if (item.acting_user_id === data.acting_user_id) {
        idx = i;
      }
    }

    if (idx > -1) {
      $scope.scorecards[idx] = data;
    }

    initializeOverviewScorecard();
  });
  $scope.$on('questionnaireResponsePosted', function (event, data) {
    if (data.object.candidate_id === $scope.candidateId) {
      data.postPageLoad = true;
      var idx;

      for (var i in $scope.questionnaires) {
        var questionnaire = $scope.questionnaires[i];

        if (questionnaire._id === data.object.questionnaire._id) {
          idx = i;
        }
      }

      if (!idx) {
        $scope.questionnaires.unshift(data.object.questionnaire);
      } else {
        $scope.questionnaires[idx] = data.object.questionnaire;
      }
    }
  });
  $scope.$on('candidateConversationMessagePosted', function (event, data) {
    if (data.object.candidate_id === $scope.candidateId) {
      data.postPageLoad = true; //console.log(data);
      //$scope.conversation.unshift(data);

      $scope.updateCandidateConversation(data);
    }
  });

  $scope.updateCandidateConversation = function (data) {
    var index = $scope.conversation.findIndex(function (c) {
      return c._id === data._id;
    });

    if (index > -1) {
      //console.log('already had')
      $scope.conversation[index] = data;
    } else {
      //console.log('new!')
      $scope.conversation.unshift(data);
    }
  };

  $scope.$on('messageToCandidateErrored', function (e, data) {
    var activity = $scope.conversation.find(function (activity) {
      return activity._id === data._id;
    });

    if (activity) {
      activity.object.state = data.object.state;
      activity.object.delivery_status = data.object.delivery_status; //activity.type = data.type;
      //console.log('messageToCandidateErrored', activity)
      //init();
    }
  });
  $scope.$on('notePosted', function (event, data) {
    if (data.object.candidate._id == $scope.candidateId) {
      data.postPageLoad = true; // remove temp note ids once event is received with data to display

      if (tempNoteIds.length > 0) {
        $scope.stream.forEach(function (s) {
          var index = tempNoteIds.findIndex(function (id) {
            return s._id === id;
          });

          if (index !== -1) {
            $scope.stream.splice(index, 1);
          }
        }); // clear all temp note ids

        tempNoteIds.length = 0;
      }

      $scope.stream.unshift(data);
    }
  });
  $scope.$on('candidateStatusUpdated', function (event, data) {
    if (data.object.candidate._id == $scope.candidateId) {
      data.postPageLoad = true;

      if (Array.isArray($scope.stream)) {
        $scope.stream.unshift(data);
      } else {
        $scope.stream = [];
        $scope.stream.unshift(data);
      }
    }
  });
  $scope.$on('candidateConsentRequested', function (event, data) {
    if (data.object.candidate_meta_id !== $scope.candidate.meta_id) {
      return;
    }

    data.postPageLoad = true;
    $scope.stream.unshift(data);
  });
  $scope.$on('candidateConsentUpdated', function (event, data) {
    if (data.object.candidate_meta_id !== $scope.candidate.meta_id) {
      return;
    }

    data.postPageLoad = true;
    $scope.stream.unshift(data);
  });
  $scope.$on('candidateAssignedPosted', function (event, data) {
    var candidate_id = data.hasOwnProperty('object') ? data.object.candidate_id : data.candidate_id;

    if (candidate_id != $scope.candidateId) {
      return;
    }

    data.postPageLoad = true;
    $scope.candidate.assigned_to = data.member;
    $scope.stream.unshift(data);
  });
  $scope.$on('candidateResumeAttached', function (event, data) {
    if (data.object.candidate._id != $scope.candidateId) {
      return;
    }

    $scope.candidate = data.object.candidate;
    $scope.candidateCopy = angular.copy($scope.candidate);
  });
  $scope.$on('candidateTagsSet', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.candidate.tags = data.object.tags;
  });
  $scope.$on('candidateDocumentAdded', function (event, data) {
    var documentId = data.object._id;

    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    if ($scope.documents.every(function (doc) {
      return doc.object ? doc.object._id !== data.object._id : true;
    })) {
      return;
    }

    data.postPageLoad = true;
    $scope.stream.unshift(data);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = $scope.documents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var i = _step.value;
        var doc = $scope.documents[i];

        if (documentId == doc._id) {
          return;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    $scope.documents.unshift(data.object);
  });
  $scope.$on('candidateDocumentDeleted', function (event, data) {
    var documentId = data.object._id;

    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    if ($scope.documents.every(function (doc) {
      return doc.object ? doc.object._id !== data.object._id : true;
    })) {
      return;
    }

    data.postPageLoad = true;
    $scope.stream.unshift(data);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = $scope.documents[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var i = _step2.value;
        var doc = $scope.documents[i];

        if (documentId == doc._id) {
          $scope.documents.splice(i, 1);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });
  $scope.$on('candidateDocumentSignatureViewed', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
  });
  $scope.$on('candidateDocumentSignatureSigned', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
  });
  $scope.$on('candidateDocumentSignatureCompleted', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
  });
  $scope.$on('candidateBackgroundCheckMissingInput', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
    updateBackgroundChecks(data);
  });
  $scope.$on('candidateBackgroundCheckProcessing', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
    updateBackgroundChecks(data);
  });
  $scope.$on('candidateBackgroundCheckCompletedClear', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
    updateBackgroundChecks(data);
  });
  $scope.$on('candidateBackgroundCheckCompletedAlert', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.conversation.unshift(data);
    updateBackgroundChecks(data);
  });
  $scope.$on('candidateAssessmentSent', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    $scope.assessments.unshift(data.object.assessment);
    $scope.conversation.unshift(data);
  });
  $scope.$on('candidateAssessmentCompleted', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    var assessment = formatAssessment(data.object.assessment);
    var assessmentIndex = $scope.assessments.findIndex(function (assessment) {
      return assessment.id === assessment.id;
    });

    if (assessmentIndex > -1) {
      $scope.assessments[assessmentIndex] = assessment;
    }

    $scope.conversation.unshift(data);
  });

  function formatAssessment(assessment) {
    if (assessment.service_id !== "criteriacorp") {
      return assessment;
    }

    var ccResults = {};

    for (var r in assessment.results) {
      var result = assessment.results[r];

      for (var s in result.scores) {
        var score = result.scores[s];

        if (!score.test_name || score.test_name === "") {
          continue;
        }

        if (!ccResults[score.test_name]) {
          ccResults[score.test_name] = {
            name: score.test_name,
            full_name: score.test_full_name,
            scores: []
          };
        }

        ccResults[score.test_name].scores.push({
          score: score.score,
          name: score.score_name,
          important: score.important ? true : undefined
        });
      }

      ccResults.report_url = result.report_url;
    }

    assessment.results = ccResults;
    return assessment;
  }

  function updateBackgroundChecks(event) {
    var checkIndex = -1;
    $scope.background_checks.forEach(function (check, index) {
      if (event.object.service_name === 'Checkr') {
        console.log('checkr', event.object.query_id, check.query_id);

        if (event.object.query_id === check.query_id) {
          console.log('checkr', index);
          checkIndex = index;
        }
      } else {
        // goodhire
        if (event.object.report_url === check.report_url) {
          console.log('goodhire', index);
          checkIndex = index;
        }
      }
    });

    if (checkIndex > -1) {
      console.log('existing check', event.object);
      $scope.background_checks[checkIndex] = event.object;
    } else {
      console.log('new check', event.object);
      $scope.background_checks.unshift(event.object);
    }
  }

  $scope.$on('candidatePanelInterviewAdded', function (event, data) {
    if (data.object.candidate_id !== $scope.candidate._id) {
      return;
    }

    $scope.stream.unshift(data);
    $scope.conversation.unshift(data);
  });
  $scope.$on('candidateInterviewAdded', function (event, data) {
    if (data.object.candidate_id !== $scope.candidate._id) {
      return;
    }

    var interview = data.object.interview;

    if (!interview.candidate) {
      interview.candidate = data.object.candidate;
    }

    var idx = $scope.schedule.findIndex(function (event) {
      return event._id === interview._id;
    });

    if (idx > -1) {
      $scope.schedule[idx] = interview;
    } else {
      $scope.schedule.push(interview);
    }

    initializeCalendar();
    data.postPageLoad = true;

    if (interview.type && interview.type === 'panel') {} else {
      $scope.stream.unshift(data);
      $scope.conversation.unshift(data);
    }
  });
  $scope.$on('interviewAdded', function (e, data) {
    //console.log(e)
    //console.log(data)
    if (data.candidate._id !== $scope.candidate._id) {
      return;
    } // check if new event


    var idx = $scope.schedule.findIndex(function (event) {
      return event._id === data._id;
    });

    if (idx > -1) {
      $scope.schedule[idx] = data;
    } else {
      $scope.schedule.push(data);
    }

    initializeCalendar();
  });

  $scope.checkAbility = function (type, func) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var allow = true;

    var updateCandidate = function updateCandidate(result) {
      if (result) {
        $scope.candidate = result;
        $scope.candidateCopy = angular.copy($scope.candidate);

        if ($scope.checkAbility.apply($scope, [type, func].concat(args)) && func) {
          $scope[func].apply($scope, args);
        }
      }
    };

    allow = $scope.position.state === "published" || $scope.globalCommunication;

    if (!allow) {
      type = 'unpublished';
    }

    if (['schedule', 'email', 'questionnaire', 'references'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.email_address;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['SMS'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.phone_number;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['background_check'].indexOf(type) > -1) {
      allow = allow && $scope.showBackgroundCheck;

      if (!allow) {
        ReasonService.getMessage(type, 'backgroundchecks').then();
      } else {
        allow = allow && $scope.candidate.email_address;

        if (!allow) {
          type = 'background_check_email';
          ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
        }
      }
    } else if (['assessments'].indexOf(type) > -1) {
      allow = allow && ($scope.shared.activeCompany.company.has_hackerrank || $scope.shared.activeCompany.company.has_criteriacorp || $scope.shared.activeCompany.company.has_indeedassessments || $scope.shared.activeCompany.company.has_traitify);

      if (!allow) {
        ReasonService.getMessage(type, 'assessments').then();
      } else {
        allow = allow && $scope.candidate.email_address;

        if (!allow) {
          type = 'assessments_email';
          ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
        }
      }
    } else if (['unpublished'].indexOf(type) > -1) {
      ReasonService.getMessage(type).then();
    }

    return allow;
  };

  $scope.canCommunicateWithCandidates = function () {
    return $scope.candidate.email_address && ($scope.position.state === "published" || $scope.globalCommunication);
  };

  $scope.cancelInterview = function (interview) {
    if (!confirm("Are you sure you want to cancel this?")) {
      return;
    }

    var idx = $scope.schedule.findIndex(function (event) {
      return event._id === interview._id;
    });
    interview.method = "cancel";
    $scope.appClient.sendCancelInterview(interview, $scope.shared.activeCompany.company._id, positionId, $scope.candidate._id, function (error, result) {
      delete $scope.nextEvent;
      $scope.schedule.splice(idx, 1);
      initializeCalendar();
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss($scope.candidate);
  };

  $scope.gotoCandidateAnchor = function (x) {
    var newHash = 'candidate' + x;

    if ($location.hash() !== newHash) {
      $location.hash('candidate' + x);
    } else {
      $anchorScroll();
    }
  };

  var getSimpleInterview = function getSimpleInterview(interview) {
    interview.candidate = $scope.candidate; //refresh stale candidate data

    return {
      _id: interview._id,
      start: new Date(interview.start_time),
      end: new Date(interview.end_time),
      title: interview.location ? interview.location : interview.candidate.name,
      data: interview,
      className: interview.candidate.assigned_to && interview.candidate.assigned_to._id == $scope.shared.user._id ? "assigned" : ""
    };
  };

  var getClosestEvent = function getClosestEvent() {
    var dist, closest, endTime;
    var now = new Date().getTime();
    $scope.schedule.forEach(function (event) {
      if (event.candidate) {
        endTime = new Date(event.end_time).getTime();

        if (endTime > now) {
          if (!dist || endTime - now < dist) {
            dist = endTime - now;
            closest = event;
          }
        }
      }
    });
    return closest;
  };

  $scope.initializeCandidate = function (candidate, $index) {
    $scope.candidateId = candidate._id;
    $scope.positionId = candidate.position._id;
    defaultTab = "experience";

    if ($index) {
      currentIndex = $index;
    }

    $state.transitionTo('company.position.candidate', {
      positionId: $scope.positionId,
      candidateId: $scope.candidateId,
      section: defaultTab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
    initialize(defaultTab, currentIndex);
  };

  var mapUISelectDates = function mapUISelectDates(item) {
    ['start_date', 'end_date'].forEach(function (key) {
      if (item.hasOwnProperty(key)) {
        Object.keys(item[key]).forEach(function (part) {
          item[key][part] = {
            id: item[key][part],
            name: item[key][part] + ''
          };
        });
      }
    });
    return item;
  };

  var initializeWorkExperience = function initializeWorkExperience() {
    $scope.sections.work_history.data = angular.copy($scope.candidate.work_history);
    $scope.sections.work_history.data.map(mapUISelectDates); //console.log($scope.sections.work_history.data);
  };

  var initializeNextAction = function initializeNextAction() {
    var candidateStatus = $scope.candidate.status;
    var idx = 0;

    for (var i in $scope.pipeline) {
      var state = $scope.pipeline[i];

      if (candidateStatus === state.id) {
        idx = parseInt(i);
        break;
      }
    }

    var nextStage = angular.copy($scope.pipeline[idx + 1]);

    if (!nextStage) {
      nextStage = angular.copy($scope.pipeline[idx - 1]);
    }

    $scope.nextStage = nextStage;
  };

  var initializeHiringTeam = function initializeHiringTeam() {
    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.position._id, function (error, members) {
      $scope.members = members;
    });
  };

  var initializeCustomAttributes = function initializeCustomAttributes() {
    $scope.appClient.getCustomAttributes($scope.shared.activeCompany.company._id, 'candidate', function (error, results) {
      $scope.customAttributes = results;
    });
  };

  var initializeYears = function initializeYears() {
    $scope.years = [];
    var start = new Date().getFullYear() + 4;

    for (var i = start; i > start - 100; i--) {
      $scope.years.push({
        'id': i,
        'name': i + ''
      });
    }
  };

  var initializeMonths = function initializeMonths() {
    $http.get('/data/months.json').success(function (data) {
      $scope.months = data;
    }).error(function (error) {
      console.log('Error fetching months types JSON!: ' + error);
    });
  };

  $scope.setTaskGroupTypes = function (type) {
    $scope.selectedTaskGroupType = type;
    $scope.myTasks = TasksService.formatTask($scope.tasks[type.value]);
  };

  var initializeTasks = function initializeTasks() {
    $scope.taskGroupTypes = [{
      name: 'My Tasks',
      value: 'member'
    }, {
      name: 'Created Tasks',
      value: 'creator'
    }];

    if ($scope.position.is_admin) {
      $scope.taskGroupTypes.push({
        name: 'Team Tasks',
        value: 'team'
      });
    }

    $scope.selectedTaskGroupType = $scope.taskGroupTypes[0];
    if (!$scope.tasks) $scope.tasks = {};
    var type = $scope.selectedTaskGroupType;
    $scope.myTasks = TasksService.formatTask($scope.tasks[type.value]);
  };

  var initializeCalendar = function initializeCalendar() {
    $scope.bzEvents = $scope.schedule.map(getSimpleInterview);
    var closest = getClosestEvent();

    if (closest) {
      $scope.nextEvent = closest;
    }

    $scope.eventSources[0] = $scope.bzEvents;
  };

  var initializePositionScorecard = function initializePositionScorecard() {
    if ($scope.position && !$scope.position.scorecard_id) {
      return;
    }

    angular.forEach($scope.shared.activeCompany.scorecards, function (scorecard) {
      if (scorecard._id == $scope.position.scorecard_id) {
        $scope.scorecard = scorecard;
      }
    });
  };

  var initializeOverviewScorecard = function initializeOverviewScorecard() {
    $scope.overallScorecard = {
      'users': [],
      'scored_count': 0,
      'scored': {
        'very_good': [],
        'good': [],
        'neutral': [],
        'poor': [],
        'very_poor': []
      },
      'sections': angular.copy($scope.scorecard.sections),
      'notes': []
    };
    angular.forEach($scope.scorecards, function (item) {
      if (!item.scorecard.acting_user._id) {
        return;
      }

      if (item.scorecard.score) {
        $scope.overallScorecard.scored[item.scorecard.score].push(item.scorecard.acting_user._id);
        $scope.overallScorecard.scored_count++;
      }

      if (item.scorecard.note) {
        $scope.overallScorecard.notes.push({
          'user': item.scorecard.acting_user,
          'note': item.scorecard.note
        });
      }

      $scope.overallScorecard.users.push(item.scorecard.acting_user);

      if (item.scorecard.acting_user._id == $scope.shared.user._id) {
        if (item.scorecard.version !== $scope.scorecard.version) {
          item.scorecard.version = $scope.scorecard.version;
          item.scorecard.sections = $scope.scorecard.sections;
        }

        $scope.candidateScorecard = item.scorecard;
      }

      if (item.scorecard.version !== $scope.scorecard.version) {
        return;
      }

      for (var i in $scope.scorecard.sections) {
        var section = item.scorecard.sections[i];

        for (var c in section.criteria) {
          if (!section.criteria[c].score) {
            continue;
          }

          if (!$scope.overallScorecard.sections[i].criteria[c][section.criteria[c].score]) {
            $scope.overallScorecard.sections[i].criteria[c][section.criteria[c].score] = [];
          }

          $scope.overallScorecard.sections[i].criteria[c][section.criteria[c].score].push({
            'name': item.scorecard.acting_user.name,
            'id': item.scorecard.acting_user._id
          });
        }
      }
    });
  };

  function isTextSelected() {
    var text = "";

    if (typeof window.getSelection != "undefined") {
      text = window.getSelection().toString();
    } else if (typeof document.selection != "undefined" && document.selection.type == "Text") {
      text = document.selection.createRange().text;
    }

    return text.length > 0;
  }

  var initializeKeyBindings = function initializeKeyBindings() {
    console.log('initializeKeyBindings');

    if ($scope.position.is_admin) {
      Mousetrap.bind('m', function () {
        if (!$scope.canCommunicateWithCandidates()) return;
        $scope.openPostMessage();
        return false;
      });
      Mousetrap.bind('q', function () {
        if (!$scope.canCommunicateWithCandidates()) return;
        $scope.openSendQuestionnaire();
        return false;
      });
      Mousetrap.bind('r', function () {
        $scope.openSetReminder();
        return false;
      });
      Mousetrap.bind('i', function () {
        if (!$scope.canCommunicateWithCandidates()) return;
        $scope.scheduleInterview();
        return false;
      });
      Mousetrap.bind('t', function () {
        $scope.openAddTags();
        return false;
      });
      Mousetrap.bind(['command+s', 'ctrl+s'], function () {
        console.log('change stage modal'); //$scope.openMoveCandidates();

        ModalService.openRecentlyViewed('stage', $scope.pipeline).then(function (stage) {
          $scope.setCandidateStatus($scope.candidate, stage);
        });
        return false;
      });
      Mousetrap.bind(['command+d', 'ctrl+d'], function () {
        $scope.disqualifyCandidate();
        return false;
      });
      Mousetrap.bind(['command+m', 'ctrl+m'], function () {
        $scope.openMoveCandidateModal();
        return false;
      });
      Mousetrap.bind(['command+c', 'ctrl+c'], function () {
        if (isTextSelected()) return;
        $scope.openCopyCandidateModal();
        return false;
      });
      Mousetrap.bind(['command+shift+d', 'ctrl+shift+d'], function () {
        $scope.deleteCandidate();
        return false;
      });
    }

    Mousetrap.bind(['command+p', 'ctrl+p'], function () {
      $scope.openPrintCandidate();
      return false;
    });
    Mousetrap.bind('n', function () {
      $scope.openPostNote();
      return false;
    });
    Mousetrap.bind('s', function () {
      $scope.openCandidateScorecard();
      return false;
    });
  };

  $scope.disqualifyCandidate = function () {
    gaEventTracker("CandidateDisqualified");

    if ($scope.disqualifiedStages.length > 1) {
      ModalService.openRecentlyViewed('stage', $scope.disqualifiedStages).then(function (stage) {
        $scope.setCandidateStatus($scope.candidate, stage);
      });
    } else if ($scope.disqualifiedStages.length === 1) {
      dialog.confirm({
        title: "Disqualify Candidate",
        message: "Are you sure you want to move ".concat($scope.candidate.name, " to ").concat($scope.disqualifiedStages[0].name, "?")
      }, function (result) {
        if (result === true) {
          $scope.setCandidateStatus($scope.candidate, $scope.disqualifiedStages[0]);
        }
      });
    }
  };

  var initializeGDPR = function initializeGDPR() {
    /*
    $scope.candidate.consent = {
        status: {
            id: 'expiring',
            name: "Expiring"
        },
        expiry_date: new Date('2018-07-09T14:31:59.255')
    };
    */
    if ($scope.candidate.consent) {
      if ($scope.candidate.consent.status.id === 'expiring') {
        $scope.gdprExpiring = true;
      } else if ($scope.candidate.consent.status.id === 'expired') {
        $scope.gdprExpired = true;
      }

      if ($scope.candidate.consent.expiry_date) {
        $scope.formattedExpiryDate = moment($scope.candidate.consent.expiry_date).format('dddd, MMMM Do');
        $scope.formattedExpiryDateShort = moment($scope.candidate.consent.expiry_date).format('YYYY-MM-DD');
      }
    } else {
      $scope.gdprExpired = false;
    }
  };

  var initialize = function initialize(defaultTab, newIndex) {
    //console.log('init candidate modal');
    $scope.initializingCandidate = true;
    $scope.work = undefined;
    $scope.education = undefined;
    $scope.scorecard = {};
    $scope.candidateScorecard = undefined;
    $scope.candidate = {};
    $scope.candidateCopy = {};
    $scope.isFollowed = false;
    $scope.suggestions = [];
    $scope.autoCompleteSelectedIndex = -1;
    $scope.message = {};
    $scope.subject = {
      'body': ''
    };
    $scope.campaign = null;
    $scope.note = {};
    $scope.notes = [];
    $scope.documents = [];
    $scope.other_documents = [];
    $scope.showAddTags = false;
    $scope.newTags = {};
    delete $scope.nextEvent;
    $scope.updateSubjectVisible = false;
    $scope.updateWorkHistoryVisible = false;
    $scope.updateEducationVisible = false;
    $scope.updateSummaryVisible = false;
    $scope.updateCoverLetterVisible = false;
    $scope.trustAsResourceUrl = $sce.trustAsResourceUrl;
    $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
    $scope.positionMetaDesc = {};
    if ($scope.position.org_type) $scope.positionMetaDesc.label = "Candidate Pool";else if ($scope.position.location) {
      $scope.positionMetaDesc.label = $scope.position.location.name;
      if ($scope.position.requisition_id) $scope.positionMetaDesc.label += " (" + $scope.position.requisition_id + ")";
    } else if ($scope.position.requisition_id) {
      $scope.positionMetaDesc.label = 'Int: ' + $scope.position.requisition_id;
    }
    var isUSLocation = $scope.position && $scope.position.location && $scope.position.location.country && $scope.position.location.country.id == "US";
    var hasCheckr = $scope.shared.activeCompany.company.has_checkr;
    var hasGoodhire = $scope.shared.activeCompany.company.has_goodhire;
    var hasAsurint = $scope.shared.activeCompany.company.has_asurint;
    var isCheckrSource = $scope.shared.activeCompany.company.source && $scope.shared.activeCompany.company.source.id === 'checkr';
    var isPool = $scope.position && $scope.position.org_type === 'pool';
    var isPosition = $scope.position && $scope.position.org_type !== 'pool';
    $scope.showCheckrConnect = isCheckrSource && !hasCheckr && (isPool || isPosition && isUSLocation);
    $scope.showCheckrBackgroundCheck = isCheckrSource && hasCheckr && (isPool || isPosition && isUSLocation);
    $scope.showBackgroundCheck = (isPool || isPosition && isUSLocation) && (hasCheckr || hasGoodhire || hasAsurint);
    $scope.isPool = $scope.position.org_type === "pool";
    initializeKeyBindings();
    $scope.pipeline = PipelinesService.local.getPipelineByPosition($scope.position).pipeline;
    $scope.disqualifiedStages = $scope.pipeline.filter(function (stage) {
      return stage.type && stage.type.id === 'disqualified' || stage.id === 'disqualified';
    }); //console.log($scope.disqualifiedStages);

    initializePositionScorecard();
    initializeCustomAttributes();
    initializeAssessments();
    initializeBackgroundCheckPackages();
    $scope.appClient.getCandidate($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, function (error, candidate) {
      if (!candidate) {
        dialog.alert({
          message: 'That candidate no longer exists.'
        });
        return $uibModalInstance.close();
      }

      CandidatesService.local.setRecentlyViewed(candidate);
      $scope.candidate = candidate;

      if (!Array.isArray($scope.candidate.social_profiles)) {
        var socialProfiles = $scope.candidate.social_profiles;

        if (socialProfiles instanceof Object && socialProfiles.url) {
          $scope.candidate.social_profiles = [].concat(socialProfiles);
        } else {
          $scope.candidate.social_profiles = [];
        }
      }

      $scope.isFollowed = $scope.appClient.isCandidateFollowed($scope.candidate);
      $scope.candidateCopy = angular.copy($scope.candidate);

      if (!$scope.candidateCopy.source) {
        $scope.candidateCopy.source = null;
      }

      $scope.initializingCandidate = false;
      $scope.initializingCandidateMeta = true;

      if ($scope.candidate.other_positions) {
        var myPositionsIds = PositionsService.local.getMyMemberPositions().map(function (position) {
          return position._id;
        });
        $scope.candidate.other_positions = $scope.candidate.other_positions.filter(function (place) {
          return myPositionsIds.indexOf(place.position._id) > -1;
        });
        $scope.candidate.other_positions.forEach(function (place) {
          var fullPosition = PositionsService.local.getPositionById(place.position._id);

          if (fullPosition) {
            place.position.state = fullPosition.state;
          }
        });
      }

      function mapPositionToItem(item) {
        if (!item.hasOwnProperty('position_id')) return item;
        var position = PositionsService.local.getPositionById(item.position_id);
        item.position = {
          name: position.name
        };
        return item;
      }

      $scope.appClient.getCandidateMetadata($scope.candidate.company_id, $scope.positionId, $scope.candidateId, function (error, data) {
        $scope.initializingCandidateMeta = false;

        if (error) {
          return;
        }

        if (data.notepad.length > 0) {
          $scope.notes = angular.copy(data.notepad);
        } //$scope.team_notepad.keys = Object.keys(data.team_notepad);


        $scope.team_notepad = {};
        $scope.team_notepad.users = angular.copy(data.team_notepad);
        $scope.team_notepad.note_count = 0;
        var keys = Object.keys($scope.team_notepad.users);

        for (var i in keys) {
          var key = keys[i];
          $scope.team_notepad.note_count += $scope.team_notepad.users[key].notes.length;
        }

        $scope.stream = data.stream;
        $scope.conversation = data.conversation;
        $scope.documents = data.documents;
        $scope.other_documents = data.other_documents ? data.other_documents.map(mapPositionToItem) : [];
        $scope.total_documents = $scope.other_documents ? $scope.other_documents.length + $scope.documents.length : $scope.documents.length;
        $scope.questionnaires = data.questionnaires;
        $scope.other_questionnaires = data.other_questionnaires ? data.other_questionnaires.map(mapPositionToItem) : []; //console.log($scope.other_questionnaires)

        $scope.total_questionnaires = $scope.other_questionnaires ? $scope.other_questionnaires.length + $scope.questionnaires.length : $scope.questionnaires.length;
        $scope.references = data.references;
        $scope.other_references = data.other_references ? data.other_references.map(mapPositionToItem) : [];
        $scope.total_references = $scope.other_references ? $scope.other_references.length + $scope.references.length : $scope.references.length;
        $scope.background_checks = data.background_checks;
        $scope.other_background_checks = data.other_background_checks ? data.other_background_checks.map(mapPositionToItem) : [];
        $scope.total_background_checks = $scope.other_background_checks ? $scope.other_background_checks.length + $scope.background_checks.length : $scope.background_checks.length;
        $scope.schedule = data.schedule;
        $scope.custom_fields = data.custom_fields;
        $scope.assessments = [];

        for (var i in data.assessments) {
          var assessment = data.assessments[i];
          assessment = formatAssessment(assessment);
          $scope.assessments.push(assessment);
        }

        $scope.other_assessments = [];
        var temp_other_assessments = data.other_assessments ? data.other_assessments.map(mapPositionToItem) : [];

        for (var i in temp_other_assessments) {
          var assessment = temp_other_assessments[i];
          assessment = formatAssessment(assessment);
          $scope.other_assessments.push(assessment);
        }

        $scope.total_assessments = $scope.other_assessments ? $scope.other_assessments.length + $scope.assessments.length : $scope.assessments.length;

        if (data.schedule) {
          initializeCalendar(data.schedule);
          $scope.interviewArchives = data.schedule.filter(function (interview) {
            return interview.archives && interview.archives.length > 0;
          });
        }

        if (data.campaign) {
          $scope.campaign = data.campaign;
        }

        $scope.scorecards = data.scorecards;
        initializeOverviewScorecard();
        $scope.tasks = data.tasks;
        initializeTasks();
        $scope.candidateInitialized = true;
      });
      $scope.subject.body = $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
        'candidate': $scope.candidate,
        'position': $scope.position,
        'company': $scope.shared.activeCompany.company,
        'sender': $scope.shared.user
      });
      initializeGDPR();
      initializeNextAction();
      initializeHiringTeam();
      initializeMonths();
      initializeYears();

      if ($scope.candidate.resume && $scope.candidate.resume.pdf_url) {
        if ($scope.candidate.resume.pdf_url.indexOf("\.pdf") === -1) {
          $scope.pdfEmbed = $sce.trustAsResourceUrl("https://docs.google.com/gview?url=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
        } else {
          $scope.pdfEmbed = $sce.trustAsResourceUrl("https://attachments-cdn.breezy.hr/pdfviewer/web/viewer.html?file=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
        }
      } else {
        $scope.pdfEmbed = false;
      }

      $rootScope.$broadcast('candidateSeenPosted', {
        acting_user_id: $scope.shared.user._id,
        candidate_id: $scope.candidateId
      });
    });
  };

  initialize(defaultTab, currentIndex);
  $scope.pdfEmbedFullScreen = false;

  var maximizeEventHandler = function maximizeEventHandler() {
    var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
    var eventer = window[eventMethod];
    var messageEvent = eventMethod == "toggleMaximize" ? "onmessage" : "message"; // Listen to message from child window

    eventer(messageEvent, function (e) {
      if (e.data === "toggleMaximize") {
        $scope.pdfEmbedFullScreen = !$scope.pdfEmbedFullScreen;
      }
    }, false);
  };

  maximizeEventHandler();
}]);
angular.module('appController').directive('traitifyLoader', ['AppClient', function (AppClient) {
  return function (scope, element, attrs) {
    AppClient.getIntegration('traitify', scope.shared.activeCompany.company._id).then(function (integration) {
      Traitify.setPublicKey(integration.api_key);
      Traitify.setVersion("v1");
      setTimeout(function () {
        Traitify.ui.load("results", attrs.assessmentId, ".traitify-report[data-assessment-id='" + attrs.assessmentId + "'] .traitify-results");
        Traitify.ui.load("personalityTypes", attrs.assessmentId, ".traitify-report[data-assessment-id='" + attrs.assessmentId + "'] .traitify-personality-types");
        Traitify.ui.load("personalityTraits", attrs.assessmentId, ".traitify-report[data-assessment-id='" + attrs.assessmentId + "'] .traitify-personality-traits");
      }, 0);
    });
  };
}]);
'use strict';

angular.module('appController').controller('CandidateAssessmentModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', '$rootScope', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, $rootScope) {
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.assessments = SharedData.activeCompany.assessments;
  $scope.formState = {
    submitted: false
  };
  $scope.form = {
    selectedAssessment: {}
  };
  $scope.errorMessage = '';

  $scope.postAssessmentToCandidate = function () {
    var i;
    $scope.messageStatus = "Sending...";
    $scope.errorMessage = '';

    if ($scope.candidate) {
      AppClient.postAssessmentToCandidate({
        testId: $scope.form.selectedAssessment.id,
        test: $scope.form.selectedAssessment,
        serviceId: $scope.form.selectedAssessment.service_id,
        companyId: SharedData.activeCompany.company._id,
        positionId: positionId,
        candidateId: candidate._id
      }, function (error, result) {
        if (error && error.errors) {
          $scope.errorMessage = error.errors.join(' ');
          $scope.messageStatus = '';
          return;
        }

        $scope.messageStatus = "Assessment sent!";
        setTimeout(function () {
          $scope.closeModal();
        }, 2000);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateBackgroundCheckModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', '$rootScope', 'config', 'dialog', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, $rootScope, config, dialog) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.messageBody = "";
  $scope.formState = {
    submitted: false
  };

  if (config && config.has_geos) {
    AppClient.getCheckrGeos({
      companyId: SharedData.activeCompany.company._id
    }).then(function (results) {
      $scope.showGeos = true;
      $scope.geos = results;
    }).catch(function (err) {
      console.log('geos err', err);
    });
  }

  $scope.model = {};
  $scope.packages = SharedData.activeCompany.backgroundCheckPackages.slice(0);
  var isGoodhire = SharedData.activeCompany.backgroundCheckPackages.find(function (check) {
    return check.service_id === 'goodhire';
  });
  var hasAsurint = SharedData.activeCompany.company.has_asurint;

  if (isGoodhire) {
    $scope.packages.push({
      slug: 'goodhire-custom-select-url',
      service_id: 'goodhire',
      service_name: 'GoodHire',
      name: 'Customize Package',
      screenings: []
    });
  }

  if (hasAsurint) {
    $scope.packages.push({
      slug: 'asurint-custom-select-url',
      service_id: 'asurint',
      service_name: 'Asurint',
      name: 'Customize Package',
      screenings: []
    });
  }

  $scope.postBackgroundCheckToCandidate = function () {
    var i;
    $scope.messageStatus = "Sending...";

    if ($scope.candidate) {
      var selectedPackage = $scope.model.selectedPackage;
      var data = {
        package: selectedPackage,
        packageId: selectedPackage.slug,
        serviceId: selectedPackage.service_id,
        companyId: SharedData.activeCompany.company._id,
        positionId: positionId,
        candidateId: candidate._id
      };

      if ($scope.showGeos && $scope.model.geo) {
        data.geo = $scope.model.geo;
      }

      if (data.serviceId === 'goodhire' || data.serviceId === 'asurint') {
        openBackgroundCheckWindow();
      }

      AppClient.postBackgroundCheckToCandidate(data, function (error, result) {
        if (error && error.type === 'missing_geo') {
          $scope.errorMessage = 'Please select a Checkr Geo for this candidate.';
          $scope.messageStatus = '';
          $scope.showGeos = true;
          $scope.geos = error.geos;
          return;
        }

        if (error && error.errors) {
          $scope.errorMessage = error.errors.join(' ');
          $scope.messageStatus = '';
          return;
        }

        if (error && (data.serviceId === 'goodhire' || data.serviceId === 'asurint')) {
          backgroundCheckWindow.close();
          dialog.alert({
            message: 'Error initiating candidate background check. Contact support if you continue to see this error message.'
          });
          $scope.errorMessage = 'Error initiating candidate background check';
          $scope.messageStatus = '';
          return;
        }

        if (result.url) {
          // open popup
          backgroundCheckWindow.location = result.url;
          setTimeout(function () {
            $scope.closeModal();
          }, 2000);
        } else {
          $scope.messageStatus = "Background Check sent!";
          setTimeout(function () {
            $scope.closeModal();
          }, 2000);
        }
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var backgroundCheckWindow;

  function openBackgroundCheckWindow() {
    // Open in center
    var w = 1000;
    var h = 750;
    var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
    var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
    var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
    var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
    var left = width / 2 - w / 2 + dualScreenLeft;
    var top = height / 2 - h / 2 + dualScreenTop;
    backgroundCheckWindow = window.open('', 'backgroundCheckCheckout', 'top=' + top + ', left=' + left + ', width=' + w + ', height=' + h + ', resizable=yes, location=no');
  }
}]);
'use strict';

angular.module('appController').controller('CandidateConsentRequestModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'CompanyService', 'PositionsService', 'candidates', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, CompanyService, PositionsService, candidates, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  var companyId = SharedData.activeCompany.company._id;
  var templates = CompanyService.getters.templates().gdpr;
  $scope.candidates = candidates;
  $scope.candidate = angular.isArray(candidates) ? false : candidates;

  if (!$scope.candidate) {
    $scope.candidate = candidates.length > 1 ? false : candidates[0];
  }

  $scope.message = {};
  var template_type = 'sourced';

  if ($scope.candidate) {
    var position = PositionsService.local.getPositionById($scope.candidate.position_id); //template_type = $scope.candidate.origin;
  }
  /* else {
     var origins = $scope.candidates.reduce((acc, candidate) => {
         if (acc.indexOf(candidate.origin) === -1) {
             acc.push(candidate.origin);
         }
         return acc;
     }, []);
     if (origins.length === 1) {
         template_type = origins[0];
     }
  }*/


  var findTemplate = function findTemplate(template) {
    return template.type === "gdpr_".concat(template_type);
  };

  var template = templates.find(findTemplate);
  /*template = {
      subject: 'Are you interested?',
      body: "Hey [[candidate_first_name]],\n\nI'd love to be able to consider for you for future job openings at [[company_name]]. Because we care about your privacy, here's a link where you can confirm you're okay with that: [[consent_link]]\n\nThank you!"
  };*/

  var replaceTemplateVars = function replaceTemplateVars(text, data) {
    var parser = /\[\[(.*?)\]\]/g;
    text = text.replace(parser, function (variable, match) {
      return data.hasOwnProperty(match) ? data[match] : variable;
    });
    return text;
  };

  if (template) {
    $scope.message.subject = template.subject;
    $scope.message.body = utils.markdownToHTML(template.body);

    if ($scope.candidate) {
      $scope.message.body = replaceTemplateVars($scope.message.body, {
        candidate_name: $scope.candidate.name,
        candidate_email_address: $scope.candidate.email_address,
        candidate_first_name: $scope.candidate.name.split(' ')[0],
        company_user_first_name: $scope.shared.user,
        company_user: $scope.shared.user.name.split(' ')[0],
        position_link: "https://" + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/p/' + position._id,
        position_title: position.name,
        company_name: $scope.shared.activeCompany.company.name,
        consent_link: "https://" + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/m/' + $scope.candidate.meta_id + "/consent"
      });
    }
  }

  $scope.sendRequest = function (delay) {
    if (!$scope.message.body) {
      return;
    }

    var message = {};
    $scope.messageStatus = "Sending...";
    var body = '';
    body = utils.HTMLtoMarkdown($scope.message.body);
    message.body = body;
    message.subject = $scope.message.subject || null;

    if ($scope.candidate) {
      $scope.appClient.requestConsent(companyId, $scope.candidate.position_id, $scope.candidate._id, message, function () {
        $scope.message.body = '';
        $scope.messageStatus = "Request sent!";
        setTimeout(function () {
          $scope.closeModal();
        }, 2000);
      });
    } else {
      $scope.candidates.forEach(function (candidate) {
        $scope.appClient.requestConsent(companyId, candidate.position_id, candidate._id, message, function () {
          console.log('consent sent');
        });
      });
      $scope.messageStatus = "Request sent!";
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    }
  };

  $scope.$on('modal.closing', function (event, reason, closing) {
    /*var message = 'Are you sure?';
    var prevent = false;
     if ($scope.message.body && utils.HTMLtoMarkdown($scope.message.body).length > 0) {
        message = 'Discard this message?';
        prevent = true;
    }
    if (prevent && !confirm(message)) {
        event.preventDefault();
        return false;
    }*/
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateCopyModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'PositionsService', 'PipelinesService', 'positionId', 'candidate', 'candidates', 'candidateIds', 'utils', '$uibModal', function ($scope, $uibModalInstance, AppClient, SharedData, PositionsService, PipelinesService, positionId, candidate, candidates, candidateIds, utils, $uibModal) {
  console.log('CandidateCopyModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.selectedPosition = {};
  $scope.myPositions = PositionsService.local.getMyPositions();

  var initStageActions = function initStageActions(stage) {
    /*$scope.showStageActions = false;
    if(stage.actions && Object.keys(stage.actions).length > 1) {
        $scope.showStageActions = true;
    } else if(stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
        $scope.showStageActions = true;
    }*/
    var positionStageActions = $scope.position.stage_actions;
    $scope.showStageActions = false;
    var stageAction = false; // check pipeline if has pipeline stage action

    if (stage.actions && Object.keys(stage.actions).length > 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.questionnaire_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } // check if position has stages action


    if (positionStageActions && positionStageActions.hasOwnProperty(stage.id)) {
      if (Object.keys(positionStageActions[stage.id]).length > 0) {
        stageAction = true;
      } else {
        stageAction = false;
      }
    }

    $scope.showStageActions = stageAction;
  };

  var initPipeline = function initPipeline() {
    if (!$scope.position) return;
    $scope.position.pipeline = PipelinesService.local.getPipelineByPosition($scope.position).pipeline; //console.log($scope.position.pipeline);
    // Get the first sourced stage and set as default;

    var appliedStage;

    for (var i in $scope.position.pipeline) {
      var stage = $scope.position.pipeline[i];

      if (stage.type && stage.type.id === "sourced") {
        $scope.stage = stage;
        break;
      }

      if (stage.id === "applied") {
        appliedStage = stage;
      }
    }

    if (!appliedStage) appliedStage = $scope.position.pipeline[0];
    $scope.stage = appliedStage;
    initStageActions($scope.stage);
  };

  $scope.$watch('selectedPosition.position', function () {
    if ($scope.selectedPosition.position) {
      $scope.position = $scope.selectedPosition.position;
    }

    initPipeline();
  });
  $scope.step = "selectPosition";

  $scope.setStage = function () {
    $scope.stage = this.stage;
    initStageActions($scope.stage);
  };

  var targetPipelineId = "default";
  var targetStageId = "applied";
  $scope.pipeline = null;
  $scope.targetPosition = null;
  $scope.targetStage = {
    'name': 'Select a stage'
  };
  $scope.showStageActions = false;
  $scope.actions = {
    enabled: false
  };

  $scope.copyCandidate = function () {
    $scope.copyStatus = "Copying...";
    $scope.appClient.copyCandidateToStage($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, $scope.position._id, $scope.stage.id, $scope.actions.enabled, function (error, candidate) {
      if (error) {
        $scope.copyStatus = "Error. Candidate already exists?";
        return;
      }

      $scope.copyStatus = "Candidate copied";
      PositionsService.updateCandidateCount($scope.position._id, 1);
      setTimeout(function () {
        $scope.closeModal(true);
      }, 500);
    });
  };

  $scope.openCopyCandidateToCompany = function (_candidate) {
    $scope.closeModal();
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/company_copy/index.html',
      controller: 'CopyCompanyCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
  };

  $scope.setPosition = function (position) {
    if (!position) {
      return;
    }

    $scope.targetPosition = position; //$scope.pipeline = $scope.shared.activeCompany.pipelines[targetPipelineId];

    $scope.pipeline = PipelinesService.local.getPipelineByPosition(position);
    $scope.step = "selectStage";
  };
  /*$scope.setStage = function (stage) {
      if(!stage) {
          return;
      }
      $scope.targetStage = stage;
       if (stage.hasOwnProperty('actions') && (Object.keys(stage.actions).length > 0)) {
          $scope.showStageActions = true;
      } else {
          $scope.showStageActions = false;
      }
  };*/


  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateEditModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', '$upload', 'AppClient', 'SharedData', 'candidate', function ($scope, $rootScope, $uibModalInstance, $upload, AppClient, SharedData, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.originalCandidate = candidate;
  $scope.candidate = {
    '_id': candidate._id,
    'name': candidate.name,
    'email_address': candidate.email_address,
    'phone_number': candidate.phone_number,
    'social_profiles': candidate.social_profiles
  };

  if (!$scope.candidate.social_profiles) {
    $scope.candidate.social_profiles = [];
  }

  $scope.linkedInUrl = undefined;
  $scope.githubUrl = undefined;

  for (var i in $scope.candidate.social_profiles) {
    var socialProfile = $scope.candidate.social_profiles[i];

    if (socialProfile.type === "linkedin") {
      $scope.linkedInUrl = socialProfile.url;
    } else if (socialProfile.type === "github") {
      $scope.githubUrl = socialProfile.url;
    }
  }

  var updateSocialProfileUrl = function updateSocialProfileUrl(type, url) {
    var found = false;

    if (url.indexOf("http") !== 0) {
      url = "http://" + url;
    }

    if (!url || url.length === 0) {
      return;
    }

    for (var i in $scope.candidate.social_profiles) {
      var socialProfile = $scope.candidate.social_profiles[i];

      if (socialProfile.type === type) {
        found = true;
        socialProfile.url = url;
      }
    }

    if (!found) {
      $scope.candidate.social_profiles.push({
        'type': type,
        'url': url
      });
    }
  };

  $scope.update = function () {
    $scope.messageStatus = "Updating...";

    if ($scope.linkedInUrl) {
      updateSocialProfileUrl("linkedin", $scope.linkedInUrl);
    }

    if ($scope.githubUrl) {
      updateSocialProfileUrl("github", $scope.githubUrl);
    }

    $scope.appClient.updateCandidate($scope.candidate, $scope.shared.activeCompany.company._id, $scope.originalCandidate.position_id, function (error, result) {
      if (!error) {
        $scope.messageStatus = "Updated.";
        $scope.originalCandidate = result;
        $rootScope.$broadcast("candidateUpdated", result);
        setTimeout(function () {
          $uibModalInstance.close(result);
        }, 2000);
      }
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateMessageActionModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'position', 'candidate', 'candidates', 'candidateIds', 'template', 'subjectTemplate', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, position, candidate, candidates, candidateIds, template, subjectTemplate, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.template = template;
  $scope.subjectTemplate = subjectTemplate;
  $scope.showMessage = false;
  $scope.messageBody = $scope.appClient.processTemplate(template.body, {
    'candidate': $scope.candidate,
    'position': $scope.position,
    'company': $scope.shared.activeCompany.company,
    'sender': $scope.shared.user
  });

  $scope.setTemplate = function (template) {
    $scope.messageBody = $scope.appClient.processTemplate(template.body, {
      'candidate': $scope.candidate,
      'position': $scope.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
    $scope.messageBody = utils.markdownToHTML($scope.messageBody);

    if (!$scope.message.attachments) {
      $scope.message.attachments = [];
    }
  };

  $scope.toggleMessage = function () {
    $scope.showMessage = !$scope.showMessage;
  };

  $scope.sendMessage = function () {
    if (!$scope.messageBody && !$scope.messageAttachmentUrl) {
      return;
    }

    $scope.messageStatus = "Sending...";
    var body = '';
    body = utils.HTMLtoMarkdown($scope.messageBody);
    var message = {};
    message.body = body;
    message.attachments = [$scope.messageAttachmentUrl];
    message.subject = null;

    if ($scope.candidate) {
      $scope.appClient.postMessageToCandidate(message, $scope.shared.activeCompany.company._id, $scope.position._id, $scope.candidate._id, function () {
        $scope.messageBody = '';
        $scope.messageAttachmentUrl = undefined;
        $scope.messageStatus = "Message sent!";
        setTimeout(function () {
          $scope.closeModal();
        }, 2000);
      });
    } else if ($scope.candidates) {
      var onPostMessageToCandidate = function onPostMessageToCandidate() {
        $scope.messageBody = '';
        $scope.messageAttachmentUrl = undefined;
      };

      for (var i in $scope.candidates) {
        var candidate = $scope.candidates[i];
        $scope.subject = $scope.appClient.processTemplate(subjectTemplate.body, {
          'candidate': $scope.candidate,
          'position': $scope.position,
          'company': $scope.shared.activeCompany.company,
          'sender': $scope.shared.user
        });
        $scope.messageBody = $scope.appClient.processTemplate(template.body, {
          'candidate': $scope.candidate,
          'position': $scope.position,
          'company': $scope.shared.activeCompany.company,
          'sender': $scope.shared.user
        });
        body = utils.HTMLtoMarkdown($scope.messageBody);
        message.body = body;
        $scope.appClient.postMessageToCandidate(message, $scope.shared.activeCompany.company._id, $scope.position._id, candidate._id, onPostMessageToCandidate);
      }

      $scope.messageStatus = "Message sent!";
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateMessageModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', 'utils', 'DELAY_SEND_TIMES', '$upload', 'ModalService', 'CompanyService', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, utils, DELAY_SEND_TIMES, $upload, ModalService, CompanyService) {
  console.log('init CandidateMessageModalInstanceCtrl');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.message = {};
  $scope.status = {
    isopen: false
  };
  $scope.showComposer = {
    type: 'email-composer'
  };
  $scope.isModal = true;
  $scope.messageDelay = [];
  DELAY_SEND_TIMES.forEach(function (time) {
    if (time.delay !== 259200000) {
      $scope.messageDelay.push({
        text: "Send in ".concat(time.text),
        delay: time.delay
      });
    }
  });
  $scope.subject = {
    body: null
  };

  if ($scope.candidate) {
    $scope.subject = $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
      'candidate': $scope.candidate,
      'position': $scope.candidate.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
  }

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  $scope.editorIds = {
    email: "email_".concat(new Date().getTime()),
    sms: "sms_".concat(new Date().getTime())
  };
}]);
'use strict';

angular.module('appController').controller('MoveCandidateModalInstanceCtrl', ['$rootScope', '$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'PositionsService', 'PipelinesService', 'positionId', 'candidate', 'candidates', 'candidateIds', 'utils', '$uibModal', function ($rootScope, $scope, $uibModalInstance, AppClient, SharedData, PositionsService, PipelinesService, positionId, candidate, candidates, candidateIds, utils, $uibModal) {
  console.log('MoveCandidateModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.selectedPosition = {};
  $scope.myPositions = PositionsService.local.getMyPositions();

  if (positionId) {
    $scope.myPositions = $scope.myPositions.filter(function (position) {
      return position._id !== positionId;
    });
  }
  /*$scope.filterCurrentPositionForBulk = function(position) {
       var idx = candidates.findIndex(candidate => candidate.position._id === position._id)
      if (idx === -1) {
          return true
      }
      return false
   }*/


  var initStageActions = function initStageActions(stage) {
    /*$scope.showStageActions = false;
    if(stage.actions && Object.keys(stage.actions).length > 1) {
        $scope.showStageActions = true;
    } else if(stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
        $scope.showStageActions = true;
    }*/
    var positionStageActions = $scope.position.stage_actions;
    $scope.showStageActions = false;
    var stageAction = false; // check pipeline if has pipeline stage action

    if (stage.actions && Object.keys(stage.actions).length > 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.questionnaire_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } // check if position has stages action


    if (positionStageActions && positionStageActions.hasOwnProperty(stage.id)) {
      if (Object.keys(positionStageActions[stage.id]).length > 0) {
        stageAction = true;
      } else {
        stageAction = false;
      }
    }

    $scope.showStageActions = stageAction;
  };

  var initPipeline = function initPipeline() {
    if (!$scope.position) return;
    $scope.position.pipeline = PipelinesService.local.getPipelineByPosition($scope.position).pipeline; //console.log($scope.position.pipeline);
    // Get the first sourced stage and set as default;

    var appliedStage;

    for (var i in $scope.position.pipeline) {
      var stage = $scope.position.pipeline[i];

      if (stage.type && stage.type.id === "sourced") {
        $scope.stage = stage;
        break;
      }

      if (stage.id === "applied") {
        appliedStage = stage;
      }
    }

    if (!appliedStage) appliedStage = $scope.position.pipeline[0];
    $scope.stage = appliedStage;
    initStageActions($scope.stage);
  };

  $scope.$watch('selectedPosition.position', function () {
    if ($scope.selectedPosition.position) {
      $scope.position = $scope.selectedPosition.position;
    }

    initPipeline();
  });
  $scope.step = "selectPosition";

  $scope.setStage = function () {
    $scope.stage = this.stage;
    initStageActions($scope.stage);
  };

  var targetPipelineId = "default";
  var targetStageId = "applied";
  $scope.pipeline = null;
  $scope.targetPosition = null;
  $scope.targetStage = {
    'name': 'Select a stage'
  };
  $scope.showStageActions = false;
  $scope.actions = {
    enabled: false
  };

  $scope.moveCandidate = function () {
    $scope.copyStatus = "Moving...";
    $scope.appClient.moveCandidateToStage($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, $scope.position._id, $scope.stage.id, $scope.actions.enabled, function (error, candidate) {
      if (error) {
        $scope.copyStatus = "Candidate already exists?";
        return;
      }

      $rootScope.$broadcast('candidateMovedLocal', candidate);
      $scope.copyStatus = "Candidate moved";
      PositionsService.updateCandidateCount($scope.position._id, 1);
      setTimeout(function () {
        $uibModalInstance.close(candidate);
      }, 500);
    });
  };

  $scope.moveCandidates = function () {
    $scope.copyStatus = 'Moving...';
    var candidateIDs = candidates.map(function (c) {
      return c._id;
    }); // appClient.bulkMoveCandidates (companyId, candidateIds, targetPositionId, targetStageId, actionsEnabled, callback)

    $scope.appClient.bulkMoveCandidates($scope.shared.activeCompany.company._id, candidateIDs, $scope.selectedPosition.position._id, $scope.stage.id, $scope.actions.enabled, function (error, result) {
      setTimeout(function () {
        $uibModalInstance.close();
      }, 500);
    });
  };

  $scope.setPosition = function (position) {
    if (!position) {
      return;
    }

    $scope.targetPosition = position; //$scope.pipeline = $scope.shared.activeCompany.pipelines[targetPipelineId];

    $scope.pipeline = PipelinesService.local.getPipelineByPosition(position);
    $scope.step = "selectStage";
  };
  /*$scope.setStage = function (stage) {
      if(!stage) {
          return;
      }
      $scope.targetStage = stage;
       if (stage.hasOwnProperty('actions') && (Object.keys(stage.actions).length > 0)) {
          $scope.showStageActions = true;
      } else {
          $scope.showStageActions = false;
      }
  };*/


  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateMoveModalInstanceCtrl', ['$scope', '$uibModalInstance', 'PositionsService', 'CandidatesService', 'PipelinesService', 'positionId', 'candidate', 'candidates', 'candidateIds', function ($scope, $uibModalInstance, PositionsService, CandidatesService, PipelinesService, positionId, candidate, candidates, candidateIds) {
  //$scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.selectedStage = {}; //var pipeline_id = $scope.shared.activeCompany.positions[$scope.positionId].pipeline_id || 'default';
  //$scope.pipeline = $scope.shared.activeCompany.pipelines[pipeline_id].pipeline;

  var position = PositionsService.local.getPositionById(positionId);
  $scope.pipeline = PipelinesService.local.getPipelineByPosition(position).pipeline;

  $scope.move = function () {
    if (!$scope.selectedStage.stage || !$scope.selectedStage.stage.id) {
      return;
    }

    var i;
    $scope.messageStatus = "Updating...";

    if (candidate) {} else if (candidates) {
      CandidatesService.remote.updateCandidatesGroupStatus(candidates, position, $scope.selectedStage.stage, function () {
        $scope.messageStatus = "Updated!";
        setTimeout(function () {
          $scope.closeModal($scope.selectedStage.stage);
        }, 1000);
      });
      /*for(i in candidates) {
          var _candidate = candidates[i];
          $scope.appClient.setCandidateStatus($scope.shared.activeCompany.company._id, _candidate.position._id, _candidate._id, $scope.selectedStage.stage.id, function (error, result)  {
              if(!error) { }
          });
      }*/
    } else {
      console.log('need to update here brooooooo');

      for (i in candidateIds) {
        var candidateId = candidateIds[i];
        /*$scope.appClient.setCandidateStatus($scope.shared.activeCompany.company._id, $scope.positionId, candidateId, $scope.selectedStage.stage.id, function (error, result)  {
            if(!error) { }
        });*/
      }

      $scope.messageStatus = "Updated!";
      setTimeout(function () {
        $scope.closeModal($scope.selectedStage.stage);
      }, 2000);
    }
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]);
'use strict';

angular.module('appController').controller('CandidateNoteModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.message = {};
  $scope.team_members = angular.copy(SharedData.activeCompany.members);
  $scope.team_members.push({
    'name': 'Hiring Team',
    'username': 'team',
    'initial': 't',
    'hex_color': 'color4'
  });
  $scope.team_members.push({
    'name': 'All Members',
    'username': 'all',
    'initial': 'a',
    'hex_color': 'color3'
  });

  $scope.postNote = function () {
    if (!$scope.message.body) {
      return;
    }

    var body = '',
        i,
        onPostNote = function onPostNote() {
      $scope.message.body = '';
      $scope.messageAttachmentUrl = undefined;
    };

    body = utils.HTMLtoMarkdown($scope.message.body);
    $scope.messageStatus = "Posting...";

    if ($scope.candidate) {
      $scope.appClient.postNote(body, $scope.messageAttachmentUrl, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, function () {
        $scope.message.body = '';
        $scope.messageAttachmentUrl = undefined;
        $scope.messageStatus = "Posted!";
        setTimeout(function () {
          $scope.closeModal();
        }, 1500);
      });
    } else if ($scope.candidates) {
      for (i in $scope.candidates) {
        var candidate = $scope.candidates[i];
        $scope.appClient.postNote(body, $scope.messageAttachmentUrl, $scope.shared.activeCompany.company._id, candidate.position._id, candidate._id, onPostNote);
      }

      $scope.messageStatus = "Posted!";
      setTimeout(function () {
        $scope.closeModal();
      }, 1500);
    } else {
      for (i in $scope.candidateIds) {
        var candidateId = $scope.candidateIds[i];
        $scope.appClient.postNote(body, $scope.messageAttachmentUrl, $scope.shared.activeCompany.company._id, $scope.positionId, candidateId, onPostNote);
      }

      $scope.messageStatus = "Posted!";
      setTimeout(function () {
        $scope.closeModal();
      }, 1500);
    }
  };

  $scope.$on('modal.closing', function (event, reason, closing) {
    var message = 'Are you sure?';
    var prevent = false;

    if ($scope.message.body && utils.HTMLtoMarkdown($scope.message.body).length > 0) {
      message = 'Discard this note?';
      prevent = true;
    }

    if (prevent && !confirm(message)) {
      event.preventDefault();
      return false;
    }
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateUpdateNotesModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'notes', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, notes, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.notes = notes;

  if (!$scope.notes) {
    $scope.notes = {};
  }

  $scope.updateNotes = function () {
    if (!$scope.notes.body) {
      return;
    }

    var body = '',
        i,
        onUpdateNotes = function onUpdateNotes() {};

    body = utils.HTMLtoMarkdown($scope.notes.body);
    $scope.messageStatus = "Saving...";

    if ($scope.candidate) {
      $scope.appClient.updateCandidateNotes($scope.notes, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate.meta_id, function () {
        setTimeout(function () {
          $scope.messageStatus = "";
          $scope.closeModal();
        }, 500);
      });
    }
  };

  $scope.saveAndClose = function () {
    $scope.updateNotes();
    setTimeout(function () {
      $scope.closeModal();
    }, 500);
  };

  $scope.$on('modal.closing', function (event, reason, closing) {});

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateOfferModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', '$upload', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, $upload, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.message = {};

  if ($scope.candidate) {
    $scope.subject = $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
      'candidate': $scope.candidate,
      'position': $scope.candidate.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
  }

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.removeFileAttachment = function (idx) {
    $scope.message.attachments.splice(idx, 1);
  };

  $scope.message.attachments = [];

  $scope.uploadAttachment = function ($files) {
    var attachment = {
      'status': 'uploading'
    };
    $scope.message.attachments.push(attachment);
    upload($files, function (error, data) {
      $scope.message.attachment.uploading = false;

      if (data) {
        attachment.status = 'attached';
        attachment.file_name = data.file_name;
        attachment.url = data.url;
        attachment.content_type = data.content_type;
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.setTemplate = function ($index) {
    $scope.subject = $scope.appClient.processTemplate("Signature request from [[company_user]] at [[company_name]]", {
      'candidate': $scope.candidate,
      'position': $scope.candidate.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
    $scope.message.body = $scope.appClient.processTemplate($scope.shared.activeCompany.templates[$index].body, {
      'candidate': $scope.candidate,
      'position': $scope.candidate.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
    $scope.message.body = utils.markdownToHTML($scope.message.body);
    $scope.message.attachments = $scope.shared.activeCompany.templates[$index].attachments;

    if (!$scope.message.attachments) {
      $scope.message.attachments = [];
    }
  };

  $scope.sendOffer = function () {
    if (!$scope.message.body) {
      return;
    }

    var i, onPostMessageToCandidate;
    $scope.messageStatus = "";
    var body = '';
    body = utils.HTMLtoMarkdown($scope.message.body);

    if ($scope.candidate) {
      $scope.appClient.postSignatureRequestToCandidate(body, $scope.subject, $scope.message.attachments, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, function (error, result) {
        HelloSign.init("abae36e43cb89fe9d96240093719b68d");
        HelloSign.open({
          url: result.unclaimed_draft.claim_url,
          allowCancel: true,
          uxVersion: 2,
          messageListener: function messageListener(eventData) {
            if (eventData && eventData.event === "signature_request_sent") {
              $scope.appClient.recordSignatureRequestToCandidate(body, $scope.subject, $scope.message.attachments, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, function (error, result) {});
              $scope.messageStatus = "Document Sent!";
              $scope.message.body = '';
              $scope.message.attachments = [];
              setTimeout(function () {
                $scope.closeModal();
              }, 2000);
            }
          }
        });
      });
    }
  };

  $scope.$on('modal.closing', function (event, reason, closing) {
    var message = 'Are you sure?';
    var prevent = false;

    if ($scope.message.body && utils.HTMLtoMarkdown($scope.message.body).length > 0) {
      message = 'Discard this offer?';
      prevent = true;
    }

    if (prevent && !confirm(message)) {
      event.preventDefault();
      return false;
    }
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateQuestionnaireModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', '$rootScope', 'DELAY_SEND_TIMES', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, $rootScope, DELAY_SEND_TIMES) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.messageBody = "";
  $scope.formState = {
    submitted: false
  };
  $scope.status = {
    isopen: false
  };
  $scope.messageDelay = [];
  DELAY_SEND_TIMES.forEach(function (time) {
    if (time.delay !== 259200000) {
      $scope.messageDelay.push({
        text: "Send in ".concat(time.text),
        delay: time.delay
      });
    }
  });
  $scope.selectedQuestionnaire = {};

  $scope.processMessageTemplate = function ($item, $model) {
    $rootScope.$broadcast('insertTemplateVariable', $item.value);
  };

  $scope.postQuestionnaireToCandidate = function (delay) {
    var i;
    $scope.messageStatus = "Sending...";
    $scope.formState.submitted = true;
    $scope.status.isopen = false;

    if (delay) {
      $scope.selectedQuestionnaire.questionnaire.delay = delay;
    }

    if ($scope.candidate) {
      $scope.appClient.postQuestionnaireToCandidate($scope.selectedQuestionnaire.questionnaire, $scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidate._id, function () {
        $scope.messageStatus = "Questionnaire sent!";
        setTimeout(function () {
          $scope.closeModal();
        }, 2000);
      });
    } else if ($scope.candidates) {
      for (i in $scope.candidates) {
        var candidate = $scope.candidates[i];
        $scope.appClient.postQuestionnaireToCandidate($scope.selectedQuestionnaire.questionnaire, $scope.shared.activeCompany.company._id, candidate.position._id, candidate._id, function () {});
      }

      $scope.messageStatus = "Questionnaire sent!";
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    } else {
      for (i in $scope.candidateIds) {
        var candidateId = $scope.candidateIds[i];
        $scope.appClient.postQuestionnaireToCandidate($scope.selectedQuestionnaire.questionnaire, $scope.shared.activeCompany.company._id, $scope.positionId, candidateId, function () {});
      }

      $scope.messageStatus = "Questionnaire sent!";
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateReminderModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'candidate', function ($scope, $uibModalInstance, AppClient, SharedData, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = candidate;
  $scope.reminder = {};

  if (candidate.reminder) {
    $scope.reminder = candidate.reminder;
  }

  $scope.setReminderDate = function (when) {
    var day = 86400 * 1000;

    if (when === "2d") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 2);
    } else if (when === "4d") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 4);
    } else if (when === "1w") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 7);
    } else if (when === "2w") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 14);
    } else if (when === "1m") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 30);
    } else if (when === "2m") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 60);
    } else if (when === "6m") {
      $scope.reminder.date = new Date(new Date().getTime() + day * 120);
    }
  };

  $scope.cancelReminder = function () {
    $scope.appClient.cancelReminder($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, function (error, result) {
      delete $scope.candidate.reminder;
      $scope.closeModal();
    });
  };

  $scope.setReminder = function () {
    if (!$scope.reminder.date) {
      $scope.errorMessage = "You must specify a future date";
      return;
    }

    var date = $scope.reminder.date;
    var month = date.getMonth() + 1;

    if (month < 10) {
      month = "0" + month;
    }

    var dom = date.getDate();

    if (dom < 10) {
      dom = "0" + dom;
    }

    var str = date.getFullYear() + '-' + month + '-' + dom + 'T08:00:00';
    var m2 = moment(str);
    var d = new Date(Date.parse(m2.format())); //this will translate automatically to users timezone because clientside

    var st = m2.format();
    var reminder = {
      'date': d,
      'message': $scope.reminder.message
    };
    $scope.appClient.setReminder(reminder, $scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, function (error, result) {
      if (result) {
        $scope.reminder = reminder;
        $scope.candidate.reminder = reminder;
      }

      $scope.closeModal();
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateScorecardModalInstanceCtrl', ['$scope', '$rootScope', '$uibModal', '$uibModalInstance', '$upload', '$location', 'AppClient', 'SharedData', 'scorecard', 'candidate', 'dialog', function ($scope, $rootScope, $uibModal, $uibModalInstance, $upload, $location, AppClient, SharedData, scorecard, candidate, dialog) {
  console.log('CandidateScorecardModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  var allow_close = false;
  var scorecard_copy = angular.copy(scorecard);
  $scope.scorecard = angular.copy(scorecard);
  $scope.candidate = candidate;

  $scope.save = function () {
    $scope.messageStatus = "Updating scorecard...";
    allow_close = true;
    $scope.appClient.addCandidateScorecard($scope.scorecard, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, result) {
      if (!error) {
        setTimeout(function () {
          $scope.closeModal();
        }, 500);
      }
    });
  };

  $scope.$on('modal.closing', function (event, reason, closing) {
    if (allow_close) return;

    if (!angular.equals($scope.scorecard, scorecard_copy)) {
      event.preventDefault();
      dialog.confirm({
        title: "Unsaved Changes",
        message: "Are you sure you wish to close?"
      }, function (result) {
        if (result === true) {
          allow_close = true;
          $uibModalInstance.close();
        }
      });
    }
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateAddSectionItemModalInstanceCtrl', ['$scope', '$uibModalInstance', '$http', 'AppClient', 'SharedData', 'candidate', 'section', 'item', 'index', function ($scope, $uibModalInstance, $http, AppClient, SharedData, candidate, section, item, index) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = angular.copy(candidate);
  $scope.section = section;
  var editing = false;
  $scope.editing = editing;
  $scope.item = null;
  $scope.itemCopy = {};
  $scope.monthsExpand = {
    1: 'Jan',
    2: 'Feb',
    3: 'Mar',
    4: 'Apr',
    5: 'May',
    6: 'Jun',
    7: 'Jul',
    8: 'Aug',
    9: 'Sep',
    10: 'Oct',
    11: 'Nov',
    12: 'Dec'
  };

  if (item) {
    $scope.item = item;
    $scope.itemCopy = angular.copy(item);
    ['start_date', 'end_date'].forEach(function (key) {
      if ($scope.itemCopy.hasOwnProperty(key)) {
        Object.keys($scope.itemCopy[key]).forEach(function (part) {
          $scope.itemCopy[key][part] = {
            id: $scope.itemCopy[key][part],
            name: part === 'month' ? $scope.monthsExpand[$scope.itemCopy[key][part]] : $scope.itemCopy[key][part] + ''
          };
        });
      }
    });
    editing = true;
    $scope.editing = editing;
  }

  $scope.addSectionItem = function () {
    $scope.messageStatus = "Updating...";
    var temp = angular.copy($scope.itemCopy); // format dates properly for saving

    ['start_date', 'end_date'].forEach(function (date) {
      if (temp.hasOwnProperty(date)) {
        var parts = Object.keys(temp[date]);
        parts.forEach(function (part) {
          temp[date][part] = temp[date][part].id;
        });
      }
    });

    if (section === 'work_history' || section === 'education') {
      if (editing) {
        $scope.item = temp;
        $scope.candidate[$scope.section][index] = temp;
      } else {
        $scope.candidate[$scope.section].push(temp);
      }
    }

    $scope.appClient.updateCandidate($scope.candidate, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, function (error, result) {
      if (!error) {
        $scope.messageStatus = "Updated.";
        setTimeout(function () {
          $uibModalInstance.close(result);
        }, 2000);
      }
    });
  };

  var initializeYears = function initializeYears() {
    $scope.years = [];
    var start = new Date().getFullYear() + 4;

    for (var i = start; i > start - 100; i--) {
      $scope.years.push({
        'id': i,
        'name': i + ''
      });
    }
  };

  var initializeMonths = function initializeMonths() {
    $http.get('/data/months.json').success(function (data) {
      $scope.months = data;
    }).error(function (error) {
      console.log('Error fetching months types JSON!: ' + error);
    });
  };

  var initialize = function initialize() {
    initializeYears();
    initializeMonths();
  };

  initialize();

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateShareModalInstanceCtrl', ['$scope', '$rootScope', '$uibModal', '$uibModalInstance', '$upload', '$location', 'AppClient', 'SharedData', 'candidate', function ($scope, $rootScope, $uibModal, $uibModalInstance, $upload, $location, AppClient, SharedData, candidate) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = candidate;

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateSMSModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'positionId', 'candidate', 'candidates', 'candidateIds', 'utils', 'DELAY_SEND_TIMES', '$upload', 'ModalService', 'CompanyService', function ($scope, $uibModalInstance, AppClient, SharedData, positionId, candidate, candidates, candidateIds, utils, DELAY_SEND_TIMES, $upload, ModalService, CompanyService) {
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.candidates = candidates;
  $scope.candidateIds = candidateIds;
  $scope.position = $scope.shared.activeCompany.positions[$scope.positionId]; //$scope.message = {};

  $scope.status = {
    isopen: false
  };
  $scope.showComposer = {
    type: 'sms-composer'
  };
  $scope.isModal = true;
  $scope.showWarning = false;
  $scope.messageDelay = [];
  DELAY_SEND_TIMES.forEach(function (time) {
    if (time.delay !== 259200000) {
      $scope.messageDelay.push({
        text: "Send in ".concat(time.text),
        delay: time.delay
      });
    }
  });

  $scope.editTemplates = function () {
    ModalService.accountSettings('templates').then(function () {// do nothing
    });
  };

  $scope.appClient.getLimitsByType($scope.shared.activeCompany.company._id, 'sms', function (error, result) {
    //console.log(result);
    if ($scope.shared.activeCompany.company.limits) {
      $scope.shared.activeCompany.company.limits = {
        sms: result
      };
    }

    if (result.limit === 10 && $scope.candidates && result.current_remaining < $scope.candidates.length) {
      $scope.showWarning = true;
    }
  });
  $scope.subject = {
    body: ''
  };

  if ($scope.candidate) {
    $scope.subject = $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
      'candidate': $scope.candidate,
      'position': $scope.candidate.position,
      'company': $scope.shared.activeCompany.company,
      'sender': $scope.shared.user
    });
  }

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').filter('filterSourceSearch', function () {
  return function (sources, source, search) {
    var name;

    if (search) {
      name = search.name.toLowerCase();
    }

    return sources.filter(function (s) {
      var keep = true;
      if (source && s.name === source.name) keep = false;

      if (keep && name) {
        keep = s.name.toLowerCase().indexOf(name) !== -1;
      }

      return keep;
    });
  };
});
angular.module('appController').controller('CandidateEditSourceModalInstanceCtrl', ['$scope', '$uibModalInstance', 'CompanyService', 'source', function ($scope, $uibModalInstance, CompanyService, source) {
  $scope.sources = CompanyService.getters.sources();
  $scope.source = source; //$scope.type = objectType;
  //$scope.originalTags = objectTags || [];
  //$scope.objectTags = angular.copy(objectTags) || [];
  //$scope.companyTags = companyTags;
  //$scope.bulk = bulk || null;

  $scope.selected = 0;

  $scope.save = function () {
    $uibModalInstance.close($scope.source);
  };

  $scope.focusInput = function () {
    document.querySelector('#source').focus();
  }; // Remove tag from tags array


  $scope.remove = function () {
    //var tag_id = this.tag.id;
    $scope.source = null;
  }; // Select tag from tags with mouse


  $scope.addSource = function (index) {
    index = index || $scope.selected; //$scope.objectTags.push($scope.filteredTags[index]);

    $scope.source = $scope.filteredSources[index];
    $scope.selected = 0;
    clearSearch();
    $scope.focusInput();
  };

  $scope.createSource = function () {
    var source = {
      name: $scope.search.name
    };
    CompanyService.actions.addSource(source).then(function (source) {
      $scope.source = source;
      clearSearch();
    }); //$scope.sources.push(new_source);
  };

  $scope.filterTagSearch = function () {};

  var clearSearch = function clearSearch() {
    if ($scope.search) $scope.search.name = '';
  }; // Navigate user list with arrow keys and enter


  $scope.navigate = function (e) {
    //console.log(e.keyCode);
    var direction = null,
        index = $scope.selected,
        length = $scope.filteredSources.length - 1;

    if (e.keyCode == 27) {
      // escape
      clearSearch();
      $scope.selected = 0;
    }

    if (e.keyCode == 8) {
      // delete
      if (!$scope.search || $scope.search.name.length === 0) {//$scope.objectTags.pop();
      }
    }

    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault();

      if ($scope.filteredSources.length !== 0) {
        $scope.addSource();
      } else {
        $scope.createSource();
      }
    }

    if (e.keyCode == 38) {
      direction = -1;
    } // up


    if (e.keyCode == 40) {
      direction = 1;
    } // down


    if (direction) {
      e.stopPropagation();
      index += direction;
      if (index < 0) index = length;
      if (index > length) index = 0;
      $scope.selected = index;
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close(null);
  };
}]);
'use strict';

angular.module('appController').controller('CandidateVideoInterviewArchiveModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', '$sce', 'archive', function ($scope, $uibModalInstance, AppClient, SharedData, $sce, archive) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.archive = archive;
  $scope.trustAsResourceUrl = $sce.trustAsResourceUrl;

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]);
'use strict';

angular.module('appController').controller('CalendarFreeBusySchedulerModalInstanceCtrl', ['$scope', '$uibModal', '$uibModalInstance', 'uiCalendarConfig', 'AppClient', 'SharedData', 'pending', 'participants', 'schedule', 'freebusy', '$timeout', function ($scope, $uibModal, $uibModalInstance, uiCalendarConfig, AppClient, SharedData, pending, participants, schedule, freebusy, $timeout) {
  $scope.shared = SharedData;
  $scope.bzEvents = [];
  $scope.eventSources = []; //var calendarHeight = document.querySelector('.bzy-content.contained').clientHeight - 70;

  var current_date = moment(new Date()).startOf('day');
  var groupedResults = schedule.filter(function (event) {
    return moment(event.start_time).isAfter(moment().format('YYYY-MM-DD'));
  }); //console.log('Filtered: ', groupedResults);

  groupedResults.map(function (event) {
    return event.date = moment(event.start_time).format('YYYY-MM-DD');
  });
  $scope.schedule = _.groupBy(groupedResults, function (event) {
    return event.date;
  }); //console.log($scope.schedule);

  for (var i in schedule) {
    var result = schedule[i];

    if (!result.candidate) {
      continue;
    }

    var event = {
      'start': new Date(result.start_time),
      'end': new Date(result.end_time),
      'title': result.candidate ? result.candidate.name : result._id,
      'data': result,
      'className': result.candidate && result.attendee_ids && result.attendee_ids.indexOf($scope.shared.user._id) > -1 ? "assigned" : ""
    };
    $scope.bzEvents.push(event);
  }

  $scope.eventSources[0] = angular.copy($scope.bzEvents);
  $scope.participants = [];
  $scope.notShared = [];
  $scope.freebusyEvents = [];
  var idx = 1;
  Object.keys(freebusy, i).forEach(function (email) {
    var user = participants.find(function (participant) {
      return participant.email_address === email;
    }) || participants.find(function (participant) {
      return participant.google_calendar === email;
    }) || participants.find(function (participant) {
      return participant.outlook_calendar === email;
    }) || {
      name: 'Not Found'
    };
    user.freebusyColor = "participant-".concat(idx);

    if (freebusy[email].hasOwnProperty('errors')) {
      $scope.notShared.push(user);
    } else {
      $scope.participants.push(user);
      freebusy[email].busy.forEach(function (event) {
        $scope.freebusyEvents.push({
          start: new Date(event.start),
          end: new Date(event.end),
          title: event.title || 'busy',
          className: "participant-".concat(idx)
        });
      });
    }

    idx++;
  });
  $scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
    return !$scope.bzEvents.find(function (bzEvent) {
      var sameStart = event.start.toJSON() === bzEvent.start.toJSON(),
          sameEnd = event.end.toJSON() === bzEvent.end.toJSON();
      return sameStart && sameEnd;
    });
  });
  $scope.eventSources[1] = angular.copy($scope.freebusyEvents);

  if (pending.length > 0) {
    $scope.eventSources[2] = pending;
  }

  $timeout(function () {
    // set calendar content height after modal height is set
    var contentHeight = document.querySelector('.calendar-free-busy').clientHeight - 130;
    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'contentHeight', contentHeight);
  }, 0);
  $scope.uiConfig = {
    'calendar': {
      timezone: 'local',
      eventClick: $scope.eventClick,
      header: {
        left: 'today next',
        center: 'title',
        right: 'agenda6Day agendaDay'
      },
      defaultView: 'agenda6Day',
      views: {
        agenda6Day: {
          type: 'agenda',
          duration: {
            days: 5
          },
          buttonText: '5 Day View'
        }
      },
      scrollTime: '08:00:00',
      defaultDate: moment().format('YYYY-MM-DD'),
      selectable: true,
      selectConstraint: {
        start: moment().format('YYYY-MM-DD'),
        end: '2100-01-01'
      },
      select: function select(start, end) {
        var eventData = {
          className: 'pending',
          start: start,
          end: end
        };
        $uibModalInstance.close(eventData);
      }
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('InterviewDetailModalInstanceCtrl', ['$scope', '$rootScope', '$uibModal', '$uibModalInstance', '$upload', '$location', 'AppClient', 'SharedData', 'interview', 'position', 'ModalService', function ($scope, $rootScope, $uibModal, $uibModalInstance, $upload, $location, AppClient, SharedData, interview, position, ModalService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.interview = interview;
  $scope.position = position;

  if ($scope.interview.video_session_id) {
    $scope.interview.has_video = true;
  }

  if ($scope.interview.attendees.findIndex(function (a) {
    return a._id === $scope.interview.candidate_id;
  }) === -1) {
    $scope.interview.attendees.unshift($scope.interview.candidate);
  }

  var scheduleInterview = function scheduleInterview(interview) {
    if (interview.type === 'panel') {
      $scope.appClient.getPanelInterview(interview.panel_interview_id, $scope.shared.activeCompany.company._id, interview.position_id, interview.candidate._id).then(function (panel) {
        ModalService.openPanelInterview(interview.position_id, interview.candidate, panel).then(function (result) {});
      });
    } else {
      ModalService.openScheduleInterview(interview.position_id, interview.candidate, interview, $scope).then(function (result) {// do nothing
      });
    }
  };

  $scope.cancelInterview = function (interview) {
    if (!confirm("Are you sure you want to cancel this?")) {
      return;
    }

    interview.method = "cancel";
    $scope.appClient.sendCancelInterview(interview, $scope.shared.activeCompany.company._id, $scope.position._id, $scope.interview.candidate._id, function (error, result) {
      $uibModalInstance.close({
        'action': 'cancelled'
      });
    });
  };

  $scope.openScheduleInterview = function (interview) {
    //console.log('here')
    $scope.closeModal();
    scheduleInterview(interview);
  };

  $scope.gotoCandidate = function () {
    $scope.closeModal();
    $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + $scope.interview.position_id + '/candidates/' + $scope.interview.candidate._id + '/experience');
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
angular.module('appController').controller('InterviewMultiDetailModalInstanceCtrl', ['$scope', '$uibModal', '$uibModalInstance', '$location', 'AppClient', 'SharedData', 'panel', 'position', 'ModalService', function ($scope, $uibModal, $uibModalInstance, $location, AppClient, SharedData, panel, position, ModalService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.panel = panel; //console.log($scope.panel);

  $scope.position = position;

  var scheduleInterview = function scheduleInterview(interview) {
    console.log(interview);

    if (interview.panel_interview_id) {} else {
      ModalService.openPanelScheduleInterview(interview.position_id, interview.candidate, interview, $scope).then(function (result) {// do nothing
      });
    }
  };

  $scope.cancelInterview = function (interview) {
    if (!confirm("Are you sure you want to cancel this?")) {
      return;
    }

    interview.method = "cancel";
    $scope.appClient.sendCancelInterview(interview, $scope.shared.activeCompany.company._id, $scope.position._id, $scope.interview.candidate._id, function (error, result) {
      $uibModalInstance.close({
        'action': 'cancelled'
      });
    });
  };

  $scope.openScheduleInterview = function (interview) {
    //console.log('here')
    $scope.closeModal();
    scheduleInterview(interview);
  };

  $scope.gotoCandidate = function () {
    $scope.closeModal();
    $location.url("/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/p/" + $scope.interview.position_id + '/candidates/' + $scope.interview.candidate._id + '/experience');
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').directive('isBeforeNow', function () {
  return {
    require: 'ngModel',
    link: function link(scope, elem, attrs, ctrl) {
      var validate = function validate(time, base) {
        //console.log(`validate ${time}`);
        if (time) {
          var baseDate = moment(base);
          var start = time.id.split(':');
          var start_time = baseDate.clone().add(start[0], 'h');
          start_time.add(start[1], 'minutes');
          var invalidtime = start_time.isAfter(moment()); //console.log(invalidtime);

          ctrl.$setValidity('invalidtime', invalidtime); //console.log(ctrl)
        }
      };

      ctrl.$parsers.unshift(function (value) {
        validate(ctrl.$viewValue, scope.$eval(attrs.isBeforeNow));
        return value;
      });
      scope.$watch('$select.ngModel.$modelValue', function () {
        //console.log('ngModel changed');
        validate(ctrl.$viewValue, scope.$eval(attrs.isBeforeNow));
      });
      scope.$watch(attrs.isBeforeNow, function () {
        //console.log('base date changed');
        validate(ctrl.$viewValue, scope.$eval(attrs.isBeforeNow));
      });
    }
  };
}).controller('CandidatePanelInterviewModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', '$uibModal', '$http', 'uiCalendarConfig', 'AppClient', 'SharedData', 'positionId', 'candidate', 'panel', 'schedule', 'dialog', 'ModalService', 'FeaturesService', '$timeout', '$cookieStore', 'utils', 'browser', function ($scope, $rootScope, $uibModalInstance, $uibModal, $http, uiCalendarConfig, AppClient, SharedData, positionId, candidate, panel, schedule, dialog, ModalService, FeaturesService, $timeout, $cookieStore, utils, browser) {
  console.log('init CandidatePanelInterviewModalInstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
  $scope.candidate = candidate;
  $scope.schedule = schedule; //console.log(schedule)
  // coming from candidate card with limited data

  if (!$scope.candidate.full_name) {
    $scope.candidate.full_name = {
      first: $scope.candidate.name
    };
  } //$scope.schedule = schedule;


  $scope.user = $scope.shared.user;
  $scope.interview_guides = SharedData.activeCompany.interview_guides;
  $scope.members = angular.copy(SharedData.activeCompany.members);
  $scope.today = new Date();
  $scope.multiple = false;
  $scope.step = 'interviews';
  $scope.invite = {
    'invitees': [],
    'email_invitees': []
  };
  var title = "".concat($scope.candidate.name, " Meeting (").concat($scope.position.name, ")");

  if ($scope.position.org_type === "pool") {
    title = "".concat($scope.candidate.name, " Meeting");
  }

  $scope.submitButtonText = 'Send Invite';
  $scope.newParticipant = {};
  var BLANK_TIME = {
    startTime: null,
    duration: null,
    participants: [],
    title: title,
    description: '',
    location: null,
    interview_guide: null,
    has_video: false,
    record_video: false,
    request_scorecards: false
  };
  $scope.redactorConfig = {
    air: true,
    buttons: ['bold', 'underline', 'lists', 'link'],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: 350,
    maxHeight: 350
  };
  $scope.template = {
    subject: 'Meeting: ' + $scope.position.name,
    body: '',
    attachments: []
  };

  var formatDuration = function formatDuration(duration) {
    var format = duration + ' min';

    if (duration == 60) {
      format = '1 hr';
    } else if (duration > 60) {
      format = duration / 60 + ' hrs';
    }

    return format;
  };

  var setTimezoneStorage = function setTimezoneStorage(timezone) {
    var timezones = JSON.parse(window.localStorage.getItem('recentTimezones'));

    if (timezones && timezones.findIndex(function (_tz) {
      return _tz === timezone;
    }) === -1) {
      timezones.unshift(timezone);
    } else if (!timezones) {
      timezones = [timezone];
    }

    if (timezones.length > 10) timezones = timezones.splice(0, 10);
    window.localStorage.setItem('recentTimezones', JSON.stringify(timezones));
  };

  var location = moment.tz.guess(); //location = null

  if (location) {
    setTimezoneStorage(location);
  } else {
    console.log('couldnt find location');
  }

  $scope.interview = {
    date: moment({
      hour: 0,
      minute: 0,
      seconds: 0,
      milliseconds: 0
    }).add(1, 'day').format('MMM DD, YYYY'),
    timezone: null,
    times: [angular.copy(BLANK_TIME)]
  };

  var initTimes = function initTimes(interview) {
    var startTime = new Date(interview.start_time);
    var duration = interview.duration;
    startTime = {
      id: moment(startTime).format('HH:mm:ss'),
      name: moment(startTime).format('h:mma')
    };

    if (typeof interview.duration === 'number') {
      duration = {
        min: duration,
        name: formatDuration(duration)
      };
    }

    var has_video = false;

    if (interview.video_session_id || interview.has_video) {
      has_video = true;
    }

    interview.attendees.forEach(function (participant, index) {
      var memberIndex = $scope.members.findIndex(function (member) {
        return member._id === participant._id;
      }); //console.log(memberIndex)

      if (memberIndex > -1 && !$scope.members[memberIndex].freebusyColor) {
        $scope.members[memberIndex] = participant;
      } else if (memberIndex === -1) {
        $scope.members.push(participant);
        interview.attendees[index] = $scope.members[$scope.members.length - 1];
      } else {
        interview.attendees[index] = $scope.members[memberIndex];
      }
    });
    return {
      _id: interview._id,
      startTime: startTime,
      duration: duration,
      participants: interview.attendees,
      title: interview.title || title,
      description: interview.description,
      location: interview.location,
      interview_guide: interview.interview_guide,
      has_video: has_video,
      record_video: interview.record_video,
      request_scorecards: interview.request_scorecards
    };
  };

  if (panel) {
    $scope.interview = {
      _id: panel._id,
      date: moment(panel.start_time).format('MMM DD, YYYY'),
      timezone: panel.timezone,
      times: panel.interviews.map(initTimes)
    }; //console.log($scope.interview);
  }

  $scope.eventsExisting = [];
  $scope.eventsFreebusy = [];
  $scope.eventsInterview = [];
  $scope.eventSources = [[], [], []];

  var initializeEventsExisting = function initializeEventsExisting(interview) {
    var participantEmails = interview.participants.map(function (p) {
      return p.email_address;
    }); //console.log(interview)
    //console.log($scope.interview);
    //console.log(schedule);

    $scope.bzEvents = []; // existing candidate interviews

    var current_date = moment(new Date()).startOf('day');
    var groupedResults = schedule.filter(function (event) {
      return moment(event.start_time).isSame(moment($scope.interview.date).format('YYYY-MM-DD'));
    });
    $scope.schedule = groupedResults.map(function (event) {
      return event.date = moment(event.start_time).format('YYYY-MM-DD');
    }); //$scope.schedule = _.groupBy(groupedResults, (event) => (event.date));

    for (var i in schedule) {
      var result = schedule[i];

      if (!result.candidate) {
        continue;
      } //console.log(result)


      var resultParticipants = result.attendees.map(function (p) {
        return p.email_address;
      });

      var resourceIds = _.intersection(participantEmails, resultParticipants); //console.log(`resourceIds = ${JSON.stringify(resourceIds)}`)


      var className = result.candidate_id === $scope.candidate._id ? 'participant-candidate' : result.candidate && result.attendee_ids && result.attendee_ids.indexOf($scope.shared.user._id) > -1 ? 'assigned' : '';
      var event = {
        'start': moment.tz(result.start_time, tz).format(),
        'end': moment.tz(result.end_time, tz).format(),
        'title': result.candidate ? result.candidate.name : result._id,
        'data': result,
        resourceIds: resourceIds,
        'className': className //(result.candidate && result.attendee_ids && (result.attendee_ids.indexOf($scope.shared.user._id) > -1)) ? "assigned" : className

      };
      $scope.bzEvents.push(event);
    }

    $scope.eventsExisting = $scope.eventsExisting.concat(angular.copy($scope.bzEvents)); //$scope.eventSources[0] = $scope.eventsExisting;
  }; //initializeEventsExisting()


  $scope.addTime = function () {
    if (FeaturesService.actions.block('multi_interview')) return;
    var newTime = angular.copy(BLANK_TIME);
    var lastInterview = $scope.interview.times[$scope.interview.times.length - 1]; //console.log(lastInterview);

    if (lastInterview.startTime && lastInterview.duration) {
      var baseDate = moment($scope.interview.date);
      var start = lastInterview.startTime.id.split(':');
      var start_time = baseDate.clone().add(start[0], 'h');
      start_time.add(start[1], 'minutes');
      start_time.add(lastInterview.duration.min, 'm');
      var id = start_time.format('HH:mm:ss');
      var newStartTime = $scope.times.find(function (time) {
        return time.id === id;
      });
      newTime.startTime = newStartTime;
      newTime.duration = lastInterview.duration;
    }

    $scope.interview.times.push(newTime); //initializeCalendar(time);
    //generateCalendar(time);

    generateCalendarInterviewEvents();
    resizeModal();
  };

  $scope.removeTime = function (index) {
    $scope.interview.times.splice(index, 1);
    resizeModal(); //$scope.interview.times.push(angular.copy(BLANK_TIME))
  };

  $scope.showAvailability = -1;

  $scope.setShowAvailability = function (index) {
    console.log('showing availability');

    if ($scope.showAvailability === index) {
      $scope.showAvailability = -1;
    } else {
      $scope.showAvailability = index;
      all_participants = $scope.interview.times[index].participants;
      updateFullCalendar = true;
      initializeCalendar($scope.interview.times[index]);
      generateCalendar($scope.interview.times[index]); //generateCalendarInterviewEvents();

      $timeout(function () {
        // set calendar content height after modal height is set
        var contentHeight = document.querySelector('.schedule-interview-calendar').clientHeight;
        uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'contentHeight', contentHeight);
      }, 500);
    }

    resizeModal();
  };

  var all_participants = [];
  $scope.participants = [];
  $scope.notShared = [];

  var freebusyEvents = function freebusyEvents(time, freebusy) {
    all_participants = time.participants;
    if (all_participants.length <= 0) return;
    freebusy = freebusy || []; //participants.unshift($scope.shared.user);

    var freebusyEvents = [];
    var idx = 1; //console.log(Object.keys(freebusy))

    Object.keys(freebusy).forEach(function (email) {
      var user = all_participants.find(function (participant) {
        return participant.email_address === email;
      }) || all_participants.find(function (participant) {
        return participant.google_calendar === email;
      }) || all_participants.find(function (participant) {
        return participant.outlook_calendar === email;
      }) || {
        name: 'Not Found'
      }; //user.freebusyColor = `participant-${idx}`;
      //user.participantClasses = `participant-${idx}`;

      if (freebusy[email].hasOwnProperty('errors')) {
        user.freebusy = false;
      } else {
        //$scope.participants.push(user);
        user.freebusy = true;
        user.participantClasses += " participant-freebusy";
        freebusy[email].busy.forEach(function (event) {
          var start = moment.tz(event.start, tz);
          var end = moment.tz(event.end, tz);
          var calEvent = {
            start: start.format(),
            end: end.format(),
            title: event.title || 'busy',
            resourceId: email,
            className: user.freebusyColor //console.log(calEvent);

          };
          freebusyEvents.push(calEvent); //(StartA <= EndB) and (EndA >= StartB)
        });
      }

      idx++;
    });

    if (updateFullCalendar) {
      //console.log('[FullCalendar] update eventSources[1]')
      $scope.eventsFreebusy = freebusyEvents;
      $scope.eventSources[1] = $scope.eventsFreebusy;
    } else {//console.log('[FullCalendar] nothing')            
    }

    checkForConflicts(time);
  };

  var initializeCalendar = function initializeCalendar(time) {
    // participants freebusy
    var freebusyFunc = null; // determine which freebusy to use

    if ($scope.shared.user.google_calendar) {
      freebusyFunc = $scope.appClient.getGoogleFreebusy;
    } else if ($scope.shared.user.outlook_calendar) {
      freebusyFunc = $scope.appClient.getOutlookFreebusy;
    }

    if (freebusyFunc) {
      //console.log('getting freebusy');
      //console.log($scope.interview.additional_participants);
      freebusyFunc(SharedData.activeCompany.company._id, time.participants).then(function (result) {
        // date transformation has to happen locally to use local timezone
        //console.log(result);
        function createDateAsUTC(date) {
          return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
        }

        function formatDate(value) {
          try {
            var field = value.match(/^([+-]?\d{4}(?!\d\d\b))(?:-?(?:(0[1-9]|1[0-2])(?:-?([12]\d|0[1-9]|3[01]))?)(?:[T\s](?:(?:([01]\d|2[0-3])(?::?([0-5]\d))?|24\:?00)([.,]\d+(?!:))?)?(?::?([0-5]\d)(?:[.,](\d+))?)?([zZ]|([+-](?:[01]\d|2[0-3])):?([0-5]\d)?)?)?)?$/) || [];
            var resultDate = new Date(field[1], field[2] - 1 | 0, field[3] || 1, field[4] | 0, field[5] | 0, field[7] | 0, field[8] | 0);

            if (field[9]) {
              resultDate.setUTCMinutes(resultDate.getUTCMinutes() - resultDate.getTimezoneOffset() - (field[10] * 60 + +field[11] || 0));
            }

            return createDateAsUTC(resultDate);
          } catch (e) {
            return createDateAsUTC(new Date(value));
          }
        } //console.log(createDateAsUTC(new Date('2018-02-13T14:30:00Z')));
        // UTC to Local


        Object.keys(result).forEach(function (email) {
          result[email].busy.forEach(function (event) {
            //console.log(event);
            //event.start = moment(createDateAsUTC(new Date(event.start))).toDate();
            //event.end = moment(createDateAsUTC(new Date(event.end))).toDate();
            if ($scope.shared.user.google_calendar) {
              event.start = moment.tz(event.start, tz).format();
              event.end = moment.tz(event.end, tz).format();
            } else if ($scope.shared.user.outlook_calendar) {
              //event.start = moment.tz(createDateAsUTC(new Date(event.start)), tz).format();
              //event.end = moment.tz(createDateAsUTC(new Date(event.end)), tz).format();
              event.start = moment.tz(formatDate(event.start), tz).format();
              event.end = moment.tz(formatDate(event.end), tz).format();
            }
          });
        });
        freebusyEvents(time, result);
      });
    }
  };

  var getStartEndTimes = function getStartEndTimes(interview) {
    if ($scope.interview.date && interview.startTime && interview.duration) {
      var baseDate = moment($scope.interview.date);
      var start = interview.startTime.id.split(':');
      var start_time = baseDate.clone().add(start[0], 'h');
      start_time.add(start[1], 'minutes');
      var end_time = start_time.clone().add(interview.duration.min, 'minutes');
      return {
        start: start_time,
        end: end_time
      };
    }

    return null;
  };

  var generateCalendarInterviewEvents = function generateCalendarInterviewEvents() {
    if ($scope.showAvailability === -1) return;
    console.log('[generateCalendarInterviewEvents]'); //console.log($scope.interview.times[$scope.showAvailability].participants);

    $scope.eventsInterview = [];
    $scope.eventsExisting = [];
    $scope.interview.times.forEach(function (interview) {
      //console.log($scope.interview.times[$scope.showAvailability].participants);
      var startEndTimes = getStartEndTimes(interview);

      if (startEndTimes) {
        $scope.interview.times[$scope.showAvailability].participants.forEach(function (participant) {
          // create pending event for each resource
          var eventData = {
            className: 'pending',
            start: startEndTimes.start.format(),
            end: startEndTimes.end.format(),
            resourceId: participant.email_address
          };
          $scope.eventsInterview.push(eventData); //console.log($scope.eventSources);
        });

        if ($scope.eventsInterview.length === 0) {
          var eventData = {
            className: 'pending',
            start: startEndTimes.start.format(),
            end: startEndTimes.end.format()
          };
          $scope.eventsInterview.push(eventData);
        }
      } else {//console.log('no startEndTimes')
      }

      initializeEventsExisting(interview);
    }); //console.log('=======')
    //console.log($scope.eventsInterview)

    $scope.eventSources[0] = $scope.eventsExisting;
    $scope.eventSources[2] = $scope.eventsInterview; //console.log($scope.eventSources)

    $timeout(function () {
      $scope.refreshCalendar();
    }, 500);
  };

  var checkForConflicts = function checkForConflicts(time) {
    /*var interview = getStartEndTimes(time)
    all_participants = time.participants;
    if (interview) {
        all_participants.forEach(participant => {
            delete participant.participantClasses
        });
        //console.log(interview)
        $scope.eventsFreebusy.forEach(event => {
            if (interview.start.isSameOrBefore(event.end) && interview.end.isSameOrAfter(event.start)) {
                //console.log(event)
                var email = event.resourceId
                var user = all_participants.find((participant) => (participant.email_address === email)) || all_participants.find((participant) => (participant.google_calendar === email)) || all_participants.find((participant) => (participant.outlook_calendar === email)) || { name: 'Not Found' };
                user.participantClasses =  user.freebusyColor + ' available-no';
            } else {
                //console.log('unavailable')
            }
         })
        all_participants.forEach(participant => {
            if (participant.freebusy && !participant.participantClasses) {
                participant.participantClasses = participant.freebusyColor + ' available-yes';
            } else {
                participant.participantClasses = participant.freebusyColor;
            }
        });
    }*/
    generateCalendarInterviewEvents();
  };

  var formatDuration = function formatDuration(duration) {
    var format = duration + ' min';

    if (duration == 60) {
      format = '1 hr';
    } else if (duration > 60) {
      format = duration / 60 + ' hrs';
    }

    return format;
  };

  $scope.checkVideoRecordingAvailability = function ($timeIndex) {
    if (FeaturesService.actions.block('video_interview_archiving')) {
      $scope.interview.times[$timeIndex].record_video = false;
    }
  };

  $scope.checkVideoAvailability = function ($timeIndex) {
    if (FeaturesService.actions.block('video_interview')) {
      $scope.interview.times[$timeIndex].has_video = false;
      $scope.interview.times[$timeIndex].record_video = false;
    }
  };

  $scope.setInterviewGuide = function ($timeIndex) {
    if (FeaturesService.actions.block('interview_kits')) {
      $scope.interview.times[$timeIndex].interview_guide = null;
    }

    ;
  };

  $scope.setRequestScorecard = function ($timeIndex) {
    if (FeaturesService.actions.block('custom_scorecards')) {
      $scope.interview.times[$timeIndex].request_scorecards = false;
    }

    ;
  }; // generate time zone dropdown


  var zoneNames = Object.keys(moment.tz._zones).map(function (k) {
    return typeof moment.tz._zones[k] === 'string' ? moment.tz._zones[k].split('|')[0] : moment.tz._zones[k].name;
  }).filter(function (z) {
    return z.indexOf('/') >= 0;
  }).sort(); //console.log(zoneNames);

  var current_time = new Date().getTime();
  zoneNames = zoneNames.map(function (name) {
    var offset = moment.tz.zone(name).utcOffset(current_time);
    var gmt = moment().tz(name).format('Z');
    if (gmt >= 0) gmt = '+' + gmt;
    var abbr = moment.tz.zone(name).abbr(current_time);
    return {
      gmt: gmt,
      text: "GMT".concat(gmt, " - ").concat(name),
      abbr: abbr,
      name: name,
      offset: offset,
      type: 'Timezones'
    };
  });
  var recentTimezones = JSON.parse(window.localStorage.getItem('recentTimezones')) || [];
  var recent;

  if (recentTimezones.length > 0) {
    recent = zoneNames.reduce(function (acc, zone) {
      if (recentTimezones.indexOf(zone.name) > -1) {
        var _z = angular.copy(zone);

        _z.type = 'Recent';
        acc.push(_z);
      }

      return acc;
    }, []);
  }

  if (recent) {
    $scope.timezones = recent.concat(zoneNames);
  } else {
    $scope.timezones = zoneNames;
  } //$scope.timezones = zoneNames;


  $scope.interview.timezone = $scope.timezones.find(function (timezone) {
    return timezone.name === location;
  }); //}
  //var offset = $scope.interview.timezone.offset;

  var tz = location;

  var initializeDurations = function initializeDurations() {
    $http.get('/data/durations.json').success(function (data) {
      $scope.durations = data; //console.log($scope.durations);
    }).error(function (error) {
      console.log('Error fetching durations JSON!: ' + error);
    });
  };

  var initializeTimes = function initializeTimes() {
    $http.get('/data/scheduleTimes.json').success(function (data) {
      $scope.times = data;
    }).error(function (error) {
      console.log('Error fetching times JSON!: ' + error);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close(null);
  };

  $scope.showGoogleFreeBusy = function () {
    var width = 788;
    var height = 400;
    var calendarEmail = $scope.shared.user.google_calendar ? $scope.shared.user.google_calendar : $scope.shared.user.google_email_address;
    var w = openWindow("Google Calendar", "https://www.google.com/calendar/embed?src=" + calendarEmail, height, width);
    w.focus();
    $parentScope.gaEventTracker("ShowGoogleFreeBusy");
  };

  var updateFullCalendar = true;

  $scope.removeParticipant = function (time, index, $timeIndex) {
    //console.log(participant);
    time.participants.splice(index, 1); //console.log($timeIndex);

    updateFullCalendar = $timeIndex === $scope.showAvailability;
    initializeCalendar(time);
    generateCalendar(time);
  };

  var participantsClassCount = 1;

  $scope.addParticipant = function (time, participant, $timeIndex) {
    if (!participant.hasOwnProperty('participantClasses')) {
      participant.freebusyColor = "participant-".concat(participantsClassCount);
      participant.participantClasses = "participant-".concat(participantsClassCount);
      participantsClassCount++;
    }

    time.participants.push(participant); //console.log(index)

    updateFullCalendar = $timeIndex === $scope.showAvailability;
    initializeCalendar(time);
    generateCalendar(time);
  };

  $scope.getFreeBusyClass = function (participant) {
    var p = all_participants.find(function (p) {
      return p._id === participant._id;
    }); //console.log(p)

    if (p && p.freebusy_class) {
      return p.freebusy_class;
    } else {
      return 'participant-not-shared';
    }
  };

  $scope.openAddInterviewGuide = function (guide) {
    if (FeaturesService.actions.block('interview_kits')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_interview_guide_modal.html',
      controller: 'AddInterviewGuideModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview_guide: function interview_guide() {
          return guide;
        }
      }
    });
    modalInstance.result.then(function (result) {
      console.log("RESULT: " + JSON.stringify(result));

      if (result) {
        console.log("Adding");
        SharedData.activeCompany.interview_guides.unshift(result);
      }
    }, function () {});
  };

  $scope.deleteInterviews = function (method) {
    $scope.appClient.deletePanelInterview($scope.shared.activeCompany.company._id, positionId, candidate._id, $scope.interview._id, function (error, result) {
      $rootScope.$broadcast('panelInterviewDelete', $scope.interview._id);
      $scope.closeModal();
    });
  };

  $scope.setStep = function (step) {
    $scope.step = step;
  };

  $scope.templateDetailView = true;

  $scope.toggleDetailView = function () {
    console.log($scope.templateDetailView);
    var autotemplate = generateTemplateBody(); //console.log(autotemplate)

    $scope.template.body = utils.markdownToHTML(autotemplate);
  };

  var generateTemplateBody = function generateTemplateBody() {
    var baseDate = moment($scope.interview.date);

    function generateTimes() {
      var intCount = -1;
      var interviewPrefix = $scope.interview.times.length > 1 ? '* ' : '';
      return $scope.interview.times.map(function (interview, i) {
        intCount++;
        var start = interview.startTime.id.split(':');
        var start_time = baseDate.clone().hour(start[0]);
        start_time.add(start[1], 'minutes');
        var end_time = start_time.clone().add(interview.duration.min, 'minutes');
        var participants = [];
        var participantsDisplay = '';
        var videoMeetingLink = '';
        var videoMeetingLinkNewLine = '';
        var interviewLocation = '';
        var interviewLocationNewLine = '';
        var interviewDescription = '';

        if (interview.participants.length > 0) {
          var participantsDisplayCount = 2;
          participants = interview.participants.map(function (participant) {
            return participant.name;
          });

          if (!$scope.templateDetailView) {
            if (participants.length > participantsDisplayCount) {
              participants.length = participantsDisplayCount;
            }

            participantsDisplay = participants.join(', ');

            if (interview.participants.length > participantsDisplayCount) {
              var additional = interview.participants.length - participantsDisplayCount;
              participantsDisplay += " and ".concat(additional, " ").concat(additional > 1 ? 'others' : 'other');
            }
          } else {
            participantsDisplay = participants.join(', ');
          }
          /*if (participantsDisplay.length > 0) {
              participantsDisplay = 'with : ' + participantsDisplay;
          }*/

        }

        var tz_abbr = moment.tz.zone($scope.interview.timezone.name).abbr(start_time);

        if (interview.has_video) {
          videoMeetingLink = "&#40;[Video Meeting]([[video_link_" + intCount + "]])&#41;";
          videoMeetingLinkNewLine = "\nVideo Meeting: [Open Meeting]([[video_link_" + intCount + "]])";
        }

        if (interview.location) {
          interviewLocation = "Location: ".concat(interview.location);
          interviewLocationNewLine = "\nLocation: ".concat(interview.location);
        }

        if (interview.description) interviewDescription = "\n".concat(interview.description);

        if (!$scope.templateDetailView) {
          return "* ".concat(start_time.format('h:mma'), " - ").concat(end_time.format('h:mma'), " ").concat(tz_abbr, " with : ").concat(participantsDisplay, " ").concat(videoMeetingLink);
        } else {
          return "".concat(interviewPrefix, "**").concat(interview.title, "**\n").concat(start_time.format('h:mma'), " - ").concat(end_time.format('h:mma'), " ").concat(tz_abbr, " with ").concat(participantsDisplay).concat(interviewLocationNewLine).concat(videoMeetingLinkNewLine).concat(interviewDescription, "\n\n\n\n                    ");
        }
      }).join('\n') + '\n\n';
    }

    return "Hi ".concat($scope.candidate.full_name.first, ",\n\nYou're confirmed for the following ").concat($scope.interview.times.length > 1 ? 'interviews' : 'interview', " on **").concat(baseDate.format('MMM Do'), "**:\n\n").concat(generateTimes(), "\n\nIf you have any questions, just let me know.\n\nThanks,\n").concat($scope.shared.user.name);
  };

  $scope.next = function (form) {
    form.$setSubmitted();
    var missingParticipants = false;
    var invalidTimes = false;
    $scope.interview.times.forEach(function (interview) {
      if (interview.participants.length === 0) {
        missingParticipants = true;
      }
    });

    if (form.$valid && !missingParticipants) {
      var autotemplate = generateTemplateBody();
      $scope.template.body = utils.markdownToHTML(autotemplate);
      $scope.step = "email";
    }
  };

  var formatInterviewSave = function formatInterviewSave() {
    var start_time, end_time;
    var interviews = []; //console.log(new Date($scope.interview.date));

    var baseDate = moment($scope.interview.date);
    $scope.interview.times.forEach(function (interview) {
      var start = interview.startTime.id.split(':');
      start_time = baseDate.hour(start[0]);
      start_time.minutes(start[1]);
      var tz_abbr = moment.tz.zone($scope.interview.timezone.name).abbr(start_time);
      var tz_offset = moment.tz.zone($scope.interview.timezone.name).utcOffset(start_time);
      start_time.utcOffset(tz_offset * -1, true);
      end_time = start_time.clone().add(interview.duration.min, 'minutes');
      var temp = {
        //start_time: moment.tz(start_time, $scope.interview.timezone.name).format(),
        //end_time: moment.tz(end_time, $scope.interview.timezone.name).format(),
        start_time: start_time.format(),
        end_time: end_time.format(),
        //start_time: start_time.add($scope.interview.timezone.offset+DSTOffset(start_time.isDST()), 'minutes'),
        //end_time: end_time.add($scope.interview.timezone.offset+DSTOffset(start_time.isDST()), 'minutes'),
        duration: interview.duration.min,
        tz_offset: tz_offset,
        tz_code: tz_abbr,
        location: interview.location,
        title: interview.title,
        description: interview.description,
        interview_guide: interview.interview_guide,
        has_video: interview.has_video,
        record_video: interview.record_video,
        attendees: interview.participants,
        additional_participants: interview.participants,
        request_scorecards: interview.request_scorecards,
        datetimes: [{
          start_time: start_time.format(),
          end_time: end_time.format(),
          duration: interview.duration.min
        }]
      };

      if (interview._id) {
        temp._id = interview._id;
      }

      interviews.push(temp);
      setLocationStorage(interview.location);
    });
    return interviews;
  };

  $scope.sendInterviewRequest = function (method) {
    //console.log('=========');
    //fconsole.log($scope.interview)
    var interviews = formatInterviewSave(); //console.log(interviews);

    setTimezoneStorage($scope.interview.timezone.name);
    var template = angular.copy($scope.template);
    template.body = utils.HTMLtoMarkdown(template.body);

    if ($scope.interview._id) {
      $scope.appClient.updatePanelInterviewRequest({
        interviews: interviews
      }, $scope.shared.activeCompany.company._id, positionId, candidate._id, $scope.interview._id, function (error, result) {
        if (result) {//$rootScope.$broadcast('interviewAdded', result);
        }

        $scope.closeModal(result);
      });
    } else {
      $scope.appClient.sendPanelInterviewRequest({
        template: template,
        interviews: interviews
      }, $scope.shared.activeCompany.company._id, positionId, candidate._id, function (error, result) {
        if (result) {//$rootScope.$broadcast('interviewAdded', result);
        }

        $scope.closeModal(result);
      });
    }
  };

  $scope.interviewTemplates = JSON.parse(window.localStorage.getItem('interviewTemplates')) || [];

  $scope.saveAsTemplate = function (form) {
    form.$setSubmitted();
    var missingParticipants = false;
    var invalidTimes = false;
    $scope.interview.times.forEach(function (interview) {
      if (interview.participants.length === 0) {
        missingParticipants = true;
      }
    });

    if (form.$valid && !missingParticipants) {
      var modalInstance = $uibModal.open({
        template: "\n                    <div class=\"close ng-scope\" ng-click=\"closeModal()\"><i class=\"fa fa-times\"></i></div>\n                    <div class=\"modal-body ng-scope\">\n                        <h1>Save Interview Template</h1>\n                        <div class=\"interview-template-name-section\">\n                            <input type=\"text\" ng-model=\"templateName\", placeholder=\"Template Name\" />\n                        </div>\n                        <footer class=\"modal-content-footer\">\n                            <ul class=\"footer-actions\">\n                                <li class=\"footer-action\">\n                                    <button class=\"btn btn-none\" type=\"button\" ng-click=\"closeModal()\">\n                                        <i class=\"fa fa-times\"></i>\n                                        <span>Cancel</span>\n                                    </button>\n                                </li>\n                                <li class=\"footer-action\">\n                                    <button class=\"btn btn-blue\" ng-click=\"saveTemplate()\">\n                                        <i class=\"fa fa-save\"></i>\n                                        <span>Save Template</span>\n                                    </button>\n                                </li>\n                            </ul>\n                        </footer>\n                    </div>\n                ",
        controller: function controller($scope, $uibModalInstance) {
          $scope.templateName = '';

          $scope.saveTemplate = function () {
            $uibModalInstance.close($scope.templateName);
          };

          $scope.closeModal = function () {
            $uibModalInstance.close(null);
          };
        },
        size: 'sm'
      });
      modalInstance.result.then(function (result) {
        if (result) {
          var interviews = formatInterviewSave();
          interviews.forEach(function (interview) {
            delete interview._id;
          });
          $scope.interviewTemplates.push({
            id: new Date().getTime(),
            name: result,
            timezone: $scope.interview.timezone,
            interviews: interviews
          });
          window.localStorage.setItem('interviewTemplates', JSON.stringify($scope.interviewTemplates));
        }
      }, function () {});
    }
  };

  $scope.loadInterviewTemplate = function (template) {
    $scope.interview.timezone = template.timezone;
    template.interviews.forEach(function (interview) {
      delete interview.title;
      delete interview._id;
    });
    $scope.interview.times = template.interviews.map(initTimes);
  };

  $scope.deleteTemplate = function (e, template) {
    var templates = JSON.parse(window.localStorage.getItem('interviewTemplates'));
    var index = templates.findIndex(function (_t) {
      return _t.id === template.id;
    });

    if (index > -1) {
      templates.splice(index, 1);
      $scope.interviewTemplates = templates;
      window.localStorage.setItem('interviewTemplates', JSON.stringify(templates));
    }

    e.stopPropagation();
    e.preventDefault();
  };

  $scope.interviewLocations = JSON.parse(window.localStorage.getItem('interviewLocations')) || []; //console.log($scope.interviewLocations);

  $scope.deleteLocation = function (e, location) {
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));
    var index = locations.findIndex(function (_l) {
      return _l.id === location.id;
    });

    if (index > -1) {
      locations.splice(index, 1);
      $scope.interviewLocations = locations;
      window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var setLocationStorage = function setLocationStorage(location) {
    if (!location) return;
    location = {
      id: new Date().getTime(),
      name: location
    };
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));

    if (locations && locations.findIndex(function (_l) {
      return _l.name === location.name;
    }) === -1) {
      locations.unshift(location);
    } else if (!locations) {
      locations = [location];
    }

    if (locations.length > 10) locations = locations.splice(0, 10);
    window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
  };

  $scope.participants = [];
  $scope.notShared = [];

  $scope.removeDatetime = function (datetime) {
    var id = datetime.bzy_id;
    if (!id) return;
    var index = $scope.eventsInterview.findIndex(function (event) {
      return event.bzy_id === id;
    });

    if (index > -1) {
      $scope.eventsInterview.splice(index, 1);
    } else {
      console.log('not found in $scope.eventsInterview');
    } //console.log(JSON.stringify($scope.eventsInterview));


    $scope.eventSources[2] = $scope.eventsInterview; // don't rely on model to remove events

    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', datetime._id); //console.log(JSON.stringify($scope.eventsInterview));
  };

  var DSTOffset = function DSTOffset(selectedDST) {
    var currentDST = moment.tz(tz).isDST();

    if (currentDST === selectedDST) {
      return 0;
    } else if (currentDST && !selectedDST) {
      return 60;
    } else if (!currentDST && selectedDST) {
      return -60;
    } else {
      return 0;
    }
  };

  $scope.setTimeZone = function (zone, j, modal) {
    if (!$scope.interview.timezone) {
      $scope.interview.timezone = zone;
    } //console.log(zone.name);
    //console.log(modal.offset);
    //console.log('=========')
    //console.log($scope.interview.timezone);
    //console.log(zone);
    //moment.tz.setDefault(tz);
    // update start time on zone change for all interviews


    var baseDate = moment($scope.interview.date); //var baseDate = moment.tz($scope.interview.date, tz)

    $scope.interview.times.forEach(function (interview) {
      //console.log(baseDate);
      //console.log(interview.startTime);
      if (getStartEndTimes(interview)) {
        var start = interview.startTime.id.split(':');
        var start_time = baseDate.clone().add(start[0], 'h');
        start_time.add(start[1], 'minutes'); //console.log(tz)

        var new_offset = $scope.interview.timezone.offset - zone.offset;
        start = start_time.add(new_offset, 'minutes');
        start = start.format('HH:mm:ss'); //console.log(start);

        interview.startTime = $scope.times.find(function (time) {
          return time.id === start;
        });
      }
    }); // set new global zone

    tz = zone.name;
    var eventSources = angular.copy($scope.eventSources);
    eventSources.forEach(function (events) {
      events.forEach(function (event) {
        var start = moment.tz(event.start, tz);
        var end = moment.tz(event.end, tz);

        if (event.bzy_id) {
          var id = event.bzy_id;
          var duration = (end._d - start._d) / 1000 / 60;
          var index = $scope.eventsInterview.findIndex(function (event) {
            return event.bzy_id === id;
          });
          event.formatted_start_time = start.format('MMM D [at] h:mm A ') + '(' + zone.abbr + ') - ' + duration + 'min';

          if (index > -1) {
            $scope.eventsInterview[index].formatted_start_time = event.formatted_start_time;
            $scope.eventsInterview[index].start = start.format();
            $scope.eventsInterview[index].end = end.format();
          } else {
            console.log('not found in $scope.eventsInterview');
          }

          uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', event._id);
        } else {//console.log('no bzy_id found')
        }

        event.start = start.format();
        event.end = end.format();
      });
    });
    $scope.eventSources[0] = eventSources[0];
    $scope.eventSources[1] = eventSources[1];
    $scope.eventSources[2] = eventSources[2]; //$scope.uiConfig.calendar.timezone = tz;
    //$('#freebusyCalendar').fullCalendar('option', 'timezone', zone.name || false);
    //console.log(uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'timezone'));
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'timezone', zone.name || false);

    /*$scope.eventSources.forEach(source => {
        source.forEach(item => {
            item.start
        })
    })*/
  };

  $scope.refreshCalendar = function () {
    //console.log('refreshing');
    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('rerenderEvents'); //console.log('refreshCalendar');
    //.fullCalendar( 'refetchEvents' )
    //console.log(uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('freebusyCalendar'));
    //uiConfig.calendars.freebusyCalendar.fullCalendar('gotoDate', $scope.aWeekStart);
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents');
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('addEventSource', $scope.eventSources);
  };

  $scope.$watch('interview.date', function (newVal) {
    if (uiCalendarConfig.calendars.freebusyCalendar) {
      //$scope.eventSources[2] = $scope.eventsInterview;
      $timeout(function () {
        $scope.uiConfig.calendar.defaultDate = newVal;
        uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('gotoDate', newVal);
        generateCalendarInterviewEvents();
      }, 0);
    } else {
      $scope.uiConfig.calendar.defaultDate = newVal;
    }
  });

  $scope.onStartSelect = function (time, startTime) {
    //console.log(this)
    //console.log('here my dudes')
    //console.log(time)
    time.startTime = startTime;
    checkForConflicts(time);
    /*if (uiCalendarConfig.calendars.freebusyCalendar) {
        uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'scrollTime', startTime.id )
    }*/
  };

  $scope.onDurationSelect = function (time, duration) {
    //console.log(this)
    //console.log('here my dudes')
    //console.log(time)
    time.duration = duration;
    checkForConflicts(time);
    /*if (uiCalendarConfig.calendars.freebusyCalendar) {
        uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'scrollTime', startTime.id )
    }*/
  };

  var generateCalendar = function generateCalendar(time) {
    if (updateFullCalendar) {
      var resources = time.participants.map(function (participant) {
        return {
          id: participant.email_address,
          title: participant.name,
          className: 'no-calendar-info'
        };
      }); //console.log('resources');
      //console.log(resources);

      $scope.uiConfig.calendar.resources = resources; // set calendar content height after modal height is set

      $timeout(function () {
        var contentHeight = document.querySelector('.schedule-interview-calendar');

        if (contentHeight) {
          uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'contentHeight', contentHeight.clientHeight);
        }
      }, 100);
    } //generateCalendarInterviewEvents();

  };

  $scope.status = {
    isopen: false
  };

  $scope.locationKeypress = function (e) {
    if (e.keyCode === 13) {
      $scope.status.isopen = false;
      e.preventDefault();
      return false;
    }
  };

  var resizeModal = function resizeModal() {
    var maxHeight = window.innerHeight - 60;

    var _browser = browser();

    $timeout(function () {
      var container = document.querySelector('.schedule-interview-panel-details');

      if (container.offsetHeight > maxHeight) {
        container.style.maxHeight = "".concat(maxHeight, "px");
      } else {
        container.style.maxHeight = "none";
      }
    }, 0);
  };

  $scope.uiConfig = {
    'calendar': {
      //timezone: false,
      schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
      header: false,
      allDaySlot: false,
      defaultView: 'agendaDay',
      scrollTime: '08:00:00',
      defaultDate: moment($scope.interview.date).format('YYYY-MM-DD'),
      nowIndicator: true,
      selectable: true,
      snapDuration: {
        minutes: 15
      },
      selectConstraint: {
        start: moment().format('YYYY-MM-DD'),
        end: '2100-01-01'
      },
      select: function select(start, end) {
        if (!start.hasTime()) return;
        var duration = end.diff(start, 'minutes');
        start = start.format('HH:mm:ss');
        var interview = $scope.interview.times[$scope.showAvailability];
        interview.startTime = $scope.times.find(function (time) {
          return time.id === start;
        });
        interview.duration = $scope.durations.find(function (_d) {
          return _d.min === duration;
        });
        checkForConflicts(interview);
        generateCalendar(interview);
      }
    }
  };
  initializeDurations();
  initializeTimes();

  if ($scope.interview._id) {
    $scope.interview.times.forEach(function (time) {
      console.log('initing times');
      initializeCalendar(time);
      generateCalendar(time); //checkForConflicts(time);
    });
  } //initializeCalendar();

}]);
'use strict';

angular.module('appController').controller('CandidateReasonModalInstanceCtrl', ['$scope', '$uibModal', '$uibModalInstance', 'type', 'candidate', 'stage', 'CompanyService', function ($scope, $uibModal, $uibModalInstance, type, candidate, stage, CompanyService) {
  $scope.candidate = candidate;
  $scope.multipleCandidates = angular.isArray(candidate);
  $scope.stage = stage; //$scope.reasonType = type;

  $scope.reasons = CompanyService.getters.reasons()[type];
  $scope.reasonsSetting = CompanyService.getters.settings("eeoc.reasons.".concat(type));
  $scope.selected = {};

  $scope.saveReason = function () {
    $uibModalInstance.close($scope.selected.reason);
  };

  $scope.skipReason = function () {
    $uibModalInstance.close();
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);
'use strict';

angular.module('appController').controller('InterviewWorkflowModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', '$uibModal', '$http', 'AppClient', 'SharedData', 'positionId', 'candidate', 'interview', 'dialog', 'ModalService', 'FeaturesService', function ($scope, $rootScope, $uibModalInstance, $uibModal, $http, AppClient, SharedData, positionId, candidate, interview, dialog, ModalService, FeaturesService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate;
  $scope.user = $scope.shared.user;
  $scope.interview_guides = SharedData.activeCompany.interview_guides;
  $scope.members = SharedData.activeCompany.members.filter(function (member) {
    return member._id !== $scope.user._id;
  });
  $scope.today = new Date();
  $scope.invite = {
    'invitees': [],
    'email_invitees': []
  };
  $scope.steps = [{
    name: 'details'
  }, {
    name: 'participants'
  }, {
    name: 'datetimes'
  }];
  var title = "".concat($scope.candidate.name, " Meeting (").concat($scope.candidate.position.name, ")");

  if ($scope.candidate.position.org_type === "pool") {
    title = "".concat($scope.candidate.name, " Meeting");
  }

  $scope.submitButtonText = 'Send';
  $scope.currentStep = $scope.steps[0];
  $scope.newParticipant = {};
  $scope.interview = {
    title: title,
    additional_participants: [],
    datetimes: [{}],
    has_video: false
  };

  var checkFeatureAvailability = function checkFeatureAvailability() {
    if (!$scope.interview.has_video) {
      return;
    }

    if (FeaturesService.actions.block('video_interview')) {
      $scope.interview.has_video = false;
      delete $scope.interview.record_video;
    }
  };

  $scope.setInterviewGuide = function ($item, guide, $model) {
    if (FeaturesService.actions.block('interview_kits')) {
      $scope.interview.interview_guide = null;
    }

    ;
  };

  $scope.$watch('interview.record_video', function () {
    if (!$scope.interview.hasOwnProperty('record_video')) return;

    if (FeaturesService.actions.block('video_interview_archiving')) {
      delete $scope.interview.record_video;
    }
  });
  $scope.$watch('interview.has_video', checkFeatureAvailability);

  var formatDuration = function formatDuration(duration) {
    var format = duration + ' min';

    if (duration == 60) {
      format = '1 hr';
    } else if (duration > 60) {
      format = duration / 60 + ' hrs';
    }

    return format;
  };

  if (interview) {
    interview.existing = true;

    for (var i = 0; i < interview.datetimes.length; i++) {
      var datetime = interview.datetimes[i];
      datetime.date = new Date(datetime.start_time);
      datetime.startTime = {
        id: moment(datetime.start_time).format('HH:mm:ss'),
        name: moment(datetime.start_time).format('h:mma')
      };

      if (typeof datetime.duration === 'number') {
        datetime.duration = {
          min: datetime.duration,
          name: formatDuration(datetime.duration)
        };
      }
    }

    interview.additional_participants = interview.attendees.filter(function (attendee) {
      return attendee._id !== $scope.shared.user._id && attendee._id !== $scope.candidate._id;
    });

    if (interview.video_session_id) {
      interview.has_video = true;
    } else {
      interview.has_video = false;
    }

    $scope.interview = interview;
  }

  $scope.prevStep = function () {
    var currentStep = $scope.steps.indexOf($scope.currentStep);
    $scope.currentStep = $scope.steps[currentStep - 1];
  };

  $scope.nextStep = function () {
    var currentStep = $scope.steps.indexOf($scope.currentStep);
    currentStep++;

    if (currentStep < $scope.steps.length) {
      $scope.currentStep = $scope.steps[currentStep];
    }
  };

  var checkDatetimes = function checkDatetimes() {
    if ($scope.interview.datetimes.length === 1) {
      $scope.submitButtonText = 'Send Invite';
    } else {
      $scope.submitButtonText = 'Propose Times';
    }
  };

  $scope.addDatetime = function () {
    $scope.interview.datetimes.push({});
    checkDatetimes();
  };

  $scope.removeDatetime = function () {
    if ($scope.interview.datetimes.length === 1) return;
    var index = this.$index;
    $scope.interview.datetimes.splice(index, 1);
    checkDatetimes();
  };

  var initializeDurations = function initializeDurations() {
    $http.get('/data/durations.json').success(function (data) {
      $scope.durations = data;
    }).error(function (error) {
      console.log('Error fetching durations JSON!: ' + error);
    });
  };

  var initializeTimes = function initializeTimes() {
    $http.get('/data/scheduleTimes.json').success(function (data) {
      $scope.times = data;
    }).error(function (error) {
      console.log('Error fetching times JSON!: ' + error);
    });
  };

  $scope.closeModal = function (obj) {
    $uibModalInstance.close(obj);
  };

  $scope.openWindow = function (title, url, h, w) {
    var left = screen.width / 2 - w / 2;
    var top = screen.height / 2 - h / 2;
    return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
  };

  $scope.showGoogleFreeBusy = function () {
    var width = 788;
    var height = 400;
    var calendarEmail = $scope.shared.user.google_calendar ? $scope.shared.user.google_calendar : $scope.shared.user.google_email_address;
    var w = $scope.openWindow("Google Calendar", "https://www.google.com/calendar/embed?src=" + calendarEmail, height, width);
    w.focus(); //$parentScope.gaEventTracker("ShowGoogleFreeBusy");
  };

  var pending = [];

  $scope.showGoogleFreeBusy1 = function () {
    $scope.gettingCalendar = true;
    var row = this.$index;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/interview/calendar.freebusy.scheduler.modal.html',
      controller: 'CalendarFreeBusySchedulerModalInstanceCtrl',
      size: 'freebusy',
      resolve: {
        pending: function pending() {
          return $scope.interview.datetimes.reduce(function (pending, datetime) {
            return datetime.hasOwnProperty('freebusy') ? pending.concat([datetime.freebusy]) : pending;
          }, []);
        },
        participants: function participants() {
          var participants = angular.copy($scope.interview.additional_participants);
          participants.unshift($scope.shared.user);
          return participants;
        },
        schedule: function schedule(AppClient, SharedData) {
          return AppClient.getUserCalendar(SharedData.activeCompany.company._id, null);
        },
        freebusy: function freebusy(AppClient, SharedData) {
          if (!SharedData.user.google_calendar) return [];
          return AppClient.getGoogleFreebusy(SharedData.activeCompany.company._id, $scope.interview.additional_participants).then(function (result) {
            $scope.gettingCalendar = false;
            return result;
          }).catch(function () {
            $scope.gettingCalendar = false;
          });
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        var duration = (result.end._d - result.start._d) / 1000 / 60; //console.log($scope.interview);

        var datetime = {};
        datetime.freebusy = result;
        datetime.date = result.start._d;
        datetime.startTime = {
          id: moment(result.start._d).format('HH:mm:ss'),
          name: moment(result.start._d).format('h:mma')
        };
        datetime.duration = {
          min: duration,
          name: formatDuration(duration)
        };
        $scope.interview.datetimes[row] = datetime;
      }
    }, function () {});
  };

  $scope.showOutlookFreeBusy = function () {
    $scope.gettingCalendar = true;
    var row = this.$index;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/interview/calendar.freebusy.scheduler.modal.html',
      controller: 'CalendarFreeBusySchedulerModalInstanceCtrl',
      size: 'freebusy',
      resolve: {
        pending: function pending() {
          return $scope.interview.datetimes.reduce(function (pending, datetime) {
            return datetime.hasOwnProperty('freebusy') ? pending.concat([datetime.freebusy]) : pending;
          }, []);
        },
        participants: function participants() {
          var participants = angular.copy($scope.interview.additional_participants);
          participants.unshift($scope.shared.user);
          return participants;
        },
        schedule: function schedule(AppClient, SharedData) {
          return AppClient.getUserCalendar(SharedData.activeCompany.company._id, null);
        },
        freebusy: function freebusy(AppClient, SharedData) {
          if (!SharedData.user.outlook_calendar) return [];
          return AppClient.getOutlookFreebusy(SharedData.activeCompany.company._id, $scope.interview.additional_participants).then(function (result) {
            $scope.gettingCalendar = false; // date transformation has to happen locally to use local timezone

            function createDateAsUTC(date) {
              return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
            } // UTC to Local


            Object.keys(result).forEach(function (email) {
              result[email].busy.forEach(function (event) {
                event.start = moment(createDateAsUTC(new Date(event.start))).toDate();
                event.end = moment(createDateAsUTC(new Date(event.end))).toDate();
              });
            });
            return result;
          }).catch(function () {
            $scope.gettingCalendar = false;
          });
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        var duration = (result.end._d - result.start._d) / 1000 / 60; //console.log($scope.interview);

        var datetime = {};
        datetime.freebusy = result;
        datetime.date = result.start._d;
        datetime.startTime = {
          id: moment(result.start._d).format('HH:mm:ss'),
          name: moment(result.start._d).format('h:mma')
        };
        datetime.duration = {
          min: duration,
          name: formatDuration(duration)
        };
        $scope.interview.datetimes[row] = datetime;
      }
    }, function () {});
  };

  $scope.excludeCandidate = function () {
    dialog.confirm({
      title: "Exclude Candidate",
      message: "You want to exclude the candidate on this invitation?"
    }, function (result) {
      if (result === true) {
        $scope.interview.exclude_candidate = true;
      }
    });
  };

  $scope.removeParticipant = function () {
    var index = this.$index;
    $scope.members.push($scope.interview.additional_participants[index]);
    $scope.interview.additional_participants.splice(index, 1);
  };

  $scope.addParticipant = function (participant) {
    $scope.interview.additional_participants.push(participant);
    $scope.members = $scope.members.filter(function (member) {
      return member._id !== participant._id;
    });
  };

  $scope.openAddInterviewGuide = function (guide) {
    if (FeaturesService.actions.block('interview_kits')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_interview_guide_modal.html',
      controller: 'AddInterviewGuideModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview_guide: function interview_guide() {
          return guide;
        }
      }
    });
    modalInstance.result.then(function (result) {
      console.log("RESULT: " + JSON.stringify(result));

      if (result) {
        console.log("Adding");
        SharedData.activeCompany.interview_guides.unshift(result);
      }
    }, function () {});
  };

  $scope.sendInterviewRequest = function (method) {
    $scope.buttonDisable = true;
    var datetimes = [];
    var datetime,
        month,
        dom,
        startTime,
        tzCode = new Date().toString().replace(/^.*\(/g, "").replace("\)", "") || "",
        tzOffset = new Date().getTimezoneOffset(),
        str,
        m,
        m2,
        d,
        st,
        et;

    for (var i = 0; i < $scope.interview.datetimes.length; i++) {
      datetime = $scope.interview.datetimes[i];
      month = datetime.date.getMonth() + 1;

      if (month < 10) {
        month = "0" + month;
      }

      dom = datetime.date.getDate();

      if (dom < 10) {
        dom = "0" + dom;
      }

      startTime = datetime.startTime.id;
      str = datetime.date.getFullYear() + '-' + month + '-' + dom + 'T' + startTime;
      m = moment(str).add('ms', tzOffset * 60000);
      m2 = moment(str);
      d = new Date(Date.parse(m2.format()));
      st = m2.format(); //var et = new Date((Date.parse(date.getFullYear() + '-' + month + '-' + dom + 'T' + endTime) + (tzOffset * 60000))).toISOString();

      et = new Date(d.getTime() + datetime.duration.min * 60 * 1000).toISOString();
      datetimes.push({
        start_time: st,
        end_time: et,
        duration: datetime.duration.min
      });
    } //console.log(datetimes);
    //return;


    if (!method) {
      method = 'request';
    }

    var user = angular.copy($scope.shared.user);
    delete user.positions;
    var attendees = [user];
    if (!$scope.interview.exclude_candidate) attendees.push($scope.candidate);
    attendees = attendees.concat($scope.interview.additional_participants);
    var interview = {
      start_time: datetimes[0].start_time,
      end_time: datetimes[0].end_time,
      method: method,
      title: $scope.interview.title,
      interview_guide: $scope.interview.interview_guide,
      duration: datetimes[0].duration,
      has_video: $scope.interview.has_video,
      record_video: $scope.interview.record_video,
      location: $scope.interview.location,
      exclude_candidate: $scope.interview.exclude_candidate,
      description: $scope.interview.description,
      additional_participants: $scope.interview.additional_participants,
      tz_offset: tzOffset,
      tz_code: tzCode,
      attendees: attendees,
      datetimes: datetimes
    };

    if ($scope.interview._id) {
      interview._id = $scope.interview._id;
    }

    if ($scope.interview.has_google_event) {
      interview.has_google_event = $scope.interview.has_google_event;
      interview.google_event = $scope.interview.google_event;
    }

    $scope.appClient.sendInterviewRequest(interview, $scope.shared.activeCompany.company._id, positionId, candidate._id, function (error, result) {
      if (result) {
        $rootScope.$broadcast('interviewAdded', result);
      }

      $scope.closeModal(result);
    });
  };

  initializeDurations();
  initializeTimes();
}]);
'use strict';

angular.module('appController').controller('InterviewWorkflowModalInstanceCtrlNew', ['$scope', '$rootScope', '$uibModalInstance', '$uibModal', '$http', 'uiCalendarConfig', 'AppClient', 'SharedData', 'positionId', 'candidate', 'interview', 'schedule', 'dialog', 'ModalService', 'FeaturesService', '$timeout', '$cookieStore', function ($scope, $rootScope, $uibModalInstance, $uibModal, $http, uiCalendarConfig, AppClient, SharedData, positionId, candidate, interview, schedule, dialog, ModalService, FeaturesService, $timeout, $cookieStore) {
  console.log('init InterviewWorkflowModalInstanceCtrlNew');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = positionId;
  $scope.candidate = candidate; //$scope.schedule = schedule;

  $scope.user = $scope.shared.user;
  $scope.interview_guides = SharedData.activeCompany.interview_guides;
  $scope.members = SharedData.activeCompany.members.filter(function (member) {
    return member._id !== $scope.user._id;
  });
  $scope.today = new Date();
  $scope.multiple = false;
  $scope.invite = {
    'invitees': [],
    'email_invitees': []
  };
  var title = "".concat($scope.candidate.name, " Meeting (").concat($scope.candidate.position.name, ")");

  if ($scope.candidate.position.org_type === "pool") {
    title = "".concat($scope.candidate.name, " Meeting");
  }

  $scope.submitButtonText = 'Send Invite';
  $scope.newParticipant = {};
  $scope.interview = {
    title: title,
    additional_participants: [],
    datetimes: [],
    has_video: false,
    request_scorecards: false
  };
  $scope.moment = moment; // for me (DB)

  var formatDuration = function formatDuration(duration) {
    var format = duration + ' min';

    if (duration == 60) {
      format = '1 hr';
    } else if (duration > 60) {
      format = duration / 60 + ' hrs';
    }

    return format;
  };

  if (interview) {
    interview.existing = true;

    for (var i = 0; i < interview.datetimes.length; i++) {
      var datetime = interview.datetimes[i];
      datetime.date = new Date(datetime.start_time);
      datetime.startTime = {
        id: moment(datetime.start_time).format('HH:mm:ss'),
        name: moment(datetime.start_time).format('h:mma')
      };

      if (typeof datetime.duration === 'number') {
        datetime.duration = {
          min: datetime.duration,
          name: formatDuration(datetime.duration)
        };
      }
    }

    interview.additional_participants = interview.attendees.filter(function (attendee) {
      return attendee._id !== $scope.shared.user._id && attendee._id !== $scope.candidate._id;
    });

    if (interview.video_session_id) {
      interview.has_video = true;
    } else {
      interview.has_video = false;
    }

    $scope.interview = interview;
  }

  $scope.eventsExisting = [];
  $scope.eventsFreebusy = [];
  $scope.eventsInterview = [];
  $scope.eventSources = [[], [], []];

  var checkFeatureAvailability = function checkFeatureAvailability(newVal) {
    if (!$scope.interview.has_video || typeof $scope.interview.has_video === 'undefined') {
      return;
    }

    if (FeaturesService.actions.block('video_interview')) {
      $scope.interview.has_video = false;
      delete $scope.interview.record_video;
    }
  };

  $scope.setInterviewGuide = function ($item, guide, $model) {
    if (FeaturesService.actions.block('interview_kits')) {
      $scope.interview.interview_guide = null;
    }

    ;
  };

  $scope.$watch('interview.record_video', function (newVal) {
    if (!$scope.interview.hasOwnProperty('record_video') || !$scope.interview.record_video) return;

    if (FeaturesService.actions.block('video_interview_archiving')) {
      delete $scope.interview.record_video;
    }
  });
  $scope.$watch('interview.has_video', checkFeatureAvailability);
  $scope.$watch('interview.request_scorecards', function (oldVal, newVal) {
    if (!oldVal) return;

    if (FeaturesService.actions.block('tasks', {
      specific: 'request_scorecards'
    })) {
      $scope.interview.request_scorecards = false;
    }
  }); // generate time zone dropdown

  var zoneNames = Object.keys(moment.tz._zones).map(function (k) {
    return typeof moment.tz._zones[k] === 'string' ? moment.tz._zones[k].split('|')[0] : moment.tz._zones[k].name;
  }).filter(function (z) {
    return z.indexOf('/') >= 0;
  }).sort(); //console.log(zoneNames);

  var current_time = new Date().getTime();
  zoneNames = zoneNames.map(function (name) {
    var offset = moment.tz.zone(name).utcOffset(current_time); //var gmt = offset / 60;

    var gmt = moment().tz(name).format('Z'); //var positive = (gmt >= 0);
    //if (!positive) gmt *= -1;
    //gmt += '';

    if (gmt >= 0) gmt = '+' + gmt;
    /*gmt = gmt.split('.');
    if (gmt.length > 1) {
        if (gmt[0] < 10) gmt[0] = '0' + gmt[0];
        if (gmt[1] < 10) gmt[1] = '0' + gmt[1];
        gmt = gmt.join(':')
    } else {
        if (gmt[0] < 10) gmt[0] = '0' + gmt[0];
        gmt = gmt + ':00';
    }
    if (positive) {
        gmt = '+' + gmt;
    } else {
        gmt = '-' + gmt;
    }*/

    var abbr = moment.tz.zone(name).abbr(current_time);
    return {
      gmt: gmt,
      text: "GMT".concat(gmt, " - ").concat(name),
      abbr: abbr,
      name: name,
      offset: offset,
      type: 'Timezones'
    };
  }); //console.log(zoneNames);

  var setTimezoneStorage = function setTimezoneStorage(timezone) {
    var timezones = JSON.parse(window.localStorage.getItem('recentTimezones'));

    if (timezones && timezones.findIndex(function (_tz) {
      return _tz === timezone;
    }) === -1) {
      timezones.unshift(timezone);
    } else if (!timezones) {
      timezones = [timezone];
    }

    if (timezones.length > 10) timezones = timezones.splice(0, 10);
    window.localStorage.setItem('recentTimezones', JSON.stringify(timezones));
  };

  var location = moment.tz.guess();

  if (location) {
    setTimezoneStorage(location);
  }

  var recentTimezones = JSON.parse(window.localStorage.getItem('recentTimezones')) || [];
  var recent;

  if (recentTimezones.length > 0) {
    recent = zoneNames.reduce(function (acc, zone) {
      if (recentTimezones.indexOf(zone.name) > -1) {
        var _z = angular.copy(zone);

        _z.type = 'Recent';
        acc.push(_z);
      }

      return acc;
    }, []);
  }

  if (recent) {
    $scope.timezones = recent.concat(zoneNames);
  } else {
    $scope.timezones = zoneNames;
  } //$scope.timezones = zoneNames;


  $scope.interview.timezone = $scope.timezones.find(function (timezone) {
    return timezone.name === location;
  }); //}
  //var offset = $scope.interview.timezone.offset;

  var tz = location;

  var initializeDurations = function initializeDurations() {
    $http.get('/data/durations.json').success(function (data) {
      $scope.durations = data; //console.log($scope.durations);
    }).error(function (error) {
      console.log('Error fetching durations JSON!: ' + error);
    });
  };

  $scope.setGlobalDuration = function (item) {
    //console.log(item);
    $cookieStore.put('Duration', JSON.stringify(item));
    $scope.globalDuration = item;
  };

  var initializeTimes = function initializeTimes() {
    $http.get('/data/scheduleTimes.json').success(function (data) {
      $scope.times = data;
    }).error(function (error) {
      console.log('Error fetching times JSON!: ' + error);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close(null);
  };

  $scope.showGoogleFreeBusy = function () {
    var width = 788;
    var height = 400;
    var calendarEmail = $scope.shared.user.google_calendar ? $scope.shared.user.google_calendar : $scope.shared.user.google_email_address;
    var w = openWindow("Google Calendar", "https://www.google.com/calendar/embed?src=" + calendarEmail, height, width);
    w.focus();
    $parentScope.gaEventTracker("ShowGoogleFreeBusy");
  };

  var pending = [];

  $scope.excludeCandidate = function () {
    dialog.confirm({
      title: "Exclude Candidate",
      message: "You want to exclude the candidate on this invitation?"
    }, function (result) {
      if (result === true) {
        $scope.interview.exclude_candidate = true;
      }
    });
  };

  $scope.removeParticipant = function () {
    var index = this.$index;
    $scope.members.push($scope.interview.additional_participants[index]);
    $scope.interview.additional_participants.splice(index, 1);
    initializeCalendar();
  };

  $scope.addParticipant = function (participant) {
    $scope.interview.additional_participants.push(participant);
    initializeCalendar();
    $scope.members = $scope.members.filter(function (member) {
      return member._id !== participant._id;
    });
  };

  $scope.openAddInterviewGuide = function (guide) {
    if (FeaturesService.actions.block('interview_kits')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_interview_guide_modal.html',
      controller: 'AddInterviewGuideModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview_guide: function interview_guide() {
          return guide;
        }
      }
    });
    modalInstance.result.then(function (result) {
      console.log("RESULT: " + JSON.stringify(result));

      if (result) {
        console.log("Adding");
        SharedData.activeCompany.interview_guides.unshift(result);
      }
    }, function () {});
  };

  $scope.sendInterviewRequest = function (method) {
    //console.log('=========');
    $scope.buttonDisable = true;
    var datetimes = $scope.eventsInterview.map(function (event) {
      //console.log(event);
      return {
        start_time: event.start,
        end_time: event.end,
        //start_time: moment(event.start).add($scope.interview.timezone.offset, 'minutes').format(),
        //end_time: moment(event.end).add($scope.interview.timezone.offset, 'minutes').format(),
        duration: event.duration
      };
    });
    /*
    // way better way to do all this shit
    $scope.interview.datetimes = $scope.eventsInterview.map(event => {
        var datetime = {};
        var convertedStart = moment(event.start);
        var convertedEnd = moment(event.end);
        var duration = (event.end._d - event.start._d) / 1000 / 60;
        datetime.freebusy = event;
         // need to convert the time since we are handling timezones ourself
        //console.log(event.start);
        var convertedTime = moment(event.start);
        //console.log(convertedTime);
        datetime.date = convertedTime._d;
        datetime.display = moment(convertedTime._d).format('dddd, MMM. Do - h:mma');
        datetime.startTime = {
            id: moment(convertedTime._d).format('HH:mm:ss'),
            name: moment(convertedTime._d).format('h:mma')
        };
        datetime.duration = {
            min: duration,
            name: formatDuration(duration)
        };
         return datetime;
    });
     var datetimes = [];
    var datetime, month, dom, startTime, str, m, m2, d, st, et;
     for (var i = 0; i < $scope.interview.datetimes.length; i++) {
        datetime = $scope.interview.datetimes[i];
        console.log(datetime);
         month = datetime.date.getMonth() + 1;
        if(month < 10) {
            month = "0" + month;
        }
        dom = datetime.date.getDate();
        if(dom < 10) {
            dom = "0" + dom;
        }
         startTime = datetime.startTime.id;
         str = datetime.date.getFullYear() + '-' + month + '-' + dom + 'T' + startTime;
         m = moment(str).add('ms', ($scope.interview.timezone.offset * 60000));
        m2 = moment(str);
         d = new Date(Date.parse(m2.format()));
        st = m2.format();
        //var et = new Date((Date.parse(date.getFullYear() + '-' + month + '-' + dom + 'T' + endTime) + (tzOffset * 60000))).toISOString();
        et = datetime.end.format();
        //et = new Date(d.getTime() + (datetime.duration.min * 60 * 1000)).toISOString();
        datetimes.push({
            start_time: st,
            end_time: et,
            duration: datetime.duration.min
        });
     }*/
    //console.log(datetimes);
    //return;

    if (!method) {
      method = 'request';
    }

    var user = angular.copy($scope.shared.user);
    delete user.positions;
    var attendees = [user];
    if (!$scope.interview.exclude_candidate) attendees.push($scope.candidate);
    attendees = attendees.concat($scope.interview.additional_participants);
    var interview = {
      start_time: datetimes[0].start_time,
      end_time: datetimes[0].end_time,
      method: method,
      title: $scope.interview.title,
      interview_guide: $scope.interview.interview_guide,
      duration: datetimes[0].duration,
      has_video: $scope.interview.has_video,
      record_video: $scope.interview.record_video,
      location: $scope.interview.location,
      exclude_candidate: $scope.interview.exclude_candidate,
      description: $scope.interview.description,
      additional_participants: $scope.interview.additional_participants,
      tz_offset: $scope.interview.timezone.offset,
      tz_code: $scope.interview.timezone.abbr,
      request_scorecards: $scope.interview.request_scorecards,
      attendees: attendees,
      datetimes: datetimes
    };

    if ($scope.interview._id) {
      interview._id = $scope.interview._id;
    }

    if ($scope.interview.has_google_event) {
      interview.has_google_event = $scope.interview.has_google_event;
      interview.google_event = $scope.interview.google_event;
    }

    setLocationStorage(interview.location);
    setTimezoneStorage($scope.interview.timezone.name); //console.log(interview)
    //return;

    $scope.appClient.sendInterviewRequest(interview, $scope.shared.activeCompany.company._id, positionId, candidate._id, function (error, result) {
      if (result) {
        $rootScope.$broadcast('interviewAdded', result);
      }

      $scope.closeModal(result);
    });
  };

  $scope.interviewLocations = JSON.parse(window.localStorage.getItem('interviewLocations')) || []; //console.log($scope.interviewLocations);

  $scope.deleteLocation = function (e, location) {
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));
    var index = locations.findIndex(function (_l) {
      return _l.id === location.id;
    });

    if (index > -1) {
      locations.splice(index, 1);
      $scope.interviewLocations = locations;
      window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var setLocationStorage = function setLocationStorage(location) {
    if (!location) return;
    location = {
      id: new Date().getTime(),
      name: location
    };
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));

    if (locations && locations.findIndex(function (_l) {
      return _l.name === location.name;
    }) === -1) {
      locations.unshift(location);
    } else if (!locations) {
      locations = [location];
    }

    if (locations.length > 10) locations = locations.splice(0, 10);
    window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
  };

  $timeout(function () {
    // set calendar content height after modal height is set
    var contentHeight = document.querySelector('.schedule-interview-calendar').clientHeight - 85;
    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'contentHeight', contentHeight);
  }, 0);
  $scope.participants = [];
  $scope.notShared = [];

  var freebusyEvents = function freebusyEvents(freebusy) {
    freebusy = freebusy || [];
    var participants = angular.copy($scope.interview.additional_participants);
    participants.unshift($scope.shared.user);
    var freebusyEvents = [];
    var idx = 1;
    Object.keys(freebusy, i).forEach(function (email) {
      var user = participants.find(function (participant) {
        return participant.email_address === email;
      }) || participants.find(function (participant) {
        return participant.google_calendar === email;
      }) || participants.find(function (participant) {
        return participant.outlook_calendar === email;
      }) || {
        name: 'Not Found'
      };
      user.freebusyColor = "participant-".concat(idx);

      if (freebusy[email].hasOwnProperty('errors')) {
        if (user.email_address === $scope.shared.user.email_address) {
          user.freebusy_class = 'participant-not-shared';
        } else {
          $scope.interview.additional_participants.forEach(function (participant) {
            if (participant.email_address === user.email_address) {
              participant.freebusy_class = 'participant-not-shared';
            }
          });
        }
      } else {
        //$scope.participants.push(user);
        if (user.email_address === $scope.shared.user.email_address) {
          user.freebusy_class = user.freebusyColor;
        } else {
          $scope.interview.additional_participants.forEach(function (participant) {
            if (participant.email_address === user.email_address) {
              participant.freebusy_class = user.freebusyColor;
            }
          });
        }

        freebusy[email].busy.forEach(function (event) {
          //console.log(moment.utc(event.start));
          freebusyEvents.push({
            start: moment.tz(event.start, tz).format(),
            end: moment.tz(event.end, tz).format(),
            title: event.title || 'busy',
            className: "participant-".concat(idx)
          });
        });
      }

      idx++;
    });
    /*$scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
        return !($scope.bzEvents.find((bzEvent) => {
            var sameStart = event.start.toJSON() === bzEvent.start.toJSON(),
                sameEnd = event.end.toJSON() === bzEvent.end.toJSON();
            return sameStart && sameEnd;
        }));
    });*/
    //console.log($scope.freebusyEvents);

    $scope.eventsFreebusy = freebusyEvents;
    $scope.eventSources[1] = $scope.eventsFreebusy; //console.log($scope.eventsFreebusy);
    //console.log($scope.eventSources);
    //refreshCalendar();
    //console.log($scope.eventSources);
    //$('#freebusyCalendar').fullCalendar('rerenderEvents');
  }; //moment.tz.setDefault(tz);


  $scope.setTimeZone = function (zone, j, modal) {
    //console.log(zone.name);
    //console.log(modal.offset);
    tz = zone.name; //moment.tz.setDefault(tz);

    var eventSources = angular.copy($scope.eventSources);
    eventSources.forEach(function (events) {
      events.forEach(function (event) {
        var start = moment.tz(event.start, tz);
        var end = moment.tz(event.end, tz);

        if (event.bzy_id) {
          var id = event.bzy_id;
          var duration = (end._d - start._d) / 1000 / 60;
          var index = $scope.eventsInterview.findIndex(function (event) {
            return event.bzy_id === id;
          });
          event.formatted_start_time = start.format('MMM D [at] h:mm A ') + '(' + zone.abbr + ') - ' + duration + 'min';

          if (index > -1) {
            $scope.eventsInterview[index].formatted_start_time = event.formatted_start_time;
            $scope.eventsInterview[index].start = start.format();
            $scope.eventsInterview[index].end = end.format();
          } else {
            console.log('not found in $scope.eventsInterview');
          }

          uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', event._id);
        }

        event.start = start.format();
        event.end = end.format();
      });
    });
    $scope.eventSources[0] = eventSources[0];
    $scope.eventSources[1] = eventSources[1];
    $scope.eventSources[2] = eventSources[2]; //$scope.uiConfig.calendar.timezone = tz;
    //$('#freebusyCalendar').fullCalendar('option', 'timezone', zone.name || false);
    //console.log(uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'timezone'));
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'timezone', zone.name || false);

    /*$scope.eventSources.forEach(source => {
        source.forEach(item => {
            item.start
        })
    })*/
  };

  $scope.refreshCalendar = function () {
    //console.log('refreshCalendar');
    console.log(uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('eventSources')); //uiConfig.calendars.freebusyCalendar.fullCalendar('gotoDate', $scope.aWeekStart);
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents');
    //uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('addEventSource', $scope.eventSources);
  };

  var initializeCandidate = function initializeCandidate() {
    //console.log($scope.interview);
    //console.log(schedule);
    $scope.bzEvents = []; // existing candidate interviews

    var current_date = moment(new Date()).startOf('day');
    var groupedResults = schedule.filter(function (event) {
      return moment(event.start_time).isAfter(moment().format('YYYY-MM-DD'));
    });
    groupedResults.map(function (event) {
      return event.date = moment(event.start_time).format('YYYY-MM-DD');
    });
    $scope.schedule = _.groupBy(groupedResults, function (event) {
      return event.date;
    });

    for (var i in schedule) {
      var result = schedule[i];

      if (!result.candidate) {
        continue;
      }

      var className = result.candidate_id === $scope.candidate._id ? 'participant-candidate' : result.candidate && result.attendee_ids && result.attendee_ids.indexOf($scope.shared.user._id) > -1 ? 'assigned' : '';
      var event = {
        'start': moment.tz(result.start_time, tz).format(),
        'end': moment.tz(result.end_time, tz).format(),
        'title': result.candidate ? result.candidate.name : result._id,
        'data': result,
        'className': className //(result.candidate && result.attendee_ids && (result.attendee_ids.indexOf($scope.shared.user._id) > -1)) ? "assigned" : className

      };
      $scope.bzEvents.push(event);
    }

    $scope.eventsExisting = $scope.eventsExisting.concat(angular.copy($scope.bzEvents));
    $scope.eventSources[0] = $scope.eventsExisting;
  };

  var initializePending = function initializePending() {
    // current interview times
    //console.log($scope.interview.datetimes);
    var pending = $scope.interview.datetimes.map(function (pending, i) {
      return {
        start: pending.start_time,
        end: moment(pending.start_time).add('minutes', pending.duration.min).format(),
        formatted_start_time: moment(pending.start_time).format('MMM D [at] h:mm A ') + '(' + $scope.interview.timezone.abbr + ') - ' + pending.duration.min + 'min',
        bzy_id: new Date().getTime() + i,
        className: 'pending',
        duration: pending.duration.min,
        editable: true
      };
    }); //console.log(pending);

    if (pending.length > 0) {
      $scope.eventsInterview = $scope.eventsInterview.concat(pending);
      $scope.eventSources[2] = $scope.eventsInterview;
    }
  };

  var initializeCalendar = function initializeCalendar() {
    console.log('initialize calendar'); // participants freebusy

    var freebusyFunc = null; // determine which freebusy to use

    if ($scope.shared.user.google_calendar) {
      freebusyFunc = $scope.appClient.getGoogleFreebusy;
    } else if ($scope.shared.user.outlook_calendar) {
      freebusyFunc = $scope.appClient.getOutlookFreebusy;
    }

    if (freebusyFunc) {
      //console.log('getting freebusy');
      //console.log($scope.interview.additional_participants);
      freebusyFunc(SharedData.activeCompany.company._id, $scope.interview.additional_participants).then(function (result) {
        // date transformation has to happen locally to use local timezone
        //console.log(result);
        function createDateAsUTC(date) {
          return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
        } //console.log(createDateAsUTC(new Date('2018-02-13T14:30:00Z')));
        // UTC to Local


        Object.keys(result).forEach(function (email) {
          result[email].busy.forEach(function (event) {
            //console.log(event);
            //event.start = moment(createDateAsUTC(new Date(event.start))).toDate();
            //event.end = moment(createDateAsUTC(new Date(event.end))).toDate();
            if ($scope.shared.user.google_calendar) {
              event.start = moment.tz(event.start, tz).format();
              event.end = moment.tz(event.end, tz).format();
            } else if ($scope.shared.user.outlook_calendar) {
              event.start = moment.tz(createDateAsUTC(new Date(event.start)), tz).format();
              event.end = moment.tz(createDateAsUTC(new Date(event.end)), tz).format();
            }
          });
        });
        freebusyEvents(result);
      });
    }
  };

  $scope.removeDatetime = function (datetime) {
    var id = datetime.bzy_id;
    if (!id) return;
    var index = $scope.eventsInterview.findIndex(function (event) {
      return event.bzy_id === id;
    });

    if (index > -1) {
      $scope.eventsInterview.splice(index, 1);
    } else {
      console.log('not found in $scope.eventsInterview');
    } //console.log(JSON.stringify($scope.eventsInterview));


    $scope.eventSources[2] = $scope.eventsInterview; // don't rely on model to remove events

    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', datetime._id); //console.log(JSON.stringify($scope.eventsInterview));
  };

  $scope.eventClick = function (calEvent, jsEvent, view) {
    var id = calEvent.bzy_id;
    if (!id) return;
    var index = $scope.eventsInterview.findIndex(function (event) {
      return event.bzy_id === id;
    });

    if (index > -1) {
      $scope.eventsInterview.splice(index, 1);
    } else {
      console.log('not found in $scope.eventsInterview');
    } //console.log(JSON.stringify($scope.eventsInterview));


    $scope.eventSources[2] = $scope.eventsInterview; // don't rely on model to remove events

    uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', calEvent._id); //console.log(JSON.stringify($scope.eventsInterview));
  };
  /*$scope.uiConfig = {
      calendar: {
          defaultView: 'agenda',
          nowIndicator: true
      }
  };*/


  var DSTOffset = function DSTOffset(selectedDST) {
    var currentDST = moment.tz(tz).isDST(); //console.log(`${currentDST} - ${selectedDST}`);

    if (currentDST === selectedDST) {
      return 0;
    } else if (currentDST && !selectedDST) {
      return 60;
    } else if (!currentDST && selectedDST) {
      return -60;
    } else {
      return 0;
    }
  };

  var eventUpdate = function eventUpdate(calEvent) {
    var id = calEvent.bzy_id;
    if (!id) return;
    var duration = (calEvent.end._d - calEvent.start._d) / 1000 / 60;
    var index = $scope.eventsInterview.findIndex(function (event) {
      return event.bzy_id === id;
    });
    var formatted_start_time = calEvent.start.format('MMM D [at] h:mm A ') + '(' + $scope.interview.timezone.abbr + ') - ' + duration + 'min';

    if (index > -1) {
      var newEvent = angular.copy($scope.eventsInterview[index]);
      var start = moment.tz(calEvent.start, tz);
      var end = moment.tz(calEvent.end, tz); //newEvent.start = start.add($scope.interview.timezone.offset, 'minutes').format();
      //newEvent.end = end.add($scope.interview.timezone.offset, 'minutes').format();

      newEvent.start = start.add($scope.interview.timezone.offset + DSTOffset(start.isDST()), 'minutes').format(), newEvent.end = end.add($scope.interview.timezone.offset + DSTOffset(start.isDST()), 'minutes').format(), newEvent.formatted_start_time = formatted_start_time;
      newEvent.duration = calEvent.duration;
      uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('removeEvents', calEvent._id);
      $scope.eventsInterview.splice(index, 1, newEvent);
    } else {
      console.log('not found in $scope.eventsInterview');
    } //$scope.eventSources[2] = $scope.eventsInterview;

  };

  var setDuration = $cookieStore.get('Duration');

  if (setDuration) {
    //console.log(setDuration);
    $scope.globalDuration = JSON.parse(setDuration);
  } else {
    $scope.globalDuration = {
      name: "30 min",
      min: 30
    };
  }

  $scope.uiConfig = {
    'calendar': {
      //timezone: false,
      schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
      eventClick: $scope.eventClick,
      header: {
        left: 'today next',
        center: 'title',
        right: '' // 'agenda6Day agendaDay'

      },
      defaultView: 'agenda6Day',
      views: {
        agenda6Day: {
          type: 'agenda',
          duration: {
            days: 5
          },
          buttonText: '5 Day View'
        }
      },
      scrollTime: '08:00:00',
      defaultDate: moment().format('YYYY-MM-DD'),
      nowIndicator: true,
      selectable: true,
      selectConstraint: {
        start: moment().format('YYYY-MM-DD'),
        end: '2100-01-01'
      },
      snapDuration: {
        minutes: 15
      },
      eventDrop: eventUpdate,
      eventResize: eventUpdate,
      windowResize: function windowResize(view) {
        var contentHeight = document.querySelector('.schedule-interview-calendar').clientHeight - 85;
        uiCalendarConfig.calendars.freebusyCalendar.fullCalendar('option', 'contentHeight', contentHeight);
      },
      select: function select(start, end) {
        if (!start.hasTime()) return;
        var global_duration = $scope.globalDuration.min; //console.log(global_duration);

        var duration = (end._d - start._d) / 1000 / 60;
        var eventData;
        /*if (global_duration && (duration > global_duration)) {
            console.log('create multiple events');
            eventData = [];
            var events = Math.floor(duration / global_duration);
            console.log(events);
            for (var i = 0; i <= events - 1; i++) {
                console.log('creating new event');
                end = start.clone().add(global_duration, 'minutes');
                eventData.push({
                    bzy_id: new Date().getTime() + '_' + i,
                    className: 'pending',
                    start: start,
                    end: end,
                    editable: true
                })
                start = start.clone().add(global_duration, 'minutes');
            }
            console.log(eventData);
            $scope.eventsInterview = $scope.eventsInterview.concat(eventData);
        } else { */

        if (global_duration && duration < global_duration) {
          end = start.clone().add(global_duration, 'minutes');
          duration = global_duration;
        } //console.log(start);
        //start.local();
        //end.local();


        var start = moment.tz(start, tz);
        var end = moment.tz(end, tz);
        DSTOffset(start.isDST());
        eventData = {
          bzy_id: new Date().getTime(),
          className: 'pending',
          start: start.add($scope.interview.timezone.offset + DSTOffset(start.isDST()), 'minutes').format(),
          end: end.add($scope.interview.timezone.offset + DSTOffset(start.isDST()), 'minutes').format(),
          duration: duration,
          //start: start,
          //end: end,
          editable: true,
          formatted_start_time: start.format('MMM D [at] h:mm A ') + '(' + $scope.interview.timezone.abbr + ') - ' + duration + 'min'
        }; //$scope.interview.datetimes.push(datetime);
        //}

        $scope.eventsInterview.push(eventData);
        $scope.eventSources[2] = $scope.eventsInterview; //$uibModalInstance.close(eventData);
      }
    }
  };
  initializeDurations();
  initializeTimes();
  initializeCandidate();
  initializePending();
  initializeCalendar();
}]);
'use strict';

angular.module('appController').filter('filterTagSearch', function () {
  return function (companyTags, objectTags, search) {
    return companyTags.filter(function (tag) {
      var keep = true;
      keep = objectTags.findIndex(function (objectTag) {
        return objectTag.tag === tag.tag;
      }) === -1;

      if (keep && search) {
        keep = tag.tag ? tag.tag.toLowerCase().indexOf(search.tag.toLowerCase()) !== -1 : false;
      }

      return keep;
    });
  };
});
angular.module('appController').directive('scrollToView', ['$window', '$document', function ($window, $document) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      attrs.$observe("scrollToView", function (selected) {
        if (scope.$index === Number(selected)) {
          element[0].scrollIntoView(false);
        }

        return;
      });
    }
  };
}]);
angular.module('appController').controller('CandidateTaggingModalInstanceCtrl', ['$scope', '$uibModalInstance', 'TaggingService', 'objectType', 'companyTags', 'objectTags', 'bulk', function ($scope, $uibModalInstance, TaggingService, objectType, companyTags, objectTags, bulk) {
  $scope.type = objectType;
  $scope.originalTags = objectTags || [];
  $scope.objectTags = angular.copy(objectTags) || [];
  $scope.companyTags = companyTags;
  $scope.bulk = bulk || null;
  $scope.selected = 0;

  $scope.save = function () {
    $uibModalInstance.close($scope.objectTags);
  };

  $scope.focusInput = function () {
    document.querySelector('#tag').focus();
  }; // Remove tag from tags array


  $scope.remove = function () {
    var tag_id = this.tag.id;
    $scope.objectTags.splice(this.$index, 1);
  }; // Select tag from tags with mouse


  $scope.addTag = function (index) {
    index = index || $scope.selected;
    $scope.objectTags.push($scope.filteredTags[index]);
    $scope.selected = 0;
    clearSearch();
    $scope.focusInput();
  };

  $scope.notExactMatch = function () {
    if ($scope.filteredTags.length === 1 && $scope.filteredTags[0].tag.toLowerCase() === $scope.search.tag.toLowerCase()) {
      return false;
    }

    return true;
  };

  $scope.createTag = function () {
    if ($scope.companyTags.find(function (tag) {
      return tag.tag === $scope.search.tag;
    })) return;
    $scope.objectTags.push({
      tag: $scope.search.tag
    });
    clearSearch();
  };

  $scope.filterTagSearch = function () {};

  var clearSearch = function clearSearch() {
    if ($scope.search) $scope.search.tag = '';
  }; // Navigate user list with arrow keys and enter


  $scope.navigate = function (e) {
    //console.log(e.keyCode);
    var direction = null,
        index = $scope.selected,
        length = $scope.filteredTags.length - 1;

    if (e.keyCode == 27) {
      // escape
      clearSearch();
      $scope.selected = 0;
    }

    if (e.keyCode == 8) {
      // delete
      if (!$scope.search || $scope.search.tag.length === 0) {
        $scope.objectTags.pop();
      }
    }

    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault();

      if ($scope.filteredTags.length !== 0) {
        $scope.addTag();
      } else {
        $scope.createTag();
      }
    }

    if (e.keyCode == 38) {
      direction = -1;
    } // up


    if (e.keyCode == 40) {
      direction = 1;
    } // down


    if (direction) {
      e.stopPropagation();
      index += direction;
      if (index < 0) index = length;
      if (index > length) index = 0;
      $scope.selected = index;
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close(null);
  };
}]);
'use strict';

angular.module('appController').controller('TaskCreateModalInstanceCtrl', ['$scope', '$rootScope', '$uibModal', '$uibModalInstance', '$upload', '$location', 'AppClient', 'SharedData', 'task', 'position', 'candidate', 'CompanyService', 'TasksService', function ($scope, $rootScope, $uibModal, $uibModalInstance, $upload, $location, AppClient, SharedData, task, position, candidate, CompanyService, TasksService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.candidate = candidate;
  $scope.position = position;
  $scope.mode = 'new';
  $scope.task = {
    title: '',
    attachments: []
  };
  $scope.selectedUser = {};
  $scope.selectedDueDate = {}; // users for tasks when added

  $scope.selectedUsers = [];

  $scope.addUser = function () {
    // add selectedUser to users
    $scope.errorMessage = "";

    if (!$scope.selectedUser.user) {
      return void 0;
    }

    var included = $scope.selectedUsers.some(function (user) {
      return user._id === $scope.selectedUser.user._id;
    });

    if (!included) {
      $scope.selectedUsers.push(Object.assign({}, $scope.selectedUser.user));
    }

    $scope.selectedUser = {};
  };

  $scope.removeUser = function (index) {
    $scope.selectedUsers.splice(index, 1);

    if ($scope.selectedUsers.length === 0) {
      $scope.errorMessage = "You must add at least one user for this task.";
    }
  };

  $scope.status = {
    isopen: false
  };

  if (task) {
    $scope.mode = 'edit';
    $scope.task = task;
    $scope.selectedUser.user = CompanyService.local.getMemberById(task.users[0]);
    $scope.selectedDueDate.date = task.due_date; // add to selectedUsers

    $scope.addUser();
  } // if not admin of any kind


  if (position && position.is_admin || position && $scope.shared.activeCompany.company.is_admin) {
    $scope.availableUsers = CompanyService.local.getMembersByIds($scope.position.all_users); //$scope.shared.activeCompany.members.filter(function(member) { return $scope.position.users.indexOf(member._id) > -1 });;
  } else if (position) {
    $scope.availableUsers = CompanyService.local.getMembersByIds([$scope.shared.user._id]);
  } else {
    $scope.availableUsers = CompanyService.local.getMembers();
  }

  $scope.selectedDueDateLabel = "Choose a due date";

  $scope.presetSelected = function (preset) {
    $scope.selectedDueDateLabel = "Due: " + preset.text;
    $scope.selectedDueDate.date = preset.date;
    $scope.status.isopen = false;
  };

  $scope.presetTimes = [{
    "date": moment(new Date()).add(1, 'days'),
    "text": "Tomorrow"
  }, {
    "date": moment(new Date()).add(2, 'days'),
    "text": "In 2 days"
  }, {
    "date": moment(new Date()).add(7, 'days'),
    "text": "In 1 week"
  }, {
    "date": moment(new Date()).add(14, 'days'),
    "text": "In 2 weeks"
  }, {
    "date": moment(new Date()).add(30, 'days'),
    "text": "In 1 month"
  }, {
    "date": moment(new Date()).add(60, 'days'),
    "text": "In 2 months"
  }];
  $scope.$watch('selectedDueDate.date', function (dueDate) {
    if (dueDate) {
      $scope.selectedDueDateLabel = "Due: " + moment(dueDate).calendar().replace(/at .*$/g, "");
      $scope.selectedDueDate.date = dueDate;
      $scope.task.due_date = dueDate;
      $scope.status.isopen = false;
    }
  });

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany._id + '/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.removeFileAttachment = function (idx) {
    $scope.task.attachments.splice(idx, 1);
  };

  $scope.uploadAttachment = function ($files) {
    var attachment = {
      'status': 'uploading'
    };
    $scope.task.attachments.push(attachment);
    upload($files, function (error, data) {
      if (data) {
        attachment.status = 'attached';
        attachment.file_name = data.file_name;
        attachment.url = data.url;
        attachment.content_type = data.content_type;
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.createTask = function () {
    if ($scope.selectedUsers.length === 0) {
      console.log('no selectedUsers');
      $scope.errorMessage = "You must add at least one user for this task.";
      return void 0;
    }

    $scope.errorMessage = "";

    if ($scope.task.title.trim().length <= 0) {
      return void 0;
    }

    if (!$scope.selectedDueDate.date) {
      $scope.errorMessage = "You must select a date this task is due.";
      return void 0;
    }

    $scope.errorMessage = "";
    var tasksData = $scope.selectedUsers.map(function (selectedUser) {
      var data = {
        "type": "taskGeneral",
        "title": $scope.task.title,
        "description": $scope.task.description,
        "due_date": $scope.task.due_date,
        "object": $scope.candidate,
        "users": [selectedUser._id],
        "attachments": $scope.task.attachments
      };

      if ($scope.candidate) {
        data.candidate_id = $scope.candidate._id;
        data.position_id = $scope.position._id;
      } else if ($scope.position) {
        data.position_id = $scope.position._id;
      }

      return Object.assign({}, $scope.task, data);
    });

    if ($scope.task._id) {
      Promise.all(tasksData.map(function (data) {
        return TasksService.updateTask(data);
      })).then(function (task) {
        $uibModalInstance.close(task[0]);
      }, function (error) {
        $scope.errorMessage = "Error updating task.";
      });
    } else {
      Promise.all(tasksData.map(function (data) {
        return TasksService.createTask(data);
      })).then(function (task) {
        $uibModalInstance.close(task[0]);
      }, function (error) {
        $scope.errorMessage = "Error creating task.";
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').filter('filterPositions', function () {
  return function (positions, text) {
    text = text.toLowerCase();
    return positions.filter(function (position) {
      return position.name.toLowerCase().indexOf(text) > -1 || position.location && position.location.name.toLowerCase().indexOf(text) > -1;
    });
  };
});
angular.module('appController').controller('CandidateUploadModalInstanceCtrl', ['$scope', '$upload', '$uibModalInstance', 'AppClient', 'SharedData', 'position', 'stage', '$timeout', 'CompanyService', 'PositionsService', 'CandidatesService', 'dialog', 'ModalService', function ($scope, $upload, $uibModalInstance, AppClient, SharedData, position, stage, $timeout, CompanyService, PositionsService, CandidatesService, dialog, ModalService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  var companyId = SharedData.activeCompany.company._id;
  $scope.position = position;
  $scope.noPosition = {
    _id: companyId
  };
  $scope.selectedPosition = {};
  $scope.stage = stage;

  if (stage) {
    $scope.stagePassedIn = true;
  }

  $scope.linkedin = {};
  $scope.candidate = {};
  $scope.files = [];
  $scope.addCandidateType = undefined;
  PositionsService.local.getMyPositions();
  $scope.step = "selectType";
  $scope.myFiles = null;
  $scope.error = false;
  $scope.fieldTypes = [{
    label: 'Name',
    key: 'name'
  }, {
    label: 'Email Address',
    key: 'email_address'
  }, {
    label: 'Summary',
    key: 'summary'
  }, {
    label: 'Phone Number',
    key: 'phone_number'
  }];
  $scope.fieldMappings = {};
  $scope.data = {
    rows: []
  };
  $scope.sampleSize = 4;
  $scope.columnIndex = 0;
  $scope.scrollAmount = '0%';
  $scope.showStageActions = false;
  $scope.actions = {
    enabled: false
  };
  $scope.$watch('files', function () {
    $scope.onFileSelect($scope.files);
  });

  var initStageActions = function initStageActions(stage) {
    var positionStageActions = $scope.position.stage_actions;
    $scope.showStageActions = false;
    var stageAction = false; // check pipeline if has pipeline stage action

    if (stage.actions && Object.keys(stage.actions).length > 1) {
      // stageAction = true;
      var stageActionIds = $scope.shared.stageActionTypes.map(function (type) {
        return type.stage_action_id;
      });
      stageActionIds.forEach(function (id) {
        if (id !== 'message_delay' && id !== 'questionnaire_delay' && stage.actions[id]) {
          stageAction = true;
        }
      });
    } else if (stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.questionnaire_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } // check if position has stages action


    if (positionStageActions && positionStageActions.hasOwnProperty(stage.id)) {
      if (Object.keys(positionStageActions[stage.id]).length > 0) {
        stageAction = true;
      } else {
        stageAction = false;
      }
    }

    $scope.showStageActions = stageAction;
  };

  var initPipeline = function initPipeline() {
    if (!$scope.position) return;

    if (!$scope.position.pipeline_id) {
      if ($scope.position.org_type === "pool") {
        $scope.position.pipeline_id = "default_pool";
      } else {
        $scope.position.pipeline_id = "default";
      }
    }

    $scope.position.pipeline = $scope.shared.activeCompany.pipelines[$scope.position.pipeline_id].pipeline;

    if ($scope.stage) {
      return;
    } // Get the first sourced stage and set as default;


    var appliedStage;

    for (var i in $scope.position.pipeline) {
      var stage = $scope.position.pipeline[i];

      if (stage.type && stage.type.id === "sourced") {
        $scope.stage = stage;
        break;
      }

      if (stage.id === "applied") {
        appliedStage = stage;
      }
    }

    if (!$scope.stage) {
      $scope.stage = appliedStage;
    }

    initStageActions($scope.stage);
  };

  $scope.$watch('selectedPosition.position', function () {
    if ($scope.selectedPosition.position) {
      $scope.position = $scope.selectedPosition.position;
    }

    initPipeline();
  }); //
  // Candidate Submitted Using Form
  //

  $scope.formCandidate = undefined;

  $scope.submitFormCandidate = function (candidate) {
    $scope.addCandidateType = "form";
    $scope.formCandidate = candidate;
    $scope.error = undefined;

    if (!position) {
      $scope.step = "selectPosition";
    } else if (stage && $scope.showStageActions) {
      $scope.step = 'selectStageAction';
      initPipeline();
    } else if (!stage || $scope.showStageActions) {
      $scope.step = 'selectStage';
      initPipeline();
    } else {
      $scope.gotoAdd();
    }
  };

  $scope.addCandidate = function (candidate) {
    if (!candidate) {
      return;
    }

    console.log('Adding candidate');

    if (!$scope.candidate.name) {
      return;
    }

    var stageId = "applied";

    if ($scope.stage && $scope.stage.id) {
      stageId = $scope.stage.id;
    }

    $scope.appClient.addCandidateToStage(candidate, $scope.shared.activeCompany.company._id, $scope.position._id, stageId, $scope.actions.enabled, function (error, result) {
      if (error) {
        $scope.updateFailed = true;
        $scope.step = "selectType";
        $scope.error = {
          'message': 'A candidate with this email address already exists.'
        };
        return;
      }

      $scope.step = 'done';
      $timeout(function () {
        closeModal(true);
      }, 1500);
    });
  }; //
  // Used with Resume Upload Candidate
  //


  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#main-attachment');
    chooser.addEventListener("change", function (e) {}, false);
    chooser.click();
  };

  $scope.$watch('files', function () {
    $scope.onFileSelect($scope.files);
  });
  $scope.resumeCandidate = undefined;

  $scope.onFileSelect = function ($files) {
    if (!$files || $files.length === 0) {
      return;
    }

    if ($files.length > 1 && CompanyService.getters.trial()) {
      dialog.confirm({
        title: "Upgrade Required",
        message: "Bulk resume upload is not allowed during the trial period. Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          //$scope.companySettings("plan");
          ModalService.companySettings("plan").then(function (result) {// do nothing
          });
        }
      });
      return;
    }

    $scope.error = undefined;
    $scope.addCandidateType = "resume";
    $scope.resumeCandidate = $files;
    $scope.candidates_count = $files.length;
    /*
            if (!position) {
                $scope.step = "selectPosition";
            } else if (!stage) {
                $scope.step = 'selectStage';
                initPipeline();
            }
    */

    if (!position) {
      $scope.step = "selectPosition";
    } else if (stage && $scope.showStageActions) {
      $scope.step = 'selectStageAction';
      initPipeline();
    } else if (!stage || $scope.showStageActions) {
      $scope.step = 'selectStage';
      initPipeline();
    } else {
      $scope.gotoAdd();
    }
  };

  $scope.minimizeModal = function () {
    angular.element('body').addClass('modal-minimized');
    angular.element('.modal-backdrop').addClass('minimizable'); //$rootScope.$emit('body:class:add', 'modal-minimized');
  };

  $scope.maximizeModal = function () {
    angular.element('body').removeClass('modal-minimized');
    angular.element('.modal-backdrop').removeClass('minimizable'); //$rootScope.$emit('body:class:add', 'modal-minimized');
  };

  $scope.uploadResumeCandidate = function ($files) {
    console.log("uploadResumeCandidate");
    $scope.candidateUploadingProgress = {
      uploadedCount: 0,
      totalErrors: 0,
      totalCount: $files.length
    };

    if ($files.length > 1) {
      $scope.addCandidateType = 'bulkResume';
    }

    var onProgress = function onProgress(e) {
      $scope.step = 'uploading';
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
      $scope.fileUploadingPercent = parseInt(100.0 * e.loaded / e.total);
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      $scope.step = 'done';
      $scope.candidateUploadingProgress.uploadedCount += 1;

      if ($scope.candidateUploadingProgress.uploadedCount === $scope.candidateUploadingProgress.totalCount) {
        $timeout(function () {
          closeModal(true);
        }, 1500);
      }
    },
        onError = function onError() {
      $scope.updateFailed = true;
      $scope.fileUploading = undefined;

      if ($scope.addCandidateType !== "bulkResume") {
        $scope.error = {
          'message': 'A candidate with this email address already exists.'
        };
        $scope.step = "selectType";
        return;
      }

      $scope.candidateUploadingProgress.totalErrors += 1;
      $scope.candidateUploadingProgress.uploadedCount += 1;

      if ($scope.candidateUploadingProgress.uploadedCount === $scope.candidateUploadingProgress.totalCount) {
        $timeout(function () {
          closeModal(true);
        }, 1500);
      }
    };

    var stageId = "applied";

    if ($scope.stage) {
      stageId = $scope.stage.id;
    }

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      $scope.updateFailed = false;
      $scope.fileUploading = true;
      var resource = '/api/company/' + $scope.shared.activeCompany.company._id + '/position/' + $scope.position._id + '/candidates/upload?status=' + ($scope.stage ? $scope.stage.id : '');

      if ($scope.actions.enabled) {
        resource += '&stage_actions_enabled=true';
      }

      $scope.upload = $upload.upload({
        url: resource,
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };
  /*
  if (!position) {
      $scope.step = "selectPosition";
  } else if (!stage) {
      $scope.step = 'selectStage';
      initPipeline();
  }
  */


  $scope.step = "selectType";
  $scope.myPositions = PositionsService.local.getMyPositions();
  $scope.positionSearch = {
    text: ''
  };

  if (stage) {
    initStageActions(stage);
  }
  /*
      if (!$scope.stage) {
          $scope.showStageSelect = true;
          $scope.stage = {
              icon: 'list',
              name: 'Select a Stage'
          };
      }
  */


  if (!$scope.stage && position) {
    $scope.showStageSelect = true;

    if ($scope.position) {
      initPipeline();
    } else {
      $scope.stage = {
        icon: 'list',
        name: 'Select a Stage'
      };
    }
  }

  $scope.setPosition = function (position) {
    $scope.position = position;
    initPipeline();

    if (!stage) {
      $scope.step = 'selectStage';
    } else {
      $scope.step = 'selectStage'; //$scope.step = 'selectType';
    }
  };

  $scope.setStage = function () {
    $scope.stage = this.stage;
    initStageActions($scope.stage);
  };

  $scope.gotoAdd = function () {
    if ($scope.addCandidateType === "form") {
      $scope.addCandidate($scope.formCandidate);
    } else if ($scope.addCandidateType === "resume") {
      $scope.uploadResumeCandidate($scope.resumeCandidate);
    } else if ($scope.addCandidateType === "csv") {
      $scope.importCandidates();
    }
  };

  var closeModal = function closeModal(refresh) {
    $timeout(function () {
      angular.element('body').removeClass('modal-minimized');
      angular.element('.modal-backdrop').removeClass('minimizable');
    }, 100);
    $uibModalInstance.close(refresh);
  };

  $scope.closeModal = function (refresh) {
    $timeout(function () {
      angular.element('body').removeClass('modal-minimized');
      angular.element('.modal-backdrop').removeClass('minimizable');
    }, 100);
    $uibModalInstance.close(refresh);
  };

  $scope.cancel = function () {
    closeModal();
  };

  $scope.addSourcedCandidate = function (candidate) {
    if (!candidate.name) {
      return;
    }

    candidate.status = status;
    $scope.appClient.addSourcedResumeCandidate(candidate, $scope.shared.activeCompany.company._id, $scope.position._id, function (error, result) {
      if (error) {
        $scope.updateFailed = true;
        $scope.step = "selectType";
        $scope.error = {
          'message': 'A candidate with this email address already exists this.'
        };
        return;
      }

      $scope.updateFailed = false;
      $scope.candidateAdded = true;
      setTimeout(function () {
        closeModal(true);
      }, 500);
    });
  }; // csv stuff


  $scope.getColumnCount = function () {
    return new Array($scope.data.column_count);
  };

  $scope.navigate = function (increment) {
    $scope.columnIndex += increment;

    if ($scope.columnIndex >= $scope.data.column_count) {
      $scope.columnIndex = $scope.data.column_count - 1;
      return;
    }

    $scope.scrollAmount = "-".concat($scope.columnIndex * 340, "px");
  };

  $scope.selectFieldType = function (columnIndex) {
    var fieldType = this.field;

    for (var keyIndex in $scope.fieldMappings) {
      if ($scope.fieldMappings[keyIndex].key === fieldType.key) {
        delete $scope.fieldMappings[keyIndex];
      }
    }

    $scope.fieldMappings[columnIndex] = fieldType;
    $timeout(function () {
      $scope.navigate(1);
    }, 500);
  };

  $scope.clearFieldType = function (columnIndex) {
    delete $scope.fieldMappings[columnIndex];
  };

  $scope.uploadCSV = function ($files) {
    $scope.addCandidateType = "csv";

    function csvToArray(text) {
      var p = '',
          row = [''],
          ret = [row],
          i = 0,
          r = 0,
          s = !0,
          l;

      for (l in text) {
        l = text[l];

        if ('"' === l) {
          if (s && l === p) row[i] += l;
          s = !s;
        } else if (',' === l && s) l = row[++i] = '';else if ('\n' === l && s) {
          if ('\r' === p) row[i] = row[i].slice(0, -1);
          row = ret[++r] = [l = ''];
          i = 0;
        } else row[i] += l;

        p = l;
      }

      return ret;
    }

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      $scope.updateFailed = false;
      $scope.fileUploading = true;
      var reader = new FileReader();

      reader.onload = function (e) {
        var data = reader.result;
        var isWord = data.indexOf('word/document.xml') !== -1,
            isPDF = data.indexOf('%PDF-') !== -1,
            isWord97 = data.indexOf('Microsoft Word 97-2003 Document') !== -1;

        if (isWord || isPDF || isWord97) {
          $scope.fileTypeError = true;
          return;
        }

        $scope.data.rows = csvToArray(data); // old way

        /*var rows = data.split('\n');
        // eventually check for tab delimiter
        var delimiter = ',';
         rows.forEach((row) => {
            if (row.length > 0) {
                var columns = row.split(delimiter);
                $scope.data.rows.push(columns);
            }
        });*/

        $scope.data.column_count = $scope.data.rows[0].length;
        $scope.data.row_count = $scope.data.rows.length; //console.log($scope.data);

        $scope.step = "selectMap";
      };

      reader.readAsText(file);
    }
  };

  $scope.chooseImportDestination = function () {
    $scope.error = undefined;

    if (!position) {
      $scope.step = "selectPosition";
    } else if (!stage) {
      $scope.step = 'selectStage';
      initPipeline();
    } else {
      $scope.importCandidates();
    }
  };

  $scope.importCandidates = function () {
    var hasNameKey = false,
        field;

    for (var columnIndex in $scope.fieldMappings) {
      field = $scope.fieldMappings[columnIndex];
      if (field.key === 'name') hasNameKey = true;
    }

    if (!hasNameKey) {
      $scope.error = true;
      return;
    }

    var candidates = [];
    $scope.data.rows.forEach(function (row) {
      var candidate = {};

      for (var columnIndex in $scope.fieldMappings) {
        field = $scope.fieldMappings[columnIndex];

        if (row[columnIndex]) {
          candidate[field.key] = row[columnIndex].trim();
        }
      }

      if (Object.keys(candidate).length > 0) {
        // if a specific stage is selected
        if ($scope.stage) {
          candidate.status = $scope.stage.id;
          candidate.stage = $scope.stage;
        }

        if (!candidate.hasOwnProperty('name')) {
          candidate.name = candidate.hasOwnProperty('email_address') ? candidate.email_address.match(/^(.+)@/)[1] : 'no name';
        }

        candidates.push(candidate);
      }
    });
    if (candidates.length <= 0) return;
    $scope.step = "done";
    $timeout(function () {
      closeModal(true);
    }, 1500);
    CandidatesService.remote.import(companyId, $scope.position._id, candidates).then(function (results) {});
  };
}]);
'use strict';

angular.module('appController').controller('CompanyAnalyticsViewCtrl', ['$scope', '$rootScope', 'SharedData', '$state', 'ReportService', 'DateService', 'CompanyService', 'PositionsService', 'PositionsFilterService', '$cookieStore', 'FeaturesService', function ($scope, $rootScope, SharedData, $state, ReportService, DateService, CompanyService, PositionsService, PositionsFilterService, $cookieStore, FeaturesService) {
  console.log('CompanyAnalyticsViewCtrl init');
  $scope.navActive = $state.current.name;
  $scope.colors = ReportService.colors;
  $scope.months = ReportService.months;
  $scope.weekdays = ReportService.weekdays;
  $scope.today = new Date();
  $scope.isViewInitialized = false;
  $scope.sources = [];
  $scope.users = $scope.shared.activeCompany.members;
  $scope.companyAdmin = SharedData.activeCompany.company.user_role.id === 'company_admin';
  $scope.sourceActive = $state.params.sourceId ? true : false;
  $scope.userActive = $state.params.userId ? true : false; //console.log($state.params);

  $scope.showEEOCNav = CompanyService.getters.settings('eeoc.enable_eeoc') && $scope.shared.activeCompany.company.is_admin;
  $scope.showDispositionNav = ['required', 'optional'].indexOf(CompanyService.getters.settings('eeoc.reasons.disposition')) > -1 && $scope.shared.activeCompany.company.is_admin;
  $scope.showGDPRNav = CompanyService.getters.settings('gdpr.enabled') && $scope.shared.activeCompany.company.is_admin && SharedData.beta;

  if (FeaturesService.actions.block('reporting')) {
    $state.go('company.home');
  }

  PositionsService.local.getFilteredPositions({
    org_type: ['position']
  }).then(function (positions) {
    $scope.positions = positions;
  });
  $scope.segments = PositionsFilterService.getSegments().filter(function (segment) {
    return !segment.system;
  });
  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    $scope.navActive = toState.name;
  });
  $scope.selectedReportCriteria = {
    id: '',
    name: 'All My Positions',
    group: true
  };
  $scope.dateRanges = [{
    date_range: 'last7Days',
    label: 'Last 7 Days',
    candidate_filter: ['7days']
  }, {
    date_range: 'twoWeeks',
    label: 'Last 14 Days',
    candidate_filter: ['twoWeeks']
  }, {
    date_range: 'thisMonth',
    label: 'This Month',
    candidate_filter: DateService.getDateRange('thisMonth')
  }, {
    date_range: 'lastMonth',
    label: 'Last Month',
    candidate_filter: DateService.getDateRange('lastMonth')
  }, {
    date_range: 'last30Days',
    label: 'Last 30 Days',
    candidate_filter: ['30days']
  }, {
    date_range: 'last90Days',
    label: 'Last 90 Days',
    candidate_filter: DateService.getDateRange('last90days')
  }, {
    date_range: 'last180Days',
    label: 'Last 180 Days',
    candidate_filter: DateService.getDateRange('last180days')
  }, {
    date_range: 'customRange',
    label: 'Custom Range'
  }];
  var selectedDateRange = $cookieStore.get("SelectedDateRange");

  if (!selectedDateRange) {
    selectedDateRange = 'last7Days';
  }

  $scope.selectedDateRange = $scope.dateRanges.find(function (date) {
    return date.date_range === selectedDateRange;
  });
  $scope.selectedDateRange.timeframe = DateService.getDateRange(selectedDateRange);
  $scope.customRange = {
    start_date: null,
    end_date: null
  };
  $scope.params = {
    date_range: $scope.selectedDateRange.date_range
  };

  $scope.gotoCandidates = function (filters) {
    filters = filters || {};
    console.log(filters);

    if ($scope.selectedDateRange.date_range !== 'customRange') {
      filters.date_range = $scope.selectedDateRange.candidate_filter;
    } else {
      filters.date_range = {
        start: $scope.customRange.start_date,
        end: $scope.customRange.end_date
      };
    }

    if ($scope.selectedReportCriteria.group) {} else {
      filters.position_ids = [$scope.selectedReportCriteria.id];
    }

    $state.go('company.candidates', {
      filters: filters
    });
  };

  $scope.getCSVTitle = function (report, subreport, noTimeframe) {
    var name = "Breezy_".concat(report, "_").concat(subreport);

    if (noTimeframe) {
      name += "_".concat(moment().format('MM-DD-YYYY'));
    } else {
      name += "_".concat($scope.selectedDateRange.timeframe.start_formatted_short, "-").concat($scope.selectedDateRange.timeframe.end_formatted_short);
    }

    return name;
  };

  $scope.round = function (num) {
    return Math.round(num * 100) / 100;
  };

  $scope.getCustomReport = function () {
    $scope.dateRangeError = null;

    if (!$scope.customRange.start_date || !$scope.customRange.end_date) {
      $scope.dateRangeError = 'Start date and end date required';
    }

    if (!($scope.customRange.start_date instanceof Date) && !($scope.customRange.end_date instanceof Date)) {
      $scope.dateRangeError = 'Select valid dates';
    }

    if ($scope.customRange.start_date > $scope.customRange.end_date) {
      $scope.dateRangeError = 'Start date must be before end date';
    }

    if ($scope.dateRangeError) return;
    $scope.selectedDateRange.timeframe = DateService.getDateRange({
      value: 'customRange',
      start: $scope.customRange.start_date,
      end: $scope.customRange.end_date
    });
    $scope.params.start_date = moment($scope.customRange.start_date).format('YYYY-MM-DD');
    $scope.params.end_date = moment($scope.customRange.end_date).format('YYYY-MM-DD');
    $scope.$broadcast('reportUpdate');
  };

  $scope.setDateRange = function () {
    var temp = $scope.selectedDateRange.timeframe;
    $scope.selectedDateRange = this.range;
    $scope.selectedDateRange.timeframe = temp;
    $scope.params.date_range = $scope.selectedDateRange.date_range;

    if ($scope.selectedDateRange.date_range !== 'customRange') {
      $cookieStore.put("SelectedDateRange", $scope.selectedDateRange.date_range);
      delete $scope.params.start_date;
      delete $scope.params.end_date;
      $scope.selectedDateRange.timeframe = DateService.getDateRange(this.range.date_range);
    }

    $scope.$broadcast('reportUpdate');
  };

  $scope.setSegmentReportCriteria = function (segment) {
    //console.log(segment)
    $scope.selectedReportCriteria = {
      id: null,
      name: segment.name,
      group: true
    };
    var filters = segment.filters;
    PositionsService.local.getFilteredPositions(filters).then(function (positions) {
      if (positions.length > 0) {
        //console.log(positions.map(position => position._id))
        $scope.selectedReportCriteria.id = null; //positions.map(position => position._id);

        $scope.params.position_ids = positions.map(function (position) {
          return position._id;
        }); //console.log($scope.selectedReportCriteria)
      } //console.log($scope.params);


      $scope.$broadcast('reportUpdate');
    });
  };

  $scope.setReportCriteria = function (id, position) {
    if (position) {
      $scope.selectedReportCriteria = {
        'id': id,
        'name': position.name,
        group: false
      };
    } else {
      if (!id || id === "") {
        $scope.selectedReportCriteria = {
          'id': id,
          'name': "My Positions",
          group: true
        };
      } else if (id == "allpositions") {
        $scope.selectedReportCriteria = {
          'id': id,
          'name': "All Positions",
          group: true
        };
      } else if (id == "draft") {
        $scope.selectedReportCriteria = {
          'id': id,
          'name': "My Draft Positions",
          group: true
        };
      } else if (id == "published") {
        $scope.selectedReportCriteria = {
          'id': id,
          'name': "My Active Positions",
          group: true
        };
      } else if (id == "closed") {
        $scope.selectedReportCriteria = {
          'id': id,
          'name': "My Closed Positions",
          group: true
        };
      }
    }

    $scope.$broadcast('reportUpdate');
  };
}]);
'use strict';

angular.module('appController').controller('CompanyCalendarViewCtrl', ['$scope', '$rootScope', '$state', 'PositionsService', 'schedule', 'dialog', 'AppClient', 'SharedData', function ($scope, $rootScope, $state, PositionsService, schedule, dialog, AppClient, SharedData) {
  console.log('CompanyCalendarViewCtrl Init');
  $scope.navActive = $state.current.name;
  $scope.schedule = schedule;
  $scope.bzEvents = [];
  $scope.eventSources = [];
  $scope.includeEventType = {};
  $scope.includeParticipantType = {};
  $scope.includePosition = {};
  $scope.participantType = {
    'id': 'all_events',
    'label': "All Events"
  };
  $scope.myPositions = PositionsService.local.getMyPositionsGroupedByState();
  var position;

  for (var i in $scope.myPositions.published) {
    position = $scope.myPositions.published[i];
    $scope.includePosition[position._id] = true;
  }

  for (var j in $scope.myPositions.draft) {
    position = $scope.myPositions.draft[j];
    $scope.includePosition[position._id] = true;
  }

  for (var k in $scope.myPositions.closed) {
    position = $scope.myPositions.closed[k];
    $scope.includePosition[position._id] = true;
  }

  $scope.eventClick = function (data, jsEvent, view) {
    if (!data.data) return;
    $scope.openInterviewDetail(data.data, PositionsService.local.getPositionById(data.data.position_id), function (result) {
      if (result && result.action == "cancelled") {
        var idx;

        for (var i in $scope.bzEvents) {
          var event = $scope.bzEvents[i];

          if (event.data._id === data.data._id) {
            idx = i;
          }
        }

        $scope.bzEvents.splice(idx, 1);
        $scope.eventSources[0] = angular.copy($scope.bzEvents);
        $('#companyCalendar').fullCalendar('refetchEvents');
      }
    });
  };

  var calendarHeight = document.querySelector('.bzy-content.contained').clientHeight - 70;
  $scope.uiConfig = {
    'calendar': {
      eventClick: $scope.eventClick,
      header: {
        left: 'today prev,next',
        center: 'title',
        right: 'month agendaWeek agendaDay'
      },
      contentHeight: calendarHeight
    }
  };

  var filterEvents = function filterEvents() {
    $scope.bzEvents = [];
    var current_date = moment(new Date()).startOf('day');
    var groupedResults = schedule.filter(function (event) {
      return moment(event.start_time).isAfter(moment().format('YYYY-MM-DD'));
    });
    groupedResults.map(function (event) {
      return event.date = moment(event.start_time).format('YYYY-MM-DD');
    });
    $scope.schedule = _.groupBy(groupedResults, function (event) {
      return event.date;
    });

    for (var i in schedule) {
      var result = schedule[i];

      if (!result.candidate) {
        continue;
      }

      if ($scope.participantType.id === "my_events") {
        if (result.attendee_ids.indexOf($scope.shared.user._id) === -1) {
          continue;
        }
      } else if ($scope.participantType.id === "not_my_events") {
        if (result.attendee_ids.indexOf($scope.shared.user._id) > -1) {
          continue;
        }
      }

      if (!$scope.includePosition[result.position_id]) {
        continue;
      }

      var event = {
        'start': new Date(result.start_time),
        'end': new Date(result.end_time),
        'title': result.candidate ? result.candidate.name : result._id,
        'data': result,
        'className': result.candidate && result.attendee_ids.indexOf($scope.shared.user._id) > -1 ? "assigned" : ""
      };
      $scope.bzEvents.push(event);
    }

    $scope.eventSources[0] = angular.copy($scope.bzEvents);
  };

  var initialize = function initialize() {
    filterEvents();

    if (SharedData.user.google_calendar) {
      // show free busy
      return AppClient.getGoogleFreebusy(SharedData.activeCompany.company._id).then(function (busy) {
        if (!busy || !busy[SharedData.user.google_calendar] || !busy[SharedData.user.google_calendar].busy) return;
        var userBusy = busy[SharedData.user.google_calendar].busy;
        $scope.freebusyEvents = userBusy.map(function (event) {
          return {
            start: new Date(event.start),
            end: new Date(event.end),
            title: 'busy',
            className: 'google-calendar'
          };
        }); // dedupe events with same start and end time

        $scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
          return !$scope.bzEvents.find(function (bzEvent) {
            var sameStart = event.start.toJSON() === bzEvent.start.toJSON(),
                sameEnd = event.end.toJSON() === bzEvent.end.toJSON();
            return sameStart && sameEnd;
          });
        });
        $scope.eventSources[1] = angular.copy($scope.freebusyEvents);
      });
    } else if (SharedData.user.outlook_calendar) {
      // show free busy
      return AppClient.getOutlookFreebusy(SharedData.activeCompany.company._id).then(function (busy) {
        if (!busy || !busy[SharedData.user.outlook_calendar] || !busy[SharedData.user.outlook_calendar].busy) return;
        var userBusy = busy[SharedData.user.outlook_calendar].busy; // date transformation has to happen locally to use local timezone

        function createDateAsUTC(date) {
          return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
        }

        function formatDate(value) {
          try {
            var field = value.match(/^([+-]?\d{4}(?!\d\d\b))(?:-?(?:(0[1-9]|1[0-2])(?:-?([12]\d|0[1-9]|3[01]))?)(?:[T\s](?:(?:([01]\d|2[0-3])(?::?([0-5]\d))?|24\:?00)([.,]\d+(?!:))?)?(?::?([0-5]\d)(?:[.,](\d+))?)?([zZ]|([+-](?:[01]\d|2[0-3])):?([0-5]\d)?)?)?)?$/) || [];
            var resultDate = new Date(field[1], field[2] - 1 | 0, field[3] || 1, field[4] | 0, field[5] | 0, field[7] | 0, field[8] | 0);

            if (field[9]) {
              resultDate.setUTCMinutes(resultDate.getUTCMinutes() - resultDate.getTimezoneOffset() - (field[10] * 60 + +field[11] || 0));
            }

            return createDateAsUTC(resultDate);
          } catch (e) {
            return createDateAsUTC(new Date(value));
          }
        }

        $scope.freebusyEvents = userBusy.map(function (event) {
          return {
            //start: moment(createDateAsUTC(new Date(event.start))).toDate(),
            //end: moment(createDateAsUTC(new Date(event.end))).toDate(),
            start: moment(formatDate(event.start)).toDate(),
            end: moment(formatDate(event.end)).toDate(),
            title: event.title || 'busy',
            className: 'google-calendar'
          };
        }); // dedupe events with same start and end time

        $scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
          return !$scope.bzEvents.find(function (bzEvent) {
            var sameStart = event.start.toString() === bzEvent.start.toString(),
                sameEnd = event.end.toString() === bzEvent.end.toString();
            return sameStart && sameEnd;
          });
        });
        $scope.eventSources[1] = angular.copy($scope.freebusyEvents);
      });
    }
  };

  $scope.togglePosition = function (positionId) {
    filterEvents();
  };

  $scope.setParticipantType = function (id) {
    var label = '';

    if (id === "all_events") {
      label = 'All Events';
    } else if (id === "my_events") {
      label = 'My Events';
    } else {
      label = 'Not My Events';
    }

    $scope.participantType = {
      'id': id,
      'label': label
    };
    filterEvents();
  };

  $rootScope.$on('interviewAdded', function (e, data) {
    console.log("Calendar interviewAdded");

    if (data.position_id !== $scope.positionId) {
      return;
    }

    console.log("Calendar interviewAdded match!");

    var getEventFromInterview = function getEventFromInterview(interview) {
      var event = {
        'start': new Date(interview.start_time),
        'end': new Date(interview.end_time),
        'title': interview.location ? interview.location : interview.candidate.name,
        'data': interview,
        'className': interview.candidate && interview.candidate.assigned_to && interview.candidate.assigned_to._id == $scope.shared.user._id ? "assigned" : ""
      };
      return event;
    };

    var newEvent = getEventFromInterview(data);
    var idx;

    for (var i in $scope.bzEvents) {
      console.log('Event ' + i);
      var event = $scope.bzEvents[i];

      if (event.data._id == data._id) {
        console.log('Found it ' + i);
        idx = i;
        break;
      }
    }

    if (idx > -1) {
      $scope.bzEvents[idx] = newEvent;
    } else {
      $scope.bzEvents.push(newEvent);
    }

    $scope.eventSources[0] = angular.copy($scope.bzEvents);
    $('#companyCalendar').fullCalendar('refetchEvents');
  });
  initialize();
}]);
'use strict';

angular.module('appController').controller('CompanyInboxViewCtrl', ['$scope', '$rootScope', '$state', '$uibModal', 'conversations', 'dialog', 'TaggingService', 'PositionsService', 'PipelinesService', 'CandidatesService', 'ModalService', 'FeaturesService', 'CompanyService', 'EmailTrackerService', 'ReasonService', function ($scope, $rootScope, $state, $uibModal, conversations, dialog, TaggingService, PositionsService, PipelinesService, CandidatesService, ModalService, FeaturesService, CompanyService, EmailTrackerService, ReasonService) {
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  console.log('CompanyInboxViewCtrl Init');
  $scope.navActive = $state.current.name;
  $scope.conversations = conversations;
  $scope.fullCandidate = {};
  $scope.showAddTags = false;
  $scope.newTags = {};
  $scope.pending = {
    show: false,
    activities: [],
    message: ''
  };
  $scope.showComposer = {
    type: ''
  };
  $scope.filters = [{
    label: 'All Conversations',
    value: 'all'
  }, {
    label: 'My Conversations',
    value: 'user'
  }];
  $scope.selectedFilter = $scope.filters[0];
  var convoTracker = EmailTrackerService;

  var getConversation = function getConversation(conversation) {
    $scope.selected = conversation;
    $scope.position = $scope.shared.activeCompany.positions[$scope.selected.candidate.position_id];
    $scope.isCandidatePool = $scope.position.org_type === "pool";
    $scope.candidate = $scope.selected.candidate;
    $scope.subject = {
      body: $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
        'candidate': $scope.candidate,
        'position': $scope.position,
        'company': $scope.shared.activeCompany.company,
        'sender': $scope.shared.user
      })
    };
    $scope.appClient.getCandidateConversation($scope.shared.activeCompany.company._id, $scope.selected.candidate.position_id, $scope.selected.candidate._id, 0, function (error, returnedConversation) {
      if (convoTracker.lastConvoId(conversation._id)) {
        $scope.isViewInitialized = true;
        $scope.conversation = returnedConversation;
        convoTracker.clearConvoIds();
      }
    });
  };

  $scope.getMoreConvesation = function () {
    $scope.appClient.getCandidateConversation($scope.shared.activeCompany.company._id, $scope.selected.candidate.position_id, $scope.selected.candidate._id, $scope.conversation.length, function (error, conversation) {
      $scope.conversation = $scope.conversation.concat(conversation);
    });
  };

  $scope.canCommunicateWithCandidates = function () {
    if (!$scope.fullCandidate) return false;
    return $scope.position.state === "published" || $scope.globalCommunication;
  };

  var getCandidate = function getCandidate(conversation) {
    $scope.selected = conversation;
    $scope.candidate = $scope.selected.candidate;
    $scope.appClient.getCandidate($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, candidate) {
      if (!candidate) {
        dialog.alert({
          message: 'That candidate no longer exists.'
        });
        delete $scope.fullCandidate;
      }

      if (convoTracker.lastConvoCandidate(conversation._id)) {
        for (var i in candidate.social_profiles) {
          var socialProfile = candidate.social_profiles[i];

          if (socialProfile.hasOwnProperty('url')) {
            socialProfile.cleanUrl = socialProfile.url.replace(/^.*\/\//, "");
          }
        }

        $scope.fullCandidate = candidate;
        $scope.candidate.phone_number = candidate.phone_number;
        $scope.candidate.email_address = candidate.email_address;
        convoTracker.clearConvoCandidates();
      }
    });
  };

  var getHiringTeam = function getHiringTeam() {
    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.candidate.position_id, function (error, members) {
      $scope.members = members;
    });
    var position = PositionsService.local.getPositionById($scope.candidate.position_id);
    $scope.pipeline = PipelinesService.local.getPipelineByPosition(position).pipeline; //$scope.pipeline = $scope.shared.activeCompany.pipelines[position.pipeline_id || 'default'].pipeline;
  };

  $scope.closeCandidateConversation = function (conversation) {
    dialog.confirm({
      title: "Hide Conversation",
      message: "Hide this conversation with " + conversation.candidate.name + "?"
    }, function (result) {
      if (result !== true) {
        return;
      }

      $scope.appClient.deleteCompanyConversationThread($scope.shared.activeCompany.company._id, conversation.position_id, conversation.candidate._id, function (error) {
        deleteCandidate(conversation.candidate._id);
      });
    });
  };

  $scope.loadConversation = function () {
    $scope.isViewInitialized = false; // add convo to tracker

    convoTracker.addId(this.conversation._id);
    getConversation(this.conversation);
    getCandidate(this.conversation);
    getHiringTeam();
  };

  function init() {
    if ($scope.conversations && $scope.conversations.length > 0) {
      // add convo to tracker
      convoTracker.addId($scope.conversations[0]._id);
      getConversation($scope.conversations[0]);
      getCandidate($scope.conversations[0]);
      getHiringTeam();
    } else {
      $scope.isViewInitialized = true;
    }
  }

  init();

  $scope.filterInbox = function (filter) {
    if (filter.label === $scope.selectedFilter.label) return;
    $scope.selectedFilter = filter;
    var filterByUser = ['user'].indexOf(filter.value) > -1;
    return $scope.appClient.getCompanyInbox($scope.shared.activeCompany.company._id, filterByUser, 'candidate').then(function (results) {
      $scope.conversations = results;
      init();
    });
  };

  $scope.openPanelInterview = function (interview) {
    ModalService.openPanelInterview($scope.fullCandidate.position_id, $scope.fullCandidate, interview).then(function (result) {});
  };

  $scope.scheduleInterview = function (interview) {
    ModalService.openScheduleInterview($scope.fullCandidate.position_id, $scope.fullCandidate, interview, $scope).then(function (result) {// do nothing
    });
  };

  $scope.openPostNote = function () {
    ModalService.openPostNote($scope.fullCandidate.position_id, $scope.fullCandidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.openSendOffer = function () {
    var openDialog = function openDialog() {
      dialog.confirm({
        title: "Upgrade Required",
        message: "Document Signing isn't available on your current plan. Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          $parentScope.companySettings("plan");
        }
      });
    };

    if ($scope.shared.activeCompany.company.features.document_signing !== true) {
      return openDialog();
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_offer_modal.html',
      controller: 'CandidateOfferModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.fullCandidate.position_id;
        },
        candidate: function candidate() {
          return $scope.fullCandidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.setComposerType = function (type) {
    $scope.showComposer.type = type;
  };

  $scope.checkAbility = function (type, func) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var allow = true;

    var updateCandidate = function updateCandidate(result) {
      if (result) {
        $scope.candidate = result;

        if ($scope.checkAbility.apply($scope, [type, func].concat(args)) && func) {
          $scope[func].apply($scope, args);
        }
      }
    };

    allow = $scope.position.state === "published" || $scope.globalCommunication;

    if (!allow) {
      type = 'unpublished';
    }

    if (['schedule', 'email', 'questionnaire'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.email_address;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['SMS'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.phone_number;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['unpublished'].indexOf(type) > -1) {
      ReasonService.getMessage(type).then();
    }

    return allow;
  };

  $scope.openSendQuestionnaire = function () {
    if (FeaturesService.actions.block('questionnaires')) return;
    ModalService.openSendQuestionnaire($scope.fullCandidate.position_id, $scope.fullCandidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.removeTag = function ($index) {
    $scope.fullCandidate.tags.splice($index, 1);
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, $scope.fullCandidate.tags, function (error, finalTags) {});
  };

  $scope.addTags = function () {
    if (!$scope.newTags.text) {
      $scope.toggleAddTags();
      return;
    }

    var newTags = $scope.newTags.text.split(',');
    var tags = $scope.fullCandidate.tags;

    if (!tags) {
      tags = [];
    }

    var all = tags.concat(newTags);
    var keys = {};

    for (var i in all) {
      var tag = all[i].toLowerCase().trim();

      if (tag && tag.length > 0) {
        keys[tag] = true;
      }
    }

    var allTags = Object.keys(keys).sort();
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, allTags, function (error, finalTags) {
      $scope.newTags.text = '';
      $scope.fullCandidate.tags = allTags;
      $scope.toggleAddTags();
    });
  };

  $scope.toggleAddTags = function () {
    $scope.showAddTags = !$scope.showAddTags;
  };

  $scope.openAddTags = function () {
    ModalService.addTags('candidate', $scope.fullCandidate.tag_list, null).then(function (tags) {
      $scope.fullCandidate.tag_list = tags;
      TaggingService.set($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, tags).then(function (tags) {
        $scope.fullCandidate.tags = tags;
      });
    });
  };

  var deleteCandidate = function deleteCandidate(candidateId) {
    console.log("Delete candidate: " + candidateId);
    var index = -1;

    for (var i in $scope.conversations) {
      if ($scope.conversations[i].candidate_id === candidateId) {
        index = i;
        break;
      }
    }

    if (index > -1) {
      $scope.conversations.splice(index, 1);
    }

    if ($scope.candidate._id == candidateId) {
      delete $scope.selected;
      delete $scope.candidate;
      delete $scope.fullCandidate;
      delete $scope.conversation;
    }
  };

  $scope.assignCandidate = function (member) {
    var fullMember = angular.copy(member);
    member = member === 'unassign' ? null : member._id;
    var header;
    var message;

    if (fullMember && fullMember._id) {
      header = "Assign Candidate";
      message = "Assign " + $scope.fullCandidate.name + " to " + fullMember.name + "?";
    } else {
      header = "Unassign Candidate";
      message = "Unassign " + $scope.fullCandidate.name + " from member?";
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.assignCandidate($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, member, function (error, result) {
          if (!error) {
            $scope.fullCandidate.assigned_to = fullMember;
          }
        });
      }
    });
  };

  $scope.setCandidateStatus = function (candidate, stage) {
    CandidatesService.remote.updateCandidateStatus(candidate, stage, function (error, result) {
      $scope.fullCandidate.status = stage.id;
      $scope.fullCandidate.stage = stage;
    });
  };

  $scope.editTemplates = function () {
    ModalService.accountSettings('templates').then(function () {});
  };

  $rootScope.$on('candidateInterviewAdded', function (event, data) {
    if (data.object.candidate_id !== $scope.candidate._id) {
      return;
    }

    $scope.conversation.unshift(data);
  });
  $rootScope.$on('candidateDeleted', function (event, data) {
    var candidate = data.object.candidate;
    deleteCandidate(candidate._id);
  });
  $rootScope.$on('candidateConversationThreadClosed', function (event, data) {
    console.log("candidateConversationThreadClosed");
    deleteCandidate(data.candidate_id);
  });
  $rootScope.$on('messageSeenByCandidate', function (event, data) {
    console.log("messageSeenByCandidate");

    if (data.candidate_id == $scope.selected.candidate._id) {
      for (var i in $scope.conversation) {
        var message = $scope.conversation[i];

        if (message._id === data.message_id) {
          console.log("Message found for messageSeenByCandidate");
          message.last_message_seen = new Date();
        }
      }
    }
  });
  $rootScope.$on('candidateTagsSet', function (event, data) {
    if (data.object.candidate_id != $scope.fullCandidate._id) {
      return;
    }

    $scope.fullCandidate.tags = data.object.tags;
  }); // candidate messaging

  $rootScope.$on('candidateConversationMessagePosted', function (event, data) {
    // if current conversation prepend data
    if ($scope.candidate && data.object.candidate_id === $scope.candidate._id) {
      $scope.updateCandidateConversation(data); //$scope.conversation.unshift(data);
    } // find thread


    var index = -1;

    for (var i = 0; i < $scope.conversations.length; i++) {
      var candidate = $scope.conversations[i];

      if (candidate._id === data.object.candidate_id) {
        index = i;
      }
    } // create datastruct


    var conversation = data.object;
    conversation.from = {
      _id: data.object.acting_user._id,
      google_mail: null,
      hex_color: data.object.acting_user.hex_color,
      initial: data.object.acting_user.initial,
      name: data.object.acting_user.name,
      profile_photo_url: data.object.acting_user.profile_photo_url
    };
    conversation.last_message_date = data.timestamp; // update thread

    if (index < 0) {
      $scope.conversations.unshift(conversation);
    } else {
      $scope.conversations[index].body = conversation.body;
      $scope.conversations[index].from = conversation.from;
      $scope.conversations[index].last_message_date = conversation.last_message_date;
    } // reposition to top if necessary


    if (index > 0) {
      $scope.conversations.unshift($scope.conversations.splice(index, 1)[0]);
    }
  });

  $scope.updateCandidateConversation = function (data) {
    var index = $scope.conversation.findIndex(function (c) {
      return c._id === data._id;
    });

    if (index > -1) {
      //console.log('already had')
      $scope.conversation[index] = data;
    } else {
      //console.log('new!')
      $scope.conversation.unshift(data);
    }
  };
}]);
'use strict';

angular.module('appController').controller('CompanyAddModalInstanceCtrl', ['$scope', '$parentScope', '$uibModalInstance', '$upload', 'AppClient', 'SharedData', function ($scope, $parentScope, $uibModalInstance, $upload, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;

  if (SharedData.activeCompany) {
    $scope.plan = SharedData.activeCompany.company.plan;
  }

  $scope.companies = _.reduce(SharedData.companies, function (a, b) {
    return a.concat(b.company);
  }, []);
  $scope.company = {
    name: null
  };
  $scope.showOptions = false;
  $scope.duplicate = {
    enabled: false,
    companyId: null,
    options: {
      recruitingPipelines: true,
      questionnaires: true,
      scorecards: true,
      //defaultEmailSubject: true,
      messageTemplates: true,
      //embedWidget: true,
      careerPortal: true,
      positions: true
    }
  };
  $scope.errorMessage = "";

  $scope.add = function () {
    if (!$scope.company.name) {
      return;
    }

    if (!$scope.shared.activeCompany || !$scope.shared.activeCompany.company.features.company_cloning) {
      $scope.duplicate = false;
    }

    if ($scope.duplicate.companyId) {
      $scope.company.duplicate = $scope.duplicate;

      if ($scope.company.duplicate.messageTemplates) {
        $scope.company.duplicate.defaultEmailSubject = true;
      }

      if ($scope.company.duplicate.careerPortal) {
        $scope.company.duplicate.portal = true;
        $scope.company.duplicate.embedWidget = true;
        delete $scope.company.duplicate.careerPortal;
      }

      if ($scope.company.duplicate.recruitingPipelines) {
        $scope.company.duplicate.pipelines = true;
        delete $scope.company.duplicate.recruitingPipelines;
      }
    }

    $scope.messageStatus = "Creating company...";
    $scope.appClient.addCompany($scope.company, function (error, result) {
      if (!error) {
        $scope.errorMessage = ""; //$scope.messageStatus = "Company added.";

        setTimeout(function () {
          window.location.href = "/app/c/" + result.friendly_id + "/home";
        }, 2000);
      } else {
        $scope.errorMessage = error.error;
      }
    });
  };

  $scope.upgrade = function () {
    $parentScope.companySettings("plan");
  };

  $scope.$watch('duplicate.enabled', function (newVal) {
    if (newVal) {
      $scope.duplicate.companyId = $scope.shared.activeCompany.company._id;
    } else {
      $scope.duplicate.companyId = null;
    }
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CompanyBillingInformationViewCtrl', ['$scope', '$rootScope', 'AppClient', 'SharedData', '$uibModalInstance', 'activeTab', 'selectedPlan', function ($scope, $rootScope, AppClient, SharedData, $uibModalInstance, activeTab, selectedPlan) {
  console.log('CompanyBillingInformationViewCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.activeTab = activeTab;
  $scope.selectedPlan = selectedPlan;
  $scope.ccWizard = true;
  $scope.cardInfo = {};

  var initStripe = function initStripe() {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }
    });
  };

  $scope.changePlan = function () {
    $scope.changingPlan = true;
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, null, $scope.selectedPlan.id, false, function (error, result) {
      delete $scope.changingPlan;

      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      var planIdWas = $scope.shared.activeCompany.company.plan.id;
      ga('send', 'event', "updateCompanySubscriptionPlan", 'update', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      $scope.changingPlan = false;
      $scope.trialDaysLeft = null;
      $rootScope.$broadcast('subscriptionPlanUpdated', $scope.selectedPlan);
      $scope.activeTab = "planConfirmComplete"; // Track paid conversions

      if (planIdWas === "freebie") {
        ga('send', 'event', "TrialConversion", 'payment', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
        fbq('track', 'TrialConversion', {
          value: $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost,
          currency: 'USD'
        });
      } else {
        // track upgrades
        ga('send', 'event', "PlanUpdateSuccess", 'upgrade', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      }
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close($scope.activeTab);
  };

  var initStripe = function initStripe() {
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }

      delete $scope.cardStatus;
    });
  };

  $scope.cancelStripe = function () {
    $scope.closeModal();
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message;
        delete $scope.cardStatus;
      } else {
        // Send the token to your server.
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
          delete $scope.cardStatus;

          if (error) {
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            $scope.gaEventTracker("PlanUpdateFailure");
            return;
          }

          $scope.card = card;
          $scope.activeTab = "planConfirm";
          ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);
        });
      }
    });
  };

  var initializeBilling = function initializeBilling() {
    $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
      if (card) {
        $scope.card = card;
      } else {
        setTimeout(initStripe, 100);
      }
    });
  };

  initializeBilling();
}]);
angular.module('appController').controller('PlanPartialCtrl', ['$scope', 'SharedData', '$http', '$uibModal', function ($scope, SharedData, $http, $uibModal) {
  console.log('PlanPartialCtrl init');
  $scope.shared = SharedData;
  $scope.plans = [];

  $scope.requestQuote = function () {
    $scope.quoteRequested = true;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            quote_type: 'ATS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  var initializePlans = function initializePlans() {
    var planPath = '/data/plans_trial.json';

    if ($scope.shared.activeCompany.company.pricing === "v2") {
      planPath = '/data/plans_trial_v2.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v3") {
      planPath = '/data/plans_trial_v3.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v5") {
      planPath = '/data/plans_trial_v5.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v6") {
      planPath = '/data/plans_trial_v6.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v7") {
      planPath = '/data/plans_trial_v7.json';
    }

    $http.get(planPath).success(function (data) {
      console.log('getting data:');
      console.log(data);
      $scope.plans = data;
    }).error(function (error) {
      console.log('Error fetching plans JSON!: ' + error);
    });
  };

  initializePlans();
}]);
'use strict';

angular.module('appController').controller('CompanyTrialExpiredV7ViewCtrl', ['$scope', 'AppClient', 'SharedData', '$uibModal', '$uibModalInstance', function ($scope, AppClient, SharedData, $uibModal, $uibModalInstance) {
  console.log('CompanyTrialExpiredV7ViewCtrl init');
}]);
'use strict';

angular.module('appController').controller('CandidatesSourcingCtrl', ['$scope', '$rootScope', '$cookieStore', 'SharedData', '$state', '$stateParams', 'CompanyService', 'PositionsService', 'PipelinesService', '$location', '$uibModal', '$timeout', 'dialog', 'degrees', 'majors', 'industries', 'CandidatesService', 'CandidatesSourcingFilterService', 'TaggingService', 'ModalService', 'FeaturesService', '$filter', 'ReasonService', function ($scope, $rootScope, $cookieStore, SharedData, $state, $stateParams, CompanyService, PositionsService, PipelinesService, $location, $uibModal, $timeout, dialog, degrees, majors, industries, CandidatesService, CandidatesSourcingFilterService, TaggingService, ModalService, FeaturesService, $filter, ReasonService) {
  console.log('CandidatesSourcingCtrl: init');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.loadingMoreText = 'Load More';
  $scope.candidatesTotal = 0;
  $scope.isAdmin = SharedData.activeCompany.company.user_role.id === 'company_admin';
  $scope.selectedCandidate = null;
  $scope.noSearch = true; //delete SharedData.activeCompany.company.subscriptions.talent_search;

  $scope.hasAccess = SharedData.activeCompany.company.subscriptions && SharedData.activeCompany.company.subscriptions.hasOwnProperty('talent_search'); //console.log('talent_search available = ' + $scope.hasAccess);
  //$scope.segments = SharedData.activeCompany.segments.filter(segment => (segment.type === 'sourcing'))

  $scope.candidateId = $stateParams.candidateId;
  $scope.section = $stateParams.section;
  $scope.limit = SharedData.activeCompany.limits.talent_search; //console.log($scope.limit);

  var companyAdmin = SharedData.activeCompany.company.user_role.id === 'company_admin';
  $scope.canAddCandidates = companyAdmin; // determine if user can add candidates

  if (!companyAdmin) {
    Object.keys(SharedData.activeCompany.positions).forEach(function (key) {
      var position = SharedData.activeCompany.positions[key];

      if (!$scope.canAddCandidates) {
        if (position.hasOwnProperty('user_role') && position.user_role.id === 'hiring_manager') {
          $scope.canAddCandidates = true;
        }
      }
    });
  }

  $scope.state = $location.search().state;
  $scope.upload = $location.search().upload;
  var queryText = $location.search().q;
  $scope.Utils = {
    keys: Object.keys
  };
  $scope.segmentStatus = {
    changed: false
  };
  $scope.filtering = false;
  $scope.predicate = 'updated_date';
  $scope.reverse = true;
  $scope.candidates = [];
  $scope.candidatesMeta = {};
  $scope.today = new Date();

  var initializeKeyBindings = function initializeKeyBindings() {
    Mousetrap.bind('esc', function () {
      $scope.selectCandidate(null, -1);
    });
    Mousetrap.bind('j', function () {
      var index = $scope.selectedCandidateIndex - 1;
      if (index < 0) index = $scope.candidates.length - 1;
      var candidate = $scope.candidates[index];
      $scope.selectCandidate(candidate, index);
    });
    Mousetrap.bind('k', function () {
      var index = $scope.selectedCandidateIndex + 1;
      if (index > $scope.candidates.length - 1) index = 0;
      var candidate = $scope.candidates[index];
      $scope.selectCandidate(candidate, index);
    });
  };

  initializeKeyBindings();
  $scope.$on('subscription:talent_search', function () {
    dialog.confirm({
      title: "Subscription Added",
      message: "Talent Search enabled. Would you like to reload?"
    }, function (result) {
      if (result === true) {
        location.reload();
      }
    });
  });
  $scope.showCandidatesFilter = true;

  if (typeof $cookieStore.get('showCandidatesGridFilter') !== 'undefined') {
    $scope.showCandidatesFilter = $cookieStore.get('showCandidatesGridFilter');
  }

  $scope.selectCandidate = function (candidate, index) {
    $scope.selectedCandidate = candidate;
    $scope.selectedCandidateIndex = index;

    if (candidate) {
      $scope.showDisplayLimit = $scope.selectedCandidate.data.work_history.length > $scope.displayLimit;
    }
  };

  $scope.toggleShowCandidatesFilter = function () {
    $scope.showCandidatesFilter = !$scope.showCandidatesFilter;
    $cookieStore.put('showCandidatesGridFilter', $scope.showCandidatesFilter);
    $cookieStore.get('showCandidatesGridFilter');
  };

  var getDisplayColumns = function getDisplayColumns() {
    return Object.keys($scope.displayColumn).reduce(function (columns, column) {
      if ($scope.displayColumn[column]) {
        columns.push("cell-".concat(column));
      }

      return columns;
    }, []).join(' ');
  };

  $scope.displayColumn = {
    avatar: true,
    score: true,
    headline: false,
    resume: false,
    tags: false,
    email: true,
    gdprExpiration: false,
    gdprStatus: false,
    phone: false,
    position: true,
    location: false,
    stage: true,
    source: true,
    added: true,
    lastActivity: true
  }; // generate a correct candidate stage name mapping

  /*
  PositionsService.local.getMyMemberPositions().forEach(position => {
      positionStageMap[position._id] = {};
      $scope.shared.activeCompany.pipelines[position.pipeline_id || 'default'].pipeline.forEach(stage => {
          positionStageMap[position._id][stage.id] = stage;
      });
  }); */

  var filters = {
    locations: 'https://breezy.hr/api/people-search/location',
    companies: 'https://breezy.hr/api/people-search/company',
    schools: 'https://breezy.hr/api/people-search/school',
    //degrees: degrees,
    //majors: majors,
    industries: industries,
    //min_months_company: true,
    has_email: true,
    has_phone: true //has_linkedin: true

  };
  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        filter[rule] = false;
      });
    });
  }; // positions is not an array


  $scope.filters = CandidatesSourcingFilterService.init(filters, 'CandidatesSourcingCtrl');
  $scope.filters.text = ''; //console.log($scope.filters);
  //console.log($scope.filters);
  //$scope.filters.options[0].rules[0].value = {label: 'Doylestown, PA', value: 'doylestown, pa', geo: '14.18,106.63', radial: false, distance: 50};
  //$scope.filters.options[0].rules[1] = { value:  {label: 'Doylestown, PA', value: 'doylestown, pa', geo: '14.18,106.63', radial: true, distance: 50} };
  //$scope.filters.options[0].rules[2] = { value:  {label: 'Jacksonville, PA', value: 'jacksonville, pa', geo: '14.18,106.63', radial: false, distance: 50} };

  $scope.getFilterIndex = function (key) {
    return Object.keys(filters).indexOf(key);
  };

  if (queryText) {
    $scope.filters.text = queryText;
  }

  var currentFilter = {};

  if ($stateParams.filters) {
    CandidatesSourcingFilterService.setSegment(null, {
      filters: $stateParams.filters
    });
  }

  $scope.segments = CandidatesSourcingFilterService.getSegments();
  $scope.activePipeline = null;

  var checkActivePipeline = function checkActivePipeline(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value') || $scope.activePipeline === rules[0].value.pipeline) return;
    $scope.activePipeline = rules[0].value.pipeline;
    rules.length = 1;
  };

  var pipelineNames = [];

  var checkActivePosition = function checkActivePosition(rules) {
    pipelineNames = [];

    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return;
    }

    var pipelineIds = rules.map(function (rule) {
      return rule.value;
    }).reduce(getPositionPipelineIds, []);
    var pipelines = PipelinesService.local.getPipelinesByIds(pipelineIds);
    pipelineNames = Object.keys(pipelines).reduce(function (acc, pipeline) {
      acc.push(pipelines[pipeline].name);
      return acc;
    }, []);
  };

  $scope.filterPipelinesGroup = function (items) {
    if (pipelineNames.length === 0) return items;
    var result;
    result = Object.keys(items).filter(function (key) {
      return pipelineNames.includes(key);
    }).reduce(function (obj, key) {
      obj[key] = items[key];
      return obj;
    }, {});
    return result;
  };

  var checkTagOperator = function checkTagOperator(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return false;
    } else if ($scope.tagOperatorLabel === 'AND') {
      return true;
    }

    return false;
  };

  $scope.filterButtons = {
    saveDisabled: true,
    applyDisabled: false
  };
  var manualSubmit = false;

  var watchFilters = function watchFilters(filters) {
    if (filters) {
      //console.log(filters)
      if (filters.text.length > 0) {
        $scope.filterButtons.applyDisabled = false;
      } else {
        $scope.filterButtons.applyDisabled = true;
      } //if (CandidatesSourcingFilterService.getActiveController() !== 'CompanyCandidatesGridViewCtrl') return;


      $scope.closeFilterDropdown();
      var options = CandidatesSourcingFilterService.getOptions(filters); //console.log(options);

      if (!angular.equals(options, currentFilter)) {
        $scope.filterButtons.saveDisabled = false; //$scope.filterButtons.applyDisabled = false;
        // for segment select

        if (manualSubmit) $scope.applyFilter(options);
      } else {//$scope.filterButtons.applyDisabled = true;
      }
    }
  };

  $scope.$watch('filters', watchFilters, true);

  $scope.addonUpgrade = function (options) {
    ModalService.openTalentSearchSubscription(options).then(function (result) {});
  };

  $scope.groupCandidates = function (options) {
    //console.log('CompanyCandidatesGridViewCtrl: get candidates');
    $scope.filtering = Object.keys(currentFilter) > 0 ? true : false;
    options = options || currentFilter;
    options.get_totals = true;
    $scope.isViewInitialized = false;
    $scope.selectedCandidate = null;
    $scope.selected = -1;
    $scope.candidatesMeta.count = undefined;
    options.company_id = $scope.shared.activeCompany.company._id;
    $scope.appClient.doPeopleSearch(options).then(function (results) {
      //console.log(results);
      $scope.noSearch = false;
      $scope.candidatesTotal = results.total;
      $scope.candidates = results.results;
      $scope.isViewInitialized = true;
    }).catch(function (error) {
      $scope.noSearch = true;
      console.log($scope.segments);

      if (error.status === 429) {
        dialog.alert({
          message: 'You\'ve reached your Talent Search limit for the month.'
        });
      } else {
        dialog.alert({
          message: 'There was an error. Please try your search again.'
        });
      }

      console.log("ERROR!", error);
    }); // $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, results) {
    //     results.data.forEach(formatCandidate);
    //     $scope.candidatesMeta.count = results.total;
    //     $scope.candidates = results.data;
    //     $timeout(function() {
    //         $scope.isViewInitialized = true;
    //     }, 1000);
    // });
  };

  $scope.enterApplyFilter = function (e) {
    if (e.keyCode == 13) {
      e.preventDefault();
      $scope.applyFilter();
      return false;
    }
  };

  $scope.autofocusInput = function (open, key, filter, rule) {
    //console.log(...arguments);
    var input = document.getElementById("".concat(key, "_").concat(filter, "_").concat(rule));
    input.focus();
  };

  $scope.applyFilter = function () {
    //console.log('applyFilter')
    var options = CandidatesSourcingFilterService.getOptions($scope.filters);
    currentFilter = angular.copy(options); //$scope.segmentStatus.changed = true;

    manualSubmit = false;
    $scope.groupCandidates(options); //$scope.filterButtons.applyDisabled = true;

    if ($scope.segmentStatus.changed) {
      $scope.filterButtons.saveDisabled = false;
    }
  }; //$scope.applyFilter();


  $scope.process = function (option) {
    option.process(option);
  };

  $scope.filterToggleActive = function () {//console.log(this);
  };

  $scope.filterRuleAdd = function () {
    //console.log(this);
    this.filter.rules.push({});
  };

  $scope.filterRuleDelete = function (filterIndex, ruleIndex) {
    $scope.filters.options[filterIndex].rules.splice(ruleIndex, 1);

    if ($scope.filters.options[filterIndex].rules.length <= 0) {
      $scope.filters.options[filterIndex].active = false;
      $scope.filters.options[filterIndex].rules.push({
        is: null
      });
    }
  };

  $scope.filterValueDelete = function (filterIndex) {
    $scope.filters.options[filterIndex].active = false;
    $scope.filters.options[filterIndex].value = null;
  };

  $scope.filterFocused = false;

  $scope.filterFocus = function (state) {
    if (state == 1) {
      $scope.filterFocused = true;
    } else {
      setTimeout(function () {
        $scope.filterFocused = false;
      }, 100);
    }
  };

  $scope.selectedCandidateIds = [];
  $scope.selectedCandidates = [];
  $scope.selectedMissingEmailAddress = [];
  $scope.selectedMissingPhoneNumber = [];
  $scope.selectedNotPositionAdmin = [];
  $scope.selectedNotPublishedPosition = [];
  $scope.selectedNotCandidatePoolMessaging = [];
  $scope.selectAllCandidates = false;
  $scope.isViewInitialized = true;

  $scope.deleteSegment = function (idx) {
    var segment = $scope.segments[idx];
    var segmentId = segment._id;
    $scope.appClient.deleteSegment(segmentId, function (error, result) {
      $scope.segments.splice(idx, 1);
      var idx1 = $scope.shared.activeCompany.segments.findIndex(function (segment) {
        return segment._id === segmentId;
      });
      $scope.shared.activeCompany.segments.splice(idx1, 1);
    });
  };

  var subscriptionRequired = function subscriptionRequired() {
    if (companyAdmin) {
      $scope.addonUpgrade({
        triedToAdd: true
      });
    } else {
      dialog.alert({
        message: 'Ask your company admin to upgrade!'
      });
    }
    /*var requested_feature = {
        name: 'Talent Search',
        message: 'You should really upgrade.',
        partial: '/templates/v2/app/candidates_sourcing/upgrade_message.html',
        addon: 'openTalentSearchSubscription'
    }
    ModalService.openPlanUpgrade(requested_feature)
        .then(() => {
            console.log('closed')
        });*/

  };

  $scope.importSearchCandidate = function (_personId) {
    if (!$scope.hasAccess) {
      subscriptionRequired();
      return;
    } //console.log(personId)


    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates_sourcing/import_search_candidate_modal.html',
      controller: 'ImportSearchCandidateController',
      size: 'sm',
      resolve: {
        personId: function personId() {
          return _personId;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {}
    }, function () {});
  };

  $scope.openAddSegment = function () {
    var options = angular.copy(currentFilter);
    var type;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates/_add_segment_modal.html',
      controller: 'AddSegmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'sourcing';
        },
        segmentData: function segmentData() {
          return options;
        }
      }
    });
    modalInstance.result.then(function (savedSegment) {
      if (savedSegment) {
        $scope.segment = savedSegment;
        $scope.segments.push(savedSegment);
        $scope.segmentStatus.changed = false;
        $scope.shared.activeCompany.segments.push(savedSegment);
        $scope.filterButtons.saveDisabled = true;
      }
    }, function () {});
  };

  $scope.segment = $scope.segments[0];

  $scope.setSegment = function (segmentId, segment) {
    //console.log(segment);
    manualSubmit = true;

    if (segment.filters.hasOwnProperty('tags_operator')) {
      $scope.tagOperatorLabel = 'AND';
    }

    ;
    CandidatesSourcingFilterService.setSegment(segmentId, segment); //$scope.segment = segment;
  };

  $scope.toggleSortBy = function (type) {
    if ($scope.predicate == type) {
      $scope.reverse = !$scope.reverse;
    } else {
      $scope.predicate = type;

      if (type == 'updated_date' || type == 'creation_date') {
        $scope.reverse = true;
      } else {
        $scope.reverse = false;
      }
    }
  };

  $scope.displayLimit = 5;

  $scope.toggleDisplayLimit = function () {
    if ($scope.displayLimit === 5) {
      $scope.displayLimit = 100;
    } else {
      $scope.displayLimit = 5;
    }
  };

  $scope.toggleColumn = function () {
    setTimeout(function () {
      var str = JSON.stringify($scope.displayColumn);
      $cookieStore.put("CandidatesGridColumns", str);
    }, 1000);
    $scope.displayColumns = getDisplayColumns();
  };

  $scope.isPositionAdmin = function (positionId) {
    if (positionId) {
      return $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[positionId].is_admin;
    } else {
      return false;
    }
  };

  $scope.toggleCheck = function (candidate) {
    var index = $scope.selectedCandidateIds.indexOf(candidate._id),
        selectedPosition;

    if (index > -1) {
      $scope.selectedCandidateIds.splice(index, 1);
      $scope.selectedCandidates.splice(index, 1);
      var idx;

      if (!candidate.email_address) {
        idx = $scope.selectedMissingEmailAddress.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingEmailAddress.splice(idx, 1);
        }
      }

      if (!candidate.phone_number) {
        idx = $scope.selectedMissingPhoneNumber.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingPhoneNumber.splice(idx, 1);
        }
      }

      selectedPosition = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position._id];

      if (!selectedPosition.is_admin) {
        idx = $scope.selectedNotPositionAdmin.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedNotPositionAdmin.splice(idx, 1);
        }
      }
      /*
      if(selectedPosition.org_type === "pool" && $scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
          idx = $scope.selectedNotCandidatePoolMessaging.indexOf(candidate._id);
          if(idx > -1) {
              $scope.selectedNotCandidatePoolMessaging.splice(idx, 1);
          }
      }
      */


      if (selectedPosition.state !== "published") {
        idx = $scope.selectedNotPublishedPosition.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedNotPublishedPosition.splice(idx, 1);
        }
      }
    } else {
      $scope.selectedCandidateIds.push(candidate._id);
      $scope.selectedCandidates.push(candidate);

      if (!candidate.email_address) {
        $scope.selectedMissingEmailAddress.push(candidate._id);
      }

      if (!candidate.phone_number) {
        $scope.selectedMissingPhoneNumber.push(candidate._id);
      }

      selectedPosition = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position._id];

      if (!selectedPosition.is_admin) {
        $scope.selectedNotPositionAdmin.push(candidate._id);
      }
      /*
      if(selectedPosition.org_type == "pool" && $scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
          console.log("Candidate selected but pool messaging disabled");
          $scope.selectedNotPositionAdmin.push(candidate._id);
      }
      */


      if (selectedPosition.state !== "published") {
        $scope.selectedNotPublishedPosition.push(candidate._id);
      }
    } //console.log(JSON.stringify($scope.selectedNotPublishedPosition));

  };

  $scope.isCheckedCandidate = function (candidate) {
    return $scope.selectedCandidateIds.indexOf(candidate._id) > -1;
  };

  $scope.toggleAllCandidates = function () {
    $scope.selectedCandidateIds = [];
    $scope.selectedCandidates = [];
    $scope.selectedMissingEmailAddress = [];
    $scope.selectedNotPublishedPosition = [];
    $scope.selectedNotPositionAdmin = [];
    $scope.selectedMissingPhoneNumber = [];
    var candidate;

    if ($scope.selectAllCandidates) {
      console.log('checking');

      for (var i in $scope.candidates) {
        candidate = $scope.candidates[i];
        candidate.checked = true;
        $scope.toggleCheck(candidate);
      }
    } else {
      console.log('unchecking');

      for (var j in $scope.candidates) {
        candidate = $scope.candidates[j];
        candidate.checked = false;
      }
    }
  };

  var fetching = false;

  $scope.getMoreCandidates = function () {
    if (fetching) return;
    $scope.gaEventTracker("TalentSearchLoadMore");
    fetching = true;
    $scope.loadingMoreText = 'Loading..';
    var options = {};
    if (currentFilter) options = angular.copy(currentFilter);
    options.skip = $scope.candidates.length;
    options.company_id = $scope.shared.activeCompany.company._id;
    $scope.appClient.doPeopleSearch(options).then(function (results) {
      //console.log(results);
      $scope.candidates = $scope.candidates.concat(results.results);
      fetching = false;
      $scope.loadingMoreText = 'Load More';
    }).catch(function (error) {
      console.log("ERROR!", error);
    });
    /*$scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidates) {
        //candidates.forEach(formatCandidate);
        $scope.candidates = $scope.candidates.concat(candidates);
        fetching = false;
        $scope.loadingMoreText = 'Load More';
    });*/
  };

  var initialize = function initialize() {};

  initialize();
}]);
'use strict';

angular.module('appController').controller('ImportSearchCandidateController', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'PositionsService', 'PipelinesService', 'personId', 'utils', '$uibModal', '$timeout', function ($scope, $uibModalInstance, AppClient, SharedData, PositionsService, PipelinesService, personId, utils, $uibModal, $timeout) {
  console.log('ImportSearchCandidateController init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.personId = personId;
  $scope.selectedPosition = {};
  $scope.myPositions = PositionsService.local.getMyPositions();

  $scope.gaEventTracker = function (type) {
    ga('send', 'event', type, 'click', 1);
  };

  var initStageActions = function initStageActions(stage) {
    /*$scope.showStageActions = false;
    if(stage.actions && Object.keys(stage.actions).length > 1) {
        $scope.showStageActions = true;
    } else if(stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
        $scope.showStageActions = true;
    }*/
    var positionStageActions = $scope.position.stage_actions;
    $scope.showStageActions = false;
    var stageAction = false; // check pipeline if has pipeline stage action

    if (stage.actions && Object.keys(stage.actions).length > 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.message_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } else if (stage.actions && stage.actions.questionnaire_delay && Object.keys(stage.actions).length == 1) {
      stageAction = true;
    } // check if position has stages action


    if (positionStageActions && positionStageActions.hasOwnProperty(stage.id)) {
      if (Object.keys(positionStageActions[stage.id]).length > 0) {
        stageAction = true;
      } else {
        stageAction = false;
      }
    }

    $scope.showStageActions = stageAction;
  };

  var initPipeline = function initPipeline() {
    if (!$scope.position) return;
    $scope.position.pipeline = PipelinesService.local.getPipelineByPosition($scope.position).pipeline; //console.log($scope.position.pipeline);
    // Get the first sourced stage and set as default;

    var appliedStage;

    for (var i in $scope.position.pipeline) {
      var stage = $scope.position.pipeline[i];

      if (stage.type && stage.type.id === "sourced") {
        $scope.stage = stage;
        break;
      }

      if (stage.id === "applied") {
        appliedStage = stage;
      }
    }

    if (!appliedStage) appliedStage = $scope.position.pipeline[0];
    $scope.stage = appliedStage;
    initStageActions($scope.stage);
  };

  $scope.$watch('selectedPosition.position', function () {
    if ($scope.selectedPosition.position) {
      $scope.position = $scope.selectedPosition.position;
    }

    initPipeline();
  });
  $scope.step = "selectPosition";

  $scope.setStage = function () {
    $scope.stage = this.stage;
    initStageActions($scope.stage);
  };

  var targetPipelineId = "default";
  var targetStageId = "applied";
  $scope.pipeline = null;
  $scope.targetPosition = null;
  $scope.targetStage = {
    'name': 'Select a stage'
  };
  $scope.showStageActions = false;
  $scope.actions = {
    enabled: false
  };

  $scope.copyCandidate = function () {
    $scope.copyStatus = "Copying...";
    $scope.appClient.importSearchCandidate({
      id: personId
    }, $scope.shared.activeCompany.company._id, $scope.position._id, $scope.stage.id, $scope.actions.enabled, function (error, result) {
      $scope.gaEventTracker("TalentSearchAddCandidate");
      $scope.copyStatus = "Candidate added";
      PositionsService.updateCandidateCount($scope.position._id, 1);
      $timeout(function () {
        $scope.closeModal(true);
      }, 1500);
    });
  };

  $scope.setPosition = function (position) {
    if (!position) {
      return;
    }

    $scope.targetPosition = position; //$scope.pipeline = $scope.shared.activeCompany.pipelines[targetPipelineId];

    $scope.pipeline = PipelinesService.local.getPipelineByPosition(position);
    $scope.step = "selectStage";
  };
  /*$scope.setStage = function (stage) {
      if(!stage) {
          return;
      }
      $scope.targetStage = stage;
       if (stage.hasOwnProperty('actions') && (Object.keys(stage.actions).length > 0)) {
          $scope.showStageActions = true;
      } else {
          $scope.showStageActions = false;
      }
  };*/


  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('EditGDPRTemplateModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'template', 'utils', function ($scope, $uibModalInstance, AppClient, SharedData, template, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData; // filter out certain template vars for gdpr_applied

  if (template.type === 'gdpr_applied') {
    $scope.templateVariables = angular.copy($scope.shared.templateVariables.filter(function (variable) {
      return variable.name.indexOf('Candidate') === -1;
    }));
  } else if (template.type === 'gdpr_privacy') {
    $scope.templateVariables = angular.copy($scope.shared.templateVariables.filter(function (variable) {
      return ['[[candidate_email_address]]', '[[position_title]]', '[[position_link]]'].indexOf(variable.value) === -1;
    }));
  } else {
    $scope.templateVariables = angular.copy($scope.shared.templateVariables);
    $scope.templateVariables.unshift({
      name: 'Consent Link',
      value: '[[consent_link]]'
    });
  }

  $scope.template = angular.copy(template);
  $scope.template.body = utils.markdownToHTML($scope.template.body);

  if (!$scope.template.subject) {
    $scope.template.subject = $scope.shared.activeCompany.messaging.subject_template.body;
  }

  $scope.redactorConfig = {
    air: true,
    buttons: ['bold', 'underline', 'lists', 'link'],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: '350px',
    maxHeight: '350px'
  };

  $scope.insertVariable = function ($item, elem) {
    //$('#redactor').redactor('templatevars.insert', $item.value);
    $R('#redactor', 'plugin.templatevars.insert', $item.value); //$rootScope.$broadcast('insertTemplateVariable:'+elem, $item.value);
  };

  $scope.add = function () {
    $scope.messageError = '';

    if (!$scope.template.name || !$scope.template.body) {
      return;
    }

    var template_new = angular.copy($scope.template);
    template_new.body = utils.HTMLtoMarkdown(template_new.body); //console.log(template_new.body);

    /*if (template_new.body.indexOf('[[consent_link]]') === -1) {
        $scope.messageError = 'GDPR templates must contain [[consent_link]] template variable.';
        return;
    }*/

    $scope.messageStatus = "Updating...";
    $scope.appClient.updateCompanyTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
      $uibModalInstance.close(template_new);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

angular.module('appController').controller('CompanyPlanAddonBillingModalInstanceCtrl', ['$rootScope', '$scope', 'AppClient', 'SharedData', '$uibModal', '$uibModalInstance', 'plan', 'card', 'type', function ($rootScope, $scope, AppClient, SharedData, $uibModal, $uibModalInstance, plan, card, type) {
  console.log('init CompanyPlanAddonBillingModalInstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.plan = plan;
  $scope.card = card;
  $scope.type = type; //$scope.billing = billing;

  $scope.changingPlan = false;
  $scope.ccWizard = true; // steps: card, confirm, complete

  if ($scope.card) $scope.step = 'confirm';else $scope.step = 'card';

  $scope.changePlan = function () {
    var planId = $scope.plan.id;
    $scope.changingPlan = true;
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, $scope.type, planId, false, function (error, result) {
      if (error) {
        $scope.changingPlan = false;
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      if ($scope.shared.activeCompany.company.subscriptions) {
        $scope.shared.activeCompany.company.subscriptions[$scope.type] = {
          plan: $scope.plan
        };
      } else {
        $scope.shared.activeCompany.company.subscriptions = _defineProperty({}, $scope.type, {
          plan: $scope.plan
        });
      }

      $scope.step = "complete";
      setTimeout(function () {
        $scope.closeModal(true);
        $rootScope.$broadcast('subscription:' + $scope.type);
      }, 2000);
    });
  };

  $scope.closeModal = function (result) {
    $uibModalInstance.close(result);
  };

  var initStripe = function initStripe() {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element-1');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }

      delete $scope.cardStatus;
    });
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message;
        delete $scope.cardStatus;
      } else {
        // Send the token to your server.
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
          if (error) {
            delete $scope.cardStatus;
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            $scope.gaEventTracker("PlanUpdateFailure");
            return;
          }

          $scope.card = card;
          $scope.step = "confirm";
          $scope.activeTab = "planConfirm"; //ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);

          delete $scope.cardStatus;
        });
      }
    });
  };

  $scope.cancelStripe = function () {
    $scope.closeModal();
  };

  if ($scope.step === "card") {
    setTimeout(initStripe, 100);
  }
  /*
      $scope.shared = SharedData;
      $scope.appClient = AppClient;
  
      $scope.plan = plan;
      //console.log(plan);
  
      $scope.billingError = undefined;
      $scope.billingErrorMessage = undefined;
      $scope.billingSuccess = undefined;
      
      $scope.closeModal = function (close) {
          $uibModalInstance.close(close);
      };
  
      $scope.close = function() {
          $scope.closeModal();
      };
  
  
      $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
          if (card) {
              $scope.card = card;
              $scope.showUpdateBilling = false;
          } else {
              $scope.billingRequired = true;
  
              var initStripe = function(){
                $scope.cardInfo = {};
                stripe_card.mount('#card-element-1');
                stripe_card.addEventListener('change', function(event) {
                  if (event.error) {
                    $scope.billingError = true;
                    $scope.billingErrorMessage = event.error.message;
                  } else {
                    $scope.billingError = false;
                    $scope.billingErrorMessage = '';
                  }
                });
              }
  
              setTimeout(initStripe, 100);
          }
      });
  
      var purchaseAddon = function () {
          $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, 'sms', $scope.plan.id, false, function (error, result) {
              if(error) {
                  $scope.billingError = true;
                  $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
                  return;
              }
              if ($scope.shared.activeCompany.company.subscriptions) {
                $scope.shared.activeCompany.company.subscriptions.sms.plan = $scope.plan;
              } else {
                $scope.shared.activeCompany.company.subscriptions = {
                  sms: {
                    plan: $scope.plan
                  }
                };
              }
              $scope.closeModal(true);
          });
      }
  
      $scope.no = function () {
          $scope.closeModal();
      };
  
      $scope.yes = function () {
          $scope.processing = true;
          if ($scope.card) {
              purchaseAddon();
          } else {
              $scope.handleStripeV3();
          }
      };
  
  
      $scope.handleStripeV3 = function(token){
        if(!$scope.cardInfo.name) return;
        $scope.processing = true;
        $scope.cardStatus = 'updatingCard';
        stripe.createToken(stripe_card, $scope.cardInfo).then(function(result) {
          if (result.error) {
            $scope.processing = false;
            $scope.billingError = true;
            $scope.billingErrorMessage = result.error.message;
            delete $scope.cardStatus;
          } else {
            // Send the token to your server.
            var token = result.token.id;
            $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id,  token, function (error, card) {
                if(error) {
                    delete $scope.cardStatus;
                    $scope.processing = false;
                    $scope.billingError = true;
                    $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
                    return;
                }
                $scope.card = card;
                $scope.yes();
            });
          }
        });
      };
  
    */

}]);
'use strict';

angular.module('appController').controller('SubscriptionAddonSMSModalInstanceCtrl', ['$scope', '$http', 'AppClient', 'SharedData', '$uibModal', '$uibModalInstance', 'ModalService', 'plansData', function ($scope, $http, AppClient, SharedData, $uibModal, $uibModalInstance, ModalService, plansData) {
  console.log('init SubscriptionAddonSMSModalInstanceCtrl');
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.selectedPlanKey = null;
  $scope.plans = [];
  $scope.billing = 'annually';
  plansData = plansData['sms']['v1'];

  var populatePlans = function populatePlans() {
    $scope.plans = Object.keys(plansData).reduce(function (plans, plan) {
      if (plansData[plan].billing_cycle === $scope.billing) {
        plans.push(plansData[plan]);
      }

      return plans;
    }, []);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  $scope.$watch('shared.activeCompany.company.subscriptions.sms.plan', function (newPlan) {
    if (!newPlan) {
      populatePlans();
      return;
    }

    $scope.currentPlan = newPlan;
    $scope.billing = $scope.currentPlan.billing_cycle.indexOf("monthly") > -1 ? "monthly" : 'annually';
    populatePlans();
  });

  $scope.setBillingPeriod = function (period) {
    $scope.billing = period;
    populatePlans();
  };

  $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
    if (card) $scope.card = card;
  });

  $scope.purchase = function (_plan) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_plan_addon_confirm.html',
      controller: 'CompanyPlanAddonBillingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        plan: function plan() {
          return _plan;
        },
        card: function card() {
          return $scope.card;
        },
        type: function type() {
          return 'sms';
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.closeModal();
      }
    }, function () {});
  };

  $scope.requestQuote = function () {
    $scope.quoteRequested = true;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            product: 'SMS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };
}]);
'use strict';

angular.module('appController').controller('SubscriptionAddonTalentSearchModalInstanceCtrl', ['$scope', '$http', 'AppClient', 'SharedData', '$uibModal', '$uibModalInstance', 'ModalService', 'plansData', 'options', function ($scope, $http, AppClient, SharedData, $uibModal, $uibModalInstance, ModalService, plansData, options) {
  console.log('init SubscriptionAddonTalentSearchModalInstanceCtrl');
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.selectedPlanKey = null;
  $scope.plans = [];
  $scope.billing = 'annually';
  $scope.options = options;
  plansData = plansData['talent_search']['v1'];

  var populatePlans = function populatePlans() {
    //console.log($scope.billing)
    $scope.plans = Object.keys(plansData).reduce(function (plans, plan) {
      if (plansData[plan].billing_cycle === $scope.billing) {
        plans.push(plansData[plan]);
      }

      return plans;
    }, []);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  $scope.$watch('shared.activeCompany.company.subscriptions.talent_search.plan', function (newPlan) {
    if (!newPlan) {
      populatePlans();
      return;
    }

    $scope.currentPlan = newPlan;
    $scope.billing = $scope.currentPlan.billing_cycle.indexOf("monthly") > -1 ? "monthly" : 'annually';
    populatePlans();
  });

  $scope.setBillingPeriod = function (period) {
    //$scope.billing = period;
    populatePlans();
  };

  $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
    if (card) $scope.card = card;
  });

  $scope.purchase = function (_plan) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_plan_addon_confirm.html',
      controller: 'CompanyPlanAddonBillingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        plan: function plan() {
          return _plan;
        },
        card: function card() {
          return $scope.card;
        },
        type: function type() {
          return 'talent_search';
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.closeModal();
      }
    }, function () {});
  };

  $scope.requestQuote = function () {
    $scope.quoteRequested = true;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            product: 'SMS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };
}]);
'use strict';

angular.module('appController').controller('CompanySettingsPlanUpgradeModalInstanceCtrl', ['$scope', '$state', '$uibModalInstance', '$uibModalStack', 'SharedData', 'feature', 'ModalService', function ($scope, $state, $uibModalInstance, $uibModalStack, SharedData, feature, ModalService) {
  console.log('init CompanySettingsPlanUpgradeModalInstanceCtrl');
  $scope.feature = feature;
  $scope.showUpgradeButton = true;
  $scope.isAddon = $scope.feature.hasOwnProperty('addon');

  if (SharedData.activeCompany.members.find(function (member) {
    return member._id === SharedData.user._id;
  }).user_role.id !== 'company_admin') {
    $scope.showUpgradeButton = false;
  }

  $scope.addonUpgrade = function () {
    ModalService[$scope.feature.addon]().then(function (result) {
      $uibModalStack.dismissAll();
    });
  };

  $scope.planUpgrade = function () {
    console.log('dismissAll');
    $state.go('company.plans');
    setTimeout(function () {
      $uibModalStack.dismissAll();
    }, 500);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CompanyPlansCtrl', ['$scope', '$state', '$stateParams', 'AppClient', 'SharedData', '$uibModal', 'CompanyService', 'FeaturesService', 'ModalService', function ($scope, $state, $stateParams, AppClient, SharedData, $uibModal, CompanyService, FeaturesService, ModalService) {
  console.log('init CompanyPlansCtrl');
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.admin = true;
  $scope.plans = FeaturesService.state.plans;
  $scope.pricing = FeaturesService.state.pricing;

  if ($state.current.name === 'company.expired') {
    if ($scope.trialPlan && $scope.trialDaysLeft === 0 && !$scope.shared.activeCompany.company.contract) {
      // allow and block nav
      if ($stateParams.blockNav) {
        $scope.routeClass = "trial-expired-animation";
        angular.element('body').addClass('trial-expired');
      }
    } else {
      $state.go('company.home');
    }
  }

  if (SharedData.activeCompany.members.find(function (member) {
    return member._id === SharedData.user._id;
  }).user_role.id !== 'company_admin') {
    $scope.admin = false;
  }

  $scope.$watch('shared.activeCompany.company.plan', function (newPlan) {
    $scope.currentPlan = newPlan;
    $scope.billing = $scope.currentPlan.id.indexOf("monthly") > -1 ? "monthly" : 'annually';
  });

  $scope.getCost = function (plan) {
    return plan.hasOwnProperty($scope.billing) ? plan[$scope.billing].monthly_cost : plan.monthly.monthly_cost;
  };

  $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
    if (card) $scope.card = card;
  });

  $scope.setBillingPeriod = function (period) {
    $scope.billing = period;
  };

  $scope.requestQuote = function () {
    $scope.quoteRequested = true;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            quote_type: 'ATS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.purchase = function (plan) {
    // account for no annual bootstrap plan
    if (!plan) {
      plan = $scope.plans[0].monthly;
    }

    var type = FeaturesService.getters.upgradeOrDowngrade(plan.id);

    if (type === 'upgrade') {
      ModalService.openPlanConfirm(plan, $scope.billing, $scope.card).then(function () {}); // do nothing
    } else {
      ModalService.openPlanDowngrade(plan, $scope.billing, $scope.card).then(function () {}); // do nothing
    }
  };
}]);
'use strict';

angular.module('appController').controller('AddTeamModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'PositionsService', '$timeout', '$rootScope', '$cookieStore', '$uibModalInstance', 'team', function ($scope, AppClient, SharedData, PositionsService, $timeout, $rootScope, $cookieStore, $uibModalInstance, team) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.company = $scope.shared.activeCompany.company;
  if (!$scope.company.ats) $scope.team = angular.copy(team);

  if (!$scope.team) {
    $scope.team = {
      'name': "",
      'member_ids': []
    };
  }

  $scope.emailDomain = {
    'text': ''
  };
  $scope.selectedMember = {};
  $scope.teamMembers = [];
  $scope.availableUsers = [];

  $scope.removeMember = function ($index, member) {
    console.log('removing member');
    $scope.teamMembers.splice($index, 1);
    $scope.team.member_ids.splice($index, 1);
    $scope.availableUsers.unshift(member);
  };

  $scope.addMember = function (member) {
    if (!member) {
      return;
    } //$scope.availableUsers.splice(1, $index);


    $scope.teamMembers.unshift(member);
    $scope.team.member_ids.unshift(member._id);
  };

  var addTeam = function addTeam() {
    var thisTeam = angular.copy($scope.team);
    delete $scope.addTeamError;
    $scope.appClient.addTeam(thisTeam, function (error, team) {
      if (error) {
        $scope.addTeamError = "Problem adding team";
        return;
      }

      setTimeout(function () {
        $scope.closeModal(team);
      }, 500);
    });
  };

  var updateTeam = function updateTeam() {
    var thisTeam = angular.copy($scope.team);
    delete $scope.addTeamError;
    $scope.appClient.updateTeam(thisTeam, function (error, team) {
      if (error) {
        $scope.addTeamError = "Problem adding team";
        return;
      }

      setTimeout(function () {
        $scope.closeModal(team);
      }, 500);
    });
  };

  $scope.save = function () {
    if ($scope.team._id) {
      updateTeam();
    } else {
      addTeam();
    }
  };

  var initializeMembers = function initializeMembers() {
    for (var i in $scope.shared.activeCompany.members) {
      var member = $scope.shared.activeCompany.members[i];

      if ($scope.team.member_ids.indexOf(member._id) === -1) {
        $scope.availableUsers.push(member);
      } else {
        $scope.teamMembers.push(member);
      }
    }
  };

  $scope.closeModal = function (updatedTeam) {
    //$uibModalInstance.close($scope.position);
    $uibModalInstance.dismiss(updatedTeam);
  };

  initializeMembers();
}]);
'use strict';

angular.module('appController').controller('AutoJoinSettingsModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'dialog', 'settings', function ($scope, $uibModalInstance, AppClient, dialog, settings) {
  $scope.appClient = AppClient;
  $scope.settings = settings;

  $scope.addEmailDomain = function (domain) {
    domain = domain.toLowerCase();

    if (!$scope.appClient.isValidDomain(domain)) {
      dialog.alert({
        message: "Oops, it doesn't look like you've entered a valid domain."
      }, function (result) {});
      return;
    }

    if (settings.domains.indexOf(domain) > -1) {
      return;
    }

    $scope.settings.domains.push(domain);
    $scope.emailDomain.text = '';
  };

  $scope.removeEmailDomain = function (index) {
    $scope.settings.domains.splice(index, 1);
  };

  $scope.saveChanges = function () {
    $uibModalInstance.close($scope.settings);
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);
'use strict';

angular.module('appController').controller('CompanySettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', '$parentScope', '$cookieStore', 'dialog', 'CompanyService', 'FeaturesService', 'ModalService', function ($scope, $rootScope, $state, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, $parentScope, $cookieStore, dialog, CompanyService, FeaturesService, ModalService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.Math = window.Math;

  $scope.gaEventTracker = function (type) {
    ga('send', 'event', type, 'click', 1);
  };

  $scope.team = [];
  $scope.team_invited = [];
  $scope.company = SharedData.activeCompany.company;

  if (!$scope.company.settings.ats.autojoin) {
    $scope.company.settings.ats.autojoin = {
      enabled: false,
      domains: []
    };
  }

  $scope.plan = SharedData.activeCompany.company.plan;
  $scope.subscriptions = SharedData.activeCompany.company.subscriptions; // update limit

  var updateLimits = function updateLimits() {
    $scope.appClient.getLimitsByType($scope.shared.activeCompany.company._id, 'sms', function (error, result) {
      if (result) {
        if ($scope.shared.activeCompany.company.limits) {
          $scope.shared.activeCompany.company.limits.sms = result;
        } else {
          $scope.shared.activeCompany.company.limits = {
            sms: result
          };
        }
      }
    });
  };

  updateLimits();

  $scope.openTalentSearchSubscription = function () {
    if ($scope.showUpdateBilling) {
      $scope.showUpdateBilling = false;
      $scope.unmount();
    }

    ModalService.openTalentSearchSubscription().then(function (result) {
      $scope.subscriptions = $scope.shared.activeCompany.company.subscriptions;
      updateLimits();
    });
  };

  $scope.cancelTalentSearchSubscription = function () {
    dialog.confirm({
      title: 'Cancel Talent Search',
      message: 'Are you sure you would like to cancel your Talen Search plan?'
    }, function (result) {
      if (result) {
        $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, 'talent_search', $scope.subscriptions.talent_search.plan.id, true, function (error, result) {
          if (error) {
            return;
          }

          delete $scope.subscriptions.talent_search; //updateLimits();
        });
      }
    });
  };

  $scope.openSMSSubscription = function () {
    if ($scope.showUpdateBilling) {
      $scope.showUpdateBilling = false;
      $scope.unmount();
    }

    ModalService.openSMSSubscription().then(function (result) {
      $scope.subscriptions = $scope.shared.activeCompany.company.subscriptions;
      updateLimits();
    });
  };

  $scope.cancelSMSSubscription = function () {
    dialog.confirm({
      title: 'Cancel SMS Messaging',
      message: 'Are you sure you would like to cancel your SMS Messaging plan?'
    }, function (result) {
      if (result) {
        $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, 'sms', $scope.subscriptions.sms.plan.id, true, function (error, result) {
          if (error) {
            return;
          }

          delete $scope.subscriptions.sms;
          updateLimits();
        });
      }
    });
  };

  $scope.navigateTo = function (dest, options) {
    $scope.closeModal(); // allow the modal to close and change routes back before redirecting

    $timeout(function () {
      $state.go(dest, options);
    }, 1);
  }; // Navigate user list with arrow keys and enter


  $scope.navigate = function (e) {
    //console.log(e.keyCode);
    //console.log($scope.filteredTags);
    var direction = null,
        index = $scope.selected,
        length = $scope.filteredTags.length - 1;

    if (e.keyCode == 27) {
      // escape
      $scope.search.tag = '';
      $scope.selected = 0;
    }

    if (e.keyCode == 8) {
      // delete
      if (!$scope.search || $scope.search.tag.length === 0) {
        $scope.createdTags.pop();
      }
    }

    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault(); //console.log($scope.filteredTags);

      if ($scope.filteredTags.length !== 0) {
        $scope.selectTag();
      } else {
        $scope.createTag();
      }
    }

    if (e.keyCode == 38) {
      direction = -1;
    } // up


    if (e.keyCode == 40) {
      direction = 1;
    } // down


    if (direction) {
      e.stopPropagation();
      index += direction;
      if (index < 0) index = length;
      if (index > length) index = 0;
      $scope.selected = index;
    }
  };

  $scope.invite = {
    'user_type': 'member',
    'invitees': []
  };

  var initializePlanState = function initializePlanState() {
    var plan = $scope.shared.activeCompany.company.plan;

    if (plan.id == "freebie") {
      $scope.trialPlan = true;
      var now = new Date();
      var trialEnds = new Date($scope.shared.activeCompany.company.trial_expiry_date);
      $scope.trialDaysLeft = Math.round((trialEnds.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

      if ($scope.trialDaysLeft < 0) {
        $scope.trialDaysLeft = 0;
      }

      console.log('Trial ends: ' + trialEnds);
      console.log('Trial days left: ' + $scope.trialDaysLeft);
    }
  };

  initializePlanState();

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "general";
    }

    $scope.activeTab = tab;
    $state.transitionTo('company.settings-section', {
      settingsSection: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });

    if (tab !== "billing") {
      $scope.showUpdateBilling = false;
    }
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        // Inform the customer that there was an error.
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message; //var errorElement = document.getElementById('card-errors');
        //errorElement.textContent = result.error.message;

        delete $scope.cardStatus;
      } else {
        // Send the token to your server.
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.company._id, token, function (error, card) {
          delete $scope.cardStatus;

          if (error) {
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            $scope.gaEventTracker("BillingUpdateFailure");
            return;
          }

          $scope.card = card;
          $scope.billingSuccess = true;
          $scope.showUpdateBilling = false;
          $scope.gaEventTracker("BillingUpdateSuccess");
        });
      }
    });
  };

  $scope.handleStripePlan = function (status, response) {
    $scope.billingError = undefined;
    $scope.billingErrorMessage = undefined;
    $scope.billingSuccess = undefined;

    if (response.error) {
      $scope.billingError = true;
      $scope.billingErrorMessage = response.error.message;
      return;
    }

    var token = response.id;
    $scope.appClient.updateCompanyCreditCard($scope.company._id, token, function (error, card) {
      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
        $scope.gaEventTracker("PlanUpdateFailure");
        return;
      }

      $scope.card = card;
      $scope.activeTab = "planConfirm";
      ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);
    });
  };

  $scope.editMemberTeams = function (_member) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_edit_user_teams_modal.html',
      controller: 'EditUserTeamsModalInstanceCtrl',
      size: 'sm',
      resolve: {
        member: function member() {
          return _member;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  $scope.openAddTeam = function (_team) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_add_team_modal.html',
      controller: 'AddTeamModalInstanceCtrl',
      size: 'sm',
      resolve: {
        team: function team() {
          return _team || null;
        }
      }
    });
    modalInstance.result.then(function () {
      console.log('calling initialize teams');
      initializeTeams();
    });
  };

  $scope.openCompanyInvite = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_company_invite_modal.html',
      controller: 'CompanyInviteModalInstanceCtrl',
      size: 'sm',
      resolve: {}
    });
    modalInstance.result.then(function () {
      initializeInvitations();
    }, function () {});
  };

  $scope.dragAdminListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.member-list'
  };

  $scope.cancelInvitation = function (idx, invite) {
    $scope.appClient.cancelInvitation($scope.shared.activeCompany.company._id, invite._id, function (error) {
      $scope.team_invited.splice(idx, 1);
    });
  };

  $scope.inviteCompanyMember = function (email, callback) {
    $scope.appClient.inviteCompanyMember($scope.shared.activeCompany.company._id, null, email, function (error, result) {
      callback();
    });
  };

  $scope.inviteCompanyAdmin = function (email, callback) {
    $scope.appClient.inviteCompanyAdmin($scope.shared.activeCompany.company._id, null, email, function (error, result) {
      callback();
    });
  };

  $scope.inviteUser = function () {
    $scope.invite.submitted = true;

    if (!$scope.invite.email_address || !$scope.invite.user_type) {
      return;
    }

    $scope.invite.sending = true;

    var cb = function cb(error, result) {
      $cookieStore.put("CompanyMemberInvited", true);
      $rootScope.$broadcast('companyMemberInvited', {});
      initializeInvitations();
      setTimeout(function () {
        $scope.invite.email_address = '';
        $scope.form.inviteForm.$setPristine();
        delete $scope.invite.submitted;
        delete $scope.invite.sending;
      }, 500);
    };

    if ($scope.invite.user_type === "company-admin") {
      $scope.inviteCompanyAdmin($scope.invite.email_address, cb);
    } else {
      $scope.inviteCompanyMember($scope.invite.email_address, cb);
    }
  };

  $scope.removeTeam = function ($index, team) {
    if (confirm("Are you sure you'd like to remove this team?")) {
      $scope.appClient.deleteTeam(team._id, function (error) {
        if (!error) {
          $scope.shared.activeCompany.teams.splice($index, 1); //$scope.teams.splice($index, 1);
        }
      });
    }
  };

  $scope.addCompanyAdmin = function (member) {
    $scope.appClient.addCompanyAdmin($scope.shared.activeCompany.company._id, member._id, function (error, result) {
      if (result && result._id) {
        $scope.shared.activeCompany.company = result;
        member.user_role = {
          id: 'company_admin',
          name: 'Company Admin'
        };
      }
    });
  };

  $scope.removeCompanyAdmin = function (member) {
    $scope.appClient.removeCompanyAdmin($scope.shared.activeCompany.company._id, member._id, function (error, result) {
      if (!error && result && result._id) {
        $scope.shared.activeCompany.company = result;
        member.user_role = {
          id: 'company_member',
          name: 'Member'
        };
      }
    });
  };

  $scope.removeCompanyMember = function ($index, member) {
    if (confirm("Are you sure you'd like to remove this user?")) {
      $scope.appClient.removeCompanyMember($scope.shared.activeCompany.company._id, member._id, function (error) {
        if (!error) {
          $scope.shared.activeCompany.members.splice($index, 1);
          $scope.team.splice($index, 1);
        }
      });
    }
  };

  $scope.selectPlan = function (plan) {
    $scope.selectedPlan = plan.monthly;

    if ($scope.shared.positions.published && plan.position_count < $scope.shared.positions.published.length) {
      var diff = $scope.shared.positions.published.length - plan.position_count;
      return dialog.alert({
        message: "You currently have " + $scope.shared.positions.published.length + "  active positions/pools. You must move " + diff + ' to draft before you can update to this plan.'
      }, function (result) {});
    }

    if ($scope.card) {
      $scope.activeModalTab = "planConfirm";
    } else {
      $scope.activeModalTab = "planBilling";
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company/trial.expired.billing.html',
      controller: 'CompanyBillingInformationViewCtrl',
      size: 'sm',
      resolve: {
        activeTab: function activeTab() {
          return $scope.activeModalTab;
        },
        selectedPlan: function selectedPlan() {
          return $scope.selectedPlan;
        }
      }
    });
  };

  $scope.openGDPRSettings = function () {
    ModalService.openGDPRSettings($scope.company.settings.ats.gdpr).then(function (result) {
      if (result) {
        $scope.company.settings.ats.gdpr = result;
      }
    });
  };

  $scope.isGDPRValid = function () {
    if ($scope.company.settings.ats.gdpr.enabled) {
      $scope.openGDPRSettings();
    }
  };

  $scope.openGoogleAuthSettings = function (settings) {
    ModalService.openGoogleAuthSettings($scope.company.settings.ats.enforceauth).then(function (result) {
      $scope.company.settings.ats.enforceauth = result;
    });
  };

  $scope.isGoogleAuthValid = function () {
    if (!$scope.company.settings.ats.enforceauth.domain || $scope.company.settings.ats.enforceauth.domains.length === 0) {
      ModalService.openGoogleAuthSettings($scope.company.settings.ats.enforceauth).then(function (result) {
        $scope.company.settings.ats.enforceauth = result;
      });
    }
  };

  $scope.selectSSOType = function (type) {
    var current = $scope.company.settings.ats.enforceauth.type;

    if (current === type) {
      $scope.company.settings.ats.enforceauth.type = null;
      return;
    } else {
      $scope.company.settings.ats.enforceauth.type = type;
    }

    if (type === 'google') {
      $scope.isGoogleAuthValid();
    } else if (type === 'okta' || type === 'saml' || type === 'onelogin') {
      if (!$scope.integrations.saml) {
        $scope.openSAMLOptions(type);
      }
    }
  };

  $scope.SAMLProvider = function () {
    if ($scope.integrations && $scope.integrations.saml) {
      if ($scope.integrations.saml.hasOwnProperty('provider')) {
        return $scope.integrations.saml.provider;
      } else {
        return 'okta';
      }
    }

    return null;
  };

  $scope.openSAMLOptions = function (_type) {
    if (FeaturesService.actions.block('sso', {
      specific: _type
    })) return;
    var templateUrl = '/templates/v2/app/settings/_update_okta_modal.html';

    if (_type === 'saml') {
      templateUrl = '/templates/v2/app/settings/_update_saml_modal.html';
    } else if (_type === 'google') {
      templateUrl = '/templates/v2/app/settings/_update_google_modal.html';
    } else if (_type === 'onelogin') {
      templateUrl = '/templates/v2/app/settings/_update_onelogin_modal.html';
    }

    var modalInstance = $uibModal.open({
      templateUrl: templateUrl,
      controller: 'OktaConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        saml: function saml() {
          return $scope.integrations.saml;
        },
        type: function type() {
          return _type;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.saml = result;
      }
    }, function () {});
  };

  $scope.disableIntegration = function (serviceId) {
    $scope.appClient.disableIntegration(serviceId, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
        //console.log($scope.integrations);
        $scope.integrations = result;
      });
      $scope.shared.activeCompany.company['has_' + serviceId] = false;
    });
  };

  $scope.openAutoJoinSettings = function (settings) {
    ModalService.openAutoJoinSettings($scope.company.settings.ats.autojoin).then(function (result) {
      $scope.company.settings.ats.autojoin = result;
    });
  };

  $scope.isAutoJoinValid = function () {
    if ($scope.company.settings.ats.autojoin.domains.length === 0) {
      ModalService.openAutoJoinSettings($scope.company.settings.ats.autojoin).then(function (result) {
        $scope.company.settings.ats.autojoin = result;
      });
    }
  };

  $scope.changePlan = function () {
    $scope.changingPlan = true;
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, null, $scope.selectedPlan.id, false, function (error, result) {
      delete $scope.changingPlan;

      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      var planIdWas = $scope.shared.activeCompany.company.plan.id;
      ga('send', 'event', "updateCompanySubscriptionPlan", 'update', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      $scope.trialDaysLeft = null;
      $scope.updateComplete = true;
      $rootScope.$broadcast('subscriptionPlanUpdated', $scope.selectedPlan);
      $scope.activeTab = "planConfirmComplete"; // $scope.gaEventTracker("PlanUpdateSuccess");
      // Track paid conversions

      if (planIdWas === "freebie") {
        ga('send', 'event', "TrialConversion", 'payment', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
        fbq('track', 'TrialConversion', {
          value: $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost,
          currency: 'USD'
        });
      } else {
        // track upgrades
        ga('send', 'event', "PlanUpdateSuccess", 'upgrade', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      }

      location.reload();
    });
  };

  $scope.requestQuote = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            quote_type: 'ATS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.closeCompanyAccount = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_close_company_account.html',
      controller: 'CloseCompanyAccountModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.cancelSubscription = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_cancel_subscription.html',
      controller: 'CancelSubscriptionModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.updateCompany = function () {
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, $scope.company, function (error, result) {
      if (!error) {
        $location.url("/app/c/" + result.friendly_id + "/home");

        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.updateCompanySettings = function () {
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    var companyData = {
      name: $scope.company.name,
      settings: $scope.company.settings
    };
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, companyData, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('close');
  };

  $scope.toggleShowUpdateBilling = function () {
    $scope.showUpdateBilling = !$scope.showUpdateBilling;

    if ($scope.showUpdateBilling) {
      $scope.initStripe();
    } else {
      $scope.billingError = false;
      $scope.billingErrorMessage = '';
      $scope.unmount();
    }

    delete $scope.cardStatus;
  };

  $scope.cancelStripe = function () {
    $scope.toggleShowUpdateBilling();
  };

  $scope.initStripe = function () {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }

      delete $scope.cardStatus;
    });
  };

  $scope.unmount = function () {
    stripe_card.unmount('#card-element');
  };

  $scope.showUpdateBillingDescription = false;

  $scope.toggleUpdateBillingDescription = function () {
    $scope.showUpdateBillingDescription = !$scope.showUpdateBillingDescription;
  };

  $scope.updateCompanyBillingDescription = function () {
    $scope.appClient.updateCompanyBillingDescription($scope.shared.activeCompany.company._id, $scope.billingDescription, function (error, result) {
      $scope.toggleUpdateBillingDescription();
    });
  };

  $scope.openInvoiceModal = function (_invoice, _card) {
    var _companyMeta = {
      'name': $scope.shared.activeCompany.company.name,
      'meta': ""
    };

    if ($scope.billingDescription) {
      _companyMeta = angular.copy($scope.billingDescription);
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_invoice_modal.html',
      controller: 'InvoiceModalInstanceCtrl',
      size: 'md',
      resolve: {
        card: function card() {
          return _card;
        },
        invoice: function invoice() {
          return _invoice;
        },
        companyMeta: function companyMeta() {
          return _companyMeta;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  $scope.openApprovalWorkflow = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_approval_workflow_modal.html',
      controller: 'ApprovalWorkflowModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (approval_workflow) {
      if (approval_workflow) {
        $scope.shared.activeCompany.company.approval_workflow = approval_workflow;
      }
    }, function () {});
  };

  $scope.openEditReasons = function (_reasonType) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_reasons_modal.html',
      controller: 'CompanyReasonsModalInstanceCtrl',
      size: 'sm',
      resolve: {
        reasonType: function reasonType() {
          return _reasonType;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  var initializeGeneral = function initializeGeneral() {
    $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
      console.log($scope.integrations);
      $scope.integrations = result;
    });
  };

  var initializePlans = function initializePlans() {
    var planPath = '/data/plans_trial.json';

    if ($scope.shared.activeCompany.company.pricing === "v2") {
      planPath = '/data/plans_trial_v2.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v3") {
      planPath = '/data/plans_trial_v3.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v5") {
      planPath = '/data/plans_trial_v5.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v6") {
      planPath = '/data/plans_trial_v6.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v7") {
      planPath = '/data/plans_trial_v7.json';
    }

    $http.get(planPath).success(function (data) {
      $scope.plans = data;
    }).error(function (error) {
      console.log('Error fetching plans JSON!: ' + error);
    });
  };

  var getDollarAmmount = function getDollarAmmount(amount) {
    return (amount / 100).toFixed(2);
  };

  var initializeBilling = function initializeBilling() {
    $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
      $scope.showUpdateBilling = false;

      if (card) {
        $scope.card = card;
      }
    });
    $scope.appClient.getCompanyInvoices($scope.shared.activeCompany.company._id, function (error, invoices) {
      if (invoices) {
        for (var i in invoices) {
          var invoice = invoices[i];
          invoice.amount_due = getDollarAmmount(invoice.amount_due);
        }

        $scope.invoices = invoices;
      }
    });
    $scope.appClient.getCompanyBillingDescription($scope.shared.activeCompany.company._id, function (error, billingDescription) {
      if (billingDescription) {
        $scope.billingDescription = billingDescription;
      } else {
        $scope.billingDescription = {
          'name': $scope.shared.activeCompany.company.name,
          'meta': ''
        };
      }
    });
  };

  var initializeInvitations = function initializeInvitations() {
    $scope.appClient.getInvitations($scope.shared.activeCompany.company._id, null, function (error, result) {
      $scope.team_invited = result;
    });
  };

  var initializeCompanyTeam = function initializeCompanyTeam() {
    $scope.appClient.getCompanyTeam($scope.shared.activeCompany.company._id, function (error, result) {
      $scope.team = result;
    });
  };

  var initializeTeams = function initializeTeams() {
    console.log('Re-initializing teams');
    $scope.appClient.getTeams(function (error, result) {
      $scope.shared.activeCompany.teams = result;
      $scope.teams = result;
    });
  };

  var isEmail = function isEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  $scope.$watch('invite.searchTerm', function (text, prevText) {
    if (!$scope.invite.searchTerm) {
      $scope.invite.invitees = [];
      $scope.invite.email_invitees = [];
      return;
    }

    if (isEmail($scope.invite.searchTerm)) {
      $scope.invite.email_invitees = [];
      var member = {
        'id': $scope.invite.searchTerm,
        'initial': $scope.invite.searchTerm.substring(0, 1).toUpperCase(),
        'name': $scope.invite.searchTerm
      }; //$scope.invite.email_invitees.push(member);

      var isMember = _.find($scope.shared.activeCompany.members, function (m) {
        return m.email_address === $scope.invite.searchTerm;
      }),
          isInvited = _.find($scope.team_invited, function (m) {
        return m.invited_id === $scope.invite.searchTerm;
      });

      if (!isMember && !isInvited) {
        $scope.invite.email_invitees.push(member);
      }

      return;
    }
  });

  $scope.checkFeature = function (feature) {
    if (feature === 'eeoc' && FeaturesService.actions.block('eeo_reporting', {
      specific: 'eeo'
    })) {
      $scope.company.settings.ats.eeoc.enable_eeoc = false;
      return;
    }

    if (feature === 'disposition' && FeaturesService.actions.block('eeo_reporting', {
      specific: 'disposition'
    })) {
      $scope.company.settings.ats.eeoc.reasons.disposition = 'disabled';
      return;
    }
  };

  $scope.checkEEOC = function () {
    var eeoc = $scope.company.settings.ats.eeoc;
    return eeoc.enable_eeoc || eeoc.reasons.disposition !== 'disabled';
  };

  var initialize = function initialize() {
    $scope.company = $scope.shared.activeCompany.company;
    initializeGeneral();
    initializeBilling();
    initializePlans();
    initializeInvitations();
    initializeCompanyTeam();
    initializeTeams();
  };

  $scope.setTabActive(defaultTab);
  initialize();
}]);
'use strict';

angular.module('appController').controller('EditUserTeamsModalInstanceCtrl', ['$scope', '$rootScope', 'AppClient', 'SharedData', 'PositionsService', 'member', '$timeout', '$uibModalInstance', function ($scope, $rootScope, AppClient, SharedData, PositionsService, member, $timeout, $uibModalInstance) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.member = member;
  $scope.saveTeamError;
  $scope.selectedTeam = {};
  $scope.allTeams = angular.copy($scope.shared.activeCompany.teams);
  $scope.availableTeams = [];
  $scope.userTeams = [];

  $scope.removeTeam = function ($index, team) {
    $scope.userTeams.splice($index, 1);
    $scope.availableTeams.unshift(team);
    team.member_ids.splice(team.member_ids.indexOf($scope.member._id), 1);
  };

  $scope.addTeam = function (team) {
    if (!team) {
      return;
    } //$scope.availableUsers.splice(1, $index);


    var teamIdx;

    for (var i in $scope.availableTeams) {
      if ($scope.availableTeams[i]._id === team._id) {
        teamIdx = i;
      }
    }

    $scope.availableTeams.splice(teamIdx, 1);
    $scope.userTeams.unshift(team);
    $scope.selectedTeam = {};
  };

  $scope.clearAllAvailable = function () {
    for (var i in $scope.availableTeams) {
      var team = $scope.availableTeams[i];
      delete team.checked;
    }
  };

  $scope.selectAllAvailable = function () {
    for (var i in $scope.availableTeams) {
      var team = $scope.availableTeams[i];
      team.checked = true;
    }
  };

  $scope.save = function () {
    var teamIds = [];

    for (var i in $scope.userTeams) {
      var team = $scope.userTeams[i];
      if (team._id === "all_members") continue;
      teamIds.push(team._id);
    }

    delete $scope.saveTeamError;
    $scope.appClient.updateMemberTeams($scope.member._id, teamIds, function (error, team) {
      if (error) {
        $scope.saveTeamError = "Problem updating teams";
        return;
      }

      setTimeout(function () {
        $rootScope.$broadcast('companyTeamsChanged', {});
        $scope.closeModal();
      }, 500);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var initializeTeams = function initializeTeams() {
    for (var i in $scope.allTeams) {
      var team = $scope.allTeams[i];

      if (team.member_ids.indexOf($scope.member._id) === -1) {
        $scope.availableTeams.push(team);
      } else {
        $scope.userTeams.push(team);
      }
    }
  };

  initializeTeams();
}]);
'use strict';

angular.module('appController').controller('GoogleAuthSettingsModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'dialog', 'settings', function ($scope, $uibModalInstance, AppClient, SharedData, dialog, settings) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.company = SharedData.activeCompany.company;
  if (!$scope.company.settings.ats.enforceauth.domains) $scope.company.settings.ats.enforceauth.domains = [];

  $scope.addEmailDomain = function (domain) {
    domain = domain.toLowerCase();

    if (!$scope.appClient.isValidDomain(domain)) {
      dialog.alert({
        message: "Oops, it doesn't look like you've entered a valid domain."
      }, function (result) {});
      return;
    }

    if ($scope.company.settings.ats.enforceauth.domains.indexOf(domain) > -1) {
      return;
    }

    $scope.company.settings.ats.enforceauth.domains.push(domain);
    $scope.emailDomain.text = '';
  };

  $scope.removeEmailDomain = function (index) {
    $scope.company.settings.ats.enforceauth.domains.splice(index, 1);
  };

  $scope.saveChanges = function () {
    $scope.updateCompanySettings();
    $uibModalInstance.close($scope.company.settings.ats.enforceauth);
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.updateCompanySettings = function () {
    if (!$scope.company.settings.ats.enforceauth.type) {
      $scope.company.settings.ats.enforceauth.enabled = false;
    } else if ($scope.company.settings.ats.enforceauth.type === 'google') {
      $scope.company.settings.ats.enforceauth.enabled = true;
    } //console.log($scope.company.settings.ats.enforceauth);


    var companyData = {
      name: $scope.company.name,
      settings: $scope.company.settings
    };
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, companyData, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }
      }

      $scope.closeModal();
    });
  };
}]);
'use strict';

angular.module('appController').controller('CompanyInviteModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'PositionsService', '$timeout', '$rootScope', '$cookieStore', '$uibModalInstance', function ($scope, AppClient, SharedData, PositionsService, $timeout, $rootScope, $cookieStore, $uibModalInstance) {
  console.log('init CompanyInviteModalInstanceCtrl');
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.invite = {
    "role_type": "member"
  };
  $scope.userTypes = $scope.shared.positionUserTypes;
  $scope.availablePositions = [];
  var activePositions = [];
  var draftPositions = [];
  var closedPositions = [];

  for (var key in SharedData.activeCompany.positions) {
    var position = angular.copy(SharedData.activeCompany.positions[key]);

    if (position.state === "archived") {
      continue;
    }

    if (position.state === "published") {
      activePositions.push(position);
    } else if (position.state === "draft") {
      draftPositions.push(position);
    } else if (position.state === "closed") {
      closedPositions.push(position);
    }

    $scope.availablePositions = activePositions.concat(draftPositions, closedPositions);
  }

  $scope.availableTeams = angular.copy($scope.shared.activeCompany.teams).filter(function (member) {
    return member._id !== "all_members";
  });

  $scope.clearAllAvailable = function () {
    for (var i in $scope.availableTeams) {
      var team = $scope.availableTeams[i];
      delete team.checked;
    }
  };

  $scope.selectAllAvailable = function () {
    for (var i in $scope.availableTeams) {
      var team = $scope.availableTeams[i];
      team.checked = true;
    }
  };
  /*
      $scope.clearAllAvailable = function () {
          for(var i in $scope.availablePositions) {
              var position = $scope.availablePositions[i];
              delete position.checked;
          }
      };
  
      $scope.selectAllAvailable = function () {
          for(var i in $scope.availablePositions) {
              var position = $scope.availablePositions[i];
              position.checked = true;
          }
      };
  */


  $scope.selectAllActiveAvailable = function () {
    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];

      if (position.state === "published") {
        position.checked = true;
      } else {
        position.checked = false;
      }
    }
  };

  $scope.inviteUser = function () {
    $scope.invite.submitted = true;

    if (!$scope.invite.email_addresses || !$scope.invite.role_type) {
      return;
    }

    var emails = [];
    $scope.invite.email_addresses.split(",").forEach(function (email) {
      if ($scope.appClient.isValidEmail(email.trim())) emails.push(email);
    });
    $scope.invite.email_addresses = emails;

    var cb = function cb(error, result) {
      $cookieStore.put("CompanyMemberInvited", true);
      $rootScope.$broadcast('companyMemberInvited', {}); //initializeInvitations();

      setTimeout(function () {
        //-$scope.form.inviteForm.$setPristine();
        delete $scope.invite.submitted;
        delete $scope.invite.sending;
        $scope.invite.email_addresses = '';
        setTimeout(function () {
          $scope.closeModal();
        }, 100);
      }, 100);
    };

    $scope.invite.sending = true;
    var positionIds = [];

    for (var i in $scope.availablePositions) {
      if ($scope.availablePositions[i].checked) {
        positionIds.push($scope.availablePositions[i]._id);
      }
    }

    $scope.invite.position_ids = positionIds;
    var teamIds = [];

    for (var i in $scope.availableTeams) {
      if ($scope.availableTeams[i].checked) {
        teamIds.push($scope.availableTeams[i]._id);
      }
    }

    $scope.invite.team_ids = teamIds;
    $scope.appClient.inviteCompanyUser($scope.shared.activeCompany.company._id, $scope.invite, cb);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CompanyReasonsModalInstanceCtrl', ['$scope', '$uibModalInstance', 'CompanyService', 'ModalService', 'reasonType', function ($scope, $uibModalInstance, CompanyService, ModalService, reasonType) {
  // start company reasons
  $scope.reasonTypes = {
    disposition: {
      name: 'Disposition',
      header: 'Disposition Reasons',
      icon: 'fa-minus-circle'
    },
    hired: {
      name: 'Hired',
      header: 'Hired Reasons',
      icon: 'fa-user-plus'
    }
  };
  $scope.reasonType = reasonType;
  $scope.reason = $scope.reasonTypes[reasonType];

  $scope.updateReasons = function () {
    $scope.updateSuccess = false;
    CompanyService.remote.updateReasons($scope.reasons);
    $scope.updateSuccess = true;
    setTimeout(function () {
      $scope.updateSuccess = false;
    }, 2000);
  };

  $scope.openAddReason = function (type, reason) {
    reason = reason || null;
    ModalService.openAddReason(reason).then(function (reason) {
      if (reason) {
        CompanyService.mutations.updateReason(type, reason);
        setReasons();
      }
    });
  };

  $scope.deleteReason = CompanyService.mutations.deleteReason;
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.reasons'
  };

  var setReasons = function setReasons() {
    $scope.reasons = CompanyService.getters.reasons();
  };

  setReasons(); // end company reasons

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('AddTeamModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'PositionsService', '$timeout', '$rootScope', '$cookieStore', '$uibModalInstance', 'team', function ($scope, AppClient, SharedData, PositionsService, $timeout, $rootScope, $cookieStore, $uibModalInstance, team) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.company = $scope.shared.activeCompany.company;
  $scope.team = angular.copy(team);

  if (!$scope.team) {
    $scope.team = {
      'name': "",
      'member_ids': []
    };
  }

  $scope.selectedMember = {};
  $scope.teamMembers = [];
  $scope.availableUsers = [];

  $scope.removeMember = function ($index, member) {
    $scope.teamMembers.splice($index, 1);
    var idx = $scope.team.member_ids.findIndex(function (id) {
      return id === member._id;
    });
    $scope.team.member_ids.splice(idx, 1);
    $scope.availableUsers.unshift(member);
  };

  $scope.addMember = function (member) {
    if (!member) {
      return;
    }

    $scope.teamMembers.unshift(member);
    $scope.team.member_ids.unshift(member._id);
  };

  var addTeam = function addTeam() {
    var thisTeam = angular.copy($scope.team);
    delete $scope.addTeamError;
    $scope.appClient.addTeam(thisTeam, function (error, team) {
      if (error) {
        $scope.addTeamError = "Problem adding team";
        return;
      }

      setTimeout(function () {
        $scope.closeModal(team);
      }, 500);
    });
  };

  var updateTeam = function updateTeam() {
    var thisTeam = angular.copy($scope.team);
    delete $scope.addTeamError;
    $scope.appClient.updateTeam(thisTeam, function (error, team) {
      if (error) {
        $scope.addTeamError = "Problem adding team";
        return;
      }

      setTimeout(function () {
        $scope.closeModal();
      }, 500);
    });
  };

  $scope.save = function () {
    if ($scope.team._id) {
      updateTeam();
    } else {
      addTeam();
    }
  };

  var initializeMembers = function initializeMembers() {
    for (var i in $scope.shared.activeCompany.members) {
      var member = $scope.shared.activeCompany.members[i];

      if ($scope.team.member_ids.indexOf(member._id) === -1) {
        $scope.availableUsers.push(member);
      } else {
        $scope.teamMembers.push(member);
      }
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  initializeMembers();
}]);
'use strict';

angular.module('appController').controller('GDPRSettingsModalInstanceCtrl', ['$scope', 'SharedData', '$uibModalInstance', 'gdpr', 'CompanyService', 'ModalService', function ($scope, SharedData, $uibModalInstance, gdpr, CompanyService, ModalService) {
  console.log('init GDPRSettingsModalInstanceCtrl');

  $scope.openAddGDPRApplied = function () {
    var portal = $scope.gdpr.consent.applied.portal;
    ModalService.openAddGDPRApplied(portal).then(function (result) {
      if (result) {
        console.log(result);
        $scope.gdpr.consent.applied.portal = result;
      }
    });
  };

  $scope.openEditGDPRTemplate = function (template_type) {
    var templateIndex = $scope.templates.findIndex(function (template) {
      return template.type === template_type;
    });
    ModalService.openEditGDPRTemplate($scope.templates[templateIndex]).then(function (result) {
      if (result) {
        $scope.templates[templateIndex] = result;
      }
    });
  };

  $scope.templates = CompanyService.getters.templates().gdpr; //SharedData.activeCompany.templates;

  $scope.gdpr = gdpr;

  $scope.saveChanges = function () {
    $uibModalInstance.close($scope.gdpr);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
angular.module('appController').controller('AddGDPRAppliedModalInstanceCtrl', ['$scope', 'SharedData', '$uibModalInstance', 'portal', 'utils', function ($scope, SharedData, $uibModalInstance, portal, utils) {
  if (portal.consent_description) {
    portal.consent_description = utils.markdownToHTML(portal.consent_description);
  }

  $scope.portal = portal;
  $scope.redactorConfig = {
    air: true,
    buttons: ['bold', 'underline', 'lists', 'link'],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: '150px',
    maxHeight: '150px'
  };

  $scope.saveChanges = function () {
    //$scope.portal.consent_description = utils.HTMLtoMarkdown($scope.portal.consent_description || '');
    //console.log($scope.portal);
    $uibModalInstance.close({
      consent_title: $scope.portal.consent_title,
      consent_description: utils.HTMLtoMarkdown(angular.copy($scope.portal.consent_description) || '')
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CompanyPlanConfirmV7InstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'plan', 'billing', 'card', 'dialog', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, plan, billing, card, dialog) {
  console.log('init CompanyPlanConfirmV7InstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.plan = plan;
  $scope.card = card;
  $scope.billing = billing;
  $scope.changingPlan = false;
  $scope.ccWizard = true; // steps: card, confirm, complete

  if ($scope.card) $scope.step = 'confirm';else $scope.step = 'card';

  $scope.changePlan = function () {
    var planId = $scope.plan.id;

    if ($scope.shared.positions.published && $scope.plan.position_count < $scope.shared.positions.published.length) {
      var diff = $scope.shared.positions.published.length - $scope.plan.position_count;
      return dialog.alert({
        message: "You currently have " + $scope.shared.positions.published.length + " active positions/pools. You must move " + diff + ' to draft before you can update to this plan.'
      }, function (result) {});
    }

    $scope.changingPlan = true;
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, null, planId, false, function (error, result) {
      if (error) {
        $scope.changingPlan = false;
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      var planIdWas = $scope.shared.activeCompany.company.plan.id;
      ga('send', 'event', "updateCompanySubscriptionPlan", 'update', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
      $rootScope.$broadcast('subscriptionPlanUpdated', $scope.plan);
      $scope.step = "complete"; // $scope.gaEventTracker("PlanUpdateSuccess");
      // Track paid conversions

      if (planIdWas === "freebie") {
        ga('send', 'event', "TrialConversion", 'payment', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
        fbq('track', 'TrialConversion', {
          value: $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost,
          currency: 'USD'
        });
      } else {
        // track upgrades
        ga('send', 'event', "PlanUpdateSuccess", 'upgrade', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
      }

      setTimeout(function () {
        location.reload();
      }, 1000);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var initStripe = function initStripe() {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }

      delete $scope.cardStatus;
    });
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message;
        delete $scope.cardStatus;
      } else {
        // Send the token to your server.
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
          if (error) {
            delete $scope.cardStatus;
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            $scope.gaEventTracker("PlanUpdateFailure");
            return;
          }

          $scope.card = card;
          $scope.step = "confirm";
          $scope.activeTab = "planConfirm";
          ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);
          delete $scope.cardStatus;
        });
      }
    });
  };

  $scope.cancelStripe = function () {
    $scope.closeModal();
  };

  if ($scope.step === "card") {
    setTimeout(initStripe, 100);
  }
}]);
'use strict';

angular.module('appController').controller('CompanyPlanDowngradeV7InstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'plan', 'billing', 'card', 'dialog', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, plan, billing, card, dialog) {
  console.log('init CompanyPlanDowngradeV7InstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.plan = plan;
  $scope.card = card;
  $scope.billing = billing;
  $scope.planId = plan.id;
  $scope.ccWizard = true; // steps: card, confirm, complete

  $scope.step = 'save';
  $scope.losingFeatures = [];
  $scope.losingUsedFeatures = [];
  $scope.appClient.getCompanySubscriptionPlanCompare($scope.shared.activeCompany.company._id, $scope.planId, function (error, result) {
    if (result.used_lost_features && result.used_lost_features.length > 0) {
      result.used_lost_features.forEach(function (featureKey) {
        if (!SharedData.featureDetails[featureKey]) console.log('Key missing: ' + featureKey);else {
          $scope.losingUsedFeatures.push(SharedData.featureDetails[featureKey].name);
          result.lost_features.splice(result.lost_features.indexOf(featureKey), 1);
        }
      });
    }

    result.lost_features.forEach(function (featureKey) {
      if (!SharedData.featureDetails[featureKey]) console.log('Key missing: ' + featureKey);else $scope.losingFeatures.push(SharedData.featureDetails[featureKey].name);
    });
  });

  $scope.proceed = function () {
    if ($scope.shared.positions.published && $scope.plan.position_count < $scope.shared.positions.published.length) {
      var diff = $scope.shared.positions.published.length - $scope.plan.position_count;
      return dialog.alert({
        message: "You currently have " + $scope.shared.positions.published.length + " active positions/pools. You must move " + diff + ' to draft before you can update to this plan.'
      }, function (result) {});
    }

    if (!$scope.card) {
      $scope.step = "card";
      setTimeout(initStripe, 100);
    } else {
      $scope.step = "confirm";
    }
  };

  $scope.changePlan = function () {
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, null, $scope.plan.id, false, function (error, result) {
      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      var planIdWas = $scope.shared.activeCompany.company.plan.id;
      ga('send', 'event', "updateCompanySubscriptionPlan", 'update', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
      $rootScope.$broadcast('subscriptionPlanUpdated', $scope.plan);
      $scope.step = "complete";

      if (planIdWas === "freebie") {
        ga('send', 'event', "TrialConversion", 'payment', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
        fbq('track', 'TrialConversion', {
          value: $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost,
          currency: 'USD'
        });
      } else {
        ga('send', 'event', "PlanUpdateSuccess", 'upgrade', $scope.plan.monthly_cost === 0 ? 1 : $scope.plan.monthly_cost);
      }

      setTimeout(function () {
        location.reload();
      }, 1000);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var initStripe = function initStripe() {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }

      delete $scope.cardStatus;
    });
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message;
        delete $scope.cardStatus;
      } else {
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
          delete $scope.cardStatus;

          if (error) {
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            $scope.gaEventTracker("PlanUpdateFailure");
            return;
          }

          $scope.card = card;
          $scope.step = "confirm";
          $scope.activeTab = "planConfirm";
          ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);
        });
      }
    });
  };

  $scope.cancelStripe = function () {
    $scope.closeModal();
  };
}]);
'use strict';

angular.module('appController').controller('CandidateSearchModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'ModalService', '$state', '$uibModalInstance', '$timeout', function ($scope, AppClient, SharedData, ModalService, $state, $uibModalInstance, $timeout) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.selected = -1;
  $scope.search = {
    searchTerm: '',
    results: []
  };

  $scope.navigate = function (e) {
    //console.log(e.keyCode);
    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault();
      if ($scope.selected === -1) return;
      var item = $scope.search.results[$scope.selected];
      $scope.goto(item);
    }

    if (e.keyCode == 38) {
      $scope.selected--;

      if ($scope.selected < 0) {
        $scope.selected = $scope.search.results.length - 1;
      }
    } // up


    if (e.keyCode == 40) {
      $scope.selected++;

      if ($scope.selected > $scope.search.results.length - 1) {
        $scope.selected = 0;
      }
    } // down

  };
  /*Mousetrap.bind('down', () => {
      $scope.$apply();
  });
   Mousetrap.bind('up', () => {
      $scope.selected--;
      if ($scope.selected < 0) {
          $scope.selected = $scope.search.results.length - 1;
      }
      $scope.$apply();
  });
   Mousetrap.bind('enter', () => {
      if ($scope.selected === -1) return;
      var item = $scope.search.results[$scope.selected];
      $scope.goto(item);
  });*/


  var timeoutPromise;
  var delayInMs = 700;
  $scope.$watch('search.searchTerm', function (text, prevText) {
    $scope.selected = -1;

    if (!$scope.search.searchTerm) {
      $scope.search.searching = false;
      $scope.search.results = [];
      return;
    }

    $timeout.cancel(timeoutPromise); //does nothing, if timeout alrdy done

    timeoutPromise = $timeout(function () {
      //Set timeout
      $scope.search.results = [];
      $scope.search.searching = true;
      $scope.appClient.searchCandidates($scope.search.searchTerm + "*", $scope.shared.activeCompany.company._id, function (error, results) {
        $scope.search.results = results;
        $scope.search.searching = false;
      });
    }, delayInMs);
  });

  $scope.goto = function (item) {
    //alert('this will open candidate modal');
    ModalService.openCandidateModal(item.position_id, item._id);
    $scope.closeModal();
  }; // candidate card stuff


  $scope.isCandidateScored = function (candidate) {
    return $scope.appClient.isCandidateScored(candidate);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('RecentlyViewedModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'ModalService', '$state', '$uibModalInstance', '$uibModalStack', 'type', 'recentlyViewed', function ($scope, AppClient, SharedData, ModalService, $state, $uibModalInstance, $uibModalStack, type, recentlyViewed) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.type = type;
  $scope.recentlyViewed = recentlyViewed;
  $scope.selected = -1;
  Mousetrap.bind('down', function () {
    $scope.selected++;

    if ($scope.selected > $scope.recentlyViewed.length - 1) {
      $scope.selected = 0;
    }

    $scope.$apply();
  });
  Mousetrap.bind('up', function () {
    $scope.selected--;

    if ($scope.selected < 0) {
      $scope.selected = $scope.recentlyViewed.length - 1;
    }

    $scope.$apply();
  });
  Mousetrap.bind('enter', function () {
    if ($scope.selected === -1) return;
    var item = $scope.recentlyViewed[$scope.selected];
    $scope.goto(item);
  });

  $scope.goto = function (item) {
    if (type === 'position') {
      $state.go('company.position.pipeline', {
        positionId: item._id
      }); //setTimeout(function() {

      $uibModalStack.dismissAll(); //}, 500);
    } else if (type === 'candidate') {
      //alert('this will open candidate modal');
      ModalService.openCandidateModal(item.position_id, item._id);
      $scope.closeModal();
    } else {
      $uibModalInstance.close(item);
    }
  }; // position card stuff


  $scope.isPositionPromoted = function (position) {
    return $scope.appClient.isPositionPromoted(position);
  }; // candidate card stuff


  $scope.isCandidateScored = function (candidate) {
    return $scope.appClient.isCandidateScored(candidate);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').service('browser', ['$window', function ($window) {
  return function () {
    var userAgent = $window.navigator.userAgent;
    var browsers = {
      edge: /edge/i,
      chrome: /chrome/i,
      safari: /safari/i,
      firefox: /firefox/i,
      ie: /internet explorer/i
    };

    for (var key in browsers) {
      if (browsers[key].test(userAgent)) {
        return key;
      }
    }

    return 'unknown';
  };
}]);
angular.module('appController').directive('flexCell', ['browser', '$timeout', function (browser, $timeout) {
  return {
    restrict: 'C',
    link: function link(scope, element, attrs) {
      //console.log(browser());
      var _browser = browser(); //console.log(_browser)


      if (_browser === 'chrome') return;

      if (_browser === 'internet explorer') {
        if (element.hasClass('height-50-percent')) {
          element.addClass('crappy-browser-flex-fix');
        }

        if (element.hasClass('auto-size')) {
          var parent = element[0].parentNode;
          var height = parent.clientHeight;
          var change = null;
          $timeout(function () {
            [].slice.call(parent.childNodes).forEach(function (child) {
              if (angular.element(child).hasClass('auto-size')) {
                height = height - child.clientHeight || height;
              } else {
                change = child;
              }
            });
            angular.element(change).css('maxHeight', height + 'px');
          }, 0);
        }
      }
    }
  };
}]);
angular.module('appController').controller('CompanyHomeCtrl', ['$rootScope', '$scope', '$state', '$stateParams', 'AppClient', 'SharedData', 'sharedDataUtils', 'PositionsService', 'PositionsFilterService', 'CandidatesService', 'CandidatesFilterService', 'TasksService', 'dialog', 'metadata', 'tags', '$uibModal', '$cookieStore', 'ModalService', function ($rootScope, $scope, $state, $stateParams, AppClient, SharedData, sharedDataUtils, PositionsService, PositionsFilterService, CandidatesService, CandidatesFilterService, TasksService, dialog, metadata, tags, $uibModal, $cookieStore, ModalService) {
  console.log('CompanyHomeCtrl: init');

  var initializeKeyBindings = function initializeKeyBindings() {
    // easter egg!
    console.log('コナミコマンド');
    Mousetrap.bind('up up down down left right left right b a enter', function () {
      ModalService.openWolfenstein();
      return false;
    });
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  });
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.isHiringManager = false; // determine if we need to open a modal on load

  $scope.welcomeSection = $stateParams.welcomeSection;
  $scope.portalSection = $stateParams.portalSection;
  $scope.messengerSection = $stateParams.messengerSection;
  $scope.referralPortalSection = $stateParams.referralPortalSection;
  $scope.positionId = $stateParams.positionId;
  $scope.approvalToken = $stateParams.token;
  $scope.section = $stateParams.section;
  $scope.userSection = $stateParams.userSection;
  $scope.settingsSection = $stateParams.settingsSection;
  $scope.currentName = $state.current.name;
  $scope.positions = [];
  $scope.isFirstVisit = true;

  if ($cookieStore.get("BeenHereDoneThat")) {
    $scope.isFirstVisit = false;
  } else {
    $cookieStore.put("BeenHereDoneThat", true);
  }

  var positions = [];
  var pools = PositionsService.local.getMyMemberPositions().filter(function (position) {
    return position.org_type === "pool";
  });
  var positionFilters = {
    state: [{
      label: 'Active',
      value: 'published'
    }, {
      label: 'Draft',
      value: 'draft'
    }, {
      label: 'Closed',
      value: 'closed'
    }],
    members: angular.copy($scope.shared.activeCompany.members),
    locations: PositionsService.local.getPositionLocations(),
    pipelines: angular.copy($scope.shared.activeCompany.pipelines),
    types: true,
    tags: tags,
    created_date: true,
    updated_date: true,
    archived: true
  };
  var currentPositionFilter = null; // positions is not an array

  $scope.positionFilters = PositionsFilterService.init(positionFilters);
  $scope.$watch('positionFilters', function (filters) {
    var options = PositionsFilterService.getOptions(filters);

    if (!angular.equals(options, currentPositionFilter)) {
      currentPositionFilter = angular.copy(options); // refresh position list with new options

      $scope.filterPositions(options);
    }
  }, true);

  $scope.filterPositions = function (filters) {
    filters = filters || {};
    $scope.limit = 50;
    PositionsService.local.getFilteredPositions(filters).then(function (positions) {
      $scope.positions = positions;
    });
  };

  $scope.connectWithCheckr = function () {
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/checkr?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/home";
    $scope.gaEventTracker("ConnectWithCheckrPartner");
  };

  $scope.connectWithZenefits = function () {
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/zenefits?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/home";
    $scope.gaEventTracker("ConnectWithZenefitsPartner");
  };

  $scope.positionSegments = PositionsFilterService.getSegments();
  var segmentId = $cookieStore.get("PositionSegmentId");

  if (!segmentId) {
    segmentId = 'mine';
  }

  $scope.positionSegment = $scope.positionSegments.find(function (segment) {
    return segment._id === segmentId;
  });

  if (!$scope.positionSegment) {
    $scope.positionSegment = $scope.positionSegments[1];
  }

  if ($scope.positionSegment) {
    PositionsFilterService.setSegment($scope.positionSegment._id, $scope.positionSegment);
  }

  $scope.setPositionSegment = function (segmentId, segment) {
    PositionsFilterService.setSegment(segmentId, segment);
    $cookieStore.put("PositionSegmentId", segmentId);
    $scope.positionSegment = segment;
  }; // Inbox Filters


  $scope.inboxFilters = [{
    label: 'All Conversations',
    value: 'all'
  }, {
    label: 'My Conversations',
    value: 'user'
  }];

  $scope.setInboxFilter = function (filter) {
    $scope.selectedInboxFilter = filter;
    $cookieStore.put("HomeInboxFilter", filter);
    var filterByUser = ['user'].indexOf(filter.value) > -1;
    return $scope.appClient.getCompanyInbox($scope.shared.activeCompany.company._id, filterByUser, 'candidate', 50).then(function (results) {
      if (results) {
        $scope.conversations = results;
      }
    });
  };

  $scope.selectedInboxFilter = $cookieStore.get("HomeInboxFilter") || $scope.inboxFilters[0];

  if ($scope.selectedInboxFilter.value !== 'user') {
    $scope.setInboxFilter($scope.selectedInboxFilter);
  } // Candidate Filters


  var currentCandidatesFilter = null;
  var candidateFilters = {
    positions: PositionsService.local.getMyMemberPositions(),
    locations: PositionsService.local.getPositionLocations(),
    pipelines: angular.copy($scope.shared.activeCompany.pipelines),
    tags: tags,
    date_range: true,
    updated_date: true,
    candidate_type: true,
    source: metadata.sources,
    assigned: angular.copy($scope.shared.activeCompany.members),
    sourcers: metadata.sourcers,
    referrers: metadata.referrers,
    unseen: true
  }; // positions is not an array

  $scope.candidateFilters = CandidatesFilterService.init(candidateFilters, 'CompanyHomeCtrl');
  var currentFilter = null;
  $scope.$watch('candidateFilters', function (filters) {
    if (CandidatesFilterService.getActiveController() !== 'CompanyHomeCtrl') return;
    var options = CandidatesFilterService.getOptions(filters);

    if (!angular.equals(options, currentCandidatesFilter)) {
      currentCandidatesFilter = angular.copy(options); // refresh candidate list with new options
      // console.log('CompanyHomeCtrl: get candidates');

      $scope.groupCandidates(options);
    }
  }, true);

  $scope.groupCandidates = function (options) {
    options = options || currentCandidatesFilter;
    $scope.isViewInitialized = false; //$scope.candidates = CandidatesService.getFilteredCandidates(filter);

    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidates) {
      if (Array.isArray(candidates)) {
        candidates.forEach(function (candidate) {
          //candidate.position = $scope.shared.companies[$scope.shared.activeCompany.company.friendly_id].positions[candidate.position._id];
          // proper stage name (it is a little ridiculous)
          // candidate.stage.name = positionStageMap[candidate.position_id][candidate.stage.id] ? positionStageMap[candidate.position_id][candidate.stage.id].name : candidate.stage.name;
          // necessary for sorting
          candidate.source = candidate.source || {
            name: ''
          };
        });
        $scope.candidates = candidates;
      } else {
        $scope.candidates = [];
      }

      $scope.isViewInitialized = true;
    });
  };

  $scope.candidateSegments = CandidatesFilterService.getSegments().filter(function (segment) {
    return ['new', 'mine', 'unseen'].indexOf(segment._id) > -1;
  });
  segmentId = $cookieStore.get("CandidateSegmentId");

  if (!segmentId) {
    segmentId = 'new';
  }

  $scope.candidateSegment = $scope.candidateSegments.find(function (segment) {
    return segment._id === segmentId;
  });

  if (!$scope.candidateSegment) {
    $scope.candidateSegment = $scope.candidateSegments[0];
  }

  CandidatesFilterService.setSegment($scope.candidateSegment._id, $scope.candidateSegment);

  $scope.setCandidateSegment = function (segmentId, segment) {
    CandidatesFilterService.setSegment(segmentId, segment);
    $cookieStore.put("CandidateSegmentId", segmentId);
    $scope.candidateSegment = segment;
  };

  $scope.isPositionPromoted = function (position) {
    return $scope.appClient.isPositionPromoted(position);
  };

  $scope.isCandidateUnseen = function (candidate) {
    return $scope.appClient.isCandidateUnseen(candidate);
  };

  $scope.openInterview = function (interview) {
    var position = PositionsService.local.getPositionById(interview.position_id);
    $scope.openInterviewDetail(interview, position, function () {});
  };

  var getAllPositionIds = function getAllPositionIds() {
    var positionIds = [];

    for (var i in $scope.positions) {
      positionIds.push($scope.positions[i]._id);
    }

    return positionIds;
  };

  $scope.openMassPromote = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/upgrades/mass_promote/index.html',
      controller: 'MassPromoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  $scope.reviewPosition = function (_position2) {
    var currentStateData = {
      'name': 'company.positions',
      'params': {}
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/review_publish_request.html',
      controller: 'ReviewPublishRequestInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position2;
        },
        approval: function approval() {
          if (_position2.pending_approval) {
            return null;
          } else {
            return $scope.approvalToken ? PositionsService.remote.getApprovalByToken(_position2._id, $scope.approvalToken) : null;
          }
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {
      positions = PositionsService.local.getMyMemberPositions();
      $scope.positions = positions.filter(function (position) {
        return !position.pending_approval && position.org_type !== "pool";
      }); //$scope.positionsPending = positions.filter(position => (position.pending_approval));
    });
  };

  var getDateRange = function getDateRange(id) {
    var start = new Date();
    var end = new Date();
    var label = '';

    if (id === "today") {
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
      label = 'Today';
    } else if (id === "yesterday") {
      start.setDate(start.getDate() - 1);
      start.setHours(0, 0, 0, 0);
      end.setDate(end.getDate() - 1);
      end.setHours(23, 59, 59, 999);
      label = 'Yesterday';
    } else if (id === "7days") {
      start.setDate(start.getDate() - 7);
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
      label = 'Last 7 Days';
    } else if (id === "30days") {
      start.setDate(start.getDate() - 29);
      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
      label = 'Last 30 Days';
    }

    return {
      'start': start.getTime(),
      'end': end.getTime(),
      'label': label
    };
  };

  var zone;

  var initializePositions = function initializePositions() {
    positions = PositionsService.local.getMyMemberPositions(); //$scope.seenPositions = seenPositions.filter((position) => (position.org_type !== "pool"));
    //$scope.unseenPositions = unseenPositions.filter((position) => (position.org_type !== "pool"));
    //$scope.positions = positions.filter((position) => (position.org_type !== "pool"));

    $scope.positionsReviewable = PositionsService.local.getReviewablePositions(); //positions.filter(position => (position.pending_approval));
  };

  $scope.$on('positions:updated', function () {
    $scope.filterPositions(currentPositionFilter);
    $scope.positionsReviewable = PositionsService.local.getReviewablePositions(); //positions.filter(position => (position.pending_approval));
  });

  var initializeTodaysEvents = function initializeTodaysEvents() {
    $scope.todaysAgenda = [];
    $scope.tomorrowsAgenda = [];
    var today = new Date().toDateString();
    var tomorrow = new Date(new Date().getTime() + 86400000).toDateString();

    for (var i in $scope.shared.activeCompany.agenda) {
      var event = $scope.shared.activeCompany.agenda[i]; // self scheduling event

      if (!event.datetimes) {
        //continue;
        var tz_code = null;
        var datetimes = {
          start_time: event.start_time,
          end_time: event.end_time,
          duration: event.duration,
          formatted_start_time: moment(event.start_time).format('MMM D [at] h:mm A ')
        };

        try {
          tz_code = moment.tz('2018-12-06T18:00:00.000Z', moment.tz.guess()).format('z');
          datetimes.formatted_start_time += ' (' + tz_code + ')';
        } catch (e) {
          console.log('no tz guess found');
        }

        if (!event.title || event.title.length === 0) {
          event.title = "".concat(event.candidate.name, " Meeting");

          if (event.candidate.position.org_type != 'pool') {
            event.title += ' (' + event.candidate.position.name + ')';
          }
        }

        event.datetimes = [datetimes];
      }

      if (new Date(event.start_time).getTime() < new Date().getTime()) {
        continue;
      }

      if (new Date(event.start_time).toDateString() === today) {
        if (event.datetimes) {
          zone = event.datetimes[0].formatted_start_time.match(/\(([^\)]+)\)/g)[0];
          event.datetimes[0].formatted_start_time = moment(event.datetimes[0].start_time).format('h:mm A') + ' ' + zone; //event.datetimes[0].formatted_start_time = event.datetimes[0].formatted_start_time.replace(/^.*at /g, "");

          $scope.todaysAgenda.push(event);
        }
      }

      if (new Date(event.start_time).toDateString() === tomorrow) {
        if (event.datetimes) {
          //console.log(moment(event.datetimes[0].start_time));
          zone = event.datetimes[0].formatted_start_time.match(/\(([^\)]+)\)/g)[0];
          event.datetimes[0].formatted_start_time = moment(event.datetimes[0].start_time).format('h:mm A') + ' ' + zone; //event.datetimes[0].formatted_start_time = event.datetimes[0].formatted_start_time.replace(/^.*at /g, "");

          $scope.tomorrowsAgenda.push(event);
        }
      }
    }
  };

  var initializeMetrics = function initializeMetrics() {
    $scope.conversations = [];
    $scope.appClient.getUserMetrics($scope.shared.activeCompany.company._id, "last7Days", function (error, metrics) {
      if (metrics) {
        metrics.new_candidates.total = metrics.new_candidates.sourced + metrics.new_candidates.referred + metrics.new_candidates.applied;
        $scope.metrics = metrics;
      }
    });
  };

  $scope.completeTask = function (task, event) {
    dialog.confirm({
      title: "Mark task complete?"
    }, function (result) {
      if (result === false) return; //task.active = true;
      //var taskId = task._id;

      TasksService.markComplete(task).then(function (done) {});
    });
    event.stopPropagation();
  };

  $scope.$on('taskEvent', function (event, data) {
    initializeTasks();
  });

  var initializeTasks = function initializeTasks() {
    TasksService.resetFilters(); //$scope.myTasks = TasksService.getMyTasks();

    TasksService.getTasks({}).then(function (tasks) {
      $scope.myTasks = tasks;
    });
    /*if(!$scope.tasks) $scope.tasks = {};
    $scope.overdueTasks = $scope.tasks.overdue;
    for(var i in $scope.overdueTasks) {
        var dueDate = $scope.overdueTasks[i].due_date;
        var str = moment(dueDate).calendar();
        $scope.overdueTasks[i].friendly_due_date = str.replace(/\sat.*$/g, "");
    }
    $scope.todaysTasks = [];
    $scope.upcomingTasks = [];
    var today = new Date().toDateString();
    var tomorrow = new Date(new Date().getTime() + 86400000).toDateString();
    for(var i in $scope.tasks.upcoming) {
        var task = $scope.tasks.upcoming[i];
        if(new Date(task.due_date).toDateString() === today) {
            task.friendly_due_date = "Today";
            $scope.todaysTasks.push(task);
        } else {
            var str  = moment(task.due_date).calendar();
            task.friendly_due_date = str.replace(/\sat.*$/g, "");
            $scope.upcomingTasks.push(task);
        }
    }*/
  };

  var initializeCandidatePool = function initializeCandidatePool() {
    var pools = $scope.shared.positions.published ? $scope.shared.positions.published.filter(function (position) {
      return position.org_type === "pool";
    }) : [];

    if (pools.length > 0) {
      $scope.candidatePoolPosition = pools[0];
    }
  };

  var initializeTodo = function initializeTodo() {
    $scope.todo = {};
    var hasPool = false;

    if ($scope.shared.activeCompany.positions[$scope.shared.activeCompany.company._id]) {
      hasPool = true;
    }

    var positionCount = Object.keys($scope.shared.activeCompany.positions).length;

    if ($scope.shared.activeCompany.company.is_admin && (hasPool && positionCount === 1 || !hasPool && positionCount === 0)) {
      $scope.todo.post_position = true;
    }

    if ($scope.shared.activeCompany.company.is_admin && $scope.shared.activeCompany.portal.layout.type == "bold" && !$scope.shared.activeCompany.portal.appearance.logo_url) {
      $scope.todo.portal_logo = true;
    }

    if ($scope.shared.activeCompany.company.is_admin && !$cookieStore.get("CompanyMemberInvited") && $scope.shared.activeCompany.members.length == 1) {
      $scope.todo.invite_team = true;
    }

    if (!$scope.shared.user.profile_photo_url) {
      $scope.todo.profile_photo = true;
    }

    $scope.watchedIntroVideo = false;

    if ($cookieStore.get("WatchIntroVideo")) {
      $scope.watchedIntroVideo = true;
    }
  };

  var initialize = function initialize() {
    $scope.notifications = [];
    $scope.notifications = $scope.notifications.concat($scope.shared.activeCompany.notifications.general);
    $scope.notifications = $scope.notifications.concat($scope.shared.activeCompany.notifications.user);
    $scope.notifications = $scope.notifications.concat($scope.shared.activeCompany.notifications.candidate); //$scope.notifications = $scope.notifications.concat($scope.shared.activeCompany.notifications.candidate_message);

    initializeTodaysEvents();

    if ($scope.type == 'new') {
      $scope.newPosition();
    } else if ($scope.positionId && $scope.section) {
      var position = $scope.shared.activeCompany.positions[$scope.positionId];

      if (position.org_type === "pool") {
        $scope.newPool(position);
      } else {
        $scope.newPosition(position);
      }
    } else if ($scope.section) {
      $scope.accountSettings($scope.section);
    } else if ($scope.settingsSection) {
      //$scope.companySettings($scope.settingsSection);
      ModalService.companySettings($scope.settingsSection).then(function (result) {});
    } else if ($scope.userSection) {
      $scope.userSettings($scope.userSection);
    } else if ($scope.portalSection) {
      $scope.jobPortalSettings($scope.portalSection);
    } else if ($scope.referralPortalSection) {
      $scope.referralPortalSettings($scope.referralPortalSection);
    } else if ($scope.messengerSection) {
      $scope.messengerSettings($scope.messengerSection);
    } else if ($scope.welcomeSection) {
      $scope.videoIntroModal();
    } else if ($scope.currentName == 'company.approve-position' || $scope.currentName == 'company.position-approval') {
      var _position = $scope.shared.activeCompany.positions[$scope.positionId];
      $scope.reviewPosition(_position);
    }

    initializePositions();
    initializeTasks();
    initializeCandidatePool();
    initializeMetrics();
  };

  var updateCandidate = function updateCandidate(candidate) {
    var index = $scope.candidates.findIndex(function (c) {
      return c._id === candidate._id;
    });

    if (index > -1) {
      candidate.source = candidate.source || {
        name: ''
      };
      $scope.candidates[index] = candidate;
    }
  };

  $scope.$on('candidateMovedLocal', function (event, candidate) {
    updateCandidate(candidate);
  });
  $scope.$on('candidateMoved', function (event, data) {
    if (data.object.acting_user._id === $scope.shared.user._id) {
      return;
    }

    CandidatesService.remote.getCandidateById(data.object.position_id, data.object.candidate_id).then(function (candidate) {
      updateCandidate(candidate);
    });
  });
  $rootScope.$on('positionApprovalRequested', function (event, data) {
    data.object.position.is_reviewable = PositionsService.local.isPositionReviewable(data.object.company_admins);
    $scope.updatePosition(data.object.position);
    initializePositions();
  });
  $rootScope.$on('positionApprovalUpdated', function (event, data) {
    $scope.updatePosition(data.object.position);
    initializePositions();
  });
  $rootScope.$on('candidateAdded', function (event, data) {
    var add = false;

    try {
      if (!$scope.shared.activeCompany.company.is_admin && !$scope.shared.user.positions.hasOwnProperty(data.object.candidate.position_id)) return;

      if (['unseen', 'new'].indexOf($scope.candidateSegment._id) > -1) {
        add = true;
      }

      if ($scope.candidateSegment._id === 'mine' && data.object.candidate.assigned_to && data.object.candidate.assigned_to._id === $scope.shared.user._id) {
        add = true;
      }

      if (add) {
        $scope.candidates.unshift(data.object.candidate);
      }
    } catch (e) {
      console.log(e);
    } //$scope.groupCandidates();

  });
  $rootScope.$on('candidateDeleted', function (event, data) {
    var index = $scope.candidates.findIndex(function (c) {
      return c._id === data.object.candidate_id;
    });

    if (index > -1) {
      $scope.candidates.splice(index, 1);
    }
  });
  $rootScope.$on('candidateInterviewCancel', function (event, data) {
    initializeTodaysEvents();
  });
  $rootScope.$on('candidateInterviewAdded', function (event, data) {
    initializeTodaysEvents();
  });
  $rootScope.$on('positionStateUpdated', function (event, data) {
    sharedDataUtils.initializeMyPositions();
    initializePositions();
  });
  $rootScope.$on('positionAdded', function (event, data) {
    sharedDataUtils.initializeMyPositions();
    initializePositions();
  });
  initialize();
}]);
'use strict';

angular.module('appController').controller('InterviewInternalViewCtrl', ['$scope', '$rootScope', '$stateParams', '$sce', '$http', '$upload', '$socket', 'AppClient', 'SharedData', 'PositionsService', 'utils', 'getCandidate', 'getCandidateMetadata', 'getInterview', function ($scope, $rootScope, $stateParams, $sce, $http, $upload, $socket, AppClient, SharedData, PositionsService, utils, getCandidate, getCandidateMetadata, getInterview) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = $stateParams.positionId;
  $scope.candidateId = $stateParams.candidateId;
  $scope.interviewId = $stateParams.interviewId;
  var companyFriendlyId = $stateParams.companyFriendlyId;
  $scope.interview = getInterview;
  $scope.candidate = getCandidate;
  $scope.metadata = getCandidateMetadata;
  $scope.suggestions = [];
  $scope.message = {};
  $scope.note = {};
  $scope.position = PositionsService.local.getPositionById($scope.positionId);
  $scope.showAddTags = false;
  $scope.newTags = {};
  $scope.conversation = $scope.metadata.conversation;
  $scope.documents = $scope.metadata.documents;
  $scope.stream = $scope.metadata.stream;
  $scope.scorecards = $scope.metadata.scorecards;
  $scope.scorecard = {};

  $scope.setRightTabActive = function (tab) {
    $scope.activeRightTab = tab;
  };

  $scope.setLeftTabActive = function (tab) {
    $scope.activeLeftTab = tab;
  };

  $scope.saveScorecard = function () {
    $scope.messageStatus = "Updating scorecard...";
    $scope.appClient.addCandidateScorecard($scope.scorecard, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, result) {
      if (!error) {
        setTimeout(function () {
          $scope.messageStatus = "";
        }, 500);
      }
    });
  };

  var initializePositionScorecard = function initializePositionScorecard() {
    if (!$scope.position) return;

    if ($scope.position && !$scope.position.scorecard_id) {
      return;
    }

    angular.forEach($scope.shared.activeCompany.scorecards, function (scorecard) {
      if (scorecard._id == $scope.position.scorecard_id) {
        $scope.scorecard = scorecard;
      }
    });
    angular.forEach($scope.scorecards, function (item) {
      if (!item.scorecard.acting_user._id) {
        return;
      }

      if (item.scorecard.acting_user._id == $scope.shared.user._id) {
        if (item.scorecard.version !== $scope.scorecard.version) {
          item.scorecard.version = $scope.scorecard.version;
          item.scorecard.sections = $scope.scorecard.sections;
        }

        $scope.scorecard = item.scorecard;
      }
    });
  };

  initializePositionScorecard();

  $scope.toggleQuestionnaire = function ($index, questionnaire) {
    questionnaire.open = !questionnaire.open;
  };

  $scope.toggleReference = function ($index, reference) {
    reference.open = !reference.open;
  };

  $scope.openDocument = function ($index, document) {
    if (document.file_url.indexOf("attachments-cdn") > -1) {
      var win = window.open(document.file_url);
      win.focus();
    } else {
      window.location = document.file_url;
    }
  };

  $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
  $scope.pdfEmbedFullScreen = false;

  var maximizeEventHandler = function maximizeEventHandler() {
    var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
    var eventer = window[eventMethod];
    var messageEvent = eventMethod == "toggleMaximize" ? "onmessage" : "message"; // Listen to message from child window

    eventer(messageEvent, function (e) {
      if (e.data === "toggleMaximize") {
        $scope.pdfEmbedFullScreen = !$scope.pdfEmbedFullScreen;
      }
    }, false);
  };

  maximizeEventHandler();

  if ($scope.candidate.resume && $scope.candidate.resume.pdf_url) {
    if ($scope.candidate.resume.pdf_url.indexOf("\.pdf") === -1) {
      $scope.pdfEmbed = $sce.trustAsResourceUrl("https://docs.google.com/gview?url=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
    } else {
      $scope.pdfEmbed = $sce.trustAsResourceUrl("https://attachments-cdn.breezy.hr/pdfviewer/web/viewer.html?file=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
    }
  } else {
    $scope.pdfEmbed = false;
  }

  $scope.setLeftTabActive("experience");

  if ($scope.interview) {
    if ($scope.interview.interview_guide) {
      $scope.setRightTabActive("interview_guide");
    } else {
      $scope.setRightTabActive("scorecard");
    }
  } else {}
}]);
'use strict';

angular.module('appController').controller('VideoInterviewInternalViewCtrl', ['$scope', '$rootScope', '$stateParams', '$sce', '$http', '$upload', '$socket', 'AppClient', 'SharedData', 'PositionsService', 'utils', 'getCandidate', 'getCandidateMetadata', 'getInterview', 'getVideoToken', function ($scope, $rootScope, $stateParams, $sce, $http, $upload, $socket, AppClient, SharedData, PositionsService, utils, getCandidate, getCandidateMetadata, getInterview, getVideoToken) {
  console.log('init VideoInterviewInternalViewCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positionId = $stateParams.positionId;
  $scope.candidateId = $stateParams.candidateId;
  $scope.interviewId = $stateParams.interviewId;
  var companyFriendlyId = $stateParams.companyFriendlyId;
  $scope.interview = getInterview;
  $scope.token = getVideoToken.token;
  $scope.candidate = getCandidate;
  $scope.metadata = getCandidateMetadata;
  $scope.suggestions = [];
  $scope.message = {};
  $scope.note = {};
  $scope.position = PositionsService.local.getPositionById($scope.positionId);
  $scope.showAddTags = false;
  $scope.newTags = {};
  $scope.conversation = $scope.metadata.conversation;
  $scope.documents = $scope.metadata.documents;
  $scope.stream = $scope.metadata.stream;
  $scope.scorecards = $scope.metadata.scorecards;
  $scope.scorecard = {};
  var layoutEl = document.getElementById("interviewers");
  var layout = TB.initLayoutContainer(layoutEl, {
    animate: {
      duration: 300,
      easing: "swing"
    },
    bigFixedRatio: false
  }).layout;

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      $scope.documentUploading = false;

      if (data) {
        $scope.documents.unshift(data);
      }
    },
        onError = function onError() {
      $scope.documentUploading = false;
    };

    for (var i in $files) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.documentUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.candidate.company_id + '/position/' + $scope.positionId + '/candidate/' + $scope.candidateId + '/documents',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      if ($scope.pdfEmbed) {
        tab = "resume";
      } else {
        tab = "experience";
      }
    }

    $scope.activeTab = tab;
  };

  $scope.saveScorecard = function () {
    $scope.messageStatus = "Updating scorecard...";
    $scope.appClient.addCandidateScorecard($scope.scorecard, $scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, result) {
      if (!error) {
        setTimeout(function () {
          $scope.messageStatus = "";
        }, 500);
      }
    });
  };

  $scope.removeTag = function ($index) {
    $scope.candidate.tags.splice($index, 1);
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, $scope.candidate.tags, function (error, finalTags) {});
  };

  $scope.addTags = function () {
    if (!$scope.newTags.text) {
      $scope.toggleAddTags();
      return;
    }

    var newTags = $scope.newTags.text.split(',');
    var tags = $scope.candidate.tags;

    if (!tags) {
      tags = [];
    }

    var all = tags.concat(newTags);
    var keys = {};

    for (var i in all) {
      var tag = all[i].toLowerCase().trim();

      if (tag && tag.length > 0) {
        keys[tag] = true;
      }
    }

    var allTags = Object.keys(keys).sort();
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.positionId, $scope.candidateId, allTags, function (error, finalTags) {
      $scope.newTags.text = '';
      $scope.candidate.tags = allTags;
      $scope.toggleAddTags();
    });
  };

  $scope.toggleAddTags = function () {
    $scope.showAddTags = !$scope.showAddTags;
  };

  var initializePositionScorecard = function initializePositionScorecard() {
    if ($scope.position && !$scope.position.scorecard_id) {
      return;
    }

    angular.forEach($scope.shared.activeCompany.scorecards, function (scorecard) {
      if (scorecard._id == $scope.position.scorecard_id) {
        $scope.scorecard = scorecard;
      }
    });
    angular.forEach($scope.scorecards, function (item) {
      if (!item.scorecard.acting_user._id) {
        return;
      }

      if (item.scorecard.acting_user._id == $scope.shared.user._id) {
        if (item.scorecard.version !== $scope.scorecard.version) {
          item.scorecard.version = $scope.scorecard.version;
          item.scorecard.sections = $scope.scorecard.sections;
        }

        $scope.scorecard = item.scorecard;
      }
    });
  };

  initializePositionScorecard();

  $scope.toggleQuestionnaire = function ($index, questionnaire) {
    questionnaire.open = !questionnaire.open;
  };

  $scope.toggleReference = function ($index, reference) {
    reference.open = !reference.open;
  };

  $scope.openDocument = function ($index, document) {
    if (document.file_url.indexOf("attachments-cdn") > -1) {
      var win = window.open(document.file_url);
      win.focus();
    } else {
      window.location = document.file_url;
    }
  };

  $scope.position = $scope.shared.activeCompany.positions[$scope.positionId];
  $scope.pdfEmbedFullScreen = false;

  var maximizeEventHandler = function maximizeEventHandler() {
    var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
    var eventer = window[eventMethod];
    var messageEvent = eventMethod == "toggleMaximize" ? "onmessage" : "message"; // Listen to message from child window

    eventer(messageEvent, function (e) {
      if (e.data === "toggleMaximize") {
        $scope.pdfEmbedFullScreen = !$scope.pdfEmbedFullScreen;
      }
    }, false);
  };

  maximizeEventHandler();

  if ($scope.candidate.resume && $scope.candidate.resume.pdf_url) {
    if ($scope.candidate.resume.pdf_url.indexOf("\.pdf") === -1) {
      $scope.pdfEmbed = $sce.trustAsResourceUrl("https://docs.google.com/gview?url=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
    } else {
      $scope.pdfEmbed = $sce.trustAsResourceUrl("https://attachments-cdn.breezy.hr/pdfviewer/web/viewer.html?file=" + encodeURIComponent($scope.candidate.resume.pdf_url) + "&embedded=true");
    }
  } else {
    $scope.pdfEmbed = false;
  }

  $scope.setTabActive("experience");
  var resizeTimeout;

  window.onresize = function () {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(function () {
      layout();
    }, 20);
  };

  var key = $scope.interview.video_version === "v2" ? "46001992" : "45208882";
  var session = OT.initSession(key, $scope.interview.video_session_id); //Create event listeners before session.connect()

  var count = 0;
  session.on("streamCreated", function (event) {
    //console.log('Created: ' + JSON.stringify(event));
    console.log(event.stream.name.indexOf("(C)"));
    var layoutType = 'interviewers';

    if (event.stream.name.indexOf("(C)") > -1) {
      layoutType = 'interviewee';
    }

    session.subscribe(event.stream, layoutType, {
      insertMode: "append"
    });
    layout();
  }).on("streamDestroyed", function (event) {
    //console.log('Destroyed: ' + JSON.stringify(event));
    layout();
  }); // Fix XMLRequest

  var a = new XMLHttpRequest();
  XMLHttpRequest.prototype = Object.getPrototypeOf(a); //Connect to session - this fires the sessionConnected event if successful

  console.log('Connecting: ' + $scope.token);
  session.connect($scope.token, function (error) {
    if (error) {
      console.log('Error: ' + JSON.stringify(error));
    } //Set up yourself as a publisher. You will see your webcam activate and create a video element in the DOM.
    //See the docs here: https://tokbox.com/opentok/tutorials/publish-stream/js/#create_publisher
    //var publisher = OT.initPublisher('layout', {'internal': true }, function (error) {});


    var el = document.createElement("div");
    var publisher = OT.initPublisher(el, {
      name: $scope.shared.user.name,
      resolution: "1280x720"
    }, function (error) {
      if (error) {
        console.log('Error: ' + JSON.stringify(error));
      }

      layout();
    });
    layoutEl.appendChild(el);
    layout(); //Publish your video to the session. This is when other clients will see your video.

    session.publish(publisher); //layout();
  });
}]);
'use strict';

angular.module('appController').controller('MessengerSettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', 'messenger', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', '$parentScope', 'PositionsService', 'utils', 'dialog', 'ModalService', function ($scope, $rootScope, $state, messenger, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, $parentScope, PositionsService, utils, dialog, ModalService) {
  console.log('MessengerSettingsModalInstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.portal = angular.copy($scope.shared.activeCompany.portal);
  $scope.company = angular.copy($scope.shared.activeCompany.company);
  $scope.members = $scope.shared.activeCompany.members.map(function (member) {
    return {
      hex_color: member.hex_color,
      initial: member.initial,
      name: member.name,
      profile_photo_url: member.profile_photo_url
    };
  });
  $scope.poolPositions = PositionsService.local.getActivePoolPositions();
  $scope.selectedPosition = null;
  $scope.customSettings = {
    control: 'brightness',
    theme: 'bootstrap',
    position: 'bottom left',
    format: 'rgb',
    animationSpeed: 50
  };
  $scope.messengerCode = "<div id=\"BrzyHr_messenger\"></div><script src=\"https://app.breezy.hr/api/messenger/".concat($scope.company._id, "\"></script>"); //$scope.messengerCode = `<div id="BrzyHr_messenger"></div><script src="https://breezy.hr/api/messenger/${$scope.company._id}"></script>`;

  $scope.imageState = "save";
  $scope.colors = {}; // Placeholder of colorthief

  $scope.gaEventTracker = $parentScope.gaEventTracker;
  $scope.messenger = messenger;
  $scope.selectedPosition = $scope.shared.activeCompany.positions[$scope.messenger.position_id];
  $scope.messenger.templates.default.body = utils.markdownToHTML($scope.messenger.templates.default.body);

  if (!$scope.messenger.greeter) {
    $scope.messenger.greeter = $scope.members[0];
  }

  $scope.is_setup = false;

  if (!$scope.messenger.position_id) {
    $scope.is_setup = true;
    defaultTab = 'overview';
  } // update this to only save this attribute
  // once allowed to change services


  $scope.toggleMessenger = function () {
    $scope.appClient.updateMessenger($scope.company._id, $scope.messenger, function (error) {});
  };

  $scope.isTabDisabled = function (step) {
    var steps = ['appearance', 'messaging', 'embed', 'finish'];
    var activeIndex = steps.indexOf($scope.activeTab);
    return $scope.is_setup && steps.indexOf(step) > activeIndex;
  };

  $scope.nextStep = function (step) {
    if ($scope.shared.activeCompany.company.features.hello_messenger !== true) {
      dialog.confirm({
        title: "Upgrade Required",
        message: "Hello Messenger isn't available on your current plan. Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          ModalService.companySettings("plan").then(function (result) {// do nothing
          });
        }
      });
      return;
    }

    $scope.activeTab = step;
  };

  $scope.updateMessenger = function (messenger) {
    var data = angular.copy(messenger);
    data.templates.default.body = utils.HTMLtoMarkdown(data.templates.default.body);

    if (!$scope.messenger.position_id) {
      return;
    }

    $scope.appClient.updateMessenger($scope.company._id, data, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.updateFailed = "Problem updating widget";
        return;
      }

      if ($scope.is_setup) {
        $scope.closeModal();
      } //$scope.shared.activeCompany.portal.widget = widget;


      $scope.updateSuccessMessenger = true;
      setTimeout(function () {
        $scope.updateSuccessMessenger = false;
      }, 2000);
    });
  };

  $scope.setMessengerPosition = function (position) {
    $scope.messenger.position_id = position._id;
    $scope.selectedPosition = $scope.shared.activeCompany.positions[$scope.messenger.position_id];
  }; // if value is default and they don't have a logo


  if ($scope.portal.appearance.primary_color == 'rgb(101,101,101)' && !$scope.portal.appearance.logo_url) {
    $scope.$watch('colors.myDominantColor', function (newVal, oldVal) {
      if (newVal == oldVal) return;
      $scope.setPrimaryColor($scope.colors.myDominantColor);
    });
  }

  $scope.setPrimaryColor = function (color) {
    var rgb = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
    var val = color[0] + color[1] + color[2];

    if (val < 100) {
      $scope.messenger.appearance.alternate_color = tinycolor(rgb).brighten().toString();
    } else {
      $scope.messenger.appearance.alternate_color = tinycolor(rgb).darken().toString();
    }

    $scope.messenger.appearance.primary_color = rgb;
  };

  $scope.updateCompany = function () {
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, $scope.company, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
        $rootScope.$broadcast("companyUpdated", {
          'company': $scope.shared.activeCompany.company
        });
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.newPool = function (_position, _clonePosition, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    tab = "description";
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new_pool.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position && _position._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position._id) : null;
        },
        orgType: function orgType() {
          return "pool";
        },
        clonePosition: function clonePosition() {
          return _clonePosition && _clonePosition._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      $scope.poolPositions = PositionsService.local.getActivePoolPositions();
    }, function () {});
  };

  function rgbAddOpacity() {
    var rgb = $scope.portal.appearance.primary_color.replace(/[^\d,]/g, '').split(',');
    var opacity = $scope.portal.appearance.hero ? $scope.portal.appearance.hero.opacity : 0.5;
    var rgba = null;

    if (rgb.length === 3) {
      rgb.push(opacity);
      rgba = "rgba(".concat(rgb.join(','), ")");
    } else {
      rgba = 'rgba(0,0,0,0)';
    }

    return rgba;
  }

  $scope.closeModal = function () {
    //$uibModalInstance.close();
    $uibModalInstance.dismiss('close');
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "general";
    }

    $scope.updateSuccessMessenger = false;
    $scope.activeTab = tab;
    $state.transitionTo('company.messenger-section', {
      messengerSection: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  };

  var initialize = function initialize() {
    $scope.company = $scope.shared.activeCompany.company;
    $scope.setTabActive(defaultTab);
  };

  initialize();
}]);
angular.module('appController').controller('AddWidgetTemplateModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'template', 'utils', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, template, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.templateVariables = angular.copy($scope.shared.templateVariables);
  $scope.template = {
    'subject': $scope.shared.activeCompany.messaging.subject_template.body,
    'attachments': []
  };

  if (template) {
    $scope.template = angular.copy(template);
    $scope.template.body = utils.markdownToHTML($scope.template.body);

    if (!$scope.template.attachments) {
      $scope.template.attachments = [];
    }

    if (!$scope.template.subject) {
      $scope.template.subject = $scope.shared.activeCompany.messaging.subject_template.body;
    }
  }

  $scope.insertVariable = function ($item, elem) {
    $rootScope.$broadcast('insertTemplateVariable:' + elem, $item.value);
  };

  $scope.add = function () {
    if (!$scope.template.name || !$scope.template.body) {
      return;
    }

    var template_new = angular.copy($scope.template);
    template_new.body = utils.HTMLtoMarkdown(template_new.body);

    if ($scope.template._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateWidgetTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(template_new);
      });
    } else {
      $scope.messageStatus = "Adding...";
      $scope.appClient.addWidgetTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('JobPortalSettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', '$parentScope', 'PositionsService', 'UploadService', function ($scope, $rootScope, $state, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, $parentScope, PositionsService, UploadService) {
  console.log('JobPortalSettingsModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.portal = angular.copy($scope.shared.activeCompany.portal);
  $scope.company = angular.copy($scope.shared.activeCompany.company);
  $scope.members = $scope.shared.activeCompany.members.map(function (member) {
    return {
      hex_color: member.hex_color,
      initial: member.initial,
      name: member.name,
      profile_photo_url: member.profile_photo_url
    };
  });
  $scope.languageOptions = angular.copy($scope.shared.portalLanguageOptions);

  if ($scope.portal.language) {
    for (var i in $scope.languageOptions) {
      var languageOption = $scope.languageOptions[i];

      if (languageOption.value === $scope.portal.language) {
        $scope.languageOption = languageOption;
      }
    }
  } else {
    $scope.languageOption = {
      'name': 'English',
      'value': 'en'
    };
  }

  if ($scope.portal.social && !$scope.portal.social.glassdoor) $scope.portal.social.glassdoor = {};
  $scope.customSettings = {
    control: 'brightness',
    theme: 'bootstrap',
    position: 'bottom left',
    format: 'rgb',
    animationSpeed: 50
  };
  $scope.poolPositions = PositionsService.local.getActivePoolPositions();
  $scope.selectedPosition = null;
  $scope.integrations = [];
  $scope.layoutForm = {};
  $scope.appearanceForm = {};
  $scope.testimonialsForm = {};
  $scope.employeesForm = {};
  $scope.perksForm = {};
  $scope.messagingForm = {};
  $scope.mediaForm = {};
  $scope.socialForm = {
    glassdoor: {}
  };
  $scope.generalForm = {};
  $scope.widgetForm = {};
  $scope.metaForm = {};
  var templateVarMapper = {
    company_name: $scope.company.name,
    company_header: $scope.portal.messaging.header,
    company_subheader: $scope.portal.messaging.subheader,
    company_description: $scope.company.description,
    position_name: 'Example Position',
    position_description: 'Come join our team as an Example Position. You will enjoy a fun and challenging work environment.'
  };

  if (!$scope.portal.hasOwnProperty('meta')) {
    $scope.portal.meta = {
      positions: {
        title: '[[company_header]]',
        description: '[[company_subheader]]'
      },
      position: {
        title: '[[position_name]] at [[company_name]]',
        description: '[[position_description]]'
      }
    };
  }

  $scope.invalidFavicon = false;
  $scope.faviconPreview = 'https://assets-cdn.breezy.hr/breezy-portal/favicon.ico';

  if ($scope.portal.appearance.favicon_url) {
    $scope.faviconPreview = $scope.portal.appearance.favicon_url;
  }

  $scope.updateFaviconPreview = function () {
    $scope.mediaChanged = true; //var valid = $scope.portal.appearance.favicon_url && /(http)?s?:?(\/\/[^"']*\.(?:png|jpg|jpeg|gif|ico))/gi.test($scope.portal.appearance.favicon_url);

    if ($scope.portal.appearance.favicon_url && $scope.portal.appearance.favicon_url.length > 0) {
      $scope.faviconPreview = $scope.portal.appearance.favicon_url;
    } else {
      $scope.faviconPreview = 'https://assets-cdn.breezy.hr/breezy-portal/favicon.ico';
    }
  };

  $scope.previewMetaPositionsPhoto = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/social/image';

  if ($scope.portal.meta.positions.image) {
    $scope.previewMetaPositionsPhoto = $scope.portal.meta.positions.image;
  }

  $scope.previewMetaPositionPhoto = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/p/example/social/image';

  if ($scope.portal.meta.position.image) {
    $scope.previewMetaPositionPhoto = $scope.portal.meta.position.image;
  }

  $scope.parseTemplateVars = function (text) {
    var parser = /\[\[(.*?)\]\]/g;
    text = text.replace(parser, function (variable, match) {
      return templateVarMapper.hasOwnProperty(match) ? templateVarMapper[match] : variable;
    });
    text = text.replace(/<[^>]+>/gm, '');
    text = text.replace('&nbsp;', ' ');
    return text;
  };

  $scope.templatePosition = {};
  $scope.templatePositions = {};
  $scope.templateVariables = [{
    name: 'Company Name',
    value: '[[company_name]]',
    for: 'positions'
  }, {
    name: 'Company Header',
    value: '[[company_header]]',
    for: 'positions'
  }, {
    name: 'Company Sub-header',
    value: '[[company_subheader]]',
    for: 'positions'
  }, {
    name: 'Company Description',
    value: '[[company_description]]',
    for: 'positions'
  }, {
    name: 'Position Name',
    value: '[[position_name]]',
    for: 'position'
  }, {
    name: 'Position Description',
    value: '[[position_description]]',
    for: 'position'
  }];

  $scope.removeSocialImage = function (page) {
    delete $scope.portal.meta[page].image;

    if (page === 'positions') {
      $scope.previewMetaPositionsPhoto = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/social/image?twitter';
    } else if (page === 'position') {
      $scope.previewMetaPositionPhoto = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/p/example/social/image?twitter';
    }
  };

  $scope.uploadSocialImage = function ($files, page) {
    UploadService.upload($files, function (error, data) {
      if (data) {
        $scope.portal.meta[page].image = data.url;

        if (page === 'positions') {
          $scope.previewMetaPositionsPhoto = data.url;
        } else if (page === 'position') {
          $scope.previewMetaPositionPhoto = data.url;
        }
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.portalMetaConfigPositions = {
    buttons: [],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: 100,
    maxHeight: 100
  };
  $scope.portalMetaConfigPosition = {
    buttons: [],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: 100,
    maxHeight: 100
  };

  $scope.insertVariable = function ($item, page) {
    if (page === 'positions') {
      $R('#redactor', 'plugin.templatevars.insert', $item.value);
    } else if (page === 'position') {
      //$('#redactor1').redactor('templatevars.insert', $item.value);
      $R('#redactor1', 'plugin.templatevars.insert', $item.value);
    } //$rootScope.$broadcast('insertTemplateVariable:'+elem, $item.value);

  };

  $scope.imageState = "save";
  $scope.colors = {}; // Placeholder of colorthief

  $scope.testimonial = {};
  $scope.employee = {};
  $scope.perk = {
    'icon': 'fa-gift'
  };
  $scope.gaEventTracker = $parentScope.gaEventTracker;

  if ($scope.portal.media.video_position_page === undefined) {
    $scope.portal.media.video_position_page = true;
  }

  if ($scope.portal.media.video_positions_page === undefined) {
    $scope.portal.media.video_positions_page = true;
  }

  if ($scope.portal.layout.type === "bold") {
    // Backwards compat
    if ($scope.portal.layout.grid_layout) {
      $scope.portal.layout.grid_layout = true;
      $scope.portal.layout.positions_layout = "grid_layout";
    } else if ($scope.portal.layout.dense_list_layout) {
      $scope.portal.layout.dense_list_layout = 'dense_list_layout';
      $scope.portal.layout.positions_layout = "dense_list_layout";
    } else {
      $scope.portal.layout.list_layout = true;
      $scope.portal.layout.positions_layout = "list_layout";
    }
  }

  if ($scope.portal.layout.type && !$scope.portal.layout.sections) {//$scope.portal.layout.sections = $scope.availableLayoutSections;
  }

  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.portal-sections'
  };
  $scope.$watch('portal.employees.header', function (newVal, oldVal) {
    if (newVal !== oldVal) $scope.employeesChanged = true;
  });
  $scope.$watch('portal.employees.subheader', function (newVal, oldVal) {
    if (newVal !== oldVal) $scope.employeesChanged = true;
  });

  $scope.openAddTemplate = function (_template, eSig) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/portal/_add_widget_template_modal.html',
      controller: 'AddWidgetTemplateModalInstanceCtrl',
      size: 'md',
      resolve: {
        template: function template() {
          return _template;
        }
      }
    });
    modalInstance.result.then(function (template) {
      if (template) {
        var found;
        console.log($scope.portal.widget.templates);

        for (var i in $scope.portal.widget.templates) {
          var t = $scope.portal.widget.templates[i];

          if (t._id == template._id) {
            found = i;
            break;
          }
        }

        console.log('found');
        console.log(found);

        if (found) {
          $scope.portal.widget.templates[found] = template;
        } else {
          $scope.portal.widget.templates.push(template);
        }
      }
    }, function () {});
  };

  $scope.redactorBoldConfig = {
    buttons: ['bold', 'italic', 'deleted', 'underline', 'link'],
    minHeight: 200,
    maxHeight: 200,
    pastePlainText: true
  };
  $scope.redactorConfig = {
    multipleUpload: false,
    imageUpload: "/api/company/".concat($scope.shared.activeCompany.company._id, "/portal/media/gallery/image"),
    formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: '200px',
    maxHeight: '200px'
  };

  $scope.setLanguageOption = function (lang) {
    if (lang && lang.value) {
      $scope.portal.messaging.language = lang.value;
    }
  };

  $scope.setWidgetPosition = function (position) {
    $scope.portal.widget.positionId = position._id;
  };

  $scope.setPositionsLayout = function (layout) {
    // backwards compat with old positions layout
    delete $scope.portal.layout.list_layout;
    delete $scope.portal.layout.dense_list_layout;
    delete $scope.portal.layout.grid_layout;
    $scope.portal.layout[layout] = true;
  };

  $scope.setPortalLayout = function (layout) {
    $scope.portal.layout.type = layout;
  }; // if value is default and they don't have a logo


  if ($scope.portal.appearance.primary_color == 'rgb(101,101,101)' && !$scope.portal.appearance.logo_url) {
    $scope.$watch('colors.myDominantColor', function (newVal, oldVal) {
      if (newVal == oldVal) return;
      $scope.setPrimaryColor($scope.colors.myDominantColor);
    });
  }

  if (!$scope.portal.appearance.button_color) {
    $scope.portal.appearance.button_color = "rgb(134,198,143)";
  }

  if (!$scope.portal.appearance.link_color) {
    $scope.portal.appearance.link_color = "rgb(134,198,143)";
  }

  if (!$scope.portal.appearance.hero_text_color) {
    $scope.portal.appearance.hero_text_color = '';
  }

  if ($scope.shared.beta && !$scope.portal.appearance.apply) {
    $scope.portal.appearance.apply = {
      linkedin: true,
      indeed: true
    };
  }

  $scope.setPrimaryColor = function (color) {
    var rgb = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
    var val = color[0] + color[1] + color[2];

    if (val < 100) {
      $scope.portal.appearance.alternate_color = tinycolor(rgb).brighten().toString();
    } else {
      $scope.portal.appearance.alternate_color = tinycolor(rgb).darken().toString();
    }

    console.log('lighten: ' + $scope.portal.appearance.alternate_color);
    $scope.portal.appearance.primary_color = rgb;
  };

  $scope.updateCompany = function () {
    $scope.company.description = $R('#redactor', 'source.getCode');
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, $scope.company, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
        $rootScope.$broadcast("companyUpdated", {
          'company': $scope.shared.activeCompany.company
        });
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.setLayoutSectionState = function ($index, bool) {
    $scope.portal.layout.sections[$index].disabled = bool;
  };

  $scope.updatePortalMeta = function (meta) {
    console.log('Saving...');
    $scope.metaError = '';
    var scrubbedMeta = angular.copy(meta);
    scrubbedMeta.positions.description = scrubbedMeta.positions.description.replace(/<[^>]+>/gm, '');
    scrubbedMeta.position.description = scrubbedMeta.position.description.replace(/<[^>]+>/gm, '');
    $scope.appClient.updatePortal('meta', $scope.shared.activeCompany.company._id, scrubbedMeta, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.metaError = "Problem updating meta";
        return;
      }

      $scope.updateSuccessMeta = true;
      setTimeout(function () {
        $scope.updateSuccessMeta = false;
      }, 2000);
      $scope.shared.activeCompany.portal.meta = meta;
    });
  };

  $scope.updatePortalLayout = function (layout) {
    if ($scope.layoutForm.$invalid) {
      return;
    }

    console.log('Saving...');
    $scope.layoutError = '';
    $scope.appClient.updatePortalLayout($scope.shared.activeCompany.company._id, layout, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.layoutError = "Problem updating layout";
        return;
      }

      $scope.updateSuccessLayout = true;
      setTimeout(function () {
        $scope.updateSuccessLayout = false;
      }, 2000);
      $scope.shared.activeCompany.portal.layout = layout;
    });
  };

  $scope.updatePortalAppearance = function (appearance) {
    if ($scope.appearanceForm.$invalid) {
      return;
    }

    console.log('Saving...');

    if (appearance.hasOwnProperty('favicon_url') && appearance.favicon_url.trim() === '') {
      delete appearance.favicon;
    }

    if (appearance.hasOwnProperty('hero_text_color') && appearance.hero_text_color.trim() === '') {
      delete appearance.hero_text_color;
    }

    $scope.appearanceError = '';
    $scope.appClient.updatePortalAppearance($scope.shared.activeCompany.company._id, appearance, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.appearanceError = "Problem updating appearance";
        return;
      }

      $scope.updateSuccessAppearance = true;
      setTimeout(function () {
        $scope.updateSuccessAppearance = false;
      }, 2000);
      $scope.shared.activeCompany.portal.appearance = appearance;
      $rootScope.$broadcast("updatePortalAppearance", {
        'appearance': appearance
      });
    });
  };

  $scope.updatePortalPerks = function (perks) {
    console.log('Saving...');
    $scope.perksError = '';
    $scope.appClient.updatePortalPerks($scope.shared.activeCompany.company._id, perks, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.perksError = "Problem updating perks";
        return;
      }

      $scope.shared.activeCompany.portal.perks = perks;
      $scope.updateSuccessPerks = true;
      setTimeout(function () {
        $scope.updateSuccessPerks = false;
        $scope.perksChanged = false;
      }, 2000);
    });
  };

  $scope.newPool = function (_position, _clonePosition, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    tab = "description";
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new_pool.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position && _position._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position._id) : null;
        },
        orgType: function orgType() {
          return "pool";
        },
        clonePosition: function clonePosition() {
          return _clonePosition && _clonePosition._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      //-$scope.updatePosition(position);
      $scope.poolPositions = PositionsService.local.getActivePoolPositions();
    }, function () {});
  };

  $scope.updatePortalTestimonials = function (testimonials) {
    console.log('Saving...');
    $scope.testimonialsError = '';
    $scope.appClient.updatePortalTestimonials($scope.shared.activeCompany.company._id, testimonials, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.testimonialsError = "Problem updating testimonials";
        return;
      }

      $scope.shared.activeCompany.portal.testimonials = testimonials;
      $scope.updateSuccessTestimonials = true;
      setTimeout(function () {
        $scope.updateSuccessTestimonials = false;
        $scope.testimonialsChanged = false;
      }, 2000);
    });
  };

  $scope.updatePortalMessaging = function (messaging) {
    console.log('Saving...');
    $scope.portal.messaging.description = $R('#redactor', 'source.getCode');
    $scope.messagingError = '';
    $scope.appClient.updatePortalMessaging($scope.shared.activeCompany.company._id, messaging, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.messagingError = "Problem updating messaging";
        return;
      }

      $scope.shared.activeCompany.portal.messaging = messaging;
      $scope.updateSuccessMessaging = true;
      setTimeout(function () {
        $scope.updateSuccessMessaging = false;
      }, 2000);
    });
  };

  $scope.updatePortalSocial = function (social) {
    console.log('Saving...');
    $scope.socialError = '';
    $scope.appClient.updatePortalSocial($scope.shared.activeCompany.company._id, social, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.socialError = "Problem updating social";
        return;
      }

      $scope.shared.activeCompany.portal.social = social;
      $scope.updateSuccessSocial = true;
      setTimeout(function () {
        $scope.updateSuccessSocial = false;
      }, 2000);
    });
  };

  $scope.mediaChange = function () {
    $scope.mediaChanged = true;
  };

  $scope.updatePortalMedia = function (media) {
    console.log('Saving...');

    if (media.hasOwnProperty('vimeo_url') && media.vimeo_url.trim() === '') {
      delete media.vimeo_url;
      delete media.vimeo_embed_url;
    }

    if (media.hasOwnProperty('youtube_url') && media.youtube_url.trim() === '') {
      delete media.youtube_url;
      delete media.youtube_embed_url;
    }

    $scope.mediaError = '';
    $scope.appClient.updatePortalMedia($scope.shared.activeCompany.company._id, media, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.mediaError = "Problem updating media";
        return;
      }

      $scope.shared.activeCompany.portal.media = media;
      $scope.updateSuccessMedia = true;
      setTimeout(function () {
        $scope.updateSuccessMedia = false;
        $scope.mediaChanged = false;
      }, 2000);
    });
  };

  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#image-attachment');
    chooser.addEventListener("change", function (e) {
      console.log(this.value);
    }, false);
    $timeout(function () {
      chooser.click();
    });
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.company.logo_url = data.url;
        $scope.portal.appearance.logo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.company._id + '/logo',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  function rgbAddOpacity() {
    var rgb = $scope.portal.appearance.primary_color.replace(/[^\d,]/g, '').split(',');
    var opacity = $scope.portal.appearance.hero ? $scope.portal.appearance.hero.opacity : 0.5;
    var rgba = null;

    if (rgb.length === 3) {
      rgb.push(opacity);
      rgba = "rgba(".concat(rgb.join(','), ")");
    } else {
      rgba = 'rgba(0,0,0,0)';
    }

    return rgba;
  }

  $scope.onFileSelect = function ($files, type) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onLogoSuccess = function onLogoSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.company.logo_url = data.url;
        $scope.portal.appearance.logo_url = data.url;
        $scope.fileUploading = undefined;
        $scope.logoUploading = undefined;
      }
    },
        onHeroSuccess = function onHeroSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.portal.appearance.hero = {
          url: data.url,
          opacity: 0.5,
          overlay: rgbAddOpacity()
        };
        $scope.fileUploading = undefined;
        $scope.heroUploading = undefined;
      }
    },
        onSuccess = type === 'hero' ? onHeroSuccess : onLogoSuccess;

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;

      if (type === "hero") {
        $scope.heroUploading = true;
      }

      if (type === "logo") {
        $scope.logoUploading = true;
      }

      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.company._id + '/logo',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.heroStyles = function () {
    var styles = '';

    if ($scope.portal.appearance.hero) {
      var rgba = rgbAddOpacity();
      $scope.portal.appearance.hero.overlay = rgba;
      styles = "background-image: linear-gradient(".concat(rgba, ", ").concat(rgba, "), url(\"").concat($scope.portal.appearance.hero.url, "\");");
    } else {
      styles = "background: ".concat($scope.portal.appearance.primary_color, ";");
    }

    if ($scope.portal.appearance.hero_text_color && $scope.portal.appearance.hero_text_color === 'black') {
      styles += 'color:#000;';
    }

    return styles;
  };
  /*
      $scope.heroStyles = function() {
          var styles = '';
          var rgba = rgbAddOpacity();
          $scope.portal.appearance.hero.overlay = rgba;
          styles = `background-image: linear-gradient(${rgba}, ${rgba}), url("${$scope.portal.appearance.hero.url}")`;
          return styles;
      };
  */


  $scope.removeHero = function () {
    delete $scope.portal.appearance.hero;
  };

  var isValidEmployee = function isValidEmployee(employee) {
    if (!employee) {
      return false;
    }

    if (!employee.headshot_url) {
      return false;
    }

    if (!employee.name) {
      return false;
    }

    if (!employee.role) {
      return false;
    }

    return true;
  };

  $scope.removeEmployee = function (index) {
    $scope.employeesChanged = true;
    $scope.portal.employees.list.splice(index, 1);
  };

  $scope.employeeSubmitted = false;
  $scope.employeesChanged = false;

  $scope.addEmployee = function (employee) {
    $scope.employeeSubmitted = true;

    if (!isValidEmployee(employee)) {
      return false;
    }

    $scope.employeeSubmitted = false;
    $scope.employeesChanged = true;
    $scope.portal.employees.list.push(employee);
    $scope.employee = {};
  };

  $scope.onEmployeeHeadshotFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Upload percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data) {
        console.log('Uploaded headshot URL: ' + data.url);
        $scope.employee.headshot_url = data.url;
      }
    };

    for (var i in $files) {
      var file = $files[i];
      console.log('Uploading image....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/portal/testimonial/headshot',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(function () {});
    }
  };

  $scope.updatePortalEmployees = function (employees) {
    console.log('Saving...');
    $scope.employeesError = '';
    $scope.appClient.updatePortalEmployees($scope.shared.activeCompany.company._id, employees, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.employeesError = "Problem updating employees";
        return;
      }

      $scope.shared.activeCompany.portal.employees = employees;
      $scope.updateSuccessEmployees = true;
      setTimeout(function () {
        $scope.updateSuccessEmployees = false;
        $scope.employeesChanged = false;
      }, 2000);
    });
  };

  var isValidTestimonial = function isValidTestimonial(testimonial) {
    if (!testimonial) {
      return false;
    }

    if (!testimonial.headshot_url) {
      return false;
    }

    if (!testimonial.body) {
      return false;
    }

    if (!testimonial.name) {
      return false;
    }

    if (!testimonial.role) {
      return false;
    }

    return true;
  };

  $scope.removeTestimonial = function (index) {
    $scope.testimonialsChanged = true;
    $scope.portal.testimonials.splice(index, 1);
  };

  $scope.testimonialSubmitted = false;
  $scope.testimonialsChanged = false;

  $scope.addTestimonial = function (testimonial) {
    $scope.testimonialSubmitted = true;

    if (!isValidTestimonial(testimonial)) {
      return false;
    }

    $scope.testimonialSubmitted = false;
    $scope.testimonialsChanged = true;
    $scope.portal.testimonials.push(testimonial);
    $scope.testimonial = {};
  };

  $scope.onHeadshotFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Upload percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data) {
        console.log('Uploaded headshot URL: ' + data.url);
        $scope.testimonial.headshot_url = data.url;
      }
    };

    for (var i in $files) {
      var file = $files[i];
      console.log('Uploading image....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/portal/testimonial/headshot',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(function () {});
    }
  };

  $scope.setPerkIcon = function (perkIcon) {
    $scope.perk.icon = perkIcon;
    $scope.perksChanged = true;
  };

  $scope.removePerk = function (index) {
    $scope.portal.perks.splice(index, 1);
    $scope.perksChanged = true;
  };

  $scope.perksChanged = false;

  $scope.addPerk = function (perk) {
    if (!perk || !perk.text || perk.text.trim().length === 0) {
      return;
    }

    $scope.portal.perks.push(perk);
    $scope.perk = {
      'icon': 'fa-gift'
    };
    $scope.perksChanged = true;
  };

  $scope.normalizeIcon = function (icon) {
    if (icon === 'fa-cutlery') {
      return 'fa-utensils';
    } else if (icon === 'fa-money') {
      return 'fa-money-bill';
    } else if (icon === 'fa-mortar-board') {
      return 'fa-graduation-cap';
    } else if (icon === 'fa-soccer-ball-o') {
      return 'fa-futbol';
    } else if (icon === 'fa-hand-spock-o') {
      return 'fa-hand-spock';
    }

    return icon;
  };

  $scope.mediaChange = function () {
    $scope.mediaChanged = true;
  };

  $scope.removeGalleryImage = function (index) {
    $scope.portal.media.gallery.splice(index, 1);
    $scope.mediaChanged = true;
    $scope.updatesAvailable = true;
  };

  $scope.onGalleryFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Upload percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      $scope.imageState = "save";

      if (data) {
        data = data['file-1'];
        console.log('Uploaded image URL: ' + data.image_url);
        console.log('Images: ' + $scope.portal.media.gallery.length);
        $scope.portal.media.gallery.push(data);
        $scope.mediaChanged = true;
      }
    },
        onError = function onError() {
      $scope.imageState = "save";
      $scope.updatesAvailable = true;
    };

    for (var i in $files) {
      var file = $files[i];
      console.log('Uploading image....');
      $scope.imageState = "saving";
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/portal/media/gallery/image',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.closeModal = function () {
    //$uibModalInstance.close();
    $uibModalInstance.dismiss('close');
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "type";
    }

    $scope.activeTab = tab;
    $state.transitionTo('company.portal-section', {
      portalSection: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  };

  $scope.getThumbnail = function (image) {
    if (image.indexOf("gallery-cdn.breezy.hr") > -1) {
      return image.replace("gallery-cdn.breezy.hr", "breezy-gallery.imgix.net") + "?w=100&h=100&crop=focal&fit=crop";
    }

    return image;
  };

  var initializeIntegrations = function initializeIntegrations() {
    $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
      $scope.integrations = result;
    });
  };

  var initialize = function initialize() {
    $scope.company = $scope.shared.activeCompany.company;
    $scope.setTabActive(defaultTab);
    initializeIntegrations();
  };

  initialize();
}]);
angular.module('appController').controller('AddWidgetTemplateModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'template', 'utils', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, template, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.templateVariables = angular.copy($scope.shared.templateVariables);
  $scope.template = {
    'subject': $scope.shared.activeCompany.messaging.subject_template.body,
    'attachments': []
  };

  if (template) {
    $scope.template = angular.copy(template);
    $scope.template.body = utils.markdownToHTML($scope.template.body);

    if (!$scope.template.attachments) {
      $scope.template.attachments = [];
    }

    if (!$scope.template.subject) {
      $scope.template.subject = $scope.shared.activeCompany.messaging.subject_template.body;
    }
  }

  $scope.insertVariable = function ($item, elem) {
    $rootScope.$broadcast('insertTemplateVariable:' + elem, $item.value);
  };

  $scope.add = function () {
    if (!$scope.template.name || !$scope.template.body) {
      return;
    }

    var template_new = angular.copy($scope.template);
    template_new.body = utils.HTMLtoMarkdown(template_new.body);

    if ($scope.template._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateWidgetTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(template_new);
      });
    } else {
      $scope.messageStatus = "Adding...";
      $scope.appClient.addWidgetTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('PositionActivityViewCtrl', ['$scope', '$rootScope', '$stateParams', 'position', function ($scope, $rootScope, $stateParams, position) {
  $scope.isViewInitialized = false;
  $scope.position = position;
  $scope.pagingStream = false;
  $scope.noMorePaging = true;
  $scope.positionId = $stateParams.positionId;
  $scope.stream = [];
  $scope.includeActivityType = {
    'candidateAdded': true,
    'candidateDeleted': true,
    'candidateStatusUpdated': true,
    'interviewScheduled': true,
    'companyNotePosted': true,
    'candidateDocumentAdded': true,
    'candidateDocumentDeleted': true,
    'companyPositionUpdated': true,
    'companyPositionAdded': true,
    'companyPositionStateUpdated': true
  };
  $scope.includeActingUser = {};
  $scope.filtersChanged = false;

  $scope.toggleActivityType = function (type) {
    //$scope.includeActivityType[type] = !$scope.includeActivityType[type];
    $scope.filtersChanged = true;
  };

  $scope.toggleActingUser = function (userId) {
    //$scope.includeActingUser[userId] = !$scope.includeActingUser[userId];
    $scope.filtersChanged = true;
  };

  $scope.getMoreStream = function () {
    //console.log("Paging stream...");
    $scope.pagingStream = true;
    $scope.appClient.getFilteredPositionStream({
      'members': $scope.includeActingUser,
      'types': $scope.includeActivityType
    }, $scope.stream.length, $scope.shared.activeCompany.company._id, $scope.positionId, function (error, stream) {
      //console.log("Additional stream size: " + stream.length);
      $scope.stream.push.apply($scope.stream, stream);
      $scope.pagingStream = false;

      if (stream.length < 30) {
        $scope.noMorePaging = true;
      }
    });
  };

  $scope.updateStream = function () {
    $scope.filtersChanged = false;
    $scope.isViewInitialized = true;
    $scope.appClient.getFilteredPositionStream({
      'members': $scope.includeActingUser,
      'types': $scope.includeActivityType
    }, 0, $scope.shared.activeCompany.company._id, $scope.positionId, function (error, stream) {
      //console.log("Updated stream size: " + stream.length);
      $scope.stream = stream;
      $scope.isViewInitialized = true;
    });
  };

  $scope.members = angular.copy($scope.shared.activeCompany.members);

  for (var i in $scope.members) {
    var member = $scope.members[i];
    $scope.includeActingUser[member._id] = false;
  }

  $scope.appClient.getPositionStream($scope.shared.activeCompany.company._id, $scope.positionId, function (error, stream) {
    //console.log("Stream size: " + stream.length);
    $scope.stream = stream;

    if (stream.length < 30) {
      $scope.noMorePaging = true;
    } else {
      $scope.noMorePaging = false;
    }

    $scope.isViewInitialized = true;
  });
  $rootScope.$on('notePosted', function (event, data) {
    if (data.object.candidate_id != $scope.candidateId) {
      return;
    }

    data.postPageLoad = true;
    $scope.stream.unshift(data);
  });
}]);
'use strict';

angular.module('appController').controller('PositionAnalyticsViewCtrl', ['$scope', '$state', 'ReportService', 'DateService', '$cookieStore', 'CompanyService', 'FeaturesService', function ($scope, $state, ReportService, DateService, $cookieStore, CompanyService, FeaturesService) {
  console.log('PositionAnalyticsViewCtrl init');

  if (FeaturesService.actions.block('reporting')) {
    $state.go('company.position.pipeline', {
      positionId: $scope.position._id
    });
  }

  $scope.colors = ReportService.colors;
  $scope.months = ReportService.months;
  $scope.weekdays = ReportService.weekdays;
  $scope.today = new Date();
  $scope.showEEOCNav = CompanyService.getters.settings('eeoc.enable_eeoc') && $scope.shared.activeCompany.company.is_admin;
  $scope.showDispositionNav = ['required', 'optional'].indexOf(CompanyService.getters.settings('eeoc.reasons.disposition')) > -1 && $scope.shared.activeCompany.company.is_admin;
  $scope.positionId = $scope.position._id;
  $scope.isViewInitialized = false;
  $scope.selectedReportCriteria = {
    id: $scope.positionId,
    name: 'All My Positions'
  };
  $scope.dateRanges = [{
    date_range: 'last7Days',
    label: 'Last 7 Days',
    candidate_filter: ['7days']
  }, {
    date_range: 'twoWeeks',
    label: 'Last 14 Days',
    candidate_filter: ['twoWeeks']
  }, {
    date_range: 'thisMonth',
    label: 'This Month',
    candidate_filter: DateService.getDateRange('thisMonth')
  }, {
    date_range: 'lastMonth',
    label: 'Last Month',
    candidate_filter: DateService.getDateRange('lastMonth')
  }, {
    date_range: 'last30Days',
    label: 'Last 30 Days',
    candidate_filter: ['30days']
  }, {
    date_range: 'last90Days',
    label: 'Last 90 Days',
    candidate_filter: DateService.getDateRange('last90days')
  }, {
    date_range: 'last180Days',
    label: 'Last 180 Days',
    candidate_filter: DateService.getDateRange('last180days')
  }, {
    date_range: 'customRange',
    label: 'Custom Range'
  }];
  var selectedDateRange = $cookieStore.get("SelectedDateRange");

  if (!selectedDateRange) {
    selectedDateRange = 'last7Days';
  }

  $scope.selectedDateRange = $scope.dateRanges.find(function (date) {
    return date.date_range === selectedDateRange;
  });
  $scope.selectedDateRange.timeframe = DateService.getDateRange(selectedDateRange);
  $scope.customRange = {
    start_date: null,
    end_date: null
  };
  $scope.params = {
    date_range: $scope.selectedDateRange.date_range
  };

  $scope.gotoCandidates = function (filters) {
    filters = filters || {};

    if ($scope.selectedDateRange.date_range !== 'customRange') {
      filters.date_range = $scope.selectedDateRange.candidate_filter;
    } else {
      filters.date_range = {
        start: $scope.customRange.start_date,
        end: $scope.customRange.end_date
      };
    }

    $state.go('company.position.candidates', {
      filters: filters
    });
  };

  $scope.getCSVTitle = function (report, subreport, noTimeframe) {
    var name = "Breezy_".concat(report, "_").concat(subreport);

    if (noTimeframe) {
      name += "_".concat(moment().format('MM-DD-YYYY'));
    } else {
      name += "_".concat($scope.selectedDateRange.timeframe.start_formatted_short, "-").concat($scope.selectedDateRange.timeframe.end_formatted_short);
    }

    return name;
  };

  $scope.reportExport = function (position_ids) {
    if (position_ids === 'all') {
      return;
    }

    var params = Object.assign({}, $scope.params, {
      position_ids: position_ids
    });
    $scope.appClient.getReportExport('eeoc', $scope.shared.activeCompany.company._id, $scope.selectedReportCriteria.id, params, function (error, result) {
      console.log(error);
      console.log(result);
    });
  };

  $scope.round = function (num) {
    return Math.round(num * 100) / 100;
  };

  $scope.getCustomReport = function () {
    $scope.dateRangeError = null;

    if (!$scope.customRange.start_date || !$scope.customRange.end_date) {
      $scope.dateRangeError = 'Start date and end date required';
    }

    if (!($scope.customRange.start_date instanceof Date) && !($scope.customRange.end_date instanceof Date)) {
      $scope.dateRangeError = 'Select valid dates';
    }

    if ($scope.customRange.start_date > $scope.customRange.end_date) {
      $scope.dateRangeError = 'Start date must be before end date';
    }

    if ($scope.dateRangeError) return;
    $scope.selectedDateRange.timeframe = DateService.getDateRange({
      value: 'customRange',
      start: $scope.customRange.start_date,
      end: $scope.customRange.end_date
    });
    $scope.params.start_date = moment($scope.customRange.start_date).format('YYYY-MM-DD');
    $scope.params.end_date = moment($scope.customRange.end_date).format('YYYY-MM-DD');
    $scope.$broadcast('reportUpdate');
  };

  $scope.setDateRange = function () {
    var temp = $scope.selectedDateRange.timeframe;
    $scope.selectedDateRange = this.range;
    $scope.selectedDateRange.timeframe = temp;
    $scope.params.date_range = $scope.selectedDateRange.date_range;

    if ($scope.selectedDateRange.date_range !== 'customRange') {
      $cookieStore.put("SelectedDateRange", $scope.selectedDateRange.date_range);
      delete $scope.params.start_date;
      delete $scope.params.end_date;
      $scope.selectedDateRange.timeframe = DateService.getDateRange(this.range.date_range);
    }

    $scope.$broadcast('reportUpdate');
  };
}]);
'use strict';

angular.module('appController').controller('PositionCalendarViewCtrl', ['$scope', '$rootScope', '$stateParams', 'position', 'SharedData', 'AppClient', function ($scope, $rootScope, $stateParams, position, SharedData, AppClient) {
  $scope.position = position;
  $scope.positionId = $stateParams.positionId;
  $scope.candidateId = $stateParams.candidateId;
  $scope.section = $stateParams.section;
  $scope.tab = 'schedule';
  $scope.schedule = [];
  $scope.bzEvents = [];
  $scope.eventSources = [];

  $scope.eventClick = function (data, jsEvent, view) {
    if (!data.data) return;
    $scope.openInterviewDetail(data.data, $scope.position, function (result) {
      if (result && result.action == "cancelled") {
        var idx;

        for (var i in $scope.bzEvents) {
          var event = $scope.bzEvents[i];

          if (event.data._id === data.data._id) {
            idx = i;
          }
        }

        $scope.bzEvents.splice(idx, 1);
        $scope.eventSources[0] = angular.copy($scope.bzEvents);
        $('#positionCalendar').fullCalendar('refetchEvents');
      }
    });
  };

  var calendarHeight = document.querySelector('.bzy-content.contained').clientHeight - 70;
  $scope.uiConfig = {
    'calendar': {
      eventClick: $scope.eventClick,
      header: {
        left: 'today prev,next',
        center: 'title',
        right: 'month agendaWeek agendaDay'
      },
      contentHeight: calendarHeight
    }
  };

  var initialize = function initialize() {
    $scope.appClient.getPositionSchedule($scope.shared.activeCompany.company._id, $scope.positionId, function (error, results) {
      if (!results) {
        console.log('No results');
        return;
      } //console.log('Results: ', results);


      $scope.bzEvents = [];
      var current_date = moment(new Date()).startOf('day');
      var groupedResults = results.filter(function (event) {
        return moment(event.start_time).isAfter(moment().format('YYYY-MM-DD'));
      }); //console.log('Filtered: ', groupedResults);

      groupedResults.map(function (event) {
        return event.date = moment(event.start_time).format('YYYY-MM-DD');
      });
      $scope.schedule = _.groupBy(groupedResults, function (event) {
        return event.date;
      }); //console.log($scope.schedule);

      for (var i in results) {
        var result = results[i];

        if (!result.candidate) {
          continue;
        }

        var event = {
          'start': new Date(result.start_time),
          'end': new Date(result.end_time),
          'title': result.candidate ? result.candidate.name : result._id,
          'data': result,
          'className': result.candidate && result.attendee_ids && result.attendee_ids.indexOf($scope.shared.user._id) > -1 ? "assigned" : ""
        };
        $scope.bzEvents.push(event);
      }

      $scope.eventSources[0] = angular.copy($scope.bzEvents);

      if (SharedData.user.google_calendar) {
        // show free busy
        return AppClient.getGoogleFreebusy(SharedData.activeCompany.company._id).then(function (busy) {
          if (!busy || !busy[SharedData.user.google_calendar] || !busy[SharedData.user.google_calendar].busy) return;
          var userBusy = busy[SharedData.user.google_calendar].busy;
          $scope.freebusyEvents = userBusy.map(function (event) {
            return {
              start: new Date(event.start),
              end: new Date(event.end),
              title: 'busy',
              className: 'google-calendar'
            };
          }); // dedupe events with same start and end time

          $scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
            return !$scope.bzEvents.find(function (bzEvent) {
              var sameStart = event.start.toJSON() === bzEvent.start.toJSON(),
                  sameEnd = event.end.toJSON() === bzEvent.end.toJSON();
              return sameStart && sameEnd;
            });
          });
          $scope.eventSources[1] = angular.copy($scope.freebusyEvents);
        });
      } else if (SharedData.user.outlook_calendar) {
        // show free busy
        return AppClient.getOutlookFreebusy(SharedData.activeCompany.company._id).then(function (busy) {
          if (!busy || !busy[SharedData.user.outlook_calendar] || !busy[SharedData.user.outlook_calendar].busy) return;
          var userBusy = busy[SharedData.user.outlook_calendar].busy; // date transformation has to happen locally to use local timezone

          function createDateAsUTC(date) {
            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
          }

          $scope.freebusyEvents = userBusy.map(function (event) {
            return {
              start: moment(createDateAsUTC(new Date(event.start))).toDate(),
              end: moment(createDateAsUTC(new Date(event.end))).toDate(),
              title: event.title || 'busy',
              className: 'google-calendar'
            };
          }); // dedupe events with same start and end time

          $scope.freebusyEvents = $scope.freebusyEvents.filter(function (event) {
            return !$scope.bzEvents.find(function (bzEvent) {
              var sameStart = event.start.toString() === bzEvent.start.toString(),
                  sameEnd = event.end.toString() === bzEvent.end.toString();
              return sameStart && sameEnd;
            });
          });
          $scope.eventSources[1] = angular.copy($scope.freebusyEvents);
        });
      }
    });
  };

  $rootScope.$on('interviewAdded', function (e, data) {
    console.log("Calendar interviewAdded");

    if (data.position_id !== $scope.positionId) {
      return;
    }

    console.log("Calendar interviewAdded match!");

    var getEventFromInterview = function getEventFromInterview(interview) {
      var event = {
        'start': new Date(interview.start_time),
        'end': new Date(interview.end_time),
        'title': interview.location ? interview.location : interview.candidate.name,
        'data': interview,
        'className': interview.candidate && interview.attendee_ids.indexOf($scope.shared.user._id) > -1 ? "assigned" : ""
      };
      return event;
    };

    var newEvent = getEventFromInterview(data);
    var idx;

    for (var i in $scope.bzEvents) {
      console.log('Event ' + i);
      var event = $scope.bzEvents[i];

      if (event.data._id == data._id) {
        console.log('Found it ' + i);
        idx = i;
        break;
      }
    }

    if (idx > -1) {
      $scope.bzEvents[idx] = newEvent;
    } else {
      $scope.bzEvents.push(newEvent);
    }

    $scope.eventSources[0] = angular.copy($scope.bzEvents);
    $('#positionCalendar').fullCalendar('refetchEvents');
  });
  initialize();
}]);
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

angular.module('appController').directive('positionCandidateGridRow', ['$rootScope', '$templateRequest', '$compile', 'CandidatesService', function ($rootScope, $templateRequest, $compile, CandidatesService) {
  return {
    restrict: 'A',
    templateUrl: '/templates/v2/app/partials/position_candidate_grid_row.html',
    replace: true,
    scope: false,
    link: function link(scope, element, attrs) {
      // local changes made. refresh candidate
      scope.$on("candidate:".concat(scope.candidate._id), function () {
        var updatedCandidateData = CandidatesService.local.getCandidate(scope.candidate._id);
        Object.keys(updatedCandidateData).forEach(function (key) {
          Object.defineProperty(scope.candidate, key, {
            value: updatedCandidateData[key],
            configurable: true
          });
        });
        var candidateTemplate = '/templates/v2/app/partials/position_candidate_grid_row.html';
        $templateRequest(candidateTemplate).then(function (html) {
          var template = $compile(angular.element(html))(scope);
          window.setTimeout(function () {
            //console.log(element);
            element[0].childNodes.forEach(function (cell, i) {
              // cells to skip to not overwrite click events
              if ([0, 15].indexOf(i) < 0) {
                //console.log(cell);
                cell.replaceWith(template[0].childNodes[i].cloneNode(true)); //cell.innerHTML = template[0].childNodes[i].innerHTML;
              }
            });
          }, 0);
        });
      });
      scope.$on("candidate:".concat(scope.candidate._id, ":deleted"), function () {
        element.remove();
      });
      element.on('$destroy', function () {});
    }
  };
}]);
angular.module('appController').controller('PositionCandidatesGridViewCtrl', ['$scope', '$rootScope', '$stateParams', '$cookieStore', '$location', '$uibModal', '$timeout', 'dialog', 'CompanyService', 'CandidatesService', 'tags', 'CandidatesFilterService', 'metadata', 'TaggingService', 'ModalService', 'FeaturesService', '$filter', 'ReasonService', function ($scope, $rootScope, $stateParams, $cookieStore, $location, $uibModal, $timeout, dialog, CompanyService, CandidatesService, tags, CandidatesFilterService, metadata, TaggingService, ModalService, FeaturesService, $filter, ReasonService) {
  console.log('PositionCandidatesGridViewCtrl Init');
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.selected = -1;

  var initializeKeyBindings = function initializeKeyBindings() {
    // down : selected next position row
    Mousetrap.bind('down', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected++;

      if ($scope.selected > $scope.candidates.length - 1 && $scope.candidates.length < $scope.candidatesMeta.count) {
        $scope.getMoreCandidates();
      } else if ($scope.selected > $scope.candidates.length - 1) {
        $scope.selected = 0;
      }

      $scope.$apply();
    }); // up : selected previous position row

    Mousetrap.bind('up', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected--;

      if ($scope.selected < 0) {
        $scope.selected = $scope.candidates.length - 1;
      }

      $scope.$apply();
    });
    Mousetrap.bind('esc', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected = -1;
      $scope.$apply();
    });
    Mousetrap.bind('enter', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      if ($scope.selected === -1) return;
      var item = $scope.candidates[$scope.selected];
      ModalService.openCandidateModal(item.position_id, item._id).then(function () {}); //$state.go('company.position.pipeline', {positionId: item._id});
    }); // check selected position

    Mousetrap.bind('space', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      if ($scope.selected === -1) return;
      var sortedCandidates = $filter('orderBy')($scope.candidatesGrid, $scope.predicate, $scope.reverse);
      var selectedCandidate = sortedCandidates[$scope.selected];
      $scope.toggleCheck(selectedCandidate);
      selectedCandidate.checked = !selectedCandidate.checked;
      $scope.$apply();
      return false;
    }); // check all position

    Mousetrap.bind('shift+space', function () {
      $scope.selectAllCandidates = true;
      $scope.toggleAllCandidates();
      return false;
    });
    Mousetrap.bind('t', function () {
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.tagCandidates();
    });
    Mousetrap.bind('n', function () {
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openPostNote();
    });
    Mousetrap.bind('q', function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openSendQuestionnaire();
    });
    Mousetrap.bind('m', function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openPostMessage();
    });
    Mousetrap.bind(['command+s', 'ctrl+s'], function () {
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.openMoveCandidates();
      return false;
    });
    /*Mousetrap.bind(['command+d', 'ctrl+d'], () => {
        if ($scope.selectedCandidateIds.length === 0) return;
        $scope.openDisqualifyCandidates();
    });*/

    Mousetrap.bind(['command+shift+d', 'ctrl+shift+d'], function () {
      if (isEmailDisabled()) return;
      if ($scope.selectedCandidateIds.length === 0) return;
      $scope.deleteCandidates();
      return false;
    });
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  });
  $scope.$parent.stale = false;
  $scope.members = angular.copy($scope.shared.activeCompany.members);
  $scope.positionId = $stateParams.positionId;
  $scope.candidateId = $stateParams.candidateId;
  $scope.section = $stateParams.section;
  $scope.state = $location.search().state;
  $scope.upload = $location.search().upload;
  $scope.candidatesMeta = {};
  $scope.filtering = false;
  $scope.loadingMoreText = 'Load More';
  $scope.showCandidatesFilter = true;

  if (typeof $cookieStore.get('showCandidatesGridFilter') !== 'undefined') {
    $scope.showCandidatesFilter = $cookieStore.get('showCandidatesGridFilter');
  }

  $scope.toggleShowCandidatesFilter = function () {
    $scope.showCandidatesFilter = !$scope.showCandidatesFilter;
    $cookieStore.put('showCandidatesGridFilter', $scope.showCandidatesFilter);
    $cookieStore.get('showCandidatesGridFilter');
  };

  var queryText = $location.search().q;

  var getDisplayColumns = function getDisplayColumns() {
    return Object.keys($scope.displayColumn).reduce(function (columns, column) {
      if ($scope.displayColumn[column]) {
        columns.push("cell-".concat(column));
      }

      return columns;
    }, []).join(' ');
  };

  $scope.Utils = {
    keys: Object.keys
  };
  $scope.segmentStatus = {
    changed: false
  };
  $scope.predicate = 'updated_date';
  $scope.reverse = true;
  var filters = {
    pipeline: $scope.pipeline,
    tags: tags,
    date_range: true,
    updated_date: true,
    candidate_type: true,
    source: metadata.sources,
    assigned: $scope.members,
    sourcers: metadata.sourcers,
    referrers: metadata.referrers,
    recruiters: angular.copy($scope.shared.activeCompany.recruiters),
    unseen: true,
    starred: true
  };

  if ($scope.gdprEnabled) {
    filters.gdpr_status = [{
      id: 'all',
      name: 'All'
    }, {
      id: 'expired',
      name: 'Consent Expired'
    }, {
      id: 'consented',
      name: 'Consented'
    }, {
      id: 'pending',
      name: 'Consent Pending'
    }, {
      id: 'declined',
      name: 'Consent Declined'
    }, {
      id: "expiring",
      name: "Consent Expiring"
    }, {
      id: "needsconsent",
      name: "Needs Consent"
    }];
    filters.expiry_date = true;
  }

  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        //console.log(rule)
        filter[rule] = false;
      });
    });
  };

  $scope.filters = CandidatesFilterService.init(filters, 'PositionCandidatesGridViewCtrl');

  $scope.getFilterIndex = function (key) {
    return Object.keys(filters).indexOf(key);
  };

  if (queryText) {
    $scope.filters.text = queryText;
  }

  var currentFilter = null;

  if ($stateParams.filters) {
    CandidatesFilterService.setSegment(null, {
      filters: $stateParams.filters
    });
  }

  $scope.segments = CandidatesFilterService.getSegments();

  var checkTagOperator = function checkTagOperator(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return false;
    } else if ($scope.tagOperatorLabel === 'AND') {
      return true;
    }

    return false;
  };

  $scope.tagOperatorLabel = 'OR';

  $scope.toggleTagOperator = function () {
    if ($scope.tagOperatorLabel === 'OR') {
      $scope.tagOperatorLabel = 'AND';
    } else {
      $scope.tagOperatorLabel = 'OR';
    } // manually run filters update


    watchFilters($scope.filters);
  };

  var tagsFilter = $scope.filters.options.find(function (option) {
    return option.key === 'tags';
  });
  $scope.filterButtons = {
    saveDisabled: true,
    applyDisabled: true
  };
  var manualSubmit = false;

  var watchFilters = function watchFilters(filters) {
    if (CandidatesFilterService.getActiveController() !== 'PositionCandidatesGridViewCtrl') return;
    $scope.closeFilterDropdown();
    var options = CandidatesFilterService.getOptions(filters);
    delete options.stage_pipelines;

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    if (!angular.equals(options, currentFilter)) {
      $scope.filterButtons.saveDisabled = true;
      $scope.filterButtons.applyDisabled = false; // for segment select

      if (manualSubmit) $scope.applyFilter(options);
    } else {
      $scope.filterButtons.applyDisabled = true;
    }
  };

  var pipelineFlat = $scope.pipeline.map(function (stage) {
    return stage.id;
  });
  CandidatesService.getCandidates($scope.positionId, pipelineFlat).then(function (candidates) {
    $scope.candidates = candidates;
    $scope.$watch('filters', watchFilters, true);
    $scope.applyFilter();
  });

  var formatCandidate = function formatCandidate(candidate) {
    candidate.source = candidate.source || {
      name: ''
    };

    if (candidate.overall_score) {
      candidate.overall_score.score_sort = candidate.overall_score.score == 0 ? 0.01 : candidate.overall_score.score;
    } else {
      candidate.overall_score = {};
    }

    if ($scope.gdprEnabled && $scope.position.application_form && $scope.position.application_form.gdpr && $scope.position.application_form.gdpr === 'required' && !candidate.consent) {
      candidate.consent = {
        status: {
          id: "needsconsent",
          name: "Needs Consent"
        }
      };
    }
  };

  $scope.groupCandidates = function (options) {
    $scope.filtering = Object.keys(currentFilter) > 0 ? true : false;
    options = options || currentFilter;
    options.get_totals = true; // include current position id

    options.position_ids = [$scope.position._id]; // assures company admins see candidates on this position
    // even if they are not on it

    options.all_positions = true; //options.stage_pipelines = [ $scope.position.pipeline_id ];
    // return just the ids of the found candidates

    options.ids = true;
    $scope.isViewInitialized = false;
    $scope.candidatesMeta.count = undefined; //$scope.candidates = CandidatesService.getFilteredCandidates(filter);

    CandidatesService.getUserCandidates($scope.shared.activeCompany.company._id, options).then(function (results) {
      var candidates = results.data;
      $scope.candidatesMeta.count = results.total;
      candidates.forEach(formatCandidate);
      $scope.candidatesGrid = candidates;
      $scope.candidatesMeta.count = results.total;
      $timeout(function () {
        $scope.isViewInitialized = true;
      }, 1000);
    });
  };

  $scope.applyFilter = function () {
    var options = CandidatesFilterService.getOptions($scope.filters);
    delete options.stage_pipelines;

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    currentFilter = angular.copy(options);
    var match = CandidatesFilterService.segmentStatus(options);

    if (match) {
      $scope.segmentStatus.changed = false;
      $scope.segment = match;
    } else {
      $scope.segmentStatus.changed = true;
      $scope.segment = {
        name: 'Custom Filters'
      };
    }

    manualSubmit = false;
    $scope.groupCandidates(options);
    $scope.filterButtons.applyDisabled = true;

    if ($scope.segmentStatus.changed) {
      $scope.filterButtons.saveDisabled = false;
    }
  };

  $scope.filterToggleActive = function () {//console.log(this);
  };

  $scope.filterRuleAdd = function () {
    //console.log(this);
    this.filter.rules.push({});
  };

  $scope.filterRuleDelete = function (filterIndex, ruleIndex) {
    $scope.filters.options[filterIndex].rules.splice(ruleIndex, 1);

    if ($scope.filters.options[filterIndex].rules.length <= 0) {
      $scope.filters.options[filterIndex].active = false;
      $scope.filters.options[filterIndex].rules.push({
        is: null
      });
    }
  };

  if ($stateParams.searchTerm) {
    queryText = $stateParams.searchTerm;
  }

  $scope.filterTerm = {
    'text': queryText
  };
  $scope.segmentStatus = {
    status: false
  };
  $scope.displayColumn = {
    avatar: true,
    score: true,
    headline: false,
    resume: false,
    tags: false,
    email: true,
    phone: false,
    position: true,
    location: false,
    stage: true,
    source: true,
    added: true,
    lastActivity: true
  };
  $scope.includeAssigned = {};
  $scope.includePipeline = {};
  $scope.includeSource = {};
  $scope.sources = {};
  $scope.assigned = {
    'id': 'any',
    'label': "Any"
  };
  $scope.dateRange = {
    date_range: 'all',
    label: 'All Time',
    id: 'all'
  };
  /*TaggingService.get($scope.shared.activeCompany.company._id)
      .then(function(result) {
          $scope.tags = result;
      });*/

  $scope.selectedTags = [];
  $scope.predicate = 'updated_date';
  $scope.reverse = true;
  $scope.selectedCandidateIds = [];
  $scope.selectedCandidates = [];
  $scope.selectedMissingEmailAddress = [];
  $scope.selectedMissingPhoneNumber = [];
  $scope.selectedNotPositionAdmin = [];
  $scope.selectAllCandidates = false;
  $scope.isViewInitialized = false;
  $scope.candidatesGrid = [];
  $scope.filterFocused = false;

  $scope.filterFocus = function (state) {
    if (state == 1) {
      $scope.filterFocused = true;
    } else {
      setTimeout(function () {
        $scope.filterFocused = false;
      }, 100);
    }
  };

  $scope.checkAbility = function (type, func) {
    var allow = true;
    allow = !($scope.position.state !== "published" && $scope.shared.activeCompany.company.plan.id === 'freebie' && !$scope.globalCommunication);

    if (!allow) {
      type = 'unpublished';
    }

    if (['bulk_email', 'bulk_questionnaire', 'bulk_gdpr_consent', 'bulk_gdpr_data'].indexOf(type) > -1) {
      allow = allow && $scope.selectedMissingEmailAddress.length === 0;

      if (!allow) {
        ReasonService.getMessage(type).then();
        /*var message = messages[type];
        message.message = message.message.replace('[[count]]', $scope.selectedMissingEmailAddress.length)
        dialog.alert(message, result => {
        });*/
      }
    } else if (['bulk_SMS'].indexOf(type) > -1) {
      allow = allow && $scope.selectedMissingPhoneNumber.length === 0;

      if (!allow) {
        ReasonService.getMessage(type).then();
        /*var message = messages[type];
        message.message = message.message.replace('[[count]]', $scope.selectedMissingEmailAddress.length)
        dialog.alert(message, result => {
        });*/
      }
    } else if (['unpublished'].indexOf(type) > -1) {
      ReasonService.getMessage(type).then();
    }

    return allow;
  };

  $scope.isEmailDisabled = function () {
    /*
    if($scope.position.org_type == "pool" && $scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
        console.log("Candidate selected but pool messaging disabled");
        return true;
    }
    */
    if ($scope.selectedNotPositionAdmin.length > 0) {
      return true;
    }

    if ($scope.selectedMissingEmailAddress.length > 0) {
      return true;
    }

    if ($scope.position.state !== "published" && $scope.shared.activeCompany.company.plan.id === 'freebie' && !$scope.globalCommunication) {
      return true;
    }
  };

  $scope.isCandidateScored = function (candidate) {
    return $scope.appClient.isCandidateScored(candidate);
  };

  $scope.toggleColumn = function () {
    setTimeout(function () {
      var str = JSON.stringify($scope.displayColumn);
      $cookieStore.put("PositionCandidatesGridColumns", str);
    }, 1000);
    $scope.displayColumns = getDisplayColumns();
  };

  $scope.searchTag = function (tag) {
    $scope.filterTerm.text = "tags: \"" + tag + "\"";
  };

  $scope.deleteSegment = function (idx) {
    var segment = $scope.segments[idx];
    var segmentId = segment._id;
    $scope.appClient.deleteSegment(segmentId, function (error, result) {
      $scope.segments.splice(idx, 1);
      var idx1 = $scope.shared.activeCompany.segments.findIndex(function (segment) {
        return segment._id === segmentId;
      });
      $scope.shared.activeCompany.segments.splice(idx1, 1);
    });
  };

  $scope.openEditCandidate = function (_candidate) {
    $scope.gaEventTracker("OpenEditCandidate");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_edit_modal.html',
      controller: 'CandidateEditModalInstanceCtrl',
      size: 'sm',
      resolve: {
        candidate: function candidate() {
          return _candidate;
        }
      }
    });
    modalInstance.result.then(function (data) {
      console.log('we have data');

      if (data) {
        var c = $scope.candidates.find(function (candidate) {
          return data._id === candidate._id;
        });
        console.log('checking to update');

        if (c) {
          console.log('updating');
          c.phone_number = data.phone_number;
          c.email_address = data.email_address;
        }
      }
    }, function () {});
  };

  $scope.openAddSegment = function () {
    var options = angular.copy(currentFilter);
    var type;

    if (options.hasOwnProperty('date_range')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'date_range';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.date_range = [type];
      }
    }

    if (options.hasOwnProperty('updated_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'updated_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.updated_date = [type];
      }
    }

    if (options.hasOwnProperty('expiry_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'expiry_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.expiry_date = [type];
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates/_add_segment_modal.html',
      controller: 'AddSegmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'candidate';
        },
        segmentData: function segmentData() {
          return options;
        }
      }
    });
    modalInstance.result.then(function (savedSegment) {
      if (savedSegment) {
        $scope.segments.push(savedSegment);
        $scope.segmentStatus.changed = false;
        $scope.segment = savedSegment;
        $scope.shared.activeCompany.segments.push(savedSegment);
        $scope.filterButtons.saveDisabled = true;
      }
    }, function () {});
  };

  $scope.setSegment = function (segmentId, segment) {
    manualSubmit = true;

    if (segment.filters.hasOwnProperty('tags_operator')) {
      $scope.tagOperatorLabel = 'AND';
    }

    ;
    CandidatesFilterService.setSegment(segmentId, segment);
  };

  $scope.exportCandidates = function () {
    //if (FeaturesService.actions.block('csv_export')) return;
    if ($scope.selectedCandidateIds.length > 0 && $scope.selectedCandidateIds.length % 100 === 0) {
      dialog.confirm({
        title: 'Export Options',
        message: 'Do you want to export all candidates?'
      }, function (result) {
        if (result === true) {
          serverCSV();
        }
      });
      return false;
    } else {
      generateCSV();
    }

    $scope.gaEventTracker("ExportCandidates");
  };

  var serverCSV = function serverCSV() {
    var options = angular.copy(currentFilter);
    options.position_ids = [$scope.position._id];
    options.export = true;
    $scope.appClient.getUserCandidates($scope.shared.activeCompany.company._id, options, function (error, candidates) {
      dialog.alert({
        title: 'Processing',
        message: 'We are generating your file and will email you the link within an hour.'
      }, function () {});
    });
  };

  var generateCSV = function generateCSV() {
    var formatCell = function formatCell(text) {
      //text.replace(/"/g, '""');
      if (text.indexOf(',') >= 0) {
        text = '"' + text + '"';
      } //console.log(text);


      return text;
    };

    var stripQuotes = function stripQuotes(text) {
      return text.replace(/['"]+/g, '').trim();
    };

    var fields = Object.keys($scope.displayColumn);
    fields = fields.reduce(function (acc, field) {
      if (field === 'avatar') return acc;

      if ($scope.displayColumn[field]) {
        acc.push(field);
      }

      return acc;
    }, []);
    fields.unshift('name');
    var csvContent = "data:text/csv;charset=utf-8,";
    var header = fields.join(',') + '\n';
    csvContent += header;
    $scope.selectedCandidates.forEach(function (candidate, index) {
      var line = ''; //console.log(line);

      fields.forEach(function (field, i) {
        switch (field) {
          case 'score':
            if (candidate.overall_score && candidate.overall_score.score) {
              line += candidate.overall_score.score;
            }

            break;

          case 'resume':
            if (candidate.resume) {
              line += candidate.resume.url;
            }

            break;

          case 'stage':
          case 'source':
          case 'location':
            if (candidate[field]) {
              line += formatCell(candidate[field].name);
            }

            break;

          case 'position':
            if (candidate[field]) {
              line += formatCell($scope.position.name);
            }

            break;

          case 'added':
            if (candidate.creation_date) {
              line += candidate.creation_date;
            }

            break;

          case 'email':
            if (candidate.email_address) {
              line += candidate.email_address;
            }

            break;

          case 'lastActivity':
            if (candidate.updated_date) {
              line += candidate.updated_date;
            }

            break;

          case 'tags':
            if (candidate[field]) {
              line += formatCell(candidate[field].join(','));
            }

            break;

          case 'phone':
            if (candidate.phone_number) {
              line += candidate.phone_number;
            }

            break;

          default:
            if (candidate[field]) {
              line += formatCell(candidate[field]);
            }

            break;
        }

        if (i < fields.length - 1) {
          line += ',';
        }
      });
      csvContent += line + '\n';
    });
    var encodedUri = encodeURI(csvContent); //window.open(encodedUri);

    var downloadAttrSupported = "download" in document.createElement("a");

    if (downloadAttrSupported) {
      var downloadLink = document.createElement("a");
      downloadLink.href = encodedUri;
      downloadLink.download = "breezy-candidates.csv";
      document.body.appendChild(downloadLink);
      downloadLink.click();
    } else {
      dialog.download({
        name: 'breezy-candidates.csv',
        data: encodedUri
      });
    }

    $scope.gaEventTracker("ExportCandidates");
  };

  $scope.toggleSortBy = function (type) {
    if ($scope.predicate == type) {
      $scope.reverse = !$scope.reverse;
    } else {
      $scope.predicate = type;

      if (type == 'updated_date' || type == 'creation_date' || type == 'score') {
        $scope.reverse = true;
      } else {
        $scope.reverse = false;
      }
    }
  };

  $scope.deleteCandidates = function () {
    var header = "Delete Candidates";
    var message = 'Are you sure you want to delete these candidates?';

    if ($scope.selectedCandidateIds.length == 1) {
      header = "Delete Candidate";
      message = 'Are you sure you want to delete this candidate?';
    }

    $scope.openConfirm(header, message, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidates($scope.shared.activeCompany.company._id, $scope.selectedCandidateIds, function (error, result) {});
        $scope.selectedCandidateIds = [];
        $scope.selectedCandidates = [];
        setTimeout(function () {
          $scope.groupCandidates();
        }, 500);
      }
    });
  };

  $scope.toggleCheck = function (candidate) {
    var index = $scope.selectedCandidateIds.indexOf(candidate._id);

    if (index > -1) {
      $scope.selectedCandidateIds.splice(index, 1);
      $scope.selectedCandidates.splice(index, 1);

      if (!candidate.email_address) {
        var idx = $scope.selectedMissingEmailAddress.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingEmailAddress.splice(idx, 1);
        }
      }

      if (!candidate.phone_number) {
        var idx = $scope.selectedMissingPhoneNumber.indexOf(candidate._id);

        if (idx > -1) {
          $scope.selectedMissingPhoneNumber.splice(idx, 1);
        }
      }
    } else {
      $scope.selectedCandidateIds.push(candidate._id);
      $scope.selectedCandidates.push(candidate);

      if (!candidate.email_address) {
        $scope.selectedMissingEmailAddress.push(candidate._id);
      }

      if (!candidate.phone_number) {
        $scope.selectedMissingPhoneNumber.push(candidate._id);
      }
    }
  };

  $scope.toggleAllCandidates = function () {
    $scope.selectedCandidateIds = [];
    $scope.selectedCandidates = [];
    $scope.selectedMissingEmailAddress = [];
    $scope.selectedMissingPhoneNumber = [];
    $scope.selectedNotPositionAdmin = [];
    var candidate;

    if ($scope.selectAllCandidates) {
      for (var i in $scope.candidatesGrid) {
        candidate = $scope.candidatesGrid[i];
        candidate.checked = true;
        $scope.toggleCheck(candidate); //$scope.selectedCandidateIds.push(candidate._id);
        //$scope.selectedCandidates.push(candidate);
      }
    } else {
      for (var j in $scope.candidatesGrid) {
        candidate = $scope.candidatesGrid[j];
        candidate.checked = false;
      }
    }
  };
  /*$scope.$watch('candidates', function(newVal, oldVal) {
      console.log(newVal);
      console.log(oldVal);
      if (newVal === oldVal) return;
      $scope.groupCandidates();
  }, true);*/


  var fetching = false;

  $scope.getMoreCandidates = function () {
    if (fetching) return;
    fetching = true;
    $scope.loadingMoreText = 'Loading...';
    var options = {};
    if (currentFilter) options = angular.copy(currentFilter);

    if ($scope.filterTerm.text && $scope.filterTerm.text.length > 0) {
      options.filter_text = $scope.filterTerm.text;
    } // include current position id


    options.position_ids = [$scope.position._id];
    options.get_totals = true; // loading more

    options.skip = $scope.candidatesGrid.length; // return just the ids of the found candidates

    options.ids = true;
    $scope.isViewInitialized = false; //$scope.candidates = CandidatesService.getFilteredCandidates(filter);

    CandidatesService.getUserCandidates($scope.shared.activeCompany.company._id, options).then(function (candidates) {
      candidates.data.forEach(formatCandidate);
      $scope.isViewInitialized = true;
      $scope.candidatesGrid = candidates.data;
      fetching = false;
      $scope.loadingMoreText = 'Load More';
    });
  };

  $scope.openCandidateModal = function (candidate, $index) {
    var candidates = $scope.candidatesGrid.slice(0, 20);
    ModalService.openCandidateModal(candidate.position_id, candidate._id, candidates, $index).then(function () {});
  };

  $scope.openMoveCandidates = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_move_stage_modal.html',
      controller: 'CandidateMoveModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem; // reset

      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {});
  };

  $scope.openSendQuestionnaire = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_questionnaire_modal.html',
      controller: 'CandidateQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function () {
      // reset
      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {});
  };

  $scope.moveCandidates = function () {
    var candidateIDs = $scope.selectedCandidates.map(function (c) {
      return c._id;
    });
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/move/index.html',
      controller: 'MoveCandidateModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return candidateIDs;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function (results) {
      // do nothing
      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    });
  };

  $scope.tagCandidates = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/candidate_tagging_modal.html',
      controller: 'CandidateTaggingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        objectType: function objectType() {
          return 'candidate';
        },
        companyTags: function companyTags(TaggingService) {
          return TaggingService.get($scope.shared.activeCompany.company._id);
        },
        objectTags: function objectTags() {
          return [];
        },
        bulk: function bulk() {
          return $scope.selectedCandidates.length;
        }
      }
    });
    modalInstance.result.then(function (tags) {
      if (tags) {
        //console.log(tags)
        var new_tags = [];
        $scope.selectedCandidates.forEach(function (candidate) {
          new_tags = tags.filter(function (tag) {
            return candidate.tags.indexOf(tag.tag) === -1;
          }); // merge new tags into original tags

          candidate.tag_list = (candidate.tag_list || []).concat(new_tags);
          TaggingService.set($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, candidate.tag_list).then(function (tags) {
            candidate.tags = tags;
            $rootScope.$broadcast('candidateUpdatedLocal', candidate);
          });
        }); // reset

        $scope.selectAllCandidates = false;
        $scope.toggleAllCandidates();
      }
    }, function () {});
  };

  $scope.openSMSMessage = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    ModalService.openSMSMessage(null, null, $scope.selectedCandidateIds, $scope.selectedCandidates).then(function (result) {// nothing
    });
  };

  $scope.openPostMessage = function () {
    if (FeaturesService.actions.block('bulk_actions')) return;
    if (FeaturesService.actions.block('bulk_candidate_messaging')) return;
    var creationDate = new Date($scope.shared.activeCompany.company.creation_date);

    if ($scope.selectedCandidateIds.length > 1 || $scope.selectedCandidates.length > 1) {
      console.log((new Date().getTime() - creationDate.getTime()) / (1000 * 60 * 60 * 24));

      if ((new Date().getTime() - creationDate.getTime()) / (1000 * 60 * 60 * 24) < 1) {
        dialog.alert({
          title: "Mass-Messaging",
          message: "Candidate mass-messaging will be enabled 24 hours after creating your company. Need it sooner? Email support@breezyhr.com."
        }, function (result) {});
        return;
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return $scope.selectedCandidates;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem; // reset

      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {});
  };

  $scope.openSendConsentRequest = function () {
    ModalService.openRequestConsent($scope.selectedCandidates).then(function () {
      console.log('requests sent');
    });
  };

  $scope.scheduleCandidateDataRequest = function () {
    var message = "Are you sure you want to send these ".concat($scope.selectedCandidates.length, " candidates their data?");

    if ($scope.selectedCandidates.length === 1) {
      message = "Are you sure you want to send ".concat($scope.selectedCandidates[0].name, " their data?");
    }

    dialog.confirm({
      title: "Send Candidate Data",
      message: message
    }, function (result) {
      if (result === true) {
        $scope.selectedCandidates.forEach(function (candidate) {
          $scope.appClient.scheduleCandidateDataRequest({
            companyId: $scope.shared.activeCompany.company._id,
            positionId: candidate.position_id,
            candidateId: candidate._id
          }, function () {});
        });
      }
    });
  };

  $scope.openPostNote = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_post_note_modal.html',
      controller: 'CandidateNoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return $scope.selectedCandidateIds;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem; // reset

      $scope.selectAllCandidates = false;
      $scope.toggleAllCandidates();
    }, function () {//$scope.selectedCandidateIds = [];
    });
  };

  $scope.isCheckedCandidate = function (candidate) {
    return $scope.selectedCandidateIds.indexOf(candidate._id) > -1;
  };

  $scope.uploadCandidate = function (position, stage) {
    ModalService.openAddCandidate(position, stage).then(function () {// do nothing
    });
  };

  $scope.setPositionState = function (position, state) {
    var result = confirm("Set this position to: " + state + "?");

    if (!result) {
      return;
    }

    $scope.appClient.setPositionState(state, position._id, $scope.shared.activeCompany.company._id, function (error) {
      position.state = state;
      position.updated_date = new Date();
      $scope.shared.activeCompany.positions[position._id].updated_date = position.updated_date;
      $scope.shared.activeCompany.positions[position._id].state = state;
    });
  };

  $scope.isCandidateUnseen = function (candidate) {
    return $scope.appClient.isCandidateUnseen(candidate);
  };

  $scope.isCandidateFollowed = function (candidate) {
    return $scope.appClient.isCandidateFollowed(candidate);
  };

  $scope.toggleFollowCandidate = function (candidate) {
    $scope.appClient.toggleFollowCandidate(candidate, function () {});
  };

  $scope.isCandidateStarred = function (candidate) {
    return $scope.appClient.isCandidateStarred(candidate);
  };

  $scope.toggleStarCandidate = function (candidate) {
    $scope.appClient.toggleStarCandidate(candidate, function () {
      $rootScope.$broadcast('toggleStarCandidate', {
        name: candidate.name,
        _id: candidate._id,
        position_id: candidate.position_id
      });
    });
  };

  for (var i in $scope.pipeline) {
    var stage = $scope.pipeline[i];
    $scope.includePipeline[stage.id] = stage.icon !== "trash";
  }

  var d = $cookieStore.get("PositionCandidatesGridColumns");

  if (d) {
    var displayColumn = JSON.parse(d);

    if (displayColumn && _typeof(displayColumn) === 'object') {
      $scope.displayColumn = displayColumn;
    }
  }

  $scope.displayColumns = getDisplayColumns(); //$scope.groupCandidates();

  if ($scope.candidateId && $scope.positionId) {
    $scope.navigateToCandidate($scope.candidateId, $scope.positionId, $scope.section);
  }

  if ($scope.upload) {
    $scope.uploadCandidate($scope.position);
  }
}]);
'use strict';

angular.module('appController').controller('PositionViewCtrl', ['$rootScope', '$scope', '$stateParams', 'SharedData', 'position', 'pipeline', 'CandidatesService', 'CompanyService', 'dialog', '$uibModal', '$cookieStore', 'ModalService', 'PositionsService', 'FeaturesService', function ($rootScope, $scope, $stateParams, SharedData, position, pipeline, CandidatesService, CompanyService, dialog, $uibModal, $cookieStore, ModalService, PositionsService, FeaturesService) {
  console.log('Position Init');
  CandidatesService.local.destroyCandidates();
  PositionsService.local.setRecentlyViewed(position);
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  $scope.position = position;
  if (!$scope.position.starred_by) $scope.position.starred_by = [];
  $scope.pipelineFull = pipeline;
  $scope.positionId = $stateParams.positionId;
  $scope.pipeline = $scope.pipelineFull.pipeline;
  $scope.candidate = null;
  $scope.states = [{
    label: 'Active',
    value: 'published'
  }, {
    label: 'Draft',
    value: 'draft'
  }, {
    label: 'Closed',
    value: 'closed'
  }, {
    label: 'Archived',
    value: 'archived',
    icon: 'archive'
  }];

  $scope.togglePositionMuted = function () {
    var idx = $scope.notificationsSettings.muted_positions.indexOf($scope.position._id);

    if (idx > -1) {
      $scope.hasPositionMuted = false;
      $scope.positionMutedStatus = "On";
      $scope.notificationsSettings.muted_positions.splice(idx, 1);
    } else {
      $scope.hasPositionMuted = true;
      $scope.positionMutedStatus = "Muted";
      $scope.notificationsSettings.muted_positions.push($scope.position._id);
    }

    $scope.appClient.updateNotificationSettings($scope.notificationsSettings, function (error, result) {});
  };

  $scope.changeState = function (state) {
    var data = $scope.position;
    var company = $scope.shared.activeCompany.company;

    if (!company.is_admin && !data.is_admin && !(company.approval_workflow && company.approval_workflow.type !== 'none')) {
      dialog.alert({
        message: 'Sorry, you\'re not a Hiring Manager.'
      });
      return false;
    }

    if (state == "published" && FeaturesService.getters.available('job_approvals') && CompanyService.local.postingRequiresApproval() && data.org_type !== 'pool') {
      $scope.requestPublishApproval([data]);
      return false;
    } // if column is null set to empty array


    if (!$scope.shared.positions[state]) {
      $scope.shared.positions[state] = [];
    }

    if (data.state != state && state === 'published') {
      try {
        if ($scope.shared.activeCompany.company.features.trial_expired === true) {
          dialog.confirm({
            title: "Expired Trial",
            message: "Sorry, your trial plan has expired. Let's upgrade!"
          }, function (result) {
            if (result === true) {
              //$scope.companySettings("plan");
              ModalService.companySettings("plan").then(function (result) {// do nothing
              });
            }
          });
          return false;
        } else if ($scope.shared.positions[state].length >= $scope.shared.activeCompany.company.features.position_limit) {
          dialog.confirm({
            title: "Active Limit",
            message: "Sorry, you've hit your active pool/position limit. Let's upgrade!"
          }, function (result) {
            if (result === true) {
              //$scope.companySettings("plan");
              ModalService.companySettings("plan").then(function (result) {// do nothing
              });
            }
          });
          return false;
        } else {
          if (data.org_type !== "pool") {
            $scope.publishedModal(data);
          }
        }
      } catch (e) {}
    }

    $scope.setPositionState(data, state);
    return null;
  };

  $scope.toggleStarPosition = function () {
    var idx = $scope.position.starred_by.indexOf($scope.shared.user._id);

    if (idx > -1) {
      $scope.position.starred_by.splice(idx, 1);
      $scope.position.is_starred = false;
    } else {
      $scope.position.starred_by.push($scope.shared.user._id);
      $scope.position.is_starred = true;
    }

    $scope.appClient.toggleStarPosition($scope.position._id, function () {//$rootScope.$broadcast('toggleStarPosition', { _id: $scope.position._id });
    });
  };

  $scope.checkFeatureAvailability = function (feature, e) {
    if (FeaturesService.actions.block(feature)) {
      e.preventDefault();
      return;
    }
  };

  $scope.requestPublishApproval = function (positions) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/request_approval.html',
      controller: 'RequestPublishApprovalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return positions.shift();
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  $scope.setPositionState = function (position, state) {
    $scope.appClient.setPositionState(state, position._id, $scope.shared.activeCompany.company._id, function (error) {
      position.state = state;
      position.updated_date = new Date();
      $scope.shared.activeCompany.positions[position._id].state = state;
      $scope.shared.activeCompany.positions[position._id].updated_date = position.updated_date;
    });
  };

  $scope.cancelPublishApproval = function (position) {
    $scope.appClient.cancelPublishApproval($scope.shared.activeCompany.company._id, position._id, function (error, result) {});
  };

  PositionsService.local.positionViewed(position._id);
  $scope.$on('positionUpdated', function (event, data) {
    if (data._id == $scope.position._id) {
      if (data.all_admins.indexOf(SharedData.user._id) > -1) {
        data.is_admin = true;
      }

      $scope.position = data;
    }
  });
  $scope.$on('candidateMovedLocal', function (event, candidate) {
    CandidatesService.candidateDeleted(candidate._id);

    if (candidate.position_id === $scope.position._id) {
      CandidatesService.candidateAdded(candidate);
    }
  });
  $scope.$on('candidateMoved', function (event, data) {
    // if (data.object.acting_user._id === $scope.shared.user._id) {
    //     return;
    // }
    CandidatesService.remote.getCandidateById(data.object.position_id, data.object.candidate_id).then(function (candidate) {
      CandidatesService.candidateDeleted(candidate._id);

      if (candidate.position_id === $scope.position._id) {
        CandidatesService.candidateAdded(candidate);
      }
    });
  });
  $scope.$on('candidateSeenPosted', function (event, data) {
    CandidatesService.candidateSeenPosted(data.candidate_id, data.acting_user_id);
  });
  $scope.$on('candidateUpdatedLocal', function (event, candidate) {
    CandidatesService.candidateUpdated(candidate._id, candidate);
  });
  $scope.$on('candidateUpdated', function (event, candidate) {
    CandidatesService.candidateUpdated(candidate._id, candidate);
  });
  $scope.$on('candidateStatusUpdated', function (event, data) {
    CandidatesService.candidateStatusUpdated(data.object.candidate_id, data.object.stage);
  });
  $scope.$on('candidateDeleted', function (event, data) {
    CandidatesService.candidateDeleted(data.object.candidate_id);
  });
  $scope.$on('candidatesImported', function (event, data) {
    var candidates = data.object.candidates;

    if (data.object.position_id !== $scope.position._id) {
      return;
    }

    CandidatesService.candidatesImported(data.object.position_id, candidates);
  });
  $scope.$on('candidateAdded', function (event, data) {
    var candidate = data.object.candidate;

    if (candidate.position_id !== $scope.position._id) {
      return;
    }

    CandidatesService.candidateAdded(candidate);
  });
  $scope.$on('candidateAssignedPosted', function (event, data) {
    CandidatesService.candidateAssignedPosted(data.candidate_id, data.member);
  });
  $scope.$on('candidateScoreUpdated', function (event, data) {
    CandidatesService.candidateScoreUpdated(data.candidate_id, data.score);
  });
  $scope.$on('approvalRequestSent', function () {
    $scope.position.is_pending = true;
  });

  var initialize = function initialize() {
    $scope.isPositionStarred = $scope.position.starred_by.indexOf($scope.shared.user._id) > -1 ? true : false;
    $scope.appClient.getNotificationSettings(function (error, result) {
      if (result) {
        $scope.notificationsSettings = result;
        if (!$scope.notificationsSettings.muted_positions) $scope.notificationsSettings.muted_positions = [];

        if ($scope.notificationsSettings.muted_positions.indexOf($scope.position._id) > -1) {
          $scope.hasPositionMuted = true;
          $scope.positionMutedStatus = "Muted";
        } else {
          $scope.hasPositionMuted = false;
          $scope.positionMutedStatus = "On";
        }
      }
    });
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('PositionInboxViewCtrl', ['$scope', '$rootScope', '$state', '$uibModal', 'conversations', 'dialog', 'TaggingService', 'PositionsService', 'PipelinesService', 'CandidatesService', 'ModalService', 'FeaturesService', 'CompanyService', 'ReasonService', function ($scope, $rootScope, $state, $uibModal, conversations, dialog, TaggingService, PositionsService, PipelinesService, CandidatesService, ModalService, FeaturesService, CompanyService, ReasonService) {
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  console.log('PositionInboxViewCtrl Init');
  $scope.navActive = $state.current.name;
  $scope.conversations = conversations;
  $scope.fullCandidate = {};
  $scope.showAddTags = false;
  $scope.newTags = {};
  $scope.filters = [{
    label: 'All Conversations',
    value: 'all'
  }, {
    label: 'My Conversations',
    value: 'user'
  }];
  $scope.showComposer = {
    type: ''
  };
  $scope.selectedFilter = $scope.filters[0];

  var getConversation = function getConversation(conversation) {
    $scope.selected = conversation;
    $scope.position = $scope.shared.activeCompany.positions[$scope.selected.candidate.position_id];
    $scope.isCandidatePool = $scope.position.org_type === "pool";
    $scope.candidate = $scope.selected.candidate;
    $scope.subject = {
      body: $scope.appClient.processTemplate($scope.shared.activeCompany.messaging.subject_template.body, {
        'candidate': $scope.candidate,
        'position': $scope.position,
        'company': $scope.shared.activeCompany.company,
        'sender': $scope.shared.user
      })
    };
    $scope.appClient.getCandidateConversation($scope.shared.activeCompany.company._id, $scope.selected.candidate.position._id, $scope.selected.candidate._id, 0, function (error, conversation) {
      $scope.isViewInitialized = true;
      $scope.conversation = conversation;
    });
  };

  $scope.getMoreConvesation = function () {
    $scope.appClient.getCandidateConversation($scope.shared.activeCompany.company._id, $scope.selected.candidate.position._id, $scope.selected.candidate._id, $scope.conversation.length, function (error, conversation) {
      $scope.conversation = $scope.conversation.concat(conversation);
    });
  };

  $scope.canCommunicateWithCandidates = function () {
    if (!$scope.candidate) return false;
    return $scope.candidate.email_address && ($scope.position.state === "published" || $scope.globalCommunication);
  };

  var getCandidate = function getCandidate(conversation) {
    $scope.selected = conversation;
    $scope.candidate = $scope.selected.candidate;
    $scope.appClient.getCandidate($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, function (error, candidate) {
      if (!candidate) {
        dialog.alert({
          message: 'That candidate no longer exists.'
        });
        delete $scope.fullCandidate;
      }

      for (var i in candidate.social_profiles) {
        var socialProfile = candidate.social_profiles[i];
        socialProfile.cleanUrl = socialProfile.url.replace(/^.*\/\//, "");
      }

      $scope.fullCandidate = candidate;
      $scope.candidate.phone_number = candidate.phone_number;
      $scope.candidate.email_address = candidate.email_address;
    });
  };

  var getHiringTeam = function getHiringTeam() {
    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.candidate.position_id, function (error, members) {
      $scope.members = members;
    });
    var position = PositionsService.local.getPositionById($scope.candidate.position_id);
    $scope.pipeline = PipelinesService.local.getPipelineByPosition(position).pipeline;
  };

  $scope.closeCandidateConversation = function (conversation) {
    dialog.confirm({
      title: "Hide Conversation",
      message: "Hide this conversation with " + conversation.candidate.name + "?"
    }, function (result) {
      if (result !== true) {
        return;
      }

      $scope.appClient.deleteCompanyConversationThread($scope.shared.activeCompany.company._id, conversation.position_id, conversation.candidate._id, function (error) {
        deleteCandidate(conversation.candidate._id);
      });
    });
  };

  $scope.loadConversation = function () {
    $scope.isViewInitialized = false;
    getConversation(this.conversation);
    getCandidate(this.conversation);
    getHiringTeam();
  };

  function init() {
    if ($scope.conversations && $scope.conversations.length > 0) {
      getConversation($scope.conversations[0]);
      getCandidate($scope.conversations[0]);
      getHiringTeam();
    } else {
      $scope.isViewInitialized = true;
    }
  }

  init();

  $scope.filterInbox = function (filter) {
    if (filter.label === $scope.selectedFilter.label) return;
    $scope.selectedFilter = filter;
    var filterByUser = ['user'].indexOf(filter.value) > -1;
    return $scope.appClient.getPositionInbox($scope.shared.activeCompany.company._id, $scope.position._id, filterByUser, 'candidate').then(function (results) {
      $scope.conversations = results;
      init();
    });
  };

  $scope.openPanelInterview = function (interview) {
    ModalService.openPanelInterview($scope.fullCandidate.position_id, $scope.fullCandidate, interview).then(function (result) {});
  };

  $scope.scheduleInterview = function (interview) {
    ModalService.openScheduleInterview($scope.fullCandidate.position_id, $scope.fullCandidate, interview, $scope).then(function (result) {// do nothing
    });
  };

  $scope.openPostNote = function () {
    ModalService.openPostNote($scope.fullCandidate.position_id, $scope.fullCandidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.openSendOffer = function () {
    var openDialog = function openDialog() {
      dialog.confirm({
        title: "Upgrade Required",
        message: "Document Signing isn't available on your current plan. Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          $parentScope.companySettings("plan");
        }
      });
    };

    if ($scope.shared.activeCompany.company.features.document_signing !== true) {
      return openDialog();
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_offer_modal.html',
      controller: 'CandidateOfferModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.fullCandidate.position_id;
        },
        candidate: function candidate() {
          return $scope.fullCandidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.setComposerType = function (type) {
    $scope.showComposer.type = type;
  };

  $scope.checkAbility = function (type, func) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var allow = true;

    var updateCandidate = function updateCandidate(result) {
      if (result) {
        $scope.candidate = result;

        if ($scope.checkAbility.apply($scope, [type, func].concat(args)) && func) {
          $scope[func].apply($scope, args);
        }
      }
    };

    allow = $scope.position.state === "published" || $scope.globalCommunication;

    if (!allow) {
      type = 'unpublished';
    }

    if (['schedule', 'email', 'questionnaire'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.email_address;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['SMS'].indexOf(type) > -1) {
      allow = allow && $scope.candidate.phone_number;

      if (!allow) {
        ReasonService.getMessage(type, $scope.candidateCopy).then(updateCandidate);
      }
    } else if (['unpublished'].indexOf(type) > -1) {
      ReasonService.getMessage(type).then();
    }

    return allow;
  };

  $scope.openSendQuestionnaire = function () {
    if (FeaturesService.actions.block('questionnaires')) return;
    ModalService.openSendQuestionnaire($scope.fullCandidate.position_id, $scope.fullCandidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.removeTag = function ($index) {
    $scope.fullCandidate.tags.splice($index, 1);
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, $scope.fullCandidate.tags, function (error, finalTags) {});
  };

  $scope.addTags = function () {
    if (!$scope.newTags.text) {
      $scope.toggleAddTags();
      return;
    }

    var newTags = $scope.newTags.text.split(',');
    var tags = $scope.fullCandidate.tags;

    if (!tags) {
      tags = [];
    }

    var all = tags.concat(newTags);
    var keys = {};

    for (var i in all) {
      var tag = all[i].toLowerCase().trim();

      if (tag && tag.length > 0) {
        keys[tag] = true;
      }
    }

    var allTags = Object.keys(keys).sort();
    $scope.appClient.setCandidateTags($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, allTags, function (error, finalTags) {
      $scope.newTags.text = '';
      $scope.fullCandidate.tags = allTags;
      $scope.toggleAddTags();
    });
  };

  $scope.toggleAddTags = function () {
    $scope.showAddTags = !$scope.showAddTags;
  };

  $scope.openAddTags = function () {
    ModalService.addTags('candidate', $scope.fullCandidate.tag_list, null).then(function (tags) {
      $scope.fullCandidate.tag_list = tags;
      TaggingService.set($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, tags).then(function (tags) {
        $scope.fullCandidate.tags = tags;
      });
    });
  };

  var deleteCandidate = function deleteCandidate(candidateId) {
    console.log("Delete candidate: " + candidateId);
    var index = -1;

    for (var i in $scope.conversations) {
      if ($scope.conversations[i].candidate_id === candidateId) {
        index = i;
        break;
      }
    }

    if (index > -1) {
      $scope.conversations.splice(index, 1);
    }

    if ($scope.candidate._id == candidateId) {
      delete $scope.selected;
      delete $scope.candidate;
      delete $scope.fullCandidate;
      delete $scope.conversation;
    }
  };

  $scope.assignCandidate = function (member) {
    var fullMember = angular.copy(member);
    member = member === 'unassign' ? null : member._id;
    var header;
    var message;

    if (fullMember && fullMember._id) {
      header = "Assign Candidate";
      message = "Assign " + $scope.fullCandidate.name + " to " + fullMember.name + "?";
    } else {
      header = "Unassign Candidate";
      message = "Unassign " + $scope.fullCandidate.name + " from member?";
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.assignCandidate($scope.shared.activeCompany.company._id, $scope.fullCandidate.position_id, $scope.fullCandidate._id, member, function (error, result) {
          if (!error) {
            $scope.fullCandidate.assigned_to = fullMember;
          }
        });
      }
    });
  };

  $scope.setCandidateStatus = function (candidate, stage) {
    CandidatesService.remote.updateCandidateStatus(candidate, stage, function (error, result) {
      $scope.fullCandidate.status = stage.id;
      $scope.fullCandidate.stage = stage;
    });
  };

  $scope.editTemplates = function () {
    ModalService.accountSettings('templates').then(function () {});
  };

  $rootScope.$on('candidateInterviewAdded', function (event, data) {
    if (data.object.candidate_id !== $scope.candidate._id) {
      return;
    }

    $scope.conversation.unshift(data);
  });
  $rootScope.$on('candidateDeleted', function (event, data) {
    var candidate = data.object.candidate;
    deleteCandidate(candidate._id);
  });
  $rootScope.$on('candidateConversationThreadClosed', function (event, data) {
    console.log("candidateConversationThreadClosed");
    deleteCandidate(data.candidate_id);
  });
  $rootScope.$on('messageSeenByCandidate', function (event, data) {
    console.log("messageSeenByCandidate");

    if (data.candidate_id == $scope.selected.candidate._id) {
      for (var i in $scope.conversation) {
        var message = $scope.conversation[i];

        if (message._id === data.message_id) {
          console.log("Message found for messageSeenByCandidate");
          message.last_message_seen = new Date();
        }
      }
    }
  });
  $rootScope.$on('candidateTagsSet', function (event, data) {
    if (data.object.candidate_id != $scope.fullCandidate._id) {
      return;
    }

    $scope.fullCandidate.tags = data.object.tags;
  }); // candidate messaging

  $rootScope.$on('candidateConversationMessagePosted', function (event, data) {
    console.log('candidateConversationMessagePosted'); // if current conversation prepend data

    if ($scope.candidate && data.object.candidate_id === $scope.candidate._id) {
      //$scope.conversation.unshift(data);
      $scope.updateCandidateConversation(data);
    } // find thread


    var index = -1;

    for (var i = 0; i < $scope.conversations.length; i++) {
      var candidate = $scope.conversations[i];

      if (candidate._id === data.object.candidate_id) {
        index = i;
      }
    } // create datastruct


    var conversation = data.object;
    conversation.from = {
      _id: data.object.acting_user._id,
      google_mail: null,
      hex_color: data.object.acting_user.hex_color,
      initial: data.object.acting_user.initial,
      name: data.object.acting_user.name,
      profile_photo_url: data.object.acting_user.profile_photo_url
    };
    conversation.last_message_date = data.timestamp; // update thread

    if (index < 0) {
      $scope.conversations.unshift(conversation);
    } else {
      $scope.conversations[index].body = conversation.body;
      $scope.conversations[index].from = conversation.from;
      $scope.conversations[index].last_message_date = conversation.last_message_date;
    } // reposition to top if necessary


    if (index > 0) {
      $scope.conversations.unshift($scope.conversations.splice(index, 1)[0]);
    }
  });

  $scope.updateCandidateConversation = function (data) {
    var index = $scope.conversation.findIndex(function (c) {
      return c._id === data._id;
    });

    if (index > -1) {
      //console.log('already had')
      $scope.conversation[index] = data;
    } else {
      //console.log('new!')
      $scope.conversation.unshift(data);
    }
  };
}]);
'use strict';

angular.module('appController').directive('onFinishRender', function ($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, element, attr) {
      if (scope.$last === true) {
        $timeout(function () {
          scope.$evalAsync(attr.onFinishRender);

          if (scope.stagesInitializing) {
            scope.stageLoaded();
          }
        }, 0);
      }
    }
  };
});
angular.module('appController').directive('breezyStage', ['$rootScope', '$templateRequest', '$compile', 'CandidatesService', 'ModalService', 'dialog', function ($rootScope, $templateRequest, $compile, CandidatesService, ModalService, dialog) {
  return {
    restrict: 'E',
    scope: false,
    //templateUrl: '/templates/v2/app/position/_stage.html',
    link: function link(scope, element, attrs) {
      var stageTemplate = '/templates/v2/app/position/_stage.html';

      if (scope.stage.id === 'orphaned') {
        stageTemplate = '/templates/v2/app/position/_stage_orphaned.html';
      }

      $templateRequest(stageTemplate).then(function (html) {
        //console.log(`${scope.candidate.name} is updating`);
        var template = angular.element(html);
        element.append(template);
        $compile(template)(scope); //console.log(element[0].querySelector('.candidate-list'));

        var candidateList = angular.element(element[0].querySelector('.candidate-list')); // load more candidates on scroll

        candidateList.bind('scroll', onScroll);
      }); //console.log('candidate list:');
      //console.log(candidateList);

      scope.fetching = false; // populate initial candidates for stage

      /*scope.stageCandidates = CandidatesService.local.getByStage(scope.stage.id, scope.filter);
      if (scope.stageCandidates.data.length === 0) {
          scope.stageLoaded();
      }*/

      var onScroll = function onScroll(e) {
        //console.log('scrolling');
        if (scope.stageCandidates.data.length === scope.stageCandidates.count) {
          return;
        }

        if (!scope.fetching && this.scrollTop + this.clientHeight * 3 > this.scrollHeight) {
          scope.$apply(function () {
            scope.fetching = true;
          });
          var moreCandidates = CandidatesService.local.getMoreByStage(scope.stage.id, scope.stageCandidates.data.length, scope.filter);
          scope.stageCandidates.data = scope.stageCandidates.data.concat(moreCandidates);
        }
      };

      scope.onDrop = function (stageId, candidate) {
        ga('send', 'event', 'candidateDropStage', 'click', 1);
        $rootScope.$broadcast('quickdrop:hide', candidate);
        CandidatesService.remote.updateCandidateStatus(candidate, scope.stage);
      };

      scope.doneFetching = function () {
        scope.fetching = false;
      };

      scope.toggleStageExpand = function () {
        ga('send', 'event', 'toggleStageExpand', 'click', 1);
        scope.stageExpand = !scope.stageExpand;
      };

      scope.$on('pipeline:refresh', function () {
        scope.stageCandidates = CandidatesService.local.getByStage(scope.stage.id, scope.filter);

        if (scope.stageCandidates.data.length === 0) {
          scope.stageLoaded();
        }
      });
      scope.$on("pipeline:".concat(scope.positionId, ":").concat(scope.stage.id), function () {
        scope.stageCandidates = CandidatesService.local.getByStage(scope.stage.id, scope.filter);
      });
    }
  };
}]);
var firstCandidate = true;
angular.module('appController').directive('breezyCandidateCard', ['$rootScope', '$templateRequest', '$compile', 'UserService', 'CandidatesService', function ($rootScope, $templateRequest, $compile, UserService, CandidatesService) {
  return {
    restrict: 'E',
    require: '?^breezyStage',
    scope: false,
    link: function link(scope, element, attrs) {
      var candidateTemplate = '/templates/v2/app/position/_candidate.html';
      var candidateCuesTemplate = '/templates/v2/app/position/_candidate_with_cues.html';
      var candidateStaticTemplate = '/templates/v2/app/position/_candidate_static.html';
      var seen_candidate_card = UserService.getters.cue('seen_candidate_card'); //console.log(`seen_candidate_card = ${seen_candidate_card}`);

      if (seen_candidate_card && firstCandidate && scope.$first === true) {
        candidateTemplate = candidateCuesTemplate;
        firstCandidate = false;
      } else if (scope.candidate.stale) {
        candidateTemplate = candidateStaticTemplate;
      }

      $templateRequest(candidateTemplate).then(function (html) {
        //console.log(`${scope.candidate.name} is updating`);
        var template = angular.element(html);
        element.append(template);
        $compile(template)(scope);
      }); // local changes made. refresh candidate

      /*scope.$on(`candidate:${scope.candidate._id}`, function() {
          scope.candidate = CandidatesService.local.getCandidate(scope.candidate._id);
      });*/

      scope.showQuickDrop = function (candidate) {
        $rootScope.$broadcast('quickdrop:show', candidate);
      };

      scope.hideQuickDrop = function (candidate) {
        $rootScope.$broadcast('quickdrop:hide', candidate);
      };
    }
  };
}]);
angular.module('appController').directive('breezyQuickdrop', ['$timeout', function ($timeout) {
  return {
    restrict: 'A',
    scope: false,
    link: function link(scope, element, attrs) {
      var body = angular.element(document.body);
      scope.$on('quickdrop:show', function (e, candidate) {
        $timeout(function () {
          body.addClass('show-quickdrop');
          element.removeClass('hidden');
        }, 0);
      });
      scope.$on('quickdrop:hide', function (e, candidate) {
        body.removeClass('show-quickdrop');
        $timeout(function () {
          element.addClass('hidden');
        }, 300);
      });
    }
  };
}]);
angular.module('appController').directive('breezyQuickdropStage', ['$rootScope', 'CandidatesService', 'dialog', function ($rootScope, CandidatesService, dialog) {
  return {
    restrict: 'A',
    require: '?^breezyQuickdrop',
    scope: false,
    link: function link(scope, element, attrs) {
      scope.onQuickDrop = function (stage, candidate) {
        ga('send', 'event', 'candidateDropHotbar', 'click', 1);
        $rootScope.$broadcast('quickdrop:hide', candidate);
        CandidatesService.remote.updateCandidateStatus(candidate, scope.stage);
      };

      scope.$on('quickdrop:show', function (e, candidate) {
        if (scope.stage.id === candidate.stage.id) {
          //console.log(candidate);
          element.addClass('disabled');
        }
      });
      scope.$on('quickdrop:hide', function (e, candidate) {
        if (scope.stage.id === candidate.stage.id) {
          //console.log(candidate);
          element.removeClass('disabled');
        }
      });
    }
  };
}]);
angular.module('appController').controller('PositionPipelineViewCtrl', ['$scope', '$rootScope', '$location', '$uibModal', '$stateParams', 'dialog', '$cookieStore', 'CompanyService', 'CandidatesService', 'CandidatesFilterService', 'ModalService', 'FeaturesService', 'metadata', 'tags', function ($scope, $rootScope, $location, $uibModal, $stateParams, dialog, $cookieStore, CompanyService, CandidatesService, CandidatesFilterService, ModalService, FeaturesService, metadata, tags) {
  console.log('PositionPipelineViewCtrl Init');
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  $scope.globalCommunication = CompanyService.state.globalCommunication;
  $scope.selectedColumn = -1;
  $scope.selectedCard = -1;

  var getNewColumnIndex = function getNewColumnIndex(column, index, inc) {
    var data = CandidatesService.local.getByStage($scope.position.pipeline[column].id, $scope.filter, {
      all: true
    });

    if (data.count === 0 && $scope.selectedColumn < $scope.position.pipeline.length - 1) {
      $scope.selectedColumn += inc;
      return getNewColumnIndex($scope.selectedColumn, index, inc);
    } else if (data.count - 1 < index) {
      return data.count - 1;
    }

    if ($scope.selectedColumn > $scope.position.pipeline.length - 1) {
      $scope.selectedColumn = $scope.position.pipeline.length;
    }

    return index;
  };

  var initializeKeyBindings = function initializeKeyBindings() {
    Mousetrap.bind('right', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selectedColumn++;

      if ($scope.selectedColumn > $scope.position.pipeline.length - 1) {
        $scope.selectedColumn = $scope.position.pipeline.length;
      }

      $scope.selectedCard = getNewColumnIndex($scope.selectedColumn, $scope.selectedCard, 1);

      if ($scope.selectedCard === -1) {
        $scope.selectedCard = 0;
      }

      $scope.$apply();
    });
    Mousetrap.bind('left', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selectedColumn--;

      if ($scope.selectedColumn < 0) {
        $scope.selectedColumn = 0;
      }

      $scope.selectedCard = getNewColumnIndex($scope.selectedColumn, $scope.selectedCard, -1);

      if ($scope.selectedCard === -1) {
        $scope.selectedCard = 0;
      }

      $scope.$apply();
    }); // down : selected next position row

    Mousetrap.bind('down', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selectedCard++;

      if ($scope.selectedColumn > -1) {
        var count = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).count;

        if ($scope.selectedCard > count - 1) {
          $scope.selectedCard = count - 1;
        }
      }
      /*if ($scope.selected > $scope.candidates.length - 1 && $scope.candidates.length < $scope.candidatesMeta.count) {
          $scope.getMoreCandidates();
      } else if ($scope.selected > $scope.candidates.length - 1) {
          $scope.selected = 0;
      }*/


      if ($scope.selectedColumn === -1) {
        $scope.selectedColumn = 0;
      }

      $scope.$apply();
    }); // up : selected previous position row

    Mousetrap.bind('up', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selectedCard--;

      if ($scope.selectedCard < 0) {
        $scope.selectedCard = 0;
      }

      if ($scope.selectedColumn === -1) {
        $scope.selectedColumn = 0;
      }

      $scope.$apply();
    });
    Mousetrap.bind('esc', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selectedCard = -1;
      $scope.selectedColumn = -1;
      $scope.$apply();
    }); // enter : got selected position

    Mousetrap.bind('enter', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      if ($scope.selectedCard === -1) return;
      var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
        all: true
      }).data;
      var selectedCandidate = stageCandidates[$scope.selectedCard];
      ModalService.openCandidateModal(selectedCandidate.position_id, selectedCandidate._id, stageCandidates, $scope.selectedCard, {}).then(function () {//initializeKeyBindings();
      }, function () {//initializeKeyBindings();
      });
    }); // selected candidate functions

    Mousetrap.bind('n', function () {
      if ($scope.selectedCard === -1) return;
      var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
        all: true
      }).data;
      var selectedCandidate = stageCandidates[$scope.selectedCard];
      $scope.openPostNote(selectedCandidate);
      return false;
    });
    Mousetrap.bind('s', function () {
      if ($scope.selectedCard === -1) return;
      var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
        all: true
      }).data;
      var selectedCandidate = stageCandidates[$scope.selectedCard];
      CandidatesService.remote.getCandidateScorecard($scope.positionId, selectedCandidate._id).then(function (scorecard) {
        if (!scorecard) {
          scorecard = $scope.shared.activeCompany.scorecards.filter(function (scorecard) {
            return scorecard._id == $scope.position.scorecard_id;
          });
        }

        $scope.openCandidateScorecard(selectedCandidate, scorecard.scorecard);
      });
      return false;
    });

    if ($scope.position.is_admin) {
      Mousetrap.bind('m', function () {
        if ($scope.selectedCard === -1) return;
        var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).data;
        var selectedCandidate = stageCandidates[$scope.selectedCard];
        if (!$scope.canCommunicateWithCandidate(selectedCandidate)) return;
        $scope.openSendMessage(selectedCandidate);
        return false;
      });
      Mousetrap.bind('q', function () {
        if ($scope.selectedCard === -1) return;
        var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).data;
        var selectedCandidate = stageCandidates[$scope.selectedCard];
        if (!$scope.canCommunicateWithCandidate(selectedCandidate)) return;
        $scope.openSendQuestionnaire(selectedCandidate);
        return false;
      });
      Mousetrap.bind(['command+s', 'ctrl+s'], function () {
        if ($scope.selectedCard === -1) return;
        var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).data;
        var selectedCandidate = stageCandidates[$scope.selectedCard];
        ModalService.openRecentlyViewed('stage', $scope.position.pipeline).then(function (stage) {
          CandidatesService.remote.updateCandidateStatus(selectedCandidate, stage, function (error, result) {});
        });
        return false;
      });
      Mousetrap.bind(['command+d', 'ctrl+d'], function () {
        if ($scope.selectedCard === -1) return;
        $scope.gaEventTracker("CandidateDisqualified");
        var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).data;
        var selectedCandidate = stageCandidates[$scope.selectedCard];
        var stages = $scope.pipeline.filter(function (stage) {
          return stage.type && stage.type.id === 'disqualified' || stage.id === 'disqualified';
        });

        if (stages.length > 1) {
          ModalService.openRecentlyViewed('stage', stages).then(function (stage) {
            CandidatesService.remote.updateCandidateStatus(selectedCandidate, stage, function (error, result) {});
          });
        } else if (stages.length === 1) {
          dialog.confirm({
            title: "Disqualify Candidate",
            message: "Are you sure you want to move ".concat(selectedCandidate.name, " to ").concat(stages[0].name, "?")
          }, function (result) {
            if (result === true) {
              CandidatesService.remote.updateCandidateStatus(selectedCandidate, stages[0], function (error, result) {});
            }
          });
        }

        return false;
      });
      Mousetrap.bind(['command+shift+d', 'ctrl+shift+d'], function () {
        if ($scope.selectedCard === -1) return;
        var stageCandidates = CandidatesService.local.getByStage($scope.position.pipeline[$scope.selectedColumn].id, $scope.filter, {
          all: true
        }).data;
        var selectedCandidate = stageCandidates[$scope.selectedCard];
        $scope.deleteCandidate(selectedCandidate);
        return false;
      });
    }
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  });
  $scope.position.pipeline = $scope.pipeline;
  $scope.positionId = $stateParams.positionId;
  $scope.candidateId = $stateParams.candidateId;
  $scope.section = $stateParams.section;
  $scope.state = $location.search().state;
  $scope.upload = $location.search().upload;
  $scope.stagesInitializing = true;
  $scope.stagesLoadedCount = 0;
  $scope.segmentStatus = {
    changed: false
  };
  var pipelineFlat = $scope.pipeline.map(function (stage) {
    return stage.id;
  });
  var pipelineQueryIds = $scope.pipeline.map(function (stage) {
    return stage.query_id ? stage.query_id : stage.id;
  });
  CandidatesService.getCandidates($scope.positionId, pipelineFlat).then(function (candidates) {
    $scope.candidates = candidates;
    CandidatesService.local.checkForOrphanes(); //$scope.$broadcast('pipeline:refresh');
    // don't watch filters until candidates exist

    $scope.$watch('filters', watchFilters, true);
    $scope.applyFilter();
  });
  $scope.hasOrphanes = CandidatesService.local.hasOrphanes();
  $scope.$on('orphanes:update', function (event, value) {
    $scope.hasOrphanes = value;
  });
  $scope.stage = {
    id: 'orphaned',
    name: 'Orphaned',
    icon: 'exclamation'
  };

  $scope.stageLoaded = function () {
    $scope.stagesLoadedCount++;

    if ($scope.stagesLoadedCount >= $scope.position.pipeline.length) {
      $scope.stagesInitializing = false;
    }
  };

  $scope.dateRanges = [{
    date_range: 'all',
    label: 'All Time'
  }, {
    date_range: 'thisMonth',
    label: 'This Month'
  }, {
    date_range: 'lastMonth',
    label: 'Last Month'
  }, {
    date_range: 'twoWeeks',
    label: 'Last 14 Days'
  }, {
    date_range: 'last30Days',
    label: 'Last 30 Days'
  }, {
    date_range: 'last90Days',
    label: 'Last 90 Days'
  }, {
    date_range: 'last180Days',
    label: 'Last 180 Days'
  }]; //$scope.filter = $cookieStore.get('pipelineFilter');

  $scope.showCandidatesFilter = false;

  if ($cookieStore.get('showCandidatesPipelineFilter')) {
    $scope.showCandidatesFilter = $cookieStore.get('showCandidatesPipelineFilter');
  }

  $scope.toggleShowCandidatesFilter = function () {
    $scope.showCandidatesFilter = !$scope.showCandidatesFilter;
    $cookieStore.put('showCandidatesPipelineFilter', $scope.showCandidatesFilter);
  };

  var currentCandidatesFilter = null;
  var candidateFilters = {
    pipeline: $scope.pipeline,
    tags: tags,
    date_range: true,
    updated_date: true,
    candidate_type: true,
    source: metadata.sources,
    assigned: CompanyService.local.getMembersByIds($scope.position.all_users),
    sourcers: metadata.sourcers,
    referrers: metadata.referrers,
    recruiters: angular.copy($scope.shared.activeCompany.recruiters),
    unseen: true,
    starred: true
  };

  if ($scope.gdprEnabled) {
    candidateFilters.gdpr_status = [{
      id: 'all',
      name: 'All'
    }, {
      id: 'expired',
      name: 'Consent Expired'
    }, {
      id: 'consented',
      name: 'Consented'
    }, {
      id: 'pending',
      name: 'Consent Pending'
    }, {
      id: 'declined',
      name: 'Consent Declined'
    }, {
      id: "expiring",
      name: "Consent Expiring"
    }, {
      id: "needsconsent",
      name: "Needs Consent"
    }];
    candidateFilters.expiry_date = true;
  }

  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        //console.log(rule)
        filter[rule] = false;
      });
    });
  };

  $scope.filters = CandidatesFilterService.init(candidateFilters, 'PositionPipelineViewCtrl');

  $scope.getFilterIndex = function (key) {
    return Object.keys(candidateFilters).indexOf(key);
  };

  $scope.segments = CandidatesFilterService.getSegments();
  $scope.segment = $scope.segments[0];

  var checkTagOperator = function checkTagOperator(rules) {
    if (rules.length === 0 || !rules[0].hasOwnProperty('value')) {
      return false;
    } else if ($scope.tagOperatorLabel === 'AND') {
      return true;
    }

    return false;
  };

  $scope.tagOperatorLabel = 'OR';

  $scope.toggleTagOperator = function () {
    if ($scope.tagOperatorLabel === 'OR') {
      $scope.tagOperatorLabel = 'AND';
    } else {
      $scope.tagOperatorLabel = 'OR';
    } // manually run filters update


    watchFilters($scope.filters);
  };

  $scope.disabledStages = [];
  var tagsFilter = $scope.filters.options.find(function (option) {
    return option.key === 'tags';
  });
  $scope.filterButtons = {
    saveDisabled: true,
    applyDisabled: true
  };
  var manualSubmit = false;

  var watchFilters = function watchFilters(filters) {
    if (CandidatesFilterService.getActiveController() !== 'PositionPipelineViewCtrl') return;
    $scope.closeFilterDropdown();

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    var options = CandidatesFilterService.getOptions(filters);

    if (!angular.equals(options, currentCandidatesFilter)) {
      $scope.filterButtons.saveDisabled = true;
      $scope.filterButtons.applyDisabled = false; // for segment select

      if (manualSubmit) $scope.applyFilter(options);
    } else {
      $scope.filterButtons.applyDisabled = true;
    }
  };

  $scope.applyFilter = function () {
    var options = CandidatesFilterService.getOptions($scope.filters);
    delete options.stage_pipelines;

    if (checkTagOperator(tagsFilter.rules)) {
      options.tags_operator = 'and';
    }

    currentCandidatesFilter = angular.copy(options); // check active stages

    if (options.hasOwnProperty('pipeline')) {
      if (options.pipeline.hasOwnProperty('is')) {
        $scope.disabledStages = pipelineQueryIds.filter(function (id) {
          return options.pipeline.is.indexOf(id) === -1;
        });
      } else if (options.pipeline.hasOwnProperty('is_not')) {
        $scope.disabledStages = options.pipeline.is_not;
      }
    } else {
      $scope.disabledStages = [];
    }

    var match = CandidatesFilterService.segmentStatus(currentCandidatesFilter);

    if (match) {
      $scope.segmentStatus.changed = false;
      $scope.segment = match;
    } else {
      $scope.segmentStatus.changed = true;
      $scope.segment = {
        name: 'Custom Filters'
      };
    }

    options.position_ids = [$scope.position._id]; // assures company admins see candidates on this position
    // even if they are not on it

    options.all_positions = true;
    manualSubmit = false;
    CandidatesService.getFilteredCandidateIds(options).then(function () {
      $scope.$broadcast('pipeline:refresh');
    });
    $scope.filterButtons.applyDisabled = true;

    if ($scope.segmentStatus.changed) {
      $scope.filterButtons.saveDisabled = false;
    }
  };

  $scope.filterToggleActive = function () {//console.log(this);
  };

  $scope.filterRuleAdd = function () {
    //console.log(this);
    this.filter.rules.push({});
  };

  $scope.filterRuleDelete = function (filterIndex, ruleIndex) {
    $scope.filters.options[filterIndex].rules.splice(ruleIndex, 1);

    if ($scope.filters.options[filterIndex].rules.length <= 0) {
      $scope.filters.options[filterIndex].active = false;
      $scope.filters.options[filterIndex].rules.push({
        is: null
      });
    }
  };

  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        //console.log(rule)
        filter[rule] = false;
      });
    });
  };

  $scope.openAddSegment = function () {
    var options = angular.copy(currentCandidatesFilter);
    var type;

    if (options.hasOwnProperty('date_range')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'date_range';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.date_range = [type];
      }
    }

    if (options.hasOwnProperty('updated_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'updated_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.updated_date = [type];
      }
    }

    if (options.hasOwnProperty('expiry_date')) {
      type = $scope.filters.options.find(function (filter) {
        return filter.key === 'expiry_date';
      }).rules[0].value.value;

      if (type !== 'customRange') {
        options.expiry_date = [type];
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates/_add_segment_modal.html',
      controller: 'AddSegmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'candidate';
        },
        segmentData: function segmentData() {
          return options;
        }
      }
    });
    modalInstance.result.then(function (savedSegment) {
      if (savedSegment) {
        $scope.segments.push(savedSegment);
        $scope.segment = savedSegment;
        $scope.segmentStatus.changed = false;
        $scope.shared.activeCompany.segments.push(savedSegment);
        $scope.filterButtons.saveDisabled = true;
      }
    }, function () {});
  };

  $scope.setSegment = function (segmentId, segment) {
    manualSubmit = true;

    if (segment.filters.hasOwnProperty('tags_operator')) {
      $scope.tagOperatorLabel = 'AND';
    }

    ;
    CandidatesFilterService.setSegment(segmentId, segment);
    $scope.segment = segment;
  };

  $scope.card_style = $cookieStore.get('pipelineCardStyle'); //console.log(JSON.stringify($scope.card_style));

  if (!$scope.filter) {
    $scope.filter = {
      creation_date: $scope.dateRanges[0]
    };
  }

  if (!$scope.filter.candidate_type) {
    $scope.filter.candidate_type = "all";
  }

  if (!$scope.card_style || !$scope.card_style.name) {
    $scope.card_style = {
      name: "roomy"
    };
  }

  $scope.selectedDateRange = $scope.filter.creation_date;

  $scope.setDateRange = function () {
    $scope.gaEventTracker("PipelineFilterDateRange");
    $scope.selectedDateRange = this.range;
    $scope.filter.creation_date = $scope.selectedDateRange;
    $cookieStore.put('pipelineFilter', $scope.filter);
    $scope.refreshPipelines();
  };

  $scope.setCardStyle = function (type) {
    $scope.gaEventTracker("PipelineCardStyle");
    $scope.card_style.name = type;
    $cookieStore.put('pipelineCardStyle', $scope.card_style);
  };

  $scope.setCandidateType = function (type) {
    $scope.gaEventTracker("PipelineFilterCandidateType");
    $scope.filter.candidate_type = type;
    $cookieStore.put('pipelineFilter', $scope.filter);
    $scope.refreshPipelines();
  };

  $scope.refreshPipelines = function () {
    $scope.$broadcast('pipeline:refresh');
  };

  $scope.logEvent = function (message, event) {
    console.log(message);
  };

  $scope.openCandidateScorecard = function (candidate, scorecard) {
    //var scorecard = $scope.candidateScorecard ? $scope.candidateScorecard : $scope.scorecard;
    ModalService.openCandidateScorecard(scorecard, candidate).then(function (result) {});
    /*if($scope.candidateScorecard) {
        $parentScope.openCandidateScorecard($scope.candidateScorecard, $scope.candidate);
    } else {
        $parentScope.openCandidateScorecard($scope.scorecard, $scope.candidate);
    }*/
    //gaEventTracker("OpenCandidateScorecard");
  };

  $scope.openMassMoveCandidates = function (stage) {
    var _candidates = CandidatesService.local.getByStage(stage.id, {}, {
      all: true
    }).data;

    if (_candidates.length === 0) {
      dialog.alert({
        message: 'Sorry, there are no candidates listed in this stage.'
      });
      return false;
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_move_stage_modal.html',
      controller: 'CandidateMoveModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return _candidates;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  var selected_stage = null;

  $scope.openAddPositionStageActions = function (stage) {
    selected_stage = angular.copy(stage);

    if (!$scope.position.stage_actions) {
      $scope.position.stage_actions = {};
    }

    var overrides = $scope.position.stage_actions[selected_stage.id] || null;
    ModalService.openAddPositionStageActions($scope.position.all_admins, overrides, selected_stage, $scope.pipelineFull).then(function (result) {
      if (result) {
        $scope.position.stage_actions[selected_stage.id] = result; //stage.action_count = getStageActionCount(result, stage);

        var updateFunc = $scope.appClient.updatePosition;

        if ($scope.position.org_type && $scope.position.org_type === "pool") {
          updateFunc = $scope.appClient.updatePool;
        }

        updateFunc($scope.position._id, {
          stage_actions: $scope.position.stage_actions
        }, $scope.shared.activeCompany.company._id, function (error, result) {//console.log(result);
        });
      }
    });
  };

  $scope.canCommunicateWithCandidate = function (candidate) {
    return candidate.email_address && ($scope.position.state === "published" || $scope.globalCommunication);
  };

  $scope.openMassPostMessage = function (candidates) {
    var _candidateIds = [];

    for (var i in candidates) {
      _candidateIds.push(candidates[i]._id);
    }

    if (_candidateIds.length === 0) {
      dialog.alert({
        message: 'Sorry, there are no candidates listed in this stage.'
      });
      return false;
    }

    if (!$scope.shared.activeCompany.company.features.bulk_candidate_messaging) {
      if (_candidateIds.length > 1) {
        dialog.confirm({
          title: "Upgrade Required",
          message: "Candidate mass-emailing is only available on paid subscriptions. Would you like to review upgrade options?"
        }, function (result) {
          if (result === true) {
            //$scope.companySettings("plan");
            ModalService.companySettings("plan").then(function (result) {// do nothing
            });
          }
        });
        return false;
      }
    }

    var creationDate = new Date($scope.shared.activeCompany.company.creation_date);

    if (_candidateIds.length > 1) {
      console.log((new Date().getTime() - creationDate.getTime()) / (1000 * 60 * 60 * 24));

      if ((new Date().getTime() - creationDate.getTime()) / (1000 * 60 * 60 * 24) < 1) {
        dialog.alert({
          title: "Mass-Messaging",
          message: "Candidate mass-emailing will be enabled 24 hours after creating your company. Need it sooner? Email support@breezyhr.com."
        }, function (result) {});
        return;
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return _candidateIds;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openMassPostNote = function (candidates) {
    var _candidateIds2 = [];

    for (var i in candidates) {
      _candidateIds2.push(candidates[i]._id);
    }

    if (_candidateIds2.length === 0) {
      dialog.alert({
        message: 'Sorry, there are no candidates listed in this stage.'
      });
      return false;
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_post_note_modal.html',
      controller: 'CandidateNoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return _candidateIds2;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {//$scope.selectedCandidateIds = [];
    });
  };

  $scope.openMassSendQuestionnaire = function (candidates) {
    var _candidateIds3 = [];

    for (var i in candidates) {
      _candidateIds3.push(candidates[i]._id);
    }

    if (_candidateIds3.length === 0) {
      dialog.alert({
        message: 'Sorry, there are no candidates listed in this stage.'
      });
      return false;
    }

    if (!$scope.shared.activeCompany.company.features.bulk_candidate_messaging) {
      if (_candidateIds3.length > 1) {
        dialog.confirm({
          title: "Upgrade Required",
          message: "Candidate mass-messaging is only available on paid subscriptions. Would you like to review upgrade options?"
        }, function (result) {
          if (result === true) {
            //$scope.companySettings("plan");
            ModalService.companySettings("plan").then(function (result) {// do nothing
            });
          }
        });
        return false;
      }
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_questionnaire_modal.html',
      controller: 'CandidateQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return null;
        },
        candidateIds: function candidateIds() {
          return _candidateIds3;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  $scope.deleteCandidates = function (stage, candidates) {
    var candidateIds = [];

    for (var i in candidates) {
      candidateIds.push(candidates[i]._id);
    }

    if (candidateIds.length === 0) {
      dialog.alert({
        message: 'Sorry, there are no candidates listed in this stage.'
      });
      return false;
    }

    var header = "Delete Candidates";
    var message = 'Are you sure you want to delete these candidates?';

    if (candidateIds.length == 1) {
      header = "Delete Candidate";
      message = 'Are you sure you want to delete this candidate?';
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidates($scope.shared.activeCompany.company._id, candidateIds, function (error, result) {});
        setTimeout(function () {}, 500);
      }
    });
    /*$scope.openConfirm(header, message, function (result) {
        if(result === true) {
            $scope.appClient.deleteCandidates($scope.shared.activeCompany.company._id, candidateIds, function (error, result) {});
            setTimeout(function () {
            }, 500);
        }
    });*/
  };

  $scope.deleteCandidate = function (candidate) {
    var header = "Delete Candidate";
    var message = "Are you sure you want to delete this candidate?";
    /*$scope.openConfirm(header, message, function (result) {
        if(result === true) {
            $scope.appClient.deleteCandidate($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, function (error, result) {
             });
        }
    });*/

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCandidate($scope.shared.activeCompany.company._id, candidate.position_id, candidate._id, function (error, result) {});
      }
    });
  };

  $scope.scheduleInterview = function (candidate) {
    ModalService.openPanelInterview($scope.positionId, candidate, null).then(function (result) {// do nothing
    });
  };

  $scope.openSendQuestionnaire = function (_candidate) {
    if (FeaturesService.actions.block('questionnaires')) return;
    $scope.gaEventTracker("OpenSendQuestionnaire");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_questionnaire_modal.html',
      controller: 'CandidateQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return _candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
  };

  $scope.openPostMessage = function () {
    $scope.gaEventTracker("OpenPostMessage");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return $scope.candidate;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openCopyCandidateModal = function (_candidate2) {
    $scope.gaEventTracker("OpenCopyCandidateModal");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/copy/index.html',
      controller: 'CandidateCopyModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return _candidate2;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.openPostNote = function (candidate) {
    $scope.gaEventTracker("OpenPostNote");
    ModalService.openPostNote($scope.positionId, candidate).then(function (result) {// do nothing
    });
  };

  $scope.openSendMessage = function (_candidate3) {
    $scope.gaEventTracker("OpenPostMessage"); // for template vars

    _candidate3.position.name = $scope.position.name;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_send_message_modal.html',
      controller: 'CandidateMessageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        positionId: function positionId() {
          return $scope.positionId;
        },
        candidate: function candidate() {
          return _candidate3;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        }
      }
    });
  };

  $scope.openMessageActionModal = function (_position, _candidate4, _template, _subjectTemplate) {
    $scope.gaEventTracker("OpenMessageAction");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate/candidate_message_action_modal.html',
      controller: 'CandidateMessageActionModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position;
        },
        candidate: function candidate() {
          return _candidate4;
        },
        candidateIds: function candidateIds() {
          return null;
        },
        candidates: function candidates() {
          return null;
        },
        template: function template() {
          return _template;
        },
        subjectTemplate: function subjectTemplate() {
          return _subjectTemplate;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };

  $scope.uploadCandidate = function (position, stage) {
    ModalService.openAddCandidate($scope.position, stage).then(function () {// do nothing
    });
  };

  $scope.setPositionState = function (position, state) {
    var result = confirm("Set this position to: " + state + "?");

    if (!result) {
      return;
    }

    $scope.appClient.setPositionState(state, position._id, $scope.shared.activeCompany.company._id, function (error) {
      position.state = state;
      position.updated_date = new Date();
      $scope.shared.activeCompany.positions[position._id].state = state;
      $scope.shared.activeCompany.positions[position._id].updated_date = position.updated_date;
    });
  };

  var deleteCandidate = function deleteCandidate(candidateId, status) {
    var index = -1;

    if (!$scope.candidatesInStage[status]) {
      return;
    }

    for (var i = 0; i < $scope.candidatesInStage[status].length; i++) {
      if ($scope.candidatesInStage[status][i]._id == candidateId) {
        index = i;
        break;
      }
    }

    if (index > -1) {
      $scope.candidatesInStage[status].splice(index, 1);
    }
  };

  $scope.editStageActions = function (stage) {
    if ($scope.position.stage_actions && $scope.position.stage_actions[stage.id]) {
      $scope.openEditPositionStageActions(stage);
    } else if ($scope.shared.activeCompany.company.is_admin) {
      var index = $scope.pipelineFull.pipeline.findIndex(function (s) {
        return s.id === stage.id;
      });
      $scope.openEditPipelineStageActions(index, stage);
    }
  };

  $scope.openEditPositionStageActions = function (stage) {
    var selected_stage = angular.copy(stage);
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/actions/position.pipeline.stage.html',
      controller: 'PositionStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position_admins: function position_admins() {
          return $scope.position.admins;
        },
        overrides: function overrides() {
          return $scope.position.stage_actions[selected_stage.id] || null;
        },
        stage: function stage() {
          return selected_stage;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.position.stage_actions[selected_stage.id] = result;
        $scope.appClient.updatePosition($scope.position._id, {
          stage_actions: $scope.position.stage_actions
        }, $scope.shared.activeCompany.company._id, function (error, result) {});
      }
    }, function () {});
  };

  $scope.openEditPipelineStageActions = function (index, _stage) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_stage_modal.html',
      controller: 'AddStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.pipelineFull.pipeline[index] = result;
        $scope.appClient.updatePipeline($scope.shared.activeCompany.company._id, $scope.pipelineFull._id, $scope.pipelineFull, function (error, result) {});
      }
    }, function () {});
  };

  $scope.isCandidateScored = function (candidate) {
    return $scope.appClient.isCandidateScored(candidate);
  };

  $scope.isCandidateUnseen = function (candidate) {
    return $scope.appClient.isCandidateUnseen(candidate);
  };

  $scope.isCandidateFollowed = function (candidate) {
    return $scope.appClient.isCandidateFollowed(candidate);
  };

  $scope.toggleFollowCandidate = function (candidate) {
    return $scope.appClient.toggleFollowCandidate(candidate, function () {});
  };

  $scope.isCandidateStarred = function (candidate) {
    return $scope.appClient.isCandidateStarred(candidate);
  };

  $scope.toggleStarCandidate = function (candidate) {
    return $scope.appClient.toggleStarCandidate(candidate, function () {
      $rootScope.$broadcast('toggleStarCandidate', {
        name: candidate.name,
        _id: candidate._id,
        position_id: candidate.position_id
      });
    });
  }; // position init


  var initialize = function initialize() {
    if ($scope.candidateId && $scope.positionId) {
      $scope.navigateToCandidate($scope.candidateId, $scope.positionId, $scope.section);
    }

    if ($scope.upload) {
      $scope.uploadCandidate($scope.position);
    }
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('CompanyTasksViewCtrl', ['$scope', 'SharedData', '$state', '$stateParams', '$uibModal', 'TasksService', 'CompanyService', 'PositionsService', 'CandidatesService', 'PipelinesService', 'TaggingService', 'ModalService', 'dialog', 'FeaturesService', function ($scope, SharedData, $state, $stateParams, $uibModal, TasksService, CompanyService, PositionsService, CandidatesService, PipelinesService, TaggingService, ModalService, dialog, FeaturesService) {
  if (FeaturesService.actions.block('tasks')) {
    if ($scope.position) {
      $state.go('company.position.pipeline', {
        positionId: $scope.position._id
      });
    } else {
      $state.go('company.home');
    }
  }

  $scope.shared = SharedData;
  $scope.selectedTask = null;
  $scope.filters = [{
    label: 'Tasks Assigned To Me',
    value: 'member'
  }, {
    label: 'Tasks I\'ve Assigned',
    value: 'creator'
  }];

  if ($scope.position && $scope.position.is_admin) {
    $scope.filters.push({
      label: 'Tasks Assigned to Team',
      value: 'team'
    });
  }

  $scope.taskView = {
    type: 'incomplete'
  };
  $scope.loadingTasks = true;
  $scope.candidate = null;
  $scope.assignedBy = null;
  $scope.taskGroupOrder = ['overdue', 'today', 'upcoming', 'complete'];
  $scope.$watch('taskView.type', function (filter, oldFilter) {
    if (filter === oldFilter) return;

    if (filter === 'incomplete') {
      TasksService.setFilters(['overdue', 'today', 'upcoming']);
    }

    if (filter === 'complete') {
      TasksService.setFilters(['complete']);
    }

    if (filter === 'all') {
      TasksService.setFilters(['complete', 'overdue', 'today', 'upcoming']);
    }

    $scope.refreshTasks();
  }, true);

  $scope.completeTask = function (task, event) {
    dialog.confirm({
      title: "Mark task complete?"
    }, function (result) {
      if (result === false) return;
      TasksService.markComplete(task).then(function (done) {
        $scope.selectTask();
      });
    });

    if (event) {
      event.stopPropagation();
    }
  };

  $scope.deleteTask = function (task) {
    dialog.confirm({
      title: "Delete task?"
    }, function (result) {
      if (result === false) return;
      TasksService.deleteTask(task).then(function (done) {// do nothing
      });
    });
  };

  $scope.refreshTasks = function () {
    //console.log('refreshing ' + $scope.selectedFilter.value);
    var options = {
      type: $scope.selectedFilter.value
    };

    if ($scope.position) {
      options.positionId = $scope.position._id;
    }

    TasksService.getTasks(options).then(function (tasks) {
      $scope.myTasks = TasksService.getTasksByGroupType();
      $scope.showTasks = TasksService.showTasks();

      if (!$scope.selectedTask || !TasksService.getTaskById($scope.selectedTask._id)) {
        $scope.selectedTask = null;
        $scope.selectTask();
      }
    });
  };

  $scope.selectTask = function (taskId) {
    //$scope.position = null;
    //$scope.pipeline = null;
    //$scope.members = null;
    $scope.candidate = null;
    $scope.metadata = null;

    if (taskId) {
      $scope.selectedTask = TasksService.getTaskById(taskId);
    }

    if (!$scope.selectedTask) {
      $scope.selectedTask = TasksService.getFirstTask(); //$scope.selectedTask = $scope.myTasks[0];
    }

    if (!$scope.selectedTask) {
      return;
    }

    if ($scope.position) {
      $state.go('company.position.task', {
        companyFriendlyId: $scope.shared.activeCompany.company.friendly_id,
        positionId: $scope.position._id,
        taskId: $scope.selectedTask._id
      }, {
        notify: false,
        inherit: false
      });
    } else {
      $state.go('company.task', {
        companyFriendlyId: $scope.shared.activeCompany.company.friendly_id,
        taskId: $scope.selectedTask._id
      }, {
        notify: false,
        inherit: false
      });
    }

    $scope.assignedBy = CompanyService.local.getMemberById($scope.selectedTask.acting_user._id);
    $scope.assignedTo = CompanyService.local.getMemberById($scope.selectedTask.users[0]);
    TasksService.getTaskMetadata($scope.selectedTask._id).then(function (metadata) {
      if (!metadata) {
        return;
      }

      $scope.metadata = metadata;
    });
  };

  $scope.editTask = function () {
    var taskCopy = angular.copy($scope.selectedTask);
    ModalService.addEditTask(taskCopy, $scope.position, $scope.candidate).then(function (task) {
      //console.log(task);
      $scope.selectedTask = task;
    });
  };

  $scope.filterTasks = function (filter) {
    $scope.selectedFilter = filter;
    $scope.refreshTasks();
  };

  $scope.$on('tasks:updated', function () {
    $scope.myTasks = TasksService.getTasksByGroupType();

    if ($scope.selectedTask) {
      $scope.selectTask($scope.selectedTask._id);
    } //$scope.refreshTasks();

  });

  var initializeTasks = function initializeTasks() {
    TasksService.resetFilters();

    if ($stateParams.status) {
      $scope.taskView.type = $stateParams.status;
      TasksService.setFilters(['complete']);
    }

    if ($stateParams.type) {
      $scope.selectedFilter = $scope.filters.find(function (filter) {
        return filter.value === $stateParams.type;
      });
    } else {
      $scope.selectedFilter = $scope.filters[0];
    }

    if ($scope.position) {
      TasksService.setPosition($scope.position._id);
    }

    var options = {
      type: $scope.selectedFilter.value
    };

    if ($scope.position) {
      options.positionId = $scope.position._id;
    }

    TasksService.getTasks(options).then(function (tasks) {
      $scope.myTasks = TasksService.getTasksByGroupType();
      $scope.showTasks = TasksService.showTasks();

      if ($stateParams.taskId) {
        $scope.selectTask($stateParams.taskId);
      } else {
        $scope.selectTask();
      }

      $scope.loadingTasks = false;
    });
  }; // should be made reusable


  $scope.setCandidateStatus = function (candidate, stage) {
    $scope.candidate.status = stage.id;
    $scope.candidate.stage = stage;
    $scope.appClient.setCandidateStatus($scope.shared.activeCompany.company._id, $scope.position._id, $scope.candidate._id, stage.id, function (error, result) {});
  };

  $scope.assignCandidate = function (member) {
    var fullMember = angular.copy(member);
    member = member === 'unassign' ? null : member._id;
    var header;
    var message;
    var assigned = true;

    if (fullMember && fullMember._id) {
      header = "Assign Candidate";
      message = "Assign " + $scope.candidate.name + " to " + fullMember.name + "?";
    } else {
      header = "Unassign Candidate";
      message = "Unassign " + $scope.candidate.name + " from member?";
      assigned = false;
    }

    dialog.confirm({
      title: header,
      message: message
    }, function (result) {
      if (result === true) {
        $scope.appClient.assignCandidate($scope.shared.activeCompany.company._id, $scope.position._id, $scope.candidate._id, member, function (error, result) {
          if (!error) {
            if (assigned) {
              $scope.candidate.assigned_to = fullMember;
            } else {
              delete $scope.candidate.assigned_to;
            }
          }
        });
      }
    });
  };

  $scope.openPostNote = function () {
    ModalService.openPostNote($scope.candidate.position_id, $scope.candidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.openAddTags = function () {
    ModalService.addTags('candidate', $scope.candidate.tag_list, null).then(function (tags) {
      $scope.candidate.tag_list = tags;
      TaggingService.set($scope.shared.activeCompany.company._id, $scope.candidate.position_id, $scope.candidate._id, tags).then(function (tags) {
        $scope.candidate.tags = tags;
      });
    });
  };

  $scope.openSendQuestionnaire = function () {
    ModalService.openSendQuestionnaire($scope.candidate.position_id, $scope.candidate, null, null).then(function (result) {// do nothing
    });
  };

  $scope.$on('taskEvent', function (event, data) {
    $scope.refreshTasks();
  });
  initializeTasks();
}]);
'use strict';

angular.module('appController').controller('UserEditViewCtrl', ['$scope', '$rootScope', '$stateParams', '$http', '$upload', '$location', function ($scope, $rootScope, $stateParams, $http, $upload, $location) {
  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#image-attachment');
    chooser.addEventListener("change", function (e) {
      console.log(this.value);
    }, false);
    chooser.click();
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.user.profile_photo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/user/avatar',
        method: 'POST',
        //, data: { myObj: $scope.somevar },
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.updateUser = function (type) {
    if (type === "password") {
      if (!$scope.user.password || !$scope.user.verify_password) {
        return;
      }
    }

    $scope.appClient.updateUser($scope.user, function (error, result) {
      if (!error) {
        $scope.shared.user = $scope.user;
      }
    });
  };

  var initialize = function initialize() {
    $scope.user = angular.copy($scope.shared.user);
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('UserSettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', 'dialog', '$parentScope', 'FeaturesService', 'ModalService', 'utils', function ($scope, $rootScope, $state, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, dialog, $parentScope, FeaturesService, ModalService, utils) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.user = {};
  $scope.userSettings = $scope.shared.activeCompany.user_settings;
  $scope.companyIntegrations = {}; // Temporary

  $scope.notificationsSettings = {};
  $scope.signature = {};
  $scope.Math = window.Math;
  $scope.gaEventTracker = $parentScope.gaEventTracker;

  $scope.closeModal = function () {
    //$uibModalInstance.close();
    $uibModalInstance.dismiss('close');
  };

  $scope.openGoogleCalendarSettings = function () {
    ModalService.openGoogleCalendarSettings($scope.user).then(function (result) {
      SharedData.user.google_calendar_write = result.google_calendar_write;
      $scope.user = result;
    });
  };

  $scope.toggleSignatureState = function () {
    $scope.user.signature.enabled = !$scope.user.signature.enabled;
  };

  $scope.getNotificationState = function (name) {
    //console.log(name)
    var option = $scope.notificationsSettings[name];

    if (option === undefined) {
      option = true;
    }

    return option;
  };

  $scope.redactorConfig = {
    multipleUpload: false,
    imageUpload: "/api/company/".concat($scope.shared.activeCompany.company._id, "/portal/media/gallery/image"),
    buttons: ['bold', 'italic', 'underline', 'image', 'link'],
    minHeight: '200px',
    maxHeight: '200px'
  };

  $scope.setNotificationState = function (name, value) {
    if (!$scope.notificationsSettings.hasOwnProperty(name)) {
      $scope.notificationsSettings[name] = false;
    }
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "profile";
    }

    $scope.activeTab = tab;
    $state.transitionTo('company.user-settings', {
      userSection: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  };

  $scope.onAvatarFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      console.log('Upload success: ' + data);

      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.user.profile_photo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/user/avatar',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.enableSlack = function () {
    if (FeaturesService.actions.block('slack_integration', {
      specific: 'slack'
    })) return;
    window.location.href = "/api/auth/slack/user?company_id=" + $scope.shared.activeCompany.company._id + "&return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/user/profile";
    $scope.gaEventTracker("SlackUserToggle");
  };

  $scope.disableSlack = function () {
    $scope.appClient.deleteSlackTokens(function (error, result) {
      $scope.userSettings.slack = false;
      $scope.shared.activeCompany.user_settings.slack = false;
    });
  };

  $scope.enableGoogleCalendar = function () {
    if (FeaturesService.actions.block('calendar_integration', {
      specific: 'google'
    })) return;
    window.location.href = "/api/auth/google?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/user/profile";
    $scope.gaEventTracker("GoogleCalendarToggle");
  };

  $scope.disableGoogleCalendar = function () {
    $scope.appClient.deleteGoogleCalendarTokens(function (error, result) {
      $scope.user.google_calendar = false;
      $scope.shared.user.google_calendar = false;
    });
  };

  $scope.enableOutlookCalendar = function () {
    if (FeaturesService.actions.block('calendar_integration', {
      specific: 'outlook'
    })) return;
    window.location.href = "/api/auth/outlook/calendar?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/user/profile";
    $scope.gaEventTracker("GoogleCalendarToggle");
  };

  $scope.disableOutlookCalendar = function () {
    $scope.appClient.deleteOutlookCalendarTokens(function (error, result) {
      $scope.user.outlook_calendar = false;
      $scope.shared.user.outlook_calendar = false;
    });
  };

  $scope.enableGoogleMail = function () {
    if (FeaturesService.actions.block('email_integration', {
      specific: 'google'
    })) return;
    window.location.href = "/api/auth/google/email?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/user/profile";
    $scope.gaEventTracker("GoogleMailToggle");
  };

  $scope.enableOutlookMail = function () {
    if (FeaturesService.actions.block('email_integration', {
      specific: 'outlook'
    })) return;
    window.location.href = "/api/auth/outlook/email?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/user/profile";
    $scope.gaEventTracker("OutlookMailToggle");
  };

  $scope.disableGoogleMail = function () {
    $scope.appClient.deleteGoogleEmailTokens(function (error, result) {
      $scope.user.google_mail = false;
      $scope.shared.user.google_mail = false;
    });
  };

  $scope.disableOutlookMail = function () {
    $scope.appClient.deleteOutlookEmailTokens(function (error, result) {
      $scope.user.outlook_mail = false;
      $scope.shared.user.outlook_mail = false;
    });
  };

  var resetState = function resetState() {
    setTimeout(function () {
      $scope.userUpdateSuccess = false;
      $scope.userUpdateFailed = false;
      delete $scope.passwordFailureMessage;
    }, 2000);
  };

  $scope.updateUser = function (type) {
    var signature = angular.copy($scope.signature);

    if (type === "password") {
      if (!$scope.user.password || !$scope.user.verifyPassword) {
        $scope.userUpdateFailed = true;
        $scope.passwordFailureMessage = "You forgot to enter a password.";
        resetState();
        return;
      }

      if ($scope.user.password.length < 6) {
        $scope.userUpdateFailed = true;
        $scope.passwordFailureMessage = "Your password must be at least 6 characters.";
        resetState();
        return;
      }

      if ($scope.user.password != $scope.user.verifyPassword) {
        $scope.userUpdateFailed = true;
        $scope.passwordFailureMessage = "Your passwords don't match.";
        resetState();
        return;
      }
    }

    $scope.user.signature.body = utils.HTMLtoMarkdown(signature.body);
    $scope.userUpdateSuccess = false;
    $scope.userUpdateFailed = false;
    $scope.appClient.updateUser($scope.user, function (error, result) {
      delete $scope.user.password;
      delete $scope.user.verifyPassword;

      if (!error) {
        $scope.shared.user = angular.extend($scope.user, result);
        $scope.userUpdateSuccess = true;
        $rootScope.$broadcast("userUpdated", {
          'user': $scope.user
        });
      } else {
        $scope.userUpdateFailed = true;
      }

      resetState();
    });
  };

  $scope.updateNotificationSettings = function () {
    $scope.userUpdateSuccess = false;
    $scope.userUpdateFailed = false;
    $scope.appClient.updateNotificationSettings($scope.notificationsSettings, function (error, result) {
      if (!error) {
        $scope.userUpdateSuccess = true;
      } else {
        $scope.userUpdateFailed = true;
      }

      setTimeout(function () {
        $scope.userUpdateSuccess = false;
        $scope.userUpdateFailed = false;
      }, 2000);
    });
  };

  var initialize = function initialize() {
    $scope.user = {
      'name': $scope.shared.user.name,
      'profile_photo_url': $scope.shared.user.profile_photo_url,
      'url': $scope.shared.user.url,
      'google_email_address': $scope.shared.user.google_email_address,
      'google_calendar': $scope.shared.user.google_calendar,
      'google_calendar_write': $scope.shared.user.google_calendar_write,
      'outlook_calendar': $scope.shared.user.outlook_calendar,
      'outlook_calendar_write': $scope.shared.user.outlook_calendar_write,
      'google_mail': $scope.shared.user.google_mail,
      'outlook_mail': $scope.shared.user.outlook_mail,
      'signature': $scope.shared.user.signature
    };

    if (!$scope.user.signature) {
      $scope.user.signature = {
        'enabled': false,
        'body': "-\r\n" + $scope.user.name
      };
    }

    $scope.signature.body = utils.markdownToHTML($scope.user.signature.body);
    $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
      $scope.companyIntegrations = result;
    });
    $scope.appClient.getNotificationSettings(function (error, result) {
      if (result) {
        //console.log(result);
        $scope.notificationsSettings = result;
      }
    });
  };

  initialize();
  $scope.setTabActive(defaultTab);
}]);
'use strict';

angular.module('appController').controller('GoogleCalendarSettingsModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'dialog', 'user', function ($scope, $uibModalInstance, AppClient, dialog, user) {
  $scope.appClient = AppClient;
  $scope.user = user;

  if ($scope.user.google_calendar_write === undefined) {
    $scope.user.google_calendar_write = false;
  }

  $scope.saveChanges = function () {
    AppClient.updateUser({
      google_calendar_write: $scope.user.google_calendar_write
    }, function () {
      $uibModalInstance.close($scope.user);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);
'use strict';

angular.module('appController').controller('CompanyPositionsGridViewCtrl', ['$scope', 'AppClient', 'SharedData', '$state', '$cookieStore', 'CompanyService', 'PositionsService', 'PositionsFilterService', 'FeaturesService', 'categories', 'tags', '$uibModal', 'dialog', '$timeout', '$filter', function ($scope, AppClient, SharedData, $state, $cookieStore, CompanyService, PositionsService, PositionsFilterService, FeaturesService, categories, tags, $uibModal, dialog, $timeout, $filter) {
  $scope.selected = -1;

  var initializeKeyBindings = function initializeKeyBindings() {
    Mousetrap.bind('down', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected++;

      if ($scope.selected > $scope.positions.length - 1) {
        $scope.selected = 0;
      }

      $scope.$apply();
    }); // up : selected previous position row

    Mousetrap.bind('up', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected--;

      if ($scope.selected < 0) {
        $scope.selected = $scope.positions.length - 1;
      }

      $scope.$apply();
    });
    Mousetrap.bind('esc', function () {
      var modalOpen = document.querySelector('.modal-backdrop');
      if (modalOpen) return;
      $scope.selected = -1;
      $scope.$apply();
    }); // enter : got selected position

    Mousetrap.bind('enter', function () {
      if ($scope.selected === -1) return;
      var sortedPositions = $filter('orderBy')($scope.positions, $scope.predicate, $scope.reverse);
      var item = sortedPositions[$scope.selected];
      $state.go('company.position.pipeline', {
        positionId: item._id
      });
      return false;
    }); // check selected position

    Mousetrap.bind('space', function () {
      if ($scope.selected === -1) return;
      var sortedPositions = $filter('orderBy')($scope.positions, $scope.predicate, $scope.reverse);
      sortedPositions[$scope.selected].checked = !sortedPositions[$scope.selected].checked;
      $scope.$apply();
      return false;
    }); // check all position

    Mousetrap.bind('shift+space', function () {
      $scope.checkAll = true;
      $scope.toggleCheckAll();
      return false;
    });
  };

  initializeKeyBindings();
  $scope.$on('reinitializeKeyBindings', function () {
    initializeKeyBindings();
  });
  console.log('CompanyPositionsGridViewCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.positions = []; // PositionsService.local.getAllPositions();

  $scope.checkAll = false;
  $scope.checkedPositionIds = [];
  $scope.predicate = 'state';
  $scope.reverse = true;
  $scope.limit = 50;
  $scope.isViewInitialized = false;
  $scope.segmentStatus = {
    changed: false
  };
  $scope.showCandidatesFilter = true;

  if (typeof $cookieStore.get('showPositionsGridFilter') !== 'undefined') {
    $scope.showCandidatesFilter = $cookieStore.get('showPositionsGridFilter');
  }

  $scope.toggleShowCandidatesFilter = function () {
    $scope.showCandidatesFilter = !$scope.showCandidatesFilter;
    $cookieStore.put('showPositionsGridFilter', $scope.showCandidatesFilter);
    $cookieStore.get('showPositionsGridFilter');
  };

  $scope.filterDropdownOpen = [];

  $scope.closeFilterDropdown = function () {
    $scope.filterDropdownOpen.forEach(function (filter) {
      Object.keys(filter).forEach(function (rule) {
        //console.log(rule)
        filter[rule] = false;
      });
    });
  };

  $scope.workflowType = $scope.shared.activeCompany.company.approval_workflow ? $scope.shared.activeCompany.company.approval_workflow.type : 'any_admin';

  $scope.getLocation = function (location) {
    var label = '';

    if (location.is_remote) {
      label = 'Remote';
    } else if (location.name) {
      label = location.name;
    } else {
      label = 'No Location';
    }

    return label;
  };

  $scope.getPipeline = function (pipelineId) {
    pipelineId = pipelineId || 'default';
    var pipeline = $scope.shared.activeCompany.pipelines.hasOwnProperty(pipelineId) ? $scope.shared.activeCompany.pipelines[pipelineId] : $scope.shared.activeCompany.pipelines['default'];
    return pipeline ? pipeline.name : '';
  };

  $scope.columns = [{
    label: 'State',
    icon: 'circle',
    key: 'state',
    class: 'state',
    active: true,
    required: true,
    template: 'state'
  }, {
    label: 'Name',
    key: 'name',
    class: 'name',
    active: true,
    required: true,
    template: 'name'
  }, {
    key: 'promote_on',
    class: 'promote',
    active: true,
    required: true,
    template: 'promote'
  }, {
    label: 'Location',
    key: 'location.name',
    class: 'location',
    active: true,
    required: false,
    template: 'location',
    format: 'getLocation'
  }, {
    label: 'Requisition ID',
    key: 'requisition_id',
    class: 'requisition',
    active: false,
    required: false,
    template: 'default'
  }, {
    label: 'Type',
    key: 'org_type',
    class: 'orgtype',
    active: true,
    required: false,
    template: 'orgtype'
  }, {
    label: 'Tags',
    key: 'tags',
    class: 'tags',
    active: false,
    required: false,
    template: 'tags'
  }, {
    // 7
    label: 'Category',
    key: 'category.name',
    class: 'category',
    active: false,
    required: false,
    template: 'default'
  }, {
    // 8
    label: 'Pipeline',
    key: 'pipeline_id',
    class: 'pipeline',
    active: false,
    required: false,
    template: 'default',
    format: 'getPipeline'
  }, {
    // 9
    label: 'Experience',
    key: 'experience.name',
    class: 'experience',
    active: false,
    required: false,
    template: 'default'
  }, {
    // 10
    label: 'Candidates',
    icon: 'users',
    key: 'stats.applicant_count',
    class: 'candidates',
    active: true,
    required: false,
    template: 'default'
  }, {
    // 11
    label: 'Created',
    icon: 'clock',
    key: 'creation_date',
    class: 'created timestamp',
    active: true,
    required: false,
    template: 'datetime'
  }, {
    // 12
    label: 'Last Updated',
    icon: 'bolt',
    key: 'updated_date',
    class: 'updated timestamp',
    active: true,
    required: false,
    template: 'datetime'
  }, {
    // 13
    label: 'Hiring Team',
    key: 'users',
    class: 'team',
    active: true,
    required: false,
    template: 'team'
  }];
  $scope.states = [{
    label: 'Active',
    value: 'published'
  }, {
    label: 'Draft',
    value: 'draft'
  }, {
    label: 'Closed',
    value: 'closed'
  }, {
    label: 'Archived',
    value: 'archived',
    icon: 'archive'
  }]; // *** GRID HELPERS

  var active_columns = $cookieStore.get("PositionsGridColumns");

  var getDisplayColumns = function getDisplayColumns() {
    return $scope.columns.reduce(function (columns, column) {
      if (active_columns.indexOf(column.key) > -1) {
        columns.push("cell-".concat(column.class));
      }

      return columns;
    }, []).join(' ');
  };

  if (active_columns) {
    active_columns = JSON.parse(active_columns);
    $scope.columns.forEach(function (column) {
      column.active = active_columns.indexOf(column.key) > -1;
    });
  }

  $scope.$watch('columns', function (newVal, oldVal) {
    active_columns = newVal.reduce(function (acc, column) {
      if (column.active) {
        acc.push(column.key);
      }

      return acc;
    }, []); //active_columns = JSON.stringify(active_columns);

    $cookieStore.put("PositionsGridColumns", JSON.stringify(active_columns));
    $scope.displayColumns = getDisplayColumns();
  }, true);

  $scope.columnFormat = function (func, value) {
    return $scope[func](value);
  };

  $scope.toggleCheckAll = function () {
    if ($scope.checkAll) {
      $scope.checkedPositionIds = $scope.positions.map(function (position) {
        return position._id;
      });
    } else {
      $scope.checkedPositionIds = [];
    }
    /*$scope.checkedPositionIds = [];
    $scope.positions.forEach(position => {
        position.checked = $scope.checkAll;
        if ($scope.checkAll) $scope.checkedPositionIds.push(position._id);
    });*/

  };

  $scope.toggleCheck = function (e) {
    e.stopPropagation();
    var idx;

    if ($scope.checkedPositionIds.indexOf(this.position._id) === -1) {
      $scope.checkedPositionIds.push(this.position._id);
    } else {
      idx = $scope.checkedPositionIds.indexOf(this.position._id);
      if (idx > -1) $scope.checkedPositionIds.splice(idx, 1);
    }
  };

  $scope.gotoPosition = function (id) {
    $state.go('company.position.pipeline', {
      positionId: id
    }); //ui-sref='company.position.pipeline({positionId:position._id})'
  };

  $scope.getField = function (position, key) {
    return key.split('.').reduce(function (o, i) {
      return o[i] ? o[i] : '';
    }, position);
  };

  $scope.isPromoted = function (promote_on) {
    return promote_on && Object.keys(promote_on).length > 1;
  };

  $scope.toggleSortBy = function (type) {
    if ($scope.predicate == type) {
      $scope.reverse = !$scope.reverse;
    } else {
      $scope.predicate = type;

      if (type == 'state' || type == 'updated_date' || type == 'creation_date' || type == 'stats.applicant_count') {
        $scope.reverse = true;
      } else {
        $scope.reverse = false;
      }
    }
  }; // *** END GRID HELPERS
  // *** FILTERS STUFF


  var filters = {
    state: [{
      label: 'Active',
      value: 'published'
    }, {
      label: 'Draft',
      value: 'draft'
    }, {
      label: 'Closed',
      value: 'closed'
    }],
    members: angular.copy($scope.shared.activeCompany.members),
    locations: PositionsService.local.getPositionLocations(),
    categories: categories,
    pipelines: angular.copy($scope.shared.activeCompany.pipelines),
    types: true,
    tags: tags,
    created_date: true,
    updated_date: true,
    archived: true
  };
  var currentFilter = null;
  $scope.segments = PositionsFilterService.getSegments();

  if (!$scope.shared.activeCompany.company.is_admin) {
    $timeout(function () {
      $scope.setSegment($scope.segments[0]._id, $scope.segments[0]);
    });
  }

  $scope.segment = $scope.segments[0]; // positions is not an array

  $scope.filters = PositionsFilterService.init(filters);
  $timeout(function () {
    $scope.$watch('filters', function (filters) {
      $scope.closeFilterDropdown();
      var options = PositionsFilterService.getOptions(filters);

      if (!angular.equals(options, currentFilter)) {
        currentFilter = angular.copy(options); //$scope.segmentStatus.changed = true;
        //$scope.segmentStatus.changed = PositionsFilterService.segmentStatus(options);

        var match = PositionsFilterService.segmentStatus(options);

        if (match) {
          $scope.segmentStatus.changed = false;
          $scope.segment = match;
        } else {
          $scope.segmentStatus.changed = true;
          $scope.segment = {
            name: 'Custom Filters'
          };
        } // refresh candidate list with new options


        $scope.filterPositions(options);
      }
    }, true);
  });

  $scope.filterPositions = function (filters) {
    filters = filters || {};
    $scope.limit = 50;
    $scope.selected = -1;
    PositionsService.local.getFilteredPositions(filters).then(function (positions) {
      $scope.positions = positions;
    });
    $timeout(function () {
      $scope.isViewInitialized = true;
    }, 100);
  };

  $scope.filterRuleAdd = function () {
    //console.log(this);
    this.filter.rules.push({});
  };

  $scope.filterRuleDelete = function (filterIndex, ruleIndex) {
    $scope.filters.options[filterIndex].rules.splice(ruleIndex, 1);

    if ($scope.filters.options[filterIndex].rules.length <= 0) {
      $scope.filters.options[filterIndex].active = false;
      $scope.filters.options[filterIndex].rules.push({
        is: null
      });
    }
  };

  $scope.deleteSegment = function (idx) {
    var segment = $scope.segments[idx];
    var segmentId = segment._id;
    $scope.appClient.deleteSegment(segmentId, function (error, result) {
      $scope.segments.splice(idx, 1);
      var idx1 = $scope.shared.activeCompany.segments.findIndex(function (segment) {
        return segment._id === segmentId;
      });
      $scope.shared.activeCompany.segments.splice(idx1, 1);
    });
  };

  $scope.openAddSegment = function () {
    var options = angular.copy(currentFilter);

    if (options.hasOwnProperty('created_date')) {
      options.created_date = [$scope.filters.options.find(function (filter) {
        return filter.key === 'created_date';
      }).rules[0].value.value];
    }

    if (options.hasOwnProperty('updated_date')) {
      options.updated_date = [$scope.filters.options.find(function (filter) {
        return filter.key === 'updated_date';
      }).rules[0].value.value];
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidates/_add_segment_modal.html',
      controller: 'AddSegmentModalInstanceCtrl',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'position';
        },
        segmentData: function segmentData() {
          return options;
        }
      }
    });
    modalInstance.result.then(function (savedSegment) {
      if (savedSegment) {
        $scope.segment = savedSegment;
        $scope.segments.push(savedSegment);
        $scope.segmentStatus.changed = false;
        $scope.shared.activeCompany.segments.push(savedSegment);
      }
    }, function () {});
  };

  $scope.setSegment = function (segmentId, segment) {
    PositionsFilterService.setSegment(segmentId, segment);
  }; // *** END FILTER STUFF


  $scope.$on('positions:updated', function () {
    $scope.filterPositions(currentFilter);
  });

  $scope.newPosition = function (_position, _clonePosition, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };

    if (!tab) {
      tab = "description";
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          if (_position) {}

          return _position && _position._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position._id) : null;
        },
        orgType: function orgType() {
          return null;
        },
        clonePosition: function clonePosition() {
          return _clonePosition && _clonePosition._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      $scope.updatePosition(position);
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.newPool = function (_position2, _clonePosition2, tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    tab = "description";
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/new/new_pool.html',
      controller: 'PositionNewModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        position: function position() {
          return _position2 && _position2._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _position2._id) : null;
        },
        orgType: function orgType() {
          return "pool";
        },
        clonePosition: function clonePosition() {
          return _clonePosition2 && _clonePosition2._id ? PositionsService.local.getPositionDetail($scope.shared.activeCompany.company._id, _clonePosition2._id) : null;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (position) {
      $scope.updatePosition(position);
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.getMorePositions = function () {
    $scope.limit += 50;
  };

  $scope.updatePosition = function (position) {
    console.log('update this =>'); //console.log(position);
  };

  function expiredTrial() {
    if ($scope.shared.activeCompany.company.features.trial_expired === true) {
      dialog.confirm({
        title: "Expired Trial",
        message: "Sorry, your trial plan has expired. Let's upgrade!"
      }, function (result) {
        if (result === true) {
          $scope.companySettings("plan");
        }
      });
      return true;
    }
  }

  function publishedLimit(count) {
    var publishedCount = PositionsService.local.getPublishPositionCount();

    if (publishedCount + count > $scope.shared.activeCompany.company.features.position_limit) {
      dialog.confirm({
        title: "Plan Limit",
        message: "Sorry, you've hit your active pool/position limit. Let's upgrade!"
      }, function (result) {
        if (result === true) {
          $scope.companySettings("plan");
        }
      });
      return true;
    }
  }

  $scope.groupChangeState = function (state) {
    if (state === 'published') {
      if (expiredTrial()) return;else if (publishedLimit($scope.checkedPositionIds.length)) return;
    }

    var is_company_admin = $scope.shared.activeCompany.company.is_admin;
    var actions = {
      not_hiring_manager: [],
      request_approval: [],
      change_state: [],
      do_nothing: []
    };
    $scope.checkedPositionIds.forEach(function (id) {
      var position = $scope.shared.activeCompany.positions[id];

      if (!is_company_admin && !position.is_admin) {
        actions.not_hiring_manager.push(position);
      } else if (state === 'published' && FeaturesService.getters.available('job_approvals') && CompanyService.local.postingRequiresApproval() && position.org_type !== 'pool') {
        actions.request_approval.push(position);
      } else if (state !== position.state) {
        actions.change_state.push(position);
      } else {
        actions.do_nothing.push(position);
      }
    });

    if (actions.request_approval.length > 0) {
      $scope.requestPublishApproval(actions.request_approval);
    }

    actions.change_state.forEach(function (position) {
      $scope.setPositionState(position, state);
    });
    $scope.checkAll = false;
    $scope.checkedPositionIds = [];
  };

  $scope.changeState = function (state) {
    var data = this.position;
    var company = $scope.shared.activeCompany.company;

    if (!company.is_admin && !data.is_admin && !(company.approval_workflow && company.approval_workflow.type !== 'none')) {
      dialog.alert({
        message: 'Sorry, you\'re not a Hiring Manager on this.'
      });
      return false;
    }

    if (state == "published" && FeaturesService.getters.available('job_approvals') && CompanyService.local.postingRequiresApproval() && data.org_type !== 'pool') {
      $scope.requestPublishApproval([data]);
      return false;
    } // if column is null set to empty array


    if (!$scope.shared.positions[state]) {
      $scope.shared.positions[state] = [];
    }

    if (data.state != state && state === 'published') {
      var publishedCount = PositionsService.local.getPublishPositionCount();

      try {
        if (company.features.trial_expired === true) {
          dialog.confirm({
            title: "Expired Trial",
            message: "Sorry, your trial plan has expired. Let's upgrade!"
          }, function (result) {
            if (result === true) {
              $scope.companySettings("plan");
            }
          });
          return false;
        } else if (publishedCount >= company.features.position_limit) {
          dialog.confirm({
            title: "Published Limit",
            message: "Sorry, you've hit your active pool/position limit. Let's upgrade!"
          }, function (result) {
            if (result === true) {
              $scope.companySettings("plan");
            }
          });
          return false;
        } else {
          if (data.org_type !== "pool") {
            $scope.publishedModal(data);
          }
        }
      } catch (e) {}
    }

    $scope.setPositionState(data, state);
    return null;
  };

  $scope.setPositionState = function (position, state) {
    $scope.appClient.setPositionState(state, position._id, $scope.shared.activeCompany.company._id, function (error) {
      position.state = state;
      position.updated_date = new Date();
      $scope.shared.activeCompany.positions[position._id].state = state;
      $scope.shared.activeCompany.positions[position._id].updated_date = position.updated_date;
    });
  };

  $scope.cancelPublishApproval = function (position) {
    $scope.appClient.cancelPublishApproval($scope.shared.activeCompany.company._id, position._id, function (error, result) {});
  };

  $scope.requestPublishApproval = function (positions) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/request_approval.html',
      controller: 'RequestPublishApprovalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return positions.shift();
        }
      }
    });
    modalInstance.result.then(function () {
      if (positions.length > 0) {
        $scope.requestPublishApproval(positions);
      }
    }, function () {});
  };

  $scope.viewPosition = function (position) {
    var url = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/p/' + position.friendly_id + '?state=' + position.state;
    var win = window.open(url, '_blank');
    win.focus();
  };

  $scope.shareModal = function (_position3) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/share/index.html',
      controller: 'ShareModalInstanceCtrl',
      size: 'sm',
      backdrop: true,
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position3;
        }
      }
    });
  };

  $scope.reviewPosition = function (_position4) {
    var currentStateData = {
      'name': 'company.positions1',
      'params': {}
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/review_publish_request.html',
      controller: 'ReviewPublishRequestInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return _position4;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.publishedModal = function (_position5) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/index.html',
      controller: 'PublishedModalInstanceCtrl',
      size: 'sm',
      backdrop: true,
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position5;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {});
  };
}]);
'use strict';

angular.module('appController').controller('ReferralPortalSettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', '$parentScope', 'dialog', 'ModalService', 'FeaturesService', function ($scope, $rootScope, $state, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, $parentScope, dialog, ModalService, FeaturesService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.portal = angular.copy($scope.shared.activeCompany.portal);
  $scope.company = angular.copy($scope.shared.activeCompany.company);
  $scope.emailDomain = {
    'text': ''
  };
  $scope.layoutForm = {};
  $scope.appearanceForm = {};
  $scope.messagingForm = {};
  $scope.generalForm = {};
  $scope.imageState = "save";
  $scope.colors = {}; // Placeholder of colorthief

  $scope.referral_domains = [];
  $scope.redactorConfig = {
    buttons: ['bold', 'italic', 'deleted', 'underline', 'link'],
    minHeight: '200px',
    maxHeight: '200px'
  };

  $scope.setPrimaryColor = function (color) {
    var rgb = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';
    var val = color[0] + color[1] + color[2];

    if (val < 100) {
      $scope.portal.appearance.alternate_color = tinycolor(rgb).brighten().toString();
    } else {
      $scope.portal.appearance.alternate_color = tinycolor(rgb).darken().toString();
    }

    console.log('lighten: ' + $scope.portal.appearance.alternate_color);
    $scope.portal.appearance.primary_color = rgb;
  };

  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#image-attachment');
    chooser.addEventListener("change", function (e) {
      console.log(this.value);
    }, false);
    $timeout(function () {
      chooser.click();
    });
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.company.logo_url = data.url;
        $scope.portal.appearance.logo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.company._id + '/logo',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  function rgbAddOpacity() {
    var rgb = $scope.portal.appearance.primary_color.replace(/[^\d,]/g, '').split(',');
    var opacity = $scope.portal.appearance.hero ? $scope.portal.appearance.hero.opacity : 0.5;
    var rgba = null;

    if (rgb.length === 3) {
      rgb.push(opacity);
      rgba = "rgba(".concat(rgb.join(','), ")");
    } else {
      rgba = 'rgba(0,0,0,0)';
    }

    return rgba;
  }

  $scope.onFileSelect = function ($files, type) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onLogoSuccess = function onLogoSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.company.logo_url = data.url;
        $scope.portal.appearance.logo_url = data.url;
        $scope.fileUploading = undefined;
      }
    },
        onHeroSuccess = function onHeroSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.portal.appearance.hero = {
          url: data.url,
          opacity: 0.5,
          overlay: rgbAddOpacity()
        };
        $scope.fileUploading = undefined;
      }
    },
        onSuccess = type === 'hero' ? onHeroSuccess : onLogoSuccess;

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.company._id + '/logo',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.heroStyles = function () {
    var styles = '';

    if ($scope.portal.appearance.hero) {
      var rgba = rgbAddOpacity();
      $scope.portal.appearance.hero.overlay = rgba;
      styles = "background-image: linear-gradient(".concat(rgba, ", ").concat(rgba, "), url(\"").concat($scope.portal.appearance.hero.url, "\")");
    } else {
      styles = "background-color: ".concat($scope.portal.appearance.primary_color);
    }

    console.log(styles);
    return styles;
  };

  $scope.removeHero = function () {
    delete $scope.portal.appearance.hero;
  };

  $scope.updateCompany = function () {
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, $scope.company, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
        $rootScope.$broadcast("companyUpdated", {
          'company': $scope.shared.activeCompany.company
        });
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.addEmailDomain = function (domain) {
    if (!$scope.appClient.isValidDomain(domain)) {
      dialog.alert({
        title: "That isn't a domain",
        message: "Oops, it doesn't look like you've entered a valid email domain."
      }, function (result) {});
      return;
    }

    domain = domain.toLowerCase();

    if ($scope.portal.referral.domains.indexOf(domain) > -1) {
      return;
    }

    $scope.portal.referral.domains.push(domain);
    $scope.emailDomain.text = '';
  };

  $scope.removeEmailDomain = function (index) {
    $scope.portal.referral.domains.splice(index, 1);
  };

  $scope.enableReferralPortal = function () {
    if (FeaturesService.actions.block('employee_portal')) return;
    $scope.portal.referral.enabled = true;
  };

  $scope.disableReferralPortal = function () {
    $scope.portal.referral.enabled = false;
  };

  $scope.updatePortalAppearance = function (appearance) {
    if ($scope.appearanceForm.$invalid) {
      return;
    }

    console.log('Saving...');
    $scope.appearanceError = '';
    $scope.appClient.updatePortalAppearance($scope.shared.activeCompany.company._id, appearance, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.appearanceError = "Problem updating appearance";
        return;
      }

      $scope.updateSuccessAppearance = true;
      setTimeout(function () {
        $scope.updateSuccessAppearance = false;
      }, 2000);
      $scope.shared.activeCompany.portal.appearance = appearance;
      $rootScope.$broadcast("updatePortalAppearance", {
        'appearance': appearance
      });
    });
  };

  $scope.updateReferralPortal = function (messaging) {
    //console.log('Saving...');
    //$scope.portal.referral.messaging.description = $('#redactor').redactor('code.get');
    $scope.portal.referral.messaging.description = $R('#redactor', 'source.getCode');
    $scope.appClient.updateReferralPortal($scope.shared.activeCompany.company._id, $scope.portal.referral, function (error) {
      $scope.submitted = false;

      if (error) {
        $scope.socialError = "Problem updating portal";
        return;
      }

      $scope.shared.activeCompany.portal.referral = $scope.portal.referral;
      $scope.updateSuccess = true;
      setTimeout(function () {
        $scope.updateSuccess = false;
      }, 2000);
    });
  };

  $scope.closeModal = function () {
    //$uibModalInstance.close();
    $uibModalInstance.dismiss('close');
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "general";
    }

    $scope.activeTab = tab;
    $state.transitionTo('company.referral-portal-section', {
      referralPortalSection: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  };

  var initialize = function initialize() {
    $scope.company = $scope.shared.activeCompany.company;
    $scope.setTabActive(defaultTab);
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('AddCampaignModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'campaign', 'DELAY_SEND_TIMES', 'FeaturesService', function ($scope, $uibModalInstance, AppClient, SharedData, campaign, DELAY_SEND_TIMES, FeaturesService) {
  console.log('AddCampaignModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.selectedTemplate = {};
  $scope.newCampaign = {
    name: '',
    sequence: [],
    actions: {}
  };

  if (campaign) {
    $scope.newCampaign = angular.copy(campaign);
  }

  $scope.templates = angular.copy($scope.shared.activeCompany.templates);

  if ($scope.templates && $scope.templates.length > 0) {
    $scope.templates.push({
      'name': "None"
    });
  }

  $scope.templates = _.sortBy($scope.templates, 'folder_id');

  $scope.folderGroupingFn = function (item) {
    if (item && item.hasOwnProperty('folder_id')) {
      var folder = $scope.shared.activeCompany.folders['templates'].find(function (folder) {
        return folder._id === item.folder_id;
      });
      return folder.name;
    } else {
      return '';
    }
  };

  $scope.removeTemplate = function (idx) {
    $scope.newCampaign.sequence.splice(idx, 1);
  };

  $scope.addSelectedTemplate = function () {
    $scope.selectedTemplate.selected.delay = 7;
    $scope.newCampaign.sequence.push($scope.selectedTemplate.selected);
    delete $scope.selectedTemplate.selected;
  };

  $scope.add = function () {
    if ($scope.form.$invalid) {
      return;
    }

    if (!$scope.newCampaign.name) {
      return;
    }

    if ($scope.newCampaign._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateCompanyCampaign($scope.newCampaign, function (error, result) {
        $uibModalInstance.close($scope.newCampaign);
      });
    } else {
      $scope.messageStatus = "Adding...";
      $scope.appClient.addCompanyCampaign($scope.newCampaign, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]);
'use strict';

angular.module('appController').controller('AddCustomFieldModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'customField', 'FeaturesService', function ($scope, $uibModalInstance, AppClient, SharedData, customField, FeaturesService) {
  console.log('AddCampaignModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.selectedTemplate = {};
  $scope.newCustomField = {
    name: ''
  };

  if (customField) {
    $scope.newCustomField = angular.copy(customField);
  }

  $scope.add = function () {
    if ($scope.form.$invalid) {
      return;
    }

    if (!$scope.newCustomField.name) {
      return;
    }

    if ($scope.newCustomField._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateCompanyCustomField($scope.newCustomField, function (error, result) {
        $uibModalInstance.close($scope.newCustomField);
      });
    } else {
      console.log('$scope.newCustomField', $scope.newCustomField);
      $scope.messageStatus = "Adding...";
      $scope.appClient.addCompanyCustomField($scope.newCustomField, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]);
"use strict";

angular.module('appController').controller('AddFolderController', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'type', 'folder', function ($scope, $uibModalInstance, AppClient, SharedData, type, folder) {
  $scope.folder = {
    name: '',
    type: ''
  };
  $scope.editing = false;

  if (type) {
    $scope.folder.type = type;
  }

  if (folder) {
    $scope.folder = Object.assign({}, folder);
    $scope.editing = true;
  }
  /**
   * Props:
   * _id
   * name: 'name'
   * type: 'templates'
   */


  $scope.closeModal = function (result) {
    return $uibModalInstance.close(result);
  };

  $scope.deleteFolder = function () {
    var promise = Promise.resolve();

    if ($scope.folder.templates) {
      /* remove folder_id from templates */
      promise = Promise.all($scope.folder.templates.map(function (template) {
        var copy = Object.assign({}, template);
        copy.folder_id = '';
        return AppClient.updateCompanyTemplate(SharedData.activeCompany.company._id, copy, function (error, result) {
          if (error) Promise.reject(error);
          Promise.resolve(result);
        });
      }));
    }

    promise.then(function () {
      AppClient.deleteCompanyFolder($scope.folder._id, function (error, result) {
        if (error) {
          console.error('Error - ', error);
        }

        var index = SharedData.activeCompany.folders[$scope.folder.type].findIndex(function (folder) {
          return folder._id === $scope.folder._id;
        });
        SharedData.activeCompany.folders[$scope.folder.type].splice(index, 1);
        $scope.closeModal({
          deleted: true,
          result: result
        });
      });
    }).catch(function (error) {
      console.error('Error - ', error);
      $scope.closeModal();
    });
  };

  $scope.submit = function () {
    if ($scope.editing) {
      var copy = Object.assign({}, $scope.folder);
      delete copy.templates;
      delete copy.show;
      AppClient.updateCompanyFolder(copy, function (error, result) {
        if (error) {
          console.error('Error - ', error);
        }

        var updated = Object.assign($scope.folder, result);
        var index = SharedData.activeCompany.folders[updated.type].findIndex(function (folder) {
          return folder._id === updated._id;
        });

        if (index === -1) {
          index = 0;
        }

        SharedData.activeCompany.folders[updated.type][index] = updated;
        $scope.closeModal({
          editing: true,
          result: updated
        });
      });
    } else {
      AppClient.addCompanyFolder($scope.folder, function (error, result) {
        if (error) {
          console.error('Error - ', error);
        }

        if (!SharedData.activeCompany.folders[result.type]) {
          SharedData.activeCompany.folders[result.type] = [];
        }

        SharedData.activeCompany.folders[result.type].push(result);
        $scope.closeModal({
          new: true,
          result: result
        });
      });
    }
  };
}]);
'use strict';

angular.module('appController').controller('AddInterviewGuideModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'interview_guide', 'dialog', '$upload', function ($scope, $uibModalInstance, AppClient, SharedData, interview_guide, dialog, $upload) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.interview_guide = {
    'sections': [],
    'attachments': []
  };
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.questions-contraint'
  };

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.removeFileAttachment = function (idx) {
    $scope.interview_guide.attachments.splice(idx, 1);
  };

  $scope.uploadAttachment = function ($files) {
    var attachment = {
      'status': 'uploading'
    };
    $scope.interview_guide.attachments.push(attachment);
    upload($files, function (error, data) {
      if (data) {
        attachment.status = 'attached';
        attachment.file_name = data.file_name;
        attachment.url = data.url;
        attachment.content_type = data.content_type;
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.removeSection = function ($index) {
    $scope.interview_guide.sections.splice($index, 1);
  };

  $scope.removeCriteria = function (section, $index) {
    section.criteria.splice($index, 1);
  };

  $scope.addCriteria = function (section) {
    if (!section.criteria) {
      section.criteria = [];
    }

    section.criteria.push({});
  };

  $scope.add = function () {
    $scope.messageStatus = "Saving...";

    if (!$scope.interview_guide._id) {
      $scope.appClient.addInterviewGuide($scope.shared.activeCompany.company._id, $scope.interview_guide, function (error, result) {
        setTimeout(function () {
          if (result) {//$scope.shared.activeCompany.scorecards.push(result);
          }

          $uibModalInstance.close($scope.interview_guide);
        }, 500);
      });
    } else {
      $scope.appClient.updateInterviewGuide($scope.shared.activeCompany.company._id, $scope.interview_guide, function (error, result) {
        setTimeout(function () {
          $scope.interview_guide = result;
          interview_guide = result;
          $uibModalInstance.close($scope.interview_guide);
        }, 500);
      });
    }
  };

  $scope.addSection = function (type) {
    var section = {};

    if (type) {
      section.type = type;
    }

    $scope.addCriteria(section);
    $scope.interview_guide.sections.push(section);
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };

  var initialize = function initialize() {
    if (interview_guide) {
      if (!interview_guide.sections) {
        interview_guide.sections = [];
      }

      $scope.interview_guide = angular.copy(interview_guide);
    } else {
      $scope.addSection('purpose');
      $scope.addSection('questions');
    }
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('AddPipelineModalInstanceCtrl', ['$scope', '$parentScope', '$uibModalInstance', '$uibModal', 'pipeline', 'dialog', 'AppClient', 'SharedData', 'pipelineType', 'FeaturesService', function ($scope, $parentScope, $uibModalInstance, $uibModal, pipeline, dialog, AppClient, SharedData, pipelineType, FeaturesService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.pipeline = {
    type: pipelineType,
    custom: true
  };

  if (pipeline) {
    $scope.type = 'Edit';
    $scope.pipeline = pipeline;

    if (!$scope.pipeline.type) {
      $scope.pipeline.type = pipelineType;
    }
  } else {
    $scope.type = 'Add';

    if (pipelineType === "pool") {
      $scope.pipeline.pipeline = angular.copy($scope.shared.DefaultPoolPipeline);
    } else {
      $scope.pipeline.pipeline = angular.copy($scope.shared.DefaultPipeline);
    }
  }

  var availableStageActions = $scope.shared.stageActionTypes;

  var getStageActionCount = function getStageActionCount(stage) {
    var actionCount = 0;

    for (var a in availableStageActions) {
      var stageAction = availableStageActions[a];

      if (stage.actions && stage.actions[stageAction.stage_action_id]) {
        actionCount++;
      }
    }

    return actionCount;
  };

  for (var i in $scope.pipeline.pipeline) {
    var stage = $scope.pipeline.pipeline[i];
    stage.action_count = getStageActionCount(stage);
  }

  var pipeline_copy = angular.copy($scope.pipeline);
  $scope.gaEventTracker = $parentScope.gaEventTracker;
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.pipeline-stages'
  };

  $scope.openAddStage = function ($index, _stage) {
    if (FeaturesService.actions.block('custom_pipeline')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_stage_modal.html',
      controller: 'AddStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage;
        },
        pipeline: function pipeline() {
          return $scope.pipeline;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        result.action_count = getStageActionCount(result);

        if (!_stage) {
          $scope.pipeline.pipeline.push(result);
        } else {
          console.log($scope.pipeline);
          $scope.pipeline.pipeline[$index] = result;
        }
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddStage");
  };

  $scope.openSetAutoResponse = function ($index, _stage2) {
    $scope.gaEventTracker("OpenSetAutoResponse");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_set_autoresponse_modal.html',
      controller: 'SetAutoResponseModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage2;
        },
        pipeline: function pipeline() {
          return $scope.pipeline.pipeline;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.pipeline.pipeline[$index] = result;
        _stage2 = result;
        _stage2.action_count = getStageActionCount(_stage2);
      }
    }, function () {});
  };

  $scope.openSetActionResponse = function ($index, _stage3) {
    $scope.gaEventTracker("OpenSetActionResponse");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_set_response_action_modal.html',
      controller: 'SetActionResponseModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage3;
        },
        pipeline: function pipeline() {
          return $scope.pipeline.pipeline;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.pipeline.pipeline[$index] = result;
        _stage3 = result;
        _stage3.action_count = getStageActionCount(_stage3);
      }
    }, function () {});
  };

  $scope.removeStage = function (index) {
    dialog.confirm({
      title: 'Delete Stage?',
      message: 'Are you sure you want to delete this stage?'
    }, function (result) {
      if (result === true) {
        if ($scope.pipeline.pipeline[index].id === 'applied') {
          return;
        }

        $scope.pipeline.pipeline.splice(index, 1);
      }
    });
  };

  $scope.add = function () {
    if (!$scope.pipeline.name) {
      return;
    }

    $scope.messageStatus = "Adding...";
    pipeline_copy = $scope.pipeline;

    if ($scope.pipeline._id) {
      $scope.appClient.updatePipeline($scope.shared.activeCompany.company._id, $scope.pipeline._id, $scope.pipeline, function (error, result) {
        $scope.closeModal(result);
      });
    } else {
      $scope.appClient.addPipeline($scope.shared.activeCompany.company._id, $scope.pipeline, function (error, result) {
        $scope.closeModal(result);
      });
    }
  };

  $scope.$on('modal.closing', function (event, reason, closed) {
    if (!angular.equals($scope.pipeline, pipeline_copy)) {
      event.preventDefault();
      dialog.confirm({
        title: "Unsaved Changes",
        message: "Would you like to save your changes to this pipeline?"
      }, function (result) {
        if (result === true) {
          $scope.add();
        } else {
          $scope.pipeline = pipeline_copy;

          if ($scope.type !== 'Add') {
            $uibModalInstance.close(pipeline_copy);
          } else {
            $uibModalInstance.close();
          }
        }
      });
    }
  });

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };
}]);
'use strict';

angular.module('appController').controller('AddStageModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'stage', 'pipeline', 'DELAY_SEND_TIMES', 'FeaturesService', function ($scope, $uibModalInstance, AppClient, SharedData, stage, pipeline, DELAY_SEND_TIMES, FeaturesService) {
  console.log('AddStageModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.pipeline = pipeline;
  $scope.selectedActionType = {};
  $scope.newStage = {};

  if (stage) {
    $scope.newStage = angular.copy(stage);
  }

  console.log(JSON.stringify($scope.newStage));
  var isNewStage = false;

  if (!$scope.newStage.id) {
    isNewStage = true;
    $scope.newStage.id = new Date().getTime();
  }

  if (!$scope.newStage.actions) {
    $scope.newStage.actions = {};
  }

  $scope.actions = {};
  $scope.requestedStageTypes = {};
  $scope.stageActionTypes = [];
  var availableStageActions = $scope.shared.stageActionTypes.filter(function (stageActionType) {
    if (!$scope.shared.activeCompany.company.has_inovapayroll && stageActionType.id == "inovapayroll_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_bamboohr && stageActionType.id == "bamboohr_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_namely && stageActionType.id == "namely_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_zenefits && stageActionType.id == "zenefits_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_deputy && stageActionType.id == "deputy_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_goodhire && !$scope.shared.activeCompany.company.has_checkr && stageActionType.id == "backgroundcheck_result") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_criteriacorp && !$scope.shared.activeCompany.company.has_hackerrank && !$scope.shared.activeCompany.company.has_traitify && !$scope.shared.activeCompany.company.has_indeedassessments && stageActionType.id == "send_assessment") {
      return false;
    }

    return stageActionType.position_only === false;
  });

  var initalizeStageActionTypes = function initalizeStageActionTypes() {
    $scope.stageActionTypes = availableStageActions.filter(function (stageActionType) {
      return !$scope.actions[stageActionType.id] && !$scope.requestedStageTypes[stageActionType.id];
    });
  };

  $scope.resetSelectedStageAction = function () {
    $scope.selectedActionType = {};
  };

  $scope.addSelectedStageAction = function () {
    var selectedId = $scope.selectedActionType.selected.id;
    var background_checks = false,
        hris = false,
        specific = null;

    if (['backgroundcheck_result'].indexOf(selectedId) > -1) {
      background_checks = true; // update specific later

      if ($scope.shared.activeCompany.company.has_goodhire) {
        specific = 'goodhire';
      } else if ($scope.shared.activeCompany.company.has_checkr) {
        specific = 'checkr';
      }
    }

    if (['namely_create_employee', 'bamboohr_create_employee', 'zenefits_create_employee', 'inovapayroll_create_employee', 'deputy_create_employee'].indexOf(selectedId) > -1) {
      hris = true;

      if (selectedId.indexOf('namely') > -1) {
        specific = 'namely';
      } else if (selectedId.indexOf('bamboo') > -1) {
        specific = 'bamboo';
      } else if (selectedId.indexOf('inovapayroll') > -1) {
        specific = 'inovapayroll';
      } else if (selectedId.indexOf('zenefits') > -1) {
        specific = 'zenefits';
      } else if (selectedId.indexOf('deputy') > -1) {
        specific = 'deputy';
      }
    }

    if (FeaturesService.actions.block('stage_actions')) return;
    if (selectedId === 'questionnaire' && FeaturesService.actions.block('questionnaires')) return;
    if (selectedId === 'campaign' && FeaturesService.actions.block('campaigns')) return;
    if (background_checks && FeaturesService.actions.block('background_checks', {
      specific: specific
    })) return;
    if (hris && FeaturesService.actions.block('hris', {
      specific: specific
    })) return;
    $scope.requestedStageTypes[$scope.selectedActionType.selected.id] = true;
    $scope.resetSelectedStageAction();
    initalizeStageActionTypes();
  };

  $scope.removeSelectedStageAction = function (type) {
    delete $scope.requestedStageTypes[type];
    delete $scope.actions[type];
    $scope.resetSelectedStageAction();
    initalizeStageActionTypes();
  };

  $scope.showStageAction = function (type) {
    if ($scope.requestedStageTypes[type] || $scope.actions[type]) {
      return true;
    }

    return false;
  };

  $scope.hasStageActions = function () {
    for (var i in availableStageActions) {
      var found = $scope.showStageAction(availableStageActions[i].id);

      if (found === true) {
        return true;
      }
    }

    return false;
  };

  $scope.campaigns = angular.copy($scope.shared.activeCompany.campaigns);

  if ($scope.campaigns && $scope.campaigns.length > 0) {
    $scope.campaigns.push({
      'name': "None"
    });
  }

  $scope.templates = angular.copy($scope.shared.activeCompany.templates);

  if ($scope.templates && $scope.templates.length > 0) {
    $scope.templates.push({
      'name': "None"
    });
  }

  $scope.templates = _.sortBy($scope.templates, 'folder_id');

  $scope.folderGroupingFn = function (item) {
    if (item && item.hasOwnProperty('folder_id')) {
      var folder = $scope.shared.activeCompany.folders['templates'].find(function (folder) {
        return folder._id === item.folder_id;
      });
      return folder.name;
    } else {
      return '';
    }
  };

  $scope.questionnaires = angular.copy($scope.shared.activeCompany.questionnaires);

  if ($scope.questionnaires && $scope.questionnaires.length > 0) {
    $scope.questionnaires.push({
      'name': "None"
    });
  }

  $scope.assessments = angular.copy($scope.shared.activeCompany.assessments);

  if ($scope.assessments && $scope.assessments.length > 0) {
    $scope.assessments.push({
      'name': "None"
    });
  } //$scope.templateDelay = angular.copy(DELAY_SEND_TIMES);


  $scope.stageDelay = [{
    text: 'No Delay',
    delay: 0
  }];
  DELAY_SEND_TIMES.forEach(function (time) {
    $scope.stageDelay.push({
      text: "Delay ".concat(time.text),
      delay: time.delay
    });
  }); // LEGACY ACTION

  $scope.selectedTemplate = {};
  var template; //console.log(JSON.stringify(stage));

  if ($scope.newStage.action_template_id) {
    for (var i in $scope.templates) {
      template = $scope.templates[i];

      if (template._id === $scope.newStage.action_template_id) {
        $scope.selectedTemplate.template = template;
      }
    }
  }

  if ($scope.newStage.actions.message_template_id) {
    for (var j in $scope.templates) {
      template = $scope.templates[j];

      if (template._id === $scope.newStage.actions.message_template_id) {
        $scope.actions.template = template;
      }
    }
  }

  if ($scope.newStage.actions.campaign_id) {
    for (var k in $scope.campaigns) {
      var campaign = $scope.campaigns[k];

      if (campaign._id === $scope.newStage.actions.campaign_id) {
        $scope.actions.campaign = campaign;
      }
    }
  }

  if ($scope.newStage.actions.questionnaire_id) {
    for (var k in $scope.questionnaires) {
      var questionnaire = $scope.questionnaires[k];

      if (questionnaire._id === $scope.newStage.actions.questionnaire_id) {
        $scope.actions.questionnaire = questionnaire;
      }
    }
  }

  var delay;

  if ($scope.newStage.actions.message_delay) {
    for (var m in $scope.stageDelay) {
      delay = $scope.stageDelay[m];

      if (delay.delay === $scope.newStage.actions.message_delay) {
        $scope.actions.message_delay = delay;
      }
    }
  } else {
    $scope.actions.message_delay = $scope.stageDelay[0];
  }

  if ($scope.newStage.actions.questionnaire_delay) {
    for (var n in $scope.stageDelay) {
      delay = $scope.stageDelay[n];

      if (delay.delay === $scope.newStage.actions.questionnaire_delay) {
        $scope.actions.questionnaire_delay = delay;
      }
    }
  } else {
    $scope.actions.questionnaire_delay = $scope.stageDelay[0];
  }

  console.log("BEfore: " + $scope.newStage.actions.template_force_no_reply);
  $scope.actions.template_force_no_reply = $scope.newStage.actions.template_force_no_reply;
  $scope.actions.template_force_sender_name = $scope.newStage.actions.template_sender_name && $scope.newStage.actions.template_sender_name.length > 0;
  $scope.actions.template_sender_name = $scope.actions.template_force_sender_name ? $scope.newStage.actions.template_sender_name : undefined;
  console.log("After: " + $scope.actions.template_force_no_reply);
  $scope.actions.request_feedback = $scope.newStage.actions.request_feedback;
  $scope.actions.request_scorecards = $scope.newStage.actions.request_scorecards;
  $scope.actions.backgroundcheck_result = $scope.newStage.actions.backgroundcheck_result;
  $scope.actions.send_assessment = $scope.newStage.actions.send_assessment;
  $scope.actions.namely_create_employee = $scope.newStage.actions.namely_create_employee;
  $scope.actions.bamboohr_create_employee = $scope.newStage.actions.bamboohr_create_employee;
  $scope.actions.inovapayroll_create_employee = $scope.newStage.actions.inovapayroll_create_employee;
  $scope.actions.zenefits_create_employee = $scope.newStage.actions.zenefits_create_employee;
  $scope.actions.deputy_create_employee = $scope.newStage.actions.deputy_create_employee;
  initalizeStageActionTypes();

  $scope.add = function () {
    if ($scope.form.$invalid) {
      return;
    }

    if (!$scope.newStage.name) {
      return;
    }

    if ($scope.newStage.id === "applied" && !$scope.newStage.type) {
      $scope.newStage.type = {
        id: "applied",
        name: "Applied",
        icon: "user"
      };
    } // LEGACY ACTION


    if ($scope.selectedTemplate.template) {
      $scope.newStage.action_template_id = $scope.selectedTemplate.template._id;
    } else {
      delete $scope.newStage.action_template_id;
    }

    if ($scope.actions.campaign) {
      $scope.newStage.actions.campaign_id = $scope.actions.campaign._id;
    } else {
      delete $scope.newStage.actions.campaign_id;
    }

    if ($scope.actions.template) {
      $scope.newStage.actions.message_template_id = $scope.actions.template._id;

      if ($scope.actions.template_force_sender_name && $scope.actions.template_sender_name) {
        $scope.newStage.actions.template_sender_name = $scope.actions.template_sender_name;
        $scope.newStage.template_force_sender_name = true;
      } else {
        delete $scope.newStage.actions.template_sender_name;
        delete $scope.newStage.template_force_sender_name;
      }

      if ($scope.actions.template_force_no_reply) $scope.newStage.actions.template_force_no_reply = true;else $scope.newStage.actions.template_force_no_reply = false;
    } else {
      delete $scope.newStage.actions.message_template_id;
      delete $scope.newStage.actions.template_sender_name;
      delete $scope.newStage.template_force_sender_name;
      delete $scope.newStage.actions.template_force_no_reply;
    }

    if ($scope.actions.message_delay) {
      $scope.newStage.actions.message_delay = $scope.actions.message_delay.delay;
    } else {
      delete $scope.newStage.actions.message_delay;
    }

    if ($scope.actions.questionnaire_delay) {
      $scope.newStage.actions.questionnaire_delay = $scope.actions.questionnaire_delay.delay;
    } else {
      delete $scope.newStage.actions.questionnaire_delay;
    } //if($scope.actions.request_feedback) {


    if ($scope.showStageAction('request_feedback')) {
      $scope.newStage.actions.request_feedback = true;
    } else {
      delete $scope.newStage.actions.request_feedback;
    } //if($scope.actions.request_scorecards) {


    if ($scope.showStageAction('request_scorecards')) {
      $scope.newStage.actions.request_scorecards = true;
    } else {
      delete $scope.newStage.actions.request_scorecards;
    }

    if ($scope.actions.questionnaire && $scope.actions.questionnaire._id) {
      $scope.newStage.actions.questionnaire_id = $scope.actions.questionnaire._id;
    } else {
      delete $scope.newStage.actions.questionnaire_id;
    }

    if ($scope.actions.questionnaire_delay) {
      $scope.newStage.actions.questionnaire_delay = $scope.actions.questionnaire_delay.delay;
    } else {
      delete $scope.newStage.actions.questionnaire_delay;
    }

    if ($scope.actions.send_assessment && $scope.actions.send_assessment.id) {
      $scope.newStage.actions.send_assessment = $scope.actions.send_assessment;
    } else {
      delete $scope.newStage.actions.send_assessment;
    }

    if ($scope.showStageAction('inovapayroll_create_employee')) {
      $scope.newStage.actions.inovapayroll_create_employee = true;
    } else {
      delete $scope.newStage.actions.inovapayroll_create_employee;
    }

    if ($scope.showStageAction('bamboohr_create_employee')) {
      $scope.newStage.actions.bamboohr_create_employee = true;
    } else {
      delete $scope.newStage.actions.bamboohr_create_employee;
    }

    if ($scope.showStageAction('namely_create_employee')) {
      $scope.newStage.actions.namely_create_employee = true;
    } else {
      delete $scope.newStage.actions.namely_create_employee;
    }

    if ($scope.showStageAction('zenefits_create_employee')) {
      $scope.newStage.actions.zenefits_create_employee = true;
    } else {
      delete $scope.newStage.actions.zenefits_create_employee;
    }

    if ($scope.showStageAction('deputy_create_employee')) {
      $scope.newStage.actions.deputy_create_employee = true;
    } else {
      delete $scope.newStage.actions.deputy_create_employee;
    }

    if ($scope.showStageAction('backgroundcheck_result')) {
      $scope.newStage.actions.backgroundcheck_result = $scope.actions.backgroundcheck_result;
    } else {
      delete $scope.newStage.actions.backgroundcheck_result;
    }

    if (isNewStage) {
      $scope.messageStatus = "Adding...";
    } else {
      $scope.messageStatus = "Updating...";
    }

    setTimeout(function () {
      $uibModalInstance.close($scope.newStage);
    }, 1000);
  };
  /*
  $scope.add = function () {
      if(!$scope.newStage.type || !$scope.newStage.name) {
          return;
      }
      $scope.messageStatus = "Adding...";
      setTimeout(function () {
          $scope.closeModal($scope.newStage);
      }, 1000);
  };
  */


  $scope.closeModal = function (item) {
    //console.log(JSON.stringify(item));
    $uibModalInstance.close(item);
  };
}]);
'use strict';

angular.module('appController').controller('AddQuestionnaireModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModal', '$uibModalInstance', 'AppClient', 'SharedData', 'CompanyService', 'questionnaire', 'dialog', 'FeaturesService', function ($scope, $rootScope, $state, $http, $uibModal, $uibModalInstance, AppClient, SharedData, CompanyService, questionnaire, dialog, FeaturesService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.showMessageTemplate = true;
  $scope.defaultQuestionnaireTemplate = angular.copy($scope.shared.activeCompany.messaging.questionnaire_template); //$scope.pipelineOptions = angular.copy($scope.shared.activeCompany.pipeline);

  $scope.models = {
    selected: null
  };
  $scope.features = {
    video_response: FeaturesService.getters.available('video_response'),
    reference_checking: FeaturesService.getters.available('reference_checking')
  };
  $scope.pipelines = $scope.shared.activeCompany.pipelines;
  var pipelineKeys = Object.keys($scope.pipelines);
  var questionnaire_copy = {};
  $scope.templateVariables = angular.copy($scope.shared.templateVariables);
  $scope.templateVariables.push({
    'value': '[[questionnaire_link]]',
    'name': 'Questionnaire Link'
  });

  $scope.insertVariable = function ($item, elem) {
    $rootScope.$broadcast('insertTemplateVariable:' + elem, $item.value);
  };

  $scope.questionnaire = {
    'message_template': $scope.defaultQuestionnaireTemplate,
    'questions': []
  };
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.questions-contraint'
  };

  $scope.updateCompletionStage = function (key) {
    var stage = this.stage || 'na';

    if (stage === 'na') {
      delete $scope.questionnaire.options.move_to[key];
    } else {
      $scope.questionnaire.options.move_to[key] = stage;
    }
  };

  $scope.companySettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/settings.html',
      controller: 'AccountSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.openEditQuestion = function (_question, index) {
    //console.log(question);
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/questions/edit_question_modal.html',
      controller: 'AddQuestionnaireQuestionModalInstanceCtrl',
      size: 'sm',
      resolve: {
        question: function question() {
          return _question;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (index > -1) {
        $scope.questionnaire.questions[index] = result;
      } else if (result) {
        $scope.questionnaire.questions.push(result);
      }
    }, function () {});
  };

  $scope.accountSettings = function (tab) {
    var currentStateData = {
      'name': $state.current.name,
      'params': $state.params
    };
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/settings.html',
      controller: 'AccountSettingsModalInstanceCtrl',
      size: 'md',
      resolve: {
        defaultTab: function defaultTab() {
          return tab;
        },
        $parentScope: function $parentScope() {
          return $scope;
        }
      }
    });
    modalInstance.result.then(function (selectedItem) {
      $scope.selected = selectedItem;
    }, function () {
      $state.transitionTo(currentStateData.name, currentStateData.params, {
        location: true,
        inherit: true,
        relative: $state.$current,
        notify: false
      });
    });
  };

  $scope.removeQuestion = function ($index) {
    $scope.questionnaire.questions.splice($index, 1);
  };

  $scope.add = function () {
    if ($scope.questionnaire.questions.length === 0) return;
    $scope.messageStatus = "Saving...";
    questionnaire_copy = $scope.questionnaire; //console.log($scope.questionnaire);
    //return;

    if (!$scope.questionnaire._id) {
      $scope.appClient.addQuestionnaire($scope.shared.activeCompany.company._id, $scope.questionnaire, function (error, result) {
        $uibModalInstance.close(result);
      });
    } else {
      $scope.appClient.updateQuestionnaire($scope.shared.activeCompany.company._id, $scope.questionnaire, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.$on('modal.closing', function (event, reason, closed) {
    if (!angular.equals($scope.questionnaire, questionnaire_copy)) {
      event.preventDefault();
      dialog.confirm({
        title: "Unsaved Changes",
        message: "Would you like to save your changes to this questionnaire?"
      }, function (result) {
        if (result === true) {
          $scope.add();
        } else {
          $scope.questionnaire = questionnaire_copy;

          if ($scope.questionnaire._id) {
            $uibModalInstance.close(questionnaire_copy);
          } else {
            $uibModalInstance.close(null);
          }
        }
      });
    }
  });

  $scope.addQuestion = function () {
    $scope.questionnaire.questions.push({});
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };

  $scope.checkRule = function () {
    // reset rules if unchecked
    if (!$scope.options.has_move_rule) {
      pipelineKeys.forEach(function (pipeline) {
        $scope.options.move_at_completion[pipeline] = 'na';
      });
      $scope.questionnaire.options.move_to = {};
    }
  };

  var initialize = function initialize() {
    if (questionnaire && (!$scope.features.video_response || !$scope.features.reference_checking)) {
      $scope.hasVideoResponse = questionnaire.questions.filter(function (question) {
        return question.type && question.type.id === 'video';
      }).length > 0;
      $scope.hasReferenceCheck = questionnaire.questions.filter(function (question) {
        return question.type && question.type.id === 'referencecheck';
      }).length > 0;
    }
  };

  $scope.options = {
    move_at_completion: []
  };

  if (questionnaire) {
    if (!questionnaire.questions) {
      questionnaire.questions = [];
    }

    if (!questionnaire.message_template) {
      questionnaire.message_template = $scope.defaultQuestionnaireTemplate;
    } // converting legacy questionnaire move rule to handle multipipelines

    /*questionnaire.questions.forEach((question, q) => {
        if (question.has_move_rule && question.hasOwnProperty('options')) {
            $scope.move_to_model[q] = [];
            question.options.forEach((option, o) => {
                 // convert move_to from legacy
                if (!option.move_to) {
                    option.move_to = angular.copy(pipelineOptionDefaults);
                } else if (option.move_to && !option.move_to.hasOwnProperty('default')) {
                    var _pipelineOptionDefaults = angular.copy(pipelineOptionDefaults);
                    _pipelineOptionDefaults['default'] = option.move_to;
                    option.move_to = _pipelineOptionDefaults;
                }
                 // create model for all move_to options
                var _pipelineModelDefaults = angular.copy(pipelineModelDefaults);
                var has_disqualified = false;
                pipelineKeys.forEach(pipeline => {
                    if (option.move_to && option.move_to.hasOwnProperty(pipeline)) {
                        _pipelineModelDefaults[pipeline] = option.move_to[pipeline].id || 'na';
                    } else {
                        // have to create
                        _pipelineModelDefaults[pipeline] = {
                            id: 'na'
                        };
                    }
                    if (_pipelineModelDefaults[pipeline] === 'disqualified') {
                        has_disqualified = true;
                    }
                });
                if (has_disqualified) {
                    _pipelineModelDefaults.show_disqualified_reason = true;
                    if (option.disqualified_reason) {
                        _pipelineModelDefaults.disqualified_reason = option.disqualified_reason;
                    }
                }
                $scope.move_to_model[q].push(_pipelineModelDefaults);
             });
        }
    });*/


    if (!questionnaire.options) {
      questionnaire.options = {
        move_to: {}
      };
    } //questionnaire.options.move_to = questionnaire.options.move_to || {};


    pipelineKeys.forEach(function (pipeline) {
      if (questionnaire.options.move_to.hasOwnProperty(pipeline)) {
        $scope.options.move_at_completion[pipeline] = questionnaire.options.move_to[pipeline].id;
        $scope.options.has_move_rule = true;
      } else {
        $scope.options.move_at_completion[pipeline] = 'na';
      }
    });
    $scope.questionnaire = angular.copy(questionnaire);
  } else {
    $scope.questionnaire.options = {
      move_to: {}
    };
    pipelineKeys.forEach(function (pipeline) {
      $scope.options.move_at_completion[pipeline] = 'na';
    });
  }

  questionnaire_copy = angular.copy($scope.questionnaire);
  initialize();
}]);
'use strict';

angular.module('appController').controller('AddQuestionnaireQuestionModalInstanceCtrl', ['$scope', '$uibModal', '$uibModalInstance', '$http', 'SharedData', 'CompanyService', 'FeaturesService', 'question', function ($scope, $uibModal, $uibModalInstance, $http, SharedData, CompanyService, FeaturesService, question) {
  console.log('init AddQuestionnaireQuestionModalInstanceCtrl');
  var company = SharedData.activeCompany.company;

  if (question) {
    $scope.new = false;
    $scope.question = angular.copy(question);
  } else {
    $scope.new = true;
    $scope.question = {};
  }

  $scope.pipelines = SharedData.activeCompany.pipelines;
  $scope.custom_fields = SharedData.activeCompany.custom_fields;
  $scope.shared = SharedData;
  $scope.pipelineDefault = {
    "id": "na",
    "name": "Default"
  };
  $scope.reasons = CompanyService.getters.reasons();
  $scope.dispositionSetting = CompanyService.getters.settings('eeoc.reasons.disposition');
  $scope.showReason = ['optional', 'required'].indexOf($scope.dispositionSetting) > -1;
  var pipelineKeys = Object.keys($scope.pipelines);
  var pipelineOptionDefaults = {};
  var pipelineModelDefaults = {};
  pipelineKeys.forEach(function (key) {
    pipelineOptionDefaults[key] = $scope.pipelineDefault;
    pipelineModelDefaults[key] = $scope.pipelineDefault.id;
  });
  $scope.questionTypes = [{
    'id': 'text',
    'name': 'Text'
  }, {
    'id': 'paragraph',
    'name': 'Paragraph'
  }, {
    'id': 'multiplechoice',
    'name': 'Multiple Choice'
  }, {
    'id': 'dropdown',
    'name': 'Dropdown List'
  }, {
    'id': 'checkboxes',
    'name': 'Checkboxes'
  }, {
    'id': 'video',
    'name': 'Video Response'
  }, {
    'id': 'referencecheck',
    'name': 'Reference Check'
  }, {
    'id': 'file',
    'name': 'File Attachment'
  }];
  $scope.videoResponseLengths = [{
    name: 'Max 60 seconds',
    value: 60
  }, {
    name: 'Max 2 minutes',
    value: 120
  }, {
    name: 'Max 5 minutes',
    value: 300
  }];
  $scope.selected = {
    videoResponseLength: $scope.videoResponseLengths[0]
  };
  $scope.referenceQuestionTypes = [{
    'id': 'text',
    'name': 'Text'
  }, {
    'id': 'paragraph',
    'name': 'Paragraph'
  }, {
    'id': 'multiplechoice',
    'name': 'Multiple Choice'
  }, {
    'id': 'checkboxes',
    'name': 'Checkboxes'
  }];

  $scope.toggleType = function (item, question, $model) {
    /*if(!checkFeatureAvailability(item.id, question)) {
        return false;
    }*/
    delete question.video_length;

    if (item.id == "multiplechoice" || item.id == "checkboxes" || item.id == "dropdown") {
      $scope.addOption(question);
    } else {
      delete question.options;
    }

    if (item.id === 'video') {
      $scope.selected.videoResponseLength = $scope.videoResponseLengths[0];
      question.video_length = 60;
    }
  };

  $scope.toggleVideoLength = function (item, question, $model) {
    if (FeaturesService.actions.block('video_response_length')) {
      $scope.selected.videoResponseLength = $scope.videoResponseLengths[0];
      return;
    }

    question.video_length = item.value;
  };

  $scope.onHasCustomFieldClick = function (question) {
    if (question.has_custom_field) {// nothing
    } else {
      if (question.company_custom_field_id) {
        delete question.company_custom_field_id;
      }
    }
  };

  $scope.removeOption = function (question, $index) {
    question.options.splice($index, 1);
  };

  $scope.addOption = function (question) {
    if (!question.options) {
      question.options = [];
    }

    var option = {
      'text': 'Option ' + (question.options.length + 1)
    };

    if (question.has_move_rule) {
      // create move_to
      var _pipelineOptionDefaults = angular.copy(pipelineOptionDefaults);

      option.move_to = _pipelineOptionDefaults; // create model for all move_to options

      var _pipelineModelDefaults = angular.copy(pipelineModelDefaults);

      $scope.move_to_model.push(_pipelineModelDefaults);
    }

    question.options.push(option);
  };

  $scope.addReferenceQuestion = function (question) {
    question.reference_questionnaire.questions.push({});
  };

  $scope.removeReferenceQuestion = function (question, index) {
    question.reference_questionnaire.questions.splice(index, 1);
  };

  $scope.checkReferenceQuestionnaire = function (question) {
    //console.log($scope.referenceQuestionnaires.DefaultPersonalReferenceQuestionnaire);
    if (!question.hasOwnProperty('reference_questionnaire')) {
      question.reference_questionnaire = $scope.referenceQuestionnaires.DefaultPersonalReferenceQuestionnaire;
    }
  };

  $scope.move_to_model = [];

  $scope.addMoveTo = function () {
    if ($scope.question.has_move_rule) {
      $scope.move_to_model = [];
      $scope.question.options.forEach(function (option, o) {
        // create move_to
        var _pipelineOptionDefaults = angular.copy(pipelineOptionDefaults);

        option.move_to = _pipelineOptionDefaults; // create model for all move_to options

        var _pipelineModelDefaults = angular.copy(pipelineModelDefaults);

        $scope.move_to_model.push(_pipelineModelDefaults);
      });
    } else {
      delete $scope.move_to_model;
    }

    console.log($scope.move_to_model);
  };

  $scope.updateStage = function (o, key) {
    var stage = this.stage || $scope.pipelineDefault;
    var pipelineKeys = Object.keys($scope.move_to_model[o]);
    var has_disqualified = false;
    pipelineKeys.forEach(function ($key) {
      if (['show_disqualified_reason', 'disqualified_reason'].indexOf($key) === -1) {
        if ($scope.move_to_model[o][$key] !== 'na') {
          var pipeline_stage = $scope.pipelines[$key].pipeline.find(function ($stage) {
            return $stage.id === $scope.move_to_model[o][$key];
          });
          console.log(pipeline_stage);

          if (pipeline_stage && (pipeline_stage.id === 'disqualified' || pipeline_stage.type && pipeline_stage.type.id === 'disqualified')) {
            has_disqualified = true;

            if ($scope.move_to_model[o].disqualified_reason) {
              $scope.question.options[o].move_to[$key].reason = $scope.move_to_model[o].disqualified_reason;
            }
          }
        }
      }
    });
    console.log("has_disqualified = ".concat(has_disqualified));

    if (has_disqualified) {
      $scope.move_to_model[o].show_disqualified_reason = true;
    } else {
      delete $scope.move_to_model[o].show_disqualified_reason;
      delete $scope.question.options[o].disqualified_reason;
      pipelineKeys.forEach(function ($key) {
        if (['show_disqualified_reason', 'disqualified_reason'].indexOf($key) === -1) {
          if ($scope.question.options[o].move_to[$key] && $scope.question.options[o].move_to[$key].reason) {
            delete $scope.question.options[o].move_to[$key].reason;
          }
        }
      });
    }

    $scope.question.options[o].move_to[key] = stage;
  };

  $scope.updateReason = function ($item, o) {
    var reason = {
      type: 'disposition',
      _id: $item._id
    };
    pipelineKeys.forEach(function ($key) {
      var pipeline_stage = $scope.pipelines[$key].pipeline.find(function ($stage) {
        return $stage.id === $scope.move_to_model[o][$key];
      });
      console.log(pipeline_stage);

      if (pipeline_stage && (pipeline_stage.id === 'disqualified' || pipeline_stage.type && pipeline_stage.type.id === 'disqualified')) {
        //if ($scope.move_to_model[o][$key] === 'disqualified') {
        $scope.question.options[o].disqualified_reason = $item;
        $scope.question.options[o].move_to[$key].reason = reason;
      }
    });
  };

  var initialize = function initialize() {
    $http.get('/data/referenceQuestionnaires.json').success(function (data) {
      $scope.referenceQuestionnaires = data;
    }).error(function (error) {
      console.log('Error fetching reference questionnaires JSON!: ' + error);
    });
    var question = $scope.question;

    if (question.has_move_rule && question.hasOwnProperty('options')) {
      $scope.move_to_model = [];
      question.options.forEach(function (option, o) {
        // convert move_to from legacy
        if (!option.move_to) {
          option.move_to = angular.copy(pipelineOptionDefaults);
        } else if (option.move_to && !option.move_to.hasOwnProperty('default')) {
          var _pipelineOptionDefaults = angular.copy(pipelineOptionDefaults);

          _pipelineOptionDefaults['default'] = option.move_to;
          option.move_to = _pipelineOptionDefaults;
        } // create model for all move_to options


        var _pipelineModelDefaults = angular.copy(pipelineModelDefaults);

        var has_disqualified = false;
        pipelineKeys.forEach(function (pipeline) {
          if (option.move_to && option.move_to.hasOwnProperty(pipeline)) {
            _pipelineModelDefaults[pipeline] = option.move_to[pipeline].id || 'na';

            if (!has_disqualified) {
              has_disqualified = option.move_to[pipeline].id === 'disqualified' || option.move_to[pipeline].type && option.move_to[pipeline].type.id === 'disqualified';
            }
          } else {
            // have to create
            _pipelineModelDefaults[pipeline] = {
              id: 'na'
            };
          }
        });

        if (has_disqualified) {
          console.log('show reasons');
          _pipelineModelDefaults.show_disqualified_reason = true;

          if (option.disqualified_reason) {
            _pipelineModelDefaults.disqualified_reason = option.disqualified_reason;
          }
        }

        $scope.move_to_model.push(_pipelineModelDefaults);
      });
    }

    if (question.video_length) {
      if (FeaturesService.getters.available('video_response_length')) {
        $scope.selected.videoResponseLength = $scope.videoResponseLengths.find(function (limits) {
          return limits.value === question.video_length;
        });
      } else {
        $scope.selected.videoResponseLength = $scope.videoResponseLengths[0];
      }
    } //console.log($scope.move_to_model);

  };

  $scope.saveQuestion = function () {
    if ($scope.form.$invalid) {
      return;
    }

    if ($scope.question.type.id === "video" && FeaturesService.actions.block('video_response')) return;
    if ($scope.question.type.id === "referencecheck" && FeaturesService.actions.block('reference_checking')) return;
    $uibModalInstance.close($scope.question);
  };

  initialize();

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);
'use strict';

angular.module('appController').controller('AddReasonModalInstanceCtrl', ['$scope', '$uibModalInstance', 'reason', function ($scope, $uibModalInstance, reason) {
  $scope.reason = {
    name: ''
  };

  if (reason) {
    $scope.reason = reason;
  }

  $scope.addReason = function () {
    $uibModalInstance.close($scope.reason);
  };

  $scope.closeModal = function () {
    $uibModalInstance.dismiss('cancel');
  };
}]);
'use strict';

angular.module('appController').controller('AddSchedulingLinkModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'utils', 'link', 'type', '$http', '$uibModal', function ($scope, $uibModalInstance, AppClient, SharedData, utils, link, type, $http, $uibModal) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.interview_guides = SharedData.activeCompany.interview_guides;
  $scope.members = angular.copy($scope.shared.activeCompany.members);
  $scope.durations = [];
  $scope.times = [];
  $scope.singleUse = type === 'single-use';
  $scope.namePlaceholder = 'Link Name';

  if (!$scope.singleUse) {
    $scope.namePlaceholder += ' (Required)';
  }

  var location = moment.tz.guess();
  $scope.tzabbr = moment.tz.zone(location).abbr(new Date().getTime());
  var day = 86400000;
  $scope.days = [{
    name: '1 day',
    value: day
  }, {
    name: '2 days',
    value: day * 2
  }, {
    name: '3 days',
    value: day * 3
  }, {
    name: '4 days',
    value: day * 4
  }, {
    name: '5 days',
    value: day * 5
  }, {
    name: '6 days',
    value: day * 6
  }, {
    name: '7 days',
    value: day * 7
  }, {
    name: '8 days',
    value: day * 8
  }, {
    name: '9 days',
    value: day * 9
  }, {
    name: '10 days',
    value: day * 10
  }, {
    name: '11 days',
    value: day * 11
  }, {
    name: '12 days',
    value: day * 12
  }, {
    name: '13 days',
    value: day * 13
  }, {
    name: '14 days',
    value: day * 14
  }];
  $scope.minimum_notice = angular.copy($scope.days);
  $scope.minimum_notice.unshift({
    name: 'None',
    value: 1
  });
  $scope.weeks = [{
    name: '1 week out',
    value: day * 7
  }, {
    name: '2 weeks out',
    value: day * 14
  }, {
    name: '3 weeks out',
    value: day * 21
  }, {
    name: '4 weeks out',
    value: day * 28
  }, {
    name: '5 weeks out',
    value: day * 35
  }, {
    name: '6 weeks out',
    value: day * 42
  }, {
    name: '7 weeks out',
    value: day * 49
  }, {
    name: '8 weeks out',
    value: day * 56
  }];
  $scope.link = {
    name: '',
    participants: [],
    duration: null,
    title: '',
    location: null,
    description: '',
    interview_guide: null,
    has_video: false,
    record_video: false,
    request_scorecards: false,
    ttl: $scope.days[2],
    timezone: location,
    availability_start: $scope.days[2],
    availability_end: $scope.weeks[1],
    range: {
      start: null,
      end: null
    },
    days: [{
      value: 1,
      name: 'Monday',
      enabled: true
    }, {
      value: 2,
      name: 'Tuesday',
      enabled: true
    }, {
      value: 3,
      name: 'Wednesday',
      enabled: true
    }, {
      value: 4,
      name: 'Thursday',
      enabled: true
    }, {
      value: 5,
      name: 'Friday',
      enabled: true
    }, {
      value: 6,
      name: 'Saturday',
      enabled: false
    }, {
      value: 0,
      name: 'Sunday',
      enabled: false
    }]
  };
  var location = moment.tz.guess(); // generate time zone dropdown

  var zoneNames = Object.keys(moment.tz._zones).map(function (k) {
    return typeof moment.tz._zones[k] === 'string' ? moment.tz._zones[k].split('|')[0] : moment.tz._zones[k].name;
  }).filter(function (z) {
    return z.indexOf('/') >= 0;
  }).sort(); //console.log(zoneNames);

  var current_time = new Date().getTime();
  zoneNames = zoneNames.map(function (name) {
    var offset = moment.tz.zone(name).utcOffset(current_time);
    var gmt = moment().tz(name).format('Z');
    if (gmt >= 0) gmt = '+' + gmt;
    var abbr = moment.tz.zone(name).abbr(current_time);
    return {
      gmt: gmt,
      text: "GMT".concat(gmt, " - ").concat(name),
      abbr: abbr,
      name: name,
      offset: offset,
      type: 'Timezones'
    };
  });
  var recentTimezones = JSON.parse(window.localStorage.getItem('recentTimezones')) || [];
  var recent;

  if (recentTimezones.length > 0) {
    recent = zoneNames.reduce(function (acc, zone) {
      if (recentTimezones.indexOf(zone.name) > -1) {
        var _z = angular.copy(zone);

        _z.type = 'Recent';
        acc.push(_z);
      }

      return acc;
    }, []);
  }

  if (recent) {
    $scope.timezones = recent.concat(zoneNames);
  } else {
    $scope.timezones = zoneNames;
  }

  var formatDuration = function formatDuration(duration) {
    var format = duration + ' min';

    if (duration == 60) {
      format = '1 hr';
    } else if (duration > 60) {
      format = duration / 60 + ' hrs';
    }

    return format;
  };

  if (link) {
    var days = [{
      value: 1,
      name: 'Monday',
      enabled: false
    }, {
      value: 2,
      name: 'Tuesday',
      enabled: false
    }, {
      value: 3,
      name: 'Wednesday',
      enabled: false
    }, {
      value: 4,
      name: 'Thursday',
      enabled: false
    }, {
      value: 5,
      name: 'Friday',
      enabled: false
    }, {
      value: 6,
      name: 'Saturday',
      enabled: false
    }, {
      value: 0,
      name: 'Sunday',
      enabled: false
    }];
    var timezone = link.timezone ? link.timezone : location;
    var duration = link.interview_length / 60000;
    duration = {
      min: duration,
      name: formatDuration(duration)
    };
    link.attendees.forEach(function (participant) {
      var memberIndex = $scope.members.findIndex(function (member) {
        return member._id === participant._id;
      });

      if (memberIndex > -1) {
        $scope.members[memberIndex] = participant;
      } else {
        $scope.members.push(participant);
      }
    }); //console.log('-------');

    link.availability_slots_original.forEach(function (slot) {
      var day = moment(slot[0]).days();
      var temp = days.findIndex(function (d) {
        return d.value === day;
      });
      if (temp > -1) days[temp].enabled = true;
    });
    var slot = link.availability_slots_original[0][0];
    var rangeStart = {
      name: moment.tz(slot, timezone).format('h:mma'),
      id: moment.tz(slot, timezone).format('HH:mm:00')
    }; //console.log(rangeStart);

    slot = link.availability_slots_original[0][1];
    var rangeEnd = {
      name: moment.tz(slot, timezone).format('h:mma'),
      id: moment.tz(slot, timezone).format('HH:mm:00')
    }; //console.log(rangeEnd);
    //console.log('-------');

    $scope.link = {
      _id: link._id,
      name: link.name,
      title: link.title,
      description: link.description,
      location: link.location,
      interview_guide: link.interview_guide,
      has_video: link.has_video,
      record_video: link.record_video,
      request_scorecards: link.request_scorecards,
      participants: link.attendees,
      duration: duration,
      ttl: $scope.days.find(function (d) {
        return d.value === link.ttl;
      }),
      availability_start: $scope.minimum_notice.find(function (d) {
        return d.value === link.availability_start;
      }),
      availability_end: $scope.weeks.find(function (w) {
        return w.value === link.availability_end;
      }),
      timezone: timezone,
      range: {
        start: rangeStart,
        end: rangeEnd
      },
      days: days //console.log($scope.link)

    };
  } //$scope.link.timezone = null;


  $scope.link.timezone = $scope.timezones.find(function (timezone) {
    return timezone.name === $scope.link.timezone;
  });
  $scope.redactorConfig = {
    air: true,
    buttons: ['bold', 'underline', 'lists', 'link'],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: 350,
    maxHeight: 350
  };

  $scope.addTime = function (dayIndex, timeIndex) {
    console.log("".concat(dayIndex, " - ").concat(timeIndex));
  };

  var participantCount = $scope.link.participants.length + 1;

  $scope.removeParticipant = function (index) {
    if (index > -1) {
      $scope.link.participants.splice(index, 1);
    }
  };

  $scope.addParticipant = function (participant) {
    participant.participantClasses = "participant-".concat(participantCount);
    participantCount++;
    $scope.link.participants.push(participant);
  };

  $scope.saveAsTemplate = function (form) {
    var modalInstance = $uibModal.open({
      template: "\n                <div class=\"close ng-scope\" ng-click=\"closeModal()\"><i class=\"fa fa-times\"></i></div>\n                <div class=\"modal-body ng-scope\">\n                    <h1>Save Scheduling Link Template</h1>\n                    <div class=\"interview-template-name-section\">\n                        <input type=\"text\" ng-model=\"templateName\", placeholder=\"Template Name\" />\n                    </div>\n                    <footer class=\"modal-content-footer\">\n                        <ul class=\"footer-actions\">\n                            <li class=\"footer-action\">\n                                <button class=\"btn btn-none\" type=\"button\" ng-click=\"closeModal()\">\n                                    <i class=\"fa fa-times\"></i>\n                                    <span>Cancel</span>\n                                </button>\n                            </li>\n                            <li class=\"footer-action\">\n                                <button class=\"btn btn-blue\" ng-click=\"saveTemplate()\">\n                                    <i class=\"fa fa-save\"></i>\n                                    <span>Save Template</span>\n                                </button>\n                            </li>\n                        </ul>\n                    </footer>\n                </div>\n            ",
      controller: function controller($scope, $uibModalInstance) {
        $scope.templateName = '';

        $scope.saveTemplate = function () {
          $uibModalInstance.close($scope.templateName);
        };

        $scope.closeModal = function () {
          $uibModalInstance.close(null);
        };
      },
      size: 'sm'
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.link.name = result;
      }
    }, function () {});
  };

  $scope.save = function () {
    //console.log($scope.link);
    if ($scope.link.participants.length === 0) return;
    var start = $scope.link.range.start.id.split(':');
    var end = $scope.link.range.end.id.split(':');
    var availabilitySlots = $scope.link.days.reduce(function (intervals, day) {
      if (day.enabled) {
        intervals.push([moment.tz($scope.link.timezone.name).day(day.value).hours(start[0]).minutes(start[1]).format(), moment.tz($scope.link.timezone.name).day(day.value).hours(end[0]).minutes(end[1]).format()]);
      }

      return intervals;
    }, []);
    var schedulingLink = {
      name: $scope.link.name,
      location: $scope.link.location,
      title: $scope.link.title,
      description: $scope.link.description,
      interview_guide: $scope.link.interview_guide,
      has_video: $scope.link.has_video,
      record_video: $scope.link.record_video,
      request_scorecards: $scope.link.request_scorecards,
      attendees: $scope.link.participants,
      additional_participants: $scope.link.participants,
      availability_slots: availabilitySlots,
      interview_length: $scope.link.duration.min * 60000,
      availability_end: $scope.link.availability_end.value,
      availability_start: $scope.link.availability_start.value,
      timezone: $scope.link.timezone.name,
      ttl: $scope.link.ttl.value //console.log(schedulingLink);
      //return;

    };
    setLocationStorage($scope.link.location);

    if ($scope.singleUse) {
      $uibModalInstance.close(schedulingLink);
      return;
    }

    if ($scope.link._id) {
      schedulingLink._id = $scope.link._id;
    }

    if ($scope.link._id) {
      $scope.appClient.updateCompanySchedulingLink($scope.shared.activeCompany.company._id, schedulingLink._id, schedulingLink, function (error, result) {
        if (error) {
          console.log('error happened');
          console.log(error);
        }

        $uibModalInstance.close(result);
      });
    } else {
      $scope.appClient.addCompanySchedulingLink($scope.shared.activeCompany.company._id, schedulingLink, function (error, result) {
        if (error) {
          console.log('error happened');
          console.log(error);
        }

        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  $scope.locationKeypress = function (e) {
    if (e.keyCode === 13) {
      $scope.status.isopen = false;
      e.preventDefault();
      return false;
    }
  };

  $scope.interviewLocations = JSON.parse(window.localStorage.getItem('interviewLocations')) || []; //console.log($scope.interviewLocations);

  $scope.deleteLocation = function (e, location) {
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));
    var index = locations.findIndex(function (_l) {
      return _l.id === location.id;
    });

    if (index > -1) {
      locations.splice(index, 1);
      $scope.interviewLocations = locations;
      window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var setLocationStorage = function setLocationStorage(location) {
    if (!location) return;
    location = {
      id: new Date().getTime(),
      name: location
    };
    var locations = JSON.parse(window.localStorage.getItem('interviewLocations'));

    if (locations && locations.findIndex(function (_l) {
      return _l.name === location.name;
    }) === -1) {
      locations.unshift(location);
    } else if (!locations) {
      locations = [location];
    }

    if (locations.length > 10) locations = locations.splice(0, 10);
    window.localStorage.setItem('interviewLocations', JSON.stringify(locations));
  };

  var initializeDurations = function initializeDurations() {
    $http.get('/data/durations.json').success(function (data) {
      $scope.durations = data;

      if (!$scope.link.duration) {
        $scope.link.duration = $scope.durations[1];
      } //console.log($scope.durations);

    }).error(function (error) {
      console.log('Error fetching durations JSON!: ' + error);
    });
  };

  var initializeTimes = function initializeTimes() {
    $http.get('/data/scheduleTimes.json').success(function (data) {
      $scope.times = data;

      if (!$scope.link.range.start) {
        $scope.link.range.start = $scope.times[4];
      }

      if (!$scope.link.range.end) {
        $scope.link.range.end = $scope.times[32];
      }
    }).error(function (error) {
      console.log('Error fetching times JSON!: ' + error);
    });
  };

  initializeDurations();
  initializeTimes();
}]);
'use strict';

angular.module('appController').controller('AddScorecardModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'scorecard', 'dialog', function ($scope, $uibModalInstance, AppClient, SharedData, scorecard, dialog) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.scorecard = {
    'sections': []
  };
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.questions-contraint'
  };

  $scope.removeSection = function ($index) {
    $scope.scorecard.sections.splice($index, 1);
  };

  $scope.removeCriteria = function (section, $index) {
    section.criteria.splice($index, 1);
  };

  $scope.addCriteria = function (section) {
    if (!section.criteria) {
      section.criteria = [];
    }

    section.criteria.push({});
  };

  $scope.add = function () {
    $scope.messageStatus = "Saving...";

    if (!$scope.scorecard._id) {
      $scope.appClient.addScorecard($scope.shared.activeCompany.company._id, $scope.scorecard, function (error, result) {
        setTimeout(function () {
          if (result) {//$scope.shared.activeCompany.scorecards.push(result);
          }

          $uibModalInstance.close();
        }, 500);
      });
    } else {
      dialog.confirm({
        title: "Updating Scorecard",
        message: "Changing an existing scorecard will invalidate existing scores."
      }, function (result) {
        if (result === true) {
          $scope.appClient.updateScorecard($scope.shared.activeCompany.company._id, $scope.scorecard, function (error, result) {
            setTimeout(function () {
              $scope.scorecard = result;
              scorecard = result;
              $uibModalInstance.close();
            }, 500);
          });
        }
      });
    }
  };

  $scope.addSection = function () {
    var section = {};
    $scope.addCriteria(section);
    $scope.scorecard.sections.push(section);
  };

  $scope.closeModal = function (item) {
    $uibModalInstance.close(item);
  };

  var initialize = function initialize() {
    if (scorecard) {
      if (!scorecard.sections) {
        scorecard.sections = [];
      }

      $scope.scorecard = angular.copy(scorecard);
    } else {
      $scope.addSection();
    }
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('AddTemplateModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'template', 'eSig', 'utils', '$upload', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, template, eSig, utils, $upload) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.schedulingLinks = $scope.shared.activeCompany.scheduling_links;
  $scope.folders = $scope.shared.activeCompany.folders['templates'];
  $scope.templateVariables = angular.copy($scope.shared.templateVariables);
  $scope.template = {
    'subject': $scope.shared.activeCompany.messaging.subject_template.body,
    'attachments': [],
    'folder_id': ''
  };
  $scope.options = {
    isDocSign: eSig === true
  };
  $scope.selectedFolder = undefined;

  $scope.selectFolder = function (folder) {
    $scope.template.folder_id = folder._id;
  };

  $scope.uploading = false;
  $scope.isGDPRTemplate = false;

  if (template) {
    $scope.template = angular.copy(template);
    $scope.template.body = utils.markdownToHTML($scope.template.body);

    if (template.folder_id) {
      $scope.selectedFolder = $scope.folders.find(function (folder) {
        return folder._id === $scope.template.folder_id;
      });
    }

    if (!$scope.template.attachments) {
      $scope.template.attachments = [];
    }

    if (!$scope.template.subject) {
      $scope.template.subject = $scope.shared.activeCompany.messaging.subject_template.body;
    }

    if (template.type.indexOf('gdpr') !== -1) {
      $scope.isGDPRTemplate = true;
      $scope.templateVariables.unshift({
        name: 'Consent Link',
        value: '[[consent_link]]'
      });
    }
  }

  $scope.redactorConfig = {
    multipleUpload: false,
    imageUpload: "/api/company/".concat($scope.shared.activeCompany.company._id, "/portal/media/gallery/image"),
    buttons: ['bold', 'italic', 'lists', 'image', 'link'],
    //buttons: ['bold', 'underline', 'lists', 'link'],
    // formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: '350px',
    maxHeight: '350px'
  };
  $scope.redactorDocSignConfig = {
    buttons: [],
    //formatting: ['p', 'h1', 'h2', 'h3'],
    imageFigure: false,
    imageCaption: false,
    minHeight: '350px',
    maxHeight: '350px'
  };

  $scope.insertVariable = function ($item, elem) {
    //$('#redactor').redactor('templatevars.insert', $item.value);
    $R('#redactor', 'plugin.templatevars.insert', $item.value); //$rootScope.$broadcast('insertTemplateVariable:'+elem, $item.value);
  };

  $scope.insertSchedulingLink = function ($item, elem) {
    var value = "[[scheduling_link(".concat($item.friendly_id, ")]]");
    $R('#redactor', 'plugin.templatevars.insert', value);
  };

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.removeFileAttachment = function (idx) {
    $scope.template.attachments.splice(idx, 1);
  };

  $scope.uploadAttachment = function ($files) {
    var attachment = {
      'status': 'uploading'
    };
    $scope.template.attachments.push(attachment);
    $scope.uploading = true;
    upload($files, function (error, data) {
      $scope.template.attachment.uploading = false;
      $scope.attachmentError = false;
      $scope.uploading = false;

      if (data) {
        attachment.status = 'attached';
        attachment.file_name = data.file_name;
        attachment.url = data.url;
        attachment.content_type = data.content_type;
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.addSigner = function () {
    if (!$scope.template.signer_roles) $scope.template.signer_roles = [];
    $scope.template.signer_roles.push({
      name: ''
    });
  };

  $scope.removeSigner = function (index) {
    $scope.template.signer_roles.splice(index, 1);
  };

  $scope.add = function () {
    $scope.messageError = '';

    if (!$scope.template.name || !$scope.template.body) {
      return;
    }

    if (!$scope.template.folder_id) {
      delete $scope.template.folder_id;
    }

    var template_new = angular.copy($scope.template);
    template_new.body = utils.HTMLtoMarkdown(template_new.body); //console.log(template_new.body);

    if ($scope.isGDPRTemplate) {
      if (template_new.body.indexOf('[[consent_link]]') === -1) {
        $scope.messageError = 'GDPR templates must contain [[consent_link]] template variable.';
        return;
      }
    }

    if ($scope.options.isDocSign) {
      if (template_new.body.length > 2000) {
        $scope.messageError = 'Email body must be less than 2000 characters.';
        return;
      }

      if (!$scope.template.attachments.length) {
        $scope.attachmentError = true;
        return;
      }

      template_new.attachments = template_new.attachments.map(function (a) {
        return a.url;
      });
      return $scope.appClient.newDocSigningTemplate($scope.shared.activeCompany.company._id, template_new).then(function (template) {
        HelloSign.init("abae36e43cb89fe9d96240093719b68d");
        HelloSign.open({
          url: template.edit_url,
          // skipDomainVerification: true,
          messageListener: function messageListener(eventData) {
            if (eventData && eventData.event === "template_created") {
              $scope.messageStatus = "Adding...";
              var fileName = $scope.template.attachments[0].file_name;
              var subject = fileName.slice(0, fileName.lastIndexOf('.'));
              eventData.template_info.subject = subject;
              eventData.template_info.title = $scope.template.name;
              console.log("TEMPLATE: " + JSON.stringify($scope.template));
              $scope.appClient.addDocSigningTemplate($scope.shared.activeCompany.company._id, eventData).then(function (result) {
                $uibModalInstance.close(result);
              });
            }
          }
        });
      });
    }

    if ($scope.template._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateCompanyTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(template_new);
      });
    } else {
      $scope.messageStatus = "Adding...";
      $scope.appClient.addCompanyTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('AddSMSTemplateModalInstanceCtrl', ['$scope', '$rootScope', '$uibModalInstance', 'AppClient', 'SharedData', 'template', 'utils', '$upload', function ($scope, $rootScope, $uibModalInstance, AppClient, SharedData, template, utils, $upload) {
  console.log('AddSMSTemplateModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.schedulingLinks = $scope.shared.activeCompany.scheduling_links;
  $scope.templateVariables = angular.copy($scope.shared.templateVariables);
  $scope.folders = $scope.shared.activeCompany.folders['templates'];

  if (template) {
    $scope.template = angular.copy(template);
    $scope.template.body = utils.markdownToHTML($scope.template.body);
  }

  $scope.redactorTextConfig = {
    buttons: [],
    minHeight: '350px',
    maxHeight: '350px',
    pastePlainText: true,
    pasteLinks: false,
    pasteInlineTags: [],
    pasteBlockTags: [],
    autoparse: false
  };
  $scope.selectedFolder = undefined;

  $scope.selectFolder = function (folder) {
    $scope.selectedFolder = folder;

    if (!$scope.template) {
      $scope.template = {};
    }

    $scope.template.folder_id = folder._id;
  };

  $scope.insertVariable = function ($item, elem) {
    //$('#redactor-sms').redactor('templatevars.insert', $item.value);
    $R('#redactor-sms', 'plugin.templatevars.insert', $item.value); //$rootScope.$broadcast('insertTemplateVariable:'+elem, $item.value);
  };

  $scope.insertSchedulingLink = function ($item, elem) {
    var value = "[[scheduling_link(".concat($item.friendly_id, ")]]");
    $R('#redactor-sms', 'plugin.templatevars.insert', value); //$('#redactor-sms').redactor('templatevars.insert', value);
  };

  $scope.add = function () {
    $scope.messageError = '';

    if (!$scope.template.name || !$scope.template.body) {
      return;
    }

    $scope.template.delivery_method = 'sms';
    var template_new = angular.copy($scope.template);
    template_new.body = utils.HTMLtoMarkdown(template_new.body);

    if ($scope.template._id) {
      $scope.messageStatus = "Updating...";
      $scope.appClient.updateCompanyTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(template_new);
      });
    } else {
      $scope.messageStatus = "Adding...";
      $scope.appClient.addCompanyTemplate($scope.shared.activeCompany.company._id, template_new, function (error, result) {
        $uibModalInstance.close(result);
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('AsurintConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'asurint', function ($scope, $uibModalInstance, AppClient, SharedData, asurint) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!asurint) {
    asurint = {};
  }

  $scope.asurint = {
    'account_id': asurint.account_id,
    'location_id': asurint.location_id
  };

  $scope.update = function () {
    if (!$scope.asurint.account_id || !$scope.asurint.location_id) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateAsurintConfig({
      asurint: $scope.asurint,
      companyId: $scope.shared.activeCompany.company._id
    }).then(function () {
      $scope.messageStatus = '';
      $scope.shared.activeCompany.company.has_asurint = true;
      asurint.account_id = $scope.asurint.account_id;
      asurint.location_id = $scope.asurint.location_id;
      $uibModalInstance.close(asurint);
    }).catch(function (err) {
      $scope.messageStatus = '';
      $scope.integrationError = true;
      $scope.appClient.disableIntegration("asurint", $scope.shared.activeCompany.company._id, function (error, result) {
        $scope.shared.activeCompany.company.has_asurint = false;
      });
      return;
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('BambooHRConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'bamboohr', function ($scope, $uibModalInstance, AppClient, SharedData, bamboohr) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!bamboohr) {
    bamboohr = {};
  }

  $scope.bamboohr = {
    'subdomain': bamboohr.subdomain,
    'api_key': bamboohr.api_key,
    create_jobtitle: bamboohr.create_jobtitle,
    create_department: bamboohr.create_department
  };

  $scope.update = function () {
    if (!$scope.bamboohr.subdomain) {
      return;
    }

    if (!$scope.bamboohr.api_key) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateBambooHRConfig($scope.bamboohr, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("bamboohr", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_bamboohr = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_bamboohr = true;
      bamboohr.subdomain = $scope.bamboohr.subdomain;
      bamboohr.api_key = $scope.bamboohr.api_key;
      bamboohr.create_jobtitle = $scope.bamboohr.create_jobtitle;
      bamboohr.create_department = $scope.bamboohr.create_department;
      $uibModalInstance.close(bamboohr);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('BambooHROpenIdConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'bamboohr', function ($scope, $uibModalInstance, AppClient, SharedData, bamboohr) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!bamboohr) {
    bamboohr = {};
  }

  $scope.bamboohr = {
    subdomain: bamboohr.subdomain,
    api_key: bamboohr.api_key,
    create_jobtitle: bamboohr.create_jobtitle,
    create_department: bamboohr.create_department
  };
  $scope.isApiKey = bamboohr.api_key;

  $scope.update = function () {
    if (!bamboohr.api_key && !$scope.bamboohr.subdomain) {
      $scope.integrationError = true;
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateBambooHRConfig($scope.bamboohr, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("bamboohr", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_bamboohr = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_bamboohr = true;
      bamboohr.create_jobtitle = $scope.bamboohr.create_jobtitle;
      bamboohr.create_department = $scope.bamboohr.create_department;

      if (!$scope.isApiKey) {
        window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/bamboohr?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
      } else {
        $scope.closeModal();
      }
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CheckrConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'RESTClient', 'SharedData', 'checkr', function ($scope, $uibModalInstance, RESTClient, SharedData, checkr) {
  $scope.checkr = checkr;

  $scope.update = function () {
    RESTClient.updateCheckrConfig({
      companyId: SharedData.activeCompany.company._id,
      checkr: checkr
    }).then(function (results) {
      $uibModalInstance.close($scope.checkr);
    }).catch(function () {
      $scope.integrationError = true;
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CriteriaCorpConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'criteriacorp', function ($scope, $uibModalInstance, AppClient, SharedData, criteriacorp) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!criteriacorp) {
    criteriacorp = {};
  }

  $scope.criteriacorp = {
    'account_id': criteriacorp.account_id
  };

  $scope.update = function () {
    if (!$scope.criteriacorp.account_id) return;
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    var config = $scope.criteriacorp;
    $scope.appClient.updateCriteriaCorpConfig({
      account_id: config.account_id,
      companyId: $scope.shared.activeCompany.company._id
    }, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("criteriacorp", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_criteriacorp = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_criteriacorp = true;
      criteriacorp.account_id = config.account_id;
      $uibModalInstance.close(criteriacorp);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('CvlibraryConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'cvlibrary', function ($scope, $uibModalInstance, AppClient, SharedData, cvlibrary) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!cvlibrary) {
    cvlibrary = {};
  }

  $scope.cvlibrary = {
    username: cvlibrary.username,
    password: cvlibrary.password
  };

  $scope.update = function () {
    if (!$scope.cvlibrary.username || !$scope.cvlibrary.password) return;
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateCvlibraryConfig({
      username: $scope.cvlibrary.username,
      password: $scope.cvlibrary.password,
      companyId: $scope.shared.activeCompany.company._id
    }, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("cvlibrary", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_bamboohr = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_cvlibrary = true;
      $uibModalInstance.close(cvlibrary);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('DeputyConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'deputy', function ($scope, $uibModalInstance, AppClient, SharedData, deputy) {
  $scope.integrationError = false;

  if (!deputy) {
    deputy = {};
  }

  $scope.deputy = {};

  if (deputy.custom_field_map && deputy.custom_field_map.length) {
    $scope.deputy.custom_field_map = deputy.custom_field_map;
  } else {
    $scope.deputy.custom_field_map = [{
      custom_field: null,
      deputy_field: null
    }];
  }

  $scope.deputyFields = [{
    id: 'intRoleId',
    name: 'Role ID'
  }, {
    id: 'intGender',
    name: 'Gender ID'
  }, {
    id: 'intStressProfile',
    name: 'Stress Profile ID'
  }, {
    id: 'strSalutation',
    name: 'Salutation'
  }, {
    id: 'strDob',
    name: 'Date of Birth'
  }, {
    id: 'strStartDate',
    name: 'Start Date'
  }, {
    id: 'strMobilePhone',
    name: 'Mobile Phone'
  }, {
    id: 'strPayrollId',
    name: 'Payroll ID'
  }, {
    id: 'fltWeekdayRate',
    name: 'Weekday Rate'
  }, {
    id: 'fltSaturdayRate',
    name: 'Saturday Rate'
  }, {
    id: 'fltSundayRate',
    name: 'Sunday Rate'
  }, {
    id: 'fltPublicHolidayRate',
    name: 'Public Holiday Rate'
  }, {
    id: 'fltAnnualSalary',
    name: 'Annual Salary'
  }, {
    id: 'strStreet',
    name: 'Street'
  }, {
    id: 'strCountryCode',
    name: 'Country Code'
  }, {
    id: 'strState',
    name: 'State'
  }, {
    id: 'strCity',
    name: 'City'
  }, {
    id: 'strPostCode',
    name: 'Post Code'
  }, {
    id: 'strEmergencyAddressContactName',
    name: 'Emergency Address Contact Name'
  }, {
    id: 'strEmergencyAddressPhone',
    name: 'Emergency Address Phone'
  }];
  AppClient.getCompanyCustomFields(SharedData.activeCompany.company._id).then(function (results) {
    $scope.customFields = results;
  });

  $scope.addMapping = function () {
    $scope.deputy.custom_field_map.push({
      custom_field: null,
      deputy_field: null
    });
  };

  $scope.removeMapping = function (index) {
    $scope.deputy.custom_field_map.splice(index, 1);
  };

  $scope.update = function () {
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    deputy.custom_field_map = _.filter($scope.deputy.custom_field_map, function (obj) {
      return obj.custom_field && obj.deputy_field;
    });
    AppClient.updateDeputyConfig({
      deputy: deputy,
      companyId: SharedData.activeCompany.company._id
    }, function (error, result) {
      console.log('close', close);
      $uibModalInstance.close(deputy);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('EmbedConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', '$http', function ($scope, $uibModalInstance, AppClient, SharedData, $http) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.widget = {
    'group_by': 'none'
  };
  $scope.showWidget = {
    'iframe': false,
    'inline': false
  };
  var includeFiltersMarkup = "<div id='BrzyHr_app'></div><script src='https://" + $scope.shared.activeCompany.company.friendly_id + ".breezy.hr/embed/js?bzsrc=jswidget&include_filters=true'></script>";
  var excludeFiltersMarkup = "<div id='BrzyHr_app'></div><script src='https://" + $scope.shared.activeCompany.company.friendly_id + ".breezy.hr/embed/js?bzsrc=jswidget'></script>";
  $scope.widgetInline = "<div id='bzOpeningsContainer'></div><script src='https://" + $scope.shared.activeCompany.company.friendly_id + ".breezy.hr/embed/js?inline=true'></script>";

  $scope.toggleWidget = function (type) {
    $scope.showWidget[type] = !$scope.showWidget[type];
  };

  $scope.update = function () {
    $scope.appClient.updateCompanyEmbedWidget($scope.shared.activeCompany.company._id, $scope.widget, function (error, result) {
      $uibModalInstance.close();
    });
  };

  var getInlineWidgetMarkup = function getInlineWidgetMarkup() {
    var qs = "";

    if ($scope.widget.include_apply) {
      qs += "&apply=true";
    }

    if ($scope.widget.group_by) {
      qs += "&group_by=" + $scope.widget.group_by;
    }

    var defaultLink = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/embed/js?inline=true';
    return "<div id='bzOpeningsContainer'></div><script src='" + defaultLink + qs + "'></script>";
  };

  $scope.$watch('widget.group_by', function (newVal, oldVal) {
    $scope.widgetInline = getInlineWidgetMarkup();
  }, true);
  $scope.$watch('widget.include_apply', function (newVal, oldVal) {
    $scope.widgetInline = getInlineWidgetMarkup();
  }, true);

  var getWidgetMarkup = function getWidgetMarkup() {
    var qs = "";

    if ($scope.widget.include_filters) {
      qs += "&include_filters=true";
    }

    if ($scope.widget.link_external) {
      qs += "&link_external=true";
    }

    if ($scope.widget.no_pos_msg) {
      qs += "&no_pos_msg=true";
    }

    var defaultLink = 'https://' + $scope.shared.activeCompany.company.friendly_id + '.breezy.hr/embed/js?bzsrc=jswidget';
    return "<div id='BrzyHr_app'></div><script src='" + defaultLink + qs + "'></script>";
  };

  $scope.$watch('widget', function (newVal, oldVal) {
    $scope.widget.embed_markup = getWidgetMarkup();
  }, true);

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var initializeInlineWidget = function initializeInlineWidget() {
    $http.get('/data/positionTypes.json').success(function (data) {
      $scope.positionTypes = data;
    }).error(function (error) {
      console.log('Error fetching position types JSON!: ' + error);
    });
  };

  $scope.appClient.getCompanyEmbedWidget($scope.shared.activeCompany.company._id, function (error, result) {
    $scope.widget = result;

    if (!$scope.widget.embed_markup) {
      $scope.widget.embed_markup = excludeFiltersMarkup;
    }

    if (!$scope.widget.include_filters) {
      $scope.widget.include_filters = false;
    }

    if (!$scope.widget.link_external) {
      $scope.widget.link_external = false;
    }
  });
}]);
'use strict';

angular.module('appController').controller('FacebookJobsTabModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', function ($scope, $uibModalInstance, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;

  $scope.update = function () {
    $scope.messageStatus = "Saving...";
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('FacebookFeedConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'facebookFeed', function ($scope, $uibModalInstance, AppClient, SharedData, facebookFeed) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!facebookFeed) {
    facebookFeed = {};
  }

  $scope.facebookFeed = {
    'company_full_address': facebookFeed.company_full_address,
    'facebook_url': facebookFeed.facebook_url
  };

  function handleError(error) {
    $scope.messageStatus = '';

    if (error.indexOf('Invalid Facebook URL') > -1) {
      $scope.errorMessage = 'Sorry, there was a problem. It looks like the Facebook URL you\'ve entered is invalid.';
    } else if (error === 'Missing Data') {
      $scope.errorMessage = 'Sorry, there was a problem. It looks like the data you\'ve entered is invalid or missing.';
    }

    $scope.integrationError = true;
    $scope.appClient.disableIntegration("facebook_feed", $scope.shared.activeCompany.company._id, function () {
      $scope.shared.activeCompany.company.has_facebook_feed = false;
    });
  }

  $scope.update = function () {
    if (!$scope.facebookFeed.company_full_address || !$scope.shared.activeCompany.portal.social.website_url || !$scope.facebookFeed.facebook_url) {
      return handleError('Missing Data');
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateFacebookFeedConfig($scope.facebookFeed.company_full_address, $scope.facebookFeed.facebook_url, $scope.shared.activeCompany.company._id, function (error, result) {
      if (error || result.error) {
        return handleError(error ? error : result.error);
      }

      $scope.appClient.updatePortalSocial($scope.shared.activeCompany.company._id, $scope.shared.activeCompany.portal.social, function (error) {
        $scope.messageStatus = '';

        if (error || result.error) {
          return handleError(error ? error : result.error);
        }

        $scope.shared.activeCompany.company.has_facebook_feed = true;
        facebookFeed.company_full_address = $scope.facebookFeed.company_full_address;
        facebookFeed.facebook_url = $scope.facebookFeed.facebook_url;
        $uibModalInstance.close(facebookFeed);
      });
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('GoodhireCreateModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', '$http', function ($scope, $uibModalInstance, AppClient, SharedData, $http) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;
  $scope.emailConflictError = false;
  $scope.formState = {
    companyCreated: false
  };
  $scope.goodhire = {
    name: $scope.shared.activeCompany.company.name,
    emailAddress: $scope.shared.user.email_address
  };
  $scope.industries = ['Accounting', 'Agriculture', 'Architecture', 'Construction', 'Defense', 'Education', 'Energy/Utility', 'Engineering', 'Financial', 'Food', 'Beverage', 'Government', 'Healthcare', 'Insurance', 'Legal', 'Leisure/Hospitality', 'Manufacturing', 'Marketing/PR', 'Media', 'Non-profit', 'Professional services', 'Real estate', 'Retail', 'Security', 'Sharing Economy', 'Staffing', 'Technology', 'Transportation', 'Travel'];

  $scope.createGoodhireCompany = function () {
    if ($scope.formState.companyCreated) {
      $scope.createGoodhireRequestor();
      return;
    }

    if (!verifyGoodhireCompany()) return;
    $scope.messageStatus = 'Registering...';
    $scope.error = false;
    $scope.formState.success = false;
    $scope.formState.submitted = true;
    return AppClient.createGoodhireCompany({
      goodhireCompany: $scope.goodhire,
      companyId: $scope.shared.activeCompany.company._id
    }).then(function (result) {
      if (!result) {
        $scope.messageStatus = '';
        $scope.integrationError = true;
        $scope.formState.submitted = false;
        return;
      }

      $scope.shared.activeCompany.company.has_goodhire = true;
      $scope.createGoodhireRequestor(result);
    }).catch(function () {
      $scope.messageStatus = '';
      $scope.integrationError = true;
      $scope.formState.submitted = false;
    });
  };

  $scope.createGoodhireRequestor = function (goodhireCompany) {
    $scope.messageStatus = 'Registering...';
    $scope.error = false;
    $scope.emailConflictError = false;
    $scope.formState.submitted = true;
    return AppClient.createGoodhireRequestor({
      companyId: $scope.shared.activeCompany.company._id,
      emailAddress: $scope.goodhire.emailAddress
    }).then(function (result) {
      if (!result) {
        $scope.messageStatus = '';
        $scope.integrationError = true;
        $scope.formState.submitted = false;
        $scope.formState.companyCreated = true;
        return;
      }

      $scope.shared.activeCompany.user_settings.goodhire = {
        goodhire_id: result.goodhire_id
      };
      $scope.formState.success = true;
      setTimeout(function () {
        $uibModalInstance.close(goodhireCompany);
      }, 3000);
    }).catch(function (err) {
      if (err.StatusCode === 'Conflict') {
        $scope.emailConflictError = true;
      } else {
        $scope.integrationError = true;
      }

      $scope.messageStatus = '';
      $scope.formState.submitted = false;
      $scope.formState.companyCreated = true;
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  function verifyGoodhireCompany() {
    var required = ['emailAddress', 'name', 'phone', 'address', 'city', 'state', 'zip', 'stateOfIncorporation', 'industry', 'numberEmployees'],
        isValid = true;
    required.forEach(function (key) {
      if (!$scope.goodhire[key]) isValid = false;
    });
    return isValid;
  }

  var initializeStates = function initializeStates() {
    $http.get('/data/states.json').success(function (data) {
      $scope.states = data;
    }).error(function (error) {
      console.log('Error fetching states JSON!: ' + error);
    });
  };

  initializeStates();
}]).controller('GoodhireCreateRequestorModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'emailConflict', 'position', 'candidate', function ($scope, $uibModalInstance, AppClient, SharedData, emailConflict, position, candidate) {
  $scope.shared = SharedData;
  $scope.candidate = candidate;
  $scope.integrationError = false;
  $scope.emailConflict = emailConflict;
  $scope.formState = {};
  $scope.goodhire = {
    emailAddress: $scope.shared.user.email_address
  };

  $scope.createGoodhireRequestor = function () {
    if (!verifyGoodhire()) return;
    $scope.messageStatus = 'Registering...';
    $scope.error = false;
    $scope.emailConflict = false;
    $scope.formState.success = false;
    $scope.formState.submitted = true;
    var body = {
      companyId: $scope.shared.activeCompany.company._id,
      emailAddress: $scope.goodhire.emailAddress
    };

    if (position && position._id) {
      body.positionId = position._id;
    }

    return AppClient.createGoodhireRequestor(body).then(function (result) {
      if (!result) {
        $scope.messageStatus = '';
        $scope.integrationError = true;
        return;
      }

      $scope.shared.activeCompany.user_settings.goodhire = {
        goodhire_id: result.goodhire_id
      };
      $scope.formState.success = true;
      setTimeout(function () {
        $uibModalInstance.close(result);
      }, 3000);
    }).catch(function (err) {
      if (err.StatusCode === 'Conflict') {
        $scope.emailConflict = true;
      } else {
        $scope.integrationError = true;
      }

      $scope.messageStatus = '';
      $scope.formState.success = false;
      $scope.formState.submitted = false;
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  function verifyGoodhire() {
    var required = ['emailAddress'],
        isValid = true;
    required.forEach(function (key) {
      if (!$scope.goodhire[key]) isValid = false;
    });
    return isValid;
  }
}]);
'use strict';

angular.module('appController').controller('GoodhireConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'RESTClient', 'SharedData', 'goodhire', function ($scope, $uibModalInstance, RESTClient, SharedData, goodhire) {
  $scope.shared = SharedData;
  $scope.search = {};
  $scope.companyBillingCodes = [];

  if (SharedData.activeCompany.company.billing_codes) {
    $scope.companyBillingCodes = SharedData.activeCompany.company.billing_codes.map(function (code) {
      return {
        billingCode: code
      };
    });
  }

  $scope.focusInput = function () {
    document.querySelector('#tag').focus();
  }; // Navigate user list with arrow keys and enter


  $scope.navigate = function (e) {
    var direction = null,
        index = $scope.selected,
        length = $scope.filteredBillingCodes.length - 1;

    if (e.keyCode == 27) {
      // escape
      $scope.search.billingCode = '';
      $scope.selected = 0;
    }

    if (e.keyCode == 8) {
      // delete
      if (!$scope.search || $scope.search.billingCode.length === 0) {
        $scope.createdBillingCodes.pop();
      }
    }

    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault();

      if ($scope.filteredBillingCodes.length !== 0) {
        $scope.selectBillingCode();
      } else {
        $scope.createBillingCode();
      }
    }

    if (e.keyCode == 38) {
      direction = -1;
    } // up


    if (e.keyCode == 40) {
      direction = 1;
    } // down


    if (direction) {
      e.stopPropagation();
      index += direction;
      if (index < 0) index = length;
      if (index > length) index = 0;
      $scope.selected = index;
    }
  };

  $scope.selectBillingCode = function () {
    var billingCode = this.billingCode || $scope.filteredBillingCodes[$scope.selected];

    if (billingCode.deleting) {
      billingCode.deleting = false;
    } else {
      billingCode.deleting = true;
    }

    clearSearch();
    $scope.focusInput();
  };

  $scope.createBillingCode = function () {
    // already exists
    if ($scope.companyBillingCodes.find(function (code) {
      return code.billingCode === $scope.search.billinCode;
    })) return;
    var billingCode = {
      billingCode: $scope.search.billingCode
    };
    billingCode.adding = true;
    $scope.companyBillingCodes.push(billingCode);
    clearSearch();
  };

  var clearSearch = function clearSearch() {
    if ($scope.search) $scope.search.billingCode = '';
  };

  $scope.update = function () {
    var billingCodes = $scope.companyBillingCodes.filter(function (code) {
      if (!code.deleting) return code;
    });
    billingCodes = billingCodes.map(function (code) {
      return code.billingCode;
    });
    RESTClient.modifyCompany(SharedData.activeCompany.company._id, {
      billing_codes: billingCodes
    }).then(function () {
      SharedData.activeCompany.company.billing_codes = billingCodes;
      $uibModalInstance.close();
    }).catch(function () {
      $scope.integrationError = true;
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('HackerRankConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'hackerrank', function ($scope, $uibModalInstance, AppClient, SharedData, hackerrank) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!hackerrank) {
    hackerrank = {};
  }

  $scope.hackerrank = {
    'api_key': hackerrank.api_key
  };

  $scope.update = function () {
    if (!$scope.hackerrank.api_key) return;
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateHackerRankConfig($scope.hackerrank.api_key, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("hackerrank", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_hackerrank = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_hackerrank = true;
      hackerrank.api_key = $scope.hackerrank.api_key;
      $uibModalInstance.close(hackerrank);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('IndeedSponsoredConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'indeedSponsored', function ($scope, $uibModalInstance, AppClient, SharedData, indeedSponsored) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!indeedSponsored) {
    indeedSponsored = {};
  }

  $scope.indeedSponsored = {
    'email_address': indeedSponsored.email_address
  };

  $scope.update = function () {
    if (!$scope.indeedSponsored.email_address) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateIndeedSponsoredConfig($scope.indeedSponsored.email_address, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("indeed_sponsored", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_indeed_sponsored = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_indeed_sponsored = true;
      indeedSponsored.email_address = $scope.indeedSponsored.email_address;
      $uibModalInstance.close(indeedSponsored);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('IndeedAssessmentsConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'indeedassessments', function ($scope, $uibModalInstance, AppClient, SharedData, indeedassessments) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!indeedassessments) {
    indeedassessments = {};
  }

  $scope.indeedassessments = {
    'api_key': indeedassessments.api_key
  };

  $scope.update = function () {
    if (!$scope.indeedassessments.api_key) return;
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateIndeedAssessmentsConfig($scope.indeedassessments.api_key, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("indeedassessments", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_indeedassessments = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_indeedassessments = true;
      indeedassessments.api_key = $scope.indeedassessments.api_key;
      $uibModalInstance.close(indeedassessments);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('InovaPayrollConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'inovapayroll', 'dialog', function ($scope, $uibModalInstance, AppClient, SharedData, inovapayroll, dialog) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!inovapayroll) {
    inovapayroll = {};
  }

  $scope.inovapayroll = {
    'company_short_name': inovapayroll.company_short_name,
    'api_key': inovapayroll.api_key,
    'username': inovapayroll.username,
    'password': inovapayroll.password
  };

  $scope.update = function () {
    if (!$scope.inovapayroll.company_short_name || !$scope.inovapayroll.api_key || !$scope.inovapayroll.username || !$scope.inovapayroll.password) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateInovaPayrollConfig({
      companyShortName: $scope.inovapayroll.company_short_name,
      apiKey: $scope.inovapayroll.api_key,
      username: $scope.inovapayroll.username,
      password: $scope.inovapayroll.password,
      companyId: $scope.shared.activeCompany.company._id
    }, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("inovapayroll", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_inovapayroll = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_inovapayroll = true;
      inovapayroll.company_short_name = $scope.inovapayroll.company_short_name;
      inovapayroll.api_key = $scope.inovapayroll.api_key;
      inovapayroll.username = $scope.inovapayroll.username;
      inovapayroll.password = $scope.inovapayroll.password;
      $uibModalInstance.close(inovapayroll);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('NamelyConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'namely', function ($scope, $uibModalInstance, AppClient, SharedData, namely) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!namely) {
    namely = {};
  }

  $scope.namely = {
    'subdomain': namely.subdomain,
    'api_key': namely.api_key,
    'workflow': namely.workflow
  };

  if ($scope.namely.workflow === undefined) {
    $scope.namely.workflow = "hris";
  }

  $scope.update = function () {
    if (!$scope.namely.subdomain) {
      return;
    }

    if (!$scope.namely.api_key) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateNamelyConfig($scope.namely, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("namely", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_namely = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_namely = true;
      namely.subdomain = $scope.namely.subdomain;
      namely.api_key = $scope.namely.api_key;
      namely.workflow = $scope.namely.workflow;
      $uibModalInstance.close(namely);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('OktaConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', '$upload', 'AppClient', 'SharedData', 'saml', 'type', function ($scope, $uibModalInstance, $upload, AppClient, SharedData, saml, type) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;
  $scope.saml = saml;
  $scope.type = type; //console.log('$scope.type = ' + $scope.type);

  $scope.company = SharedData.activeCompany.company;

  if (!$scope.company.settings.ats.enforceauth) {
    $scope.company.settings.ats.enforceauth = {};
  }

  $scope.update = function () {
    $scope.updateCompanySettings();
  };

  $scope.SAMLProvider = function () {
    if ($scope.saml) {
      if ($scope.saml.hasOwnProperty('provider')) {
        return $scope.saml.provider;
      } else {
        return 'okta';
      }
    }

    return null;
  };

  $scope.addEmailDomain = function (domain) {
    domain = domain.toLowerCase();

    if (!$scope.appClient.isValidDomain(domain)) {
      dialog.alert({
        message: "Oops, it doesn't look like you've entered a valid domain."
      }, function (result) {});
      return;
    }

    if ($scope.company.settings.ats.enforceauth.domains.indexOf(domain) > -1) {
      return;
    }

    $scope.company.settings.ats.enforceauth.domains.push(domain);
    $scope.emailDomain.text = '';
  };

  $scope.removeEmailDomain = function (index) {
    $scope.company.settings.ats.enforceauth.domains.splice(index, 1);
  };

  $scope.updateCompanySettings = function () {
    if (!$scope.company.settings.ats.enforceauth.type) {
      $scope.company.settings.ats.enforceauth.enabled = false;
    } else if ($scope.company.settings.ats.enforceauth.type === $scope.type) {
      $scope.company.settings.ats.enforceauth.enabled = true;
    }

    var companyData = {
      name: $scope.company.name,
      settings: $scope.company.settings
    };
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, companyData, function (error, result) {
      if (!error) {
        if (result) {
          $scope.shared.activeCompany.company = result;
        }
      }

      $scope.closeModal();
    });
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data.entityId) {
        $scope.saml = data;
        console.log('Upload complete');
        $scope.fileUploading = undefined;
        $scope.messageStatus = 'Metadata uploaded successfully'; // TODO let's do a secondary test. Further validating the data.
      }
    },
        onError = function onError() {
      $scope.integrationError = true;
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading saml metadata ....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany.company._id + '/saml/metadata?provider=' + $scope.type,
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close($scope.saml);
  };
}]);
'use strict';

angular.module('appController').controller('SeekConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'seek', function ($scope, $uibModalInstance, AppClient, SharedData, seek) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!seek) {
    seek = {};
  }

  $scope.logo = {
    id: '',
    name: ''
  };
  $scope.template = {
    id: '',
    name: '',
    fields: []
  };
  $scope.seek = {
    advertiser_ids: seek.advertiser_ids,
    mandatory_standout: seek.mandatory_standout,
    logos: seek.logos || [],
    templates: seek.templates || []
  };

  $scope.addLogo = function (e) {
    e.preventDefault();
    if (!$scope.logo.id || !$scope.logo.name) return;
    $scope.seek.logos.push(angular.copy($scope.logo));
    $scope.logo.id = '';
    $scope.logo.name = '';
  };

  $scope.deleteLogo = function (logoId) {
    var index = -1;

    for (var i = 0, j = $scope.seek.logos.length; i < j; i++) {
      if (logoId === $scope.seek.logos[i].id) {
        index = i;
      }

      if (index > -1) break;
    }

    if (index < 0) return;
    $scope.seek.logos.splice(index, 1);
  };

  $scope.addTemplate = function (e) {
    e.preventDefault();
    if (!$scope.template.id || !$scope.template.name) return;
    $scope.seek.templates.push(angular.copy($scope.template));
    console.log($scope.seek.templates);
    $scope.template.id = '';
    $scope.template.name = '';
    $scope.template.fields = [];
  };

  $scope.deleteTemplate = function (templateId) {
    var index = -1;

    for (var i = 0, j = $scope.seek.templates.length; i < j; i++) {
      if (templateId === $scope.seek.templates[i].id) {
        index = i;
      }

      if (index > -1) break;
    }

    if (index < 0) return;
    $scope.seek.templates.splice(index, 1);
  };

  $scope.addTemplateField = function () {
    $scope.template.fields.push({
      name: ''
    });
  };

  $scope.removeTemplateField = function (name) {
    $scope.template.fields = _.filter($scope.template.fields, function (field) {
      return field.name != name;
    });
  };

  $scope.update = function () {
    if (!$scope.seek.advertiser_ids) return;

    if (typeof $scope.seek.advertiser_ids === 'string') {
      $scope.seek.advertiser_ids = $scope.seek.advertiser_ids.replace(/\s/g, '').split(',');
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateSeekConfig({
      advertiser_ids: $scope.seek.advertiser_ids,
      mandatory_standout: $scope.seek.mandatory_standout,
      logos: $scope.seek.logos,
      templates: $scope.seek.templates,
      company_id: $scope.shared.activeCompany.company._id
    }, function (error, result) {
      $scope.shared.activeCompany.company.has_seek = true;
      seek.advertiser_ids = $scope.seek.advertiser_ids;
      seek.mandatory_standout = $scope.seek.mandatory_standout;
      seek.logos = $scope.seek.logos;
      seek.templates = $scope.seek.templates;
      $uibModalInstance.close(seek);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('SlackConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'slack', function ($scope, $uibModalInstance, AppClient, SharedData, slack) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.settings = {
    'channelName': slack.channel ? slack.channel.name : '',
    'notifications': slack.bzy && slack.bzy.notifications ? slack.bzy.notifications : {
      'appliedCandidates': true,
      'sourcedCandidates': true,
      'movedCandidates': true,
      'candidateFeedback': false,
      'candidateFeedbackScore': false,
      'newPosition': true,
      'movedPosition': true
    }
  };
  $scope.$watch('settings.notifications.candidateFeedback', function (newVal) {
    if ($scope.settings.notifications.candidateFeedback) {} else {
      $scope.settings.notifications.candidateFeedbackScore = false;
    }
  });

  $scope.update = function () {
    if (!$scope.settings.channelName) {
      return;
    }

    $scope.messageStatus = "Saving...";
    $scope.appClient.updateSlackConfig($scope.settings, $scope.shared.activeCompany.company._id, function (error, result) {
      slack.channel.name = $scope.settings.channelName;

      if (!slack.bzy) {
        slack.bzy = {};
      }

      slack.bzy.notifications = $scope.settings.notifications;
      $uibModalInstance.close(slack);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('TraitifyConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'traitify', function ($scope, $uibModalInstance, AppClient, SharedData, traitify) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!traitify) {
    traitify = {};
  }

  $scope.traitify = {
    'api_key': traitify.api_key
  };

  $scope.update = function () {
    if (!$scope.traitify.api_key) return;
    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateTraitifyConfig($scope.traitify.api_key, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("traitify", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_traitify = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_traitify = true;
      traitify.api_key = $scope.traitify.api_key;
      $uibModalInstance.close(traitify);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('ImportWorkableModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'workable', function ($scope, $uibModalInstance, AppClient, SharedData, workable) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!workable) {
    workable = {};
  }

  $scope.workable = {
    'subdomain': workable.subdomain,
    'access_token': workable.access_token
  };

  $scope.update = function () {
    if (!$scope.workable.subdomain) {
      return;
    }

    if (!$scope.workable.access_token) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateWorkableConfig($scope.workable.subdomain, $scope.workable.access_token, $scope.shared.activeCompany.company._id, function (error, result) {
      workable.subdomain = $scope.workable.subdomain;
      workable.access_token = $scope.workable.access_token;
      $scope.appClient.startWorkableImport($scope.shared.activeCompany.company._id, function (error, result) {
        $scope.message = 'Saved';
        $uibModalInstance.close(workable);
      });
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('XingConfigModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'xing', function ($scope, $uibModalInstance, AppClient, SharedData, xing) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!xing) {
    xing = {};
  }

  $scope.xing = {
    'order_id': xing.order_id
  };

  $scope.update = function () {
    if (!$scope.xing.order_id) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Saving...";
    $scope.appClient.updateXingConfig($scope.xing.order_id, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.messageStatus = '';

      if (error || result.error) {
        $scope.integrationError = true;
        $scope.appClient.disableIntegration("xing", $scope.shared.activeCompany.company._id, function (error, result) {
          $scope.shared.activeCompany.company.has_xing = false;
        });
        return;
      }

      $scope.shared.activeCompany.company.has_xing = true;
      xing.order_id = $scope.xing.order_id;
      $uibModalInstance.close(xing);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('InvoiceModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'companyMeta', 'invoice', 'card', function ($scope, $uibModalInstance, AppClient, SharedData, companyMeta, invoice, card) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.invoice = angular.copy(invoice);
  $scope.card = card;
  $scope.companyMeta = companyMeta;

  var getFriendlyPlanName = function getFriendlyPlanName(plan) {
    if (plan.id.indexOf("uno") > -1) {
      return "Uno";
    }

    if (plan.id.indexOf("sprout") > -1) {
      return "Sprout";
    }

    if (plan.id.indexOf("starter") > -1) {
      return "Starter";
    }

    if (plan.id.indexOf("growth") > -1) {
      return "Growth";
    }

    if (plan.id.indexOf("success") > -1) {
      return "Success";
    }

    if (plan.id.indexOf("bootstrap") > -1) {
      return "Bootstrap";
    }

    if (plan.id.indexOf("startup") > -1) {
      return "Startup";
    }

    if (plan.id.indexOf("business") > -1) {
      return "Business";
    }

    if (plan.id.indexOf("pro") > -1) {
      return "Pro";
    }

    if (plan.id.indexOf("sms") > -1) {
      return "SMS";
    }

    if (plan.id.indexOf("talent") > -1) {
      return "Talent Search";
    }
  };

  var getDollarAmmount = function getDollarAmmount(amount) {
    return (amount / 100).toFixed(2);
  }; //$scope.invoice.amount_due = getDollarAmmount($scope.invoice.amount_due);


  for (var i in $scope.invoice.lines.data) {
    var line = $scope.invoice.lines.data[i];
    line.amount = getDollarAmmount(line.amount);

    if (line.type === "subscription" && getFriendlyPlanName(line.plan)) {
      if (line.plan.id.indexOf("annually") > -1) {
        line.description = "Annual subscription to " + getFriendlyPlanName(line.plan);
      } else {
        line.description = "Monthly subscription to " + getFriendlyPlanName(line.plan);
      }
    }
  }

  $scope.print = function () {
    window.print();
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]).controller('RequestQuoteModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'details', function ($scope, $uibModalInstance, AppClient, SharedData, details) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  var data = {
    name: $scope.shared.user.name,
    email_address: $scope.shared.user.email_address,
    company_name: $scope.shared.activeCompany.company.name + " (EXISTING: " + $scope.shared.activeCompany.company._id + ")",
    employee_count: $scope.shared.activeCompany.company.employee_count ? $scope.shared.activeCompany.company.employee_count : "unknown"
  };

  if (details) {
    data = Object.assign(details, data);
  }

  $scope.appClient.requestQuote(data, function () {});
  setTimeout(function () {
    $scope.closeModal();
  }, 5000);

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]).controller('UpgradeModalInstanceCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'AppClient', 'SharedData', 'position', 'featureId', 'card', function ($scope, $uibModalInstance, $uibModal, AppClient, SharedData, position, featureId, card) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.billingError = undefined;
  $scope.billingErrorMessage = undefined;
  $scope.billingSuccess = undefined;

  var initStripe = function initStripe() {
    $scope.cardInfo = {};
    stripe_card.mount('#card-element');
    stripe_card.addEventListener('change', function (event) {
      if (event.error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = event.error.message;
      } else {
        $scope.billingError = false;
        $scope.billingErrorMessage = '';
      }
    });
  };

  if (!card) {
    $scope.billingRequired = true;
    setTimeout(initStripe, 100);
  }

  var closeModal = function closeModal() {
    $uibModalInstance.close({
      'card': card,
      'enabled': false
    });
  };

  $scope.no = function () {
    closeModal();
  };

  $scope.yes = function () {
    $scope.processing = true;
    $scope.appClient.setPositionPromotionOption(featureId, 'on', $scope.position._id, $scope.shared.activeCompany.company._id, undefined, function (error, card) {
      if (error) {
        $scope.processing = false;
        $scope.billingError = true;
        $scope.billingErrorMessage = "We had a problem processing payment. Please reenter your credit card information.";
        return;
      }

      setTimeout(function () {
        $scope.processing = false;
        $uibModalInstance.close({
          'card': card,
          'enabled': true
        });
      }, 1500);
    });
  };

  $scope.handleStripeV3 = function (token) {
    if (!$scope.cardInfo.name) return;
    $scope.processing = true;
    $scope.cardStatus = 'updatingCard';
    stripe.createToken(stripe_card, $scope.cardInfo).then(function (result) {
      if (result.error) {
        $scope.processing = false;
        $scope.billingError = true;
        $scope.billingErrorMessage = result.error.message;
        delete $scope.cardStatus;
      } else {
        // Send the token to your server.
        var token = result.token.id;
        $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
          if (error) {
            delete $scope.cardStatus;
            $scope.processing = false;
            $scope.billingError = true;
            $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
            return;
          }

          $scope.card = card;
          $scope.yes();
        });
      }
    });
  };

  $scope.cancelStripe = function () {
    $scope.no();
  };
}]).controller('CloseCompanyAccountModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', function ($scope, $uibModalInstance, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.feedback = {
    reason: ''
  };

  $scope.closeCompanyAccount = function () {
    $scope.appClient.closeCompanyAccount($scope.shared.activeCompany.company._id, $scope.feedback, function (error, result) {
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]).controller('CancelSubscriptionModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', function ($scope, $uibModalInstance, AppClient, SharedData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.feedback = {
    reason: ''
  };

  $scope.cancelSubscription = function () {
    $scope.appClient.cancelSubscription($scope.shared.activeCompany.company._id, $scope.feedback, function (error, result) {
      console.log('you got cancelled');
      setTimeout(function () {
        $scope.closeModal();
      }, 2000);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('ApprovalWorkflowModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'CompanyService', 'FeaturesService', '$uibModalInstance', '$timeout', function ($scope, AppClient, SharedData, CompanyService, FeaturesService, $uibModalInstance, $timeout) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.approvers = {};
  $scope.approvalChain = [];

  var isEmail = function isEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  $scope.addToApprovalChain = function (member) {
    $scope.approvalChain.push(member);
    $scope.approvers.searchTerm = '';
  };

  $scope.removeApprover = function (index) {
    $scope.approvalChain.splice(index, 1);
  };

  $scope.saveApprovalWorkflow = function () {
    if ($scope.approval_workflow.type !== 'none' && FeaturesService.actions.block('job_approvals')) {
      $scope.approval_workflow.type = 'none';
      return;
    }

    if ($scope.approval_workflow.type === 'chain' && $scope.approvalChain.length === 0) {
      return;
    }

    var approvalIds = $scope.approvalChain.reduce(function (acc, approver) {
      acc.push(approver._id);
      return acc;
    }, []);
    var approval_workflow = {
      type: $scope.approval_workflow.type,
      approvers: approvalIds
    };
    $scope.messageStatus = 'Saving...';
    $scope.appClient.setApprovalWorkflow($scope.shared.activeCompany.company._id, approval_workflow, function (error, result) {
      $scope.shared.activeCompany.company.approval_workflow = approval_workflow;
      $timeout(function () {
        $scope.messageStatus = 'Saved';
        $uibModalInstance.close(approval_workflow);
      }, 1000);
    });
  };

  $scope.$watch('approvers.searchTerm', function (text, prevText) {
    if (!text) {
      $scope.approvers.companyMembers = [];
      $scope.approvers.email_invitees = [];
      return;
    }

    var approvalIds = $scope.approvalChain.reduce(function (acc, approver) {
      acc.push(approver._id);
      return acc;
    }, []);
    text = text.toLowerCase();
    $scope.approvers.companyMembers = CompanyService.local.getMembers().filter(function (member) {
      return (member.name.toLowerCase().indexOf(text) > -1 || member.email_address.split('@')[0].indexOf(text) > -1) && approvalIds.indexOf(member._id) === -1;
    });

    if (isEmail(text) && approvalIds.indexOf(text) === -1) {
      $scope.approvers.email_invitees = [];
      var approver = {
        '_id': $scope.approvers.searchTerm,
        'initial': $scope.approvers.searchTerm.substring(0, 1).toUpperCase(),
        'name': $scope.approvers.searchTerm,
        'hex_color': 'color4'
      };
      $scope.approvers.email_invitees.push(approver);
    }
  });

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  var initialize = function initialize() {
    if ($scope.shared.activeCompany.company.approval_workflow) {
      $scope.approval_workflow = angular.copy($scope.shared.activeCompany.company.approval_workflow);

      if (!$scope.approval_workflow.approvers) {
        $scope.approval_workflow.approvers = [];
      }
    } else {
      $scope.approval_workflow = {
        type: 'any_admin',
        approvers: []
      };
    }

    $scope.approvalChain = $scope.approval_workflow.approvers.map(function (id) {
      var approver = {};

      if (isEmail(id)) {
        approver = {
          '_id': id,
          'initial': id.substring(0, 1).toUpperCase(),
          'name': id,
          'hex_color': 'color4'
        };
      } else {
        approver = CompanyService.local.getMemberById(id);
      }

      return approver;
    }); // remove orphans

    $scope.approvalChain = $scope.approvalChain.reduce(function (acc, approver) {
      if (approver) {
        acc.push(approver);
      }

      return acc;
    }, []);
  };

  initialize();
}]);
'use strict';

angular.module('appController').controller('AccountSettingsModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModalInstance', '$uibModal', '$timeout', '$location', '$upload', 'AppClient', 'SharedData', 'defaultTab', '$parentScope', '$cookieStore', 'dialog', 'TaggingService', 'PositionsService', 'ModalService', 'FeaturesService', function ($scope, $rootScope, $state, $http, $uibModalInstance, $uibModal, $timeout, $location, $upload, AppClient, SharedData, defaultTab, $parentScope, $cookieStore, dialog, TaggingService, PositionsService, ModalService, FeaturesService) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.settings = SharedData.activeCompany.company.settings;
  var oauthErrorMessage = $location.search().oauth_error;

  if (oauthErrorMessage) {
    dialog.alert({
      message: oauthErrorMessage
    });
  }

  $scope.Math = window.Math;
  $scope.gaEventTracker = $parentScope.gaEventTracker;
  $scope.messengerSettings = $parentScope.messengerSettings;
  $scope.showMessageTemplate = false;
  $scope.positionPipelineCount = 0;
  $scope.poolPipelineCount = 0;

  for (var key in SharedData.activeCompany.pipelines) {
    if (key !== 'default' && key !== 'default_pool') {
      if (SharedData.activeCompany.pipelines[key].type === 'pool') {
        $scope.poolPipelineCount++;
      } else {
        $scope.positionPipelineCount++;
      }
    }
  }

  $scope.templateFilter = {
    name: ''
  };
  $scope.template = {};
  $scope.messenger = {
    enabled: false
  };
  $scope.interview_guides = $scope.shared.activeCompany.interview_guides;
  $scope.interviewGuidesFilter = {};
  $scope.questionnaires = $scope.shared.activeCompany.questionnaires;
  $scope.questionnairesFilter = {}; //$scope.reasons = $scope.shared.activeCompany.reasons;

  $scope.scorecards = $scope.shared.activeCompany.scorecards;
  $scope.scorecardsFilter = {};
  $scope.pipeline = angular.copy($scope.shared.activeCompany.pipeline);
  $scope.pipelineDefault = {};
  $scope.poolPipelineDefault = {};
  $scope.positionFilter = {
    type: "position"
  };
  $scope.poolFilter = {
    type: "pool"
  };
  $scope.pipelines = [];
  $scope.team = [];
  $scope.team_invited = [];
  $scope.subject_template = angular.copy($scope.shared.activeCompany.messaging.subject_template);
  $scope.questionnaire_template = angular.copy($scope.shared.activeCompany.messaging.questionnaire_template);
  $scope.templates = $scope.shared.activeCompany.templates;
  /**
   * folders
   */

  $scope.templatesNoFolders = [];
  $scope.folders = {};

  function setTemplatesAndFolders() {
    $scope.templatesNoFolders = $scope.templates.filter(function (template) {
      return !template.folder_id;
    });
    var templatesWithFolders = $scope.templates.filter(function (template) {
      return !!template.folder_id;
    });
    Object.keys($scope.shared.activeCompany.folders).forEach(function (key) {
      $scope.folders[key] = $scope.shared.activeCompany.folders[key].map(function (folder) {
        folder.templates = templatesWithFolders.filter(function (template) {
          return template.folder_id === folder._id;
        });
        folder.show = false;
        return folder;
      });
    });
  }

  setTemplatesAndFolders();
  /**
   * end folders
   */

  $scope.campaigns = $scope.shared.activeCompany.campaigns || [];
  $scope.custom_fields = $scope.shared.activeCompany.custom_fields || [];
  $scope.templatesFilter = {};
  $scope.linkFilter = {};
  $scope.schedulingLinks = $scope.shared.activeCompany.scheduling_links;
  $scope.listSortOptions = [{
    name: 'Default',
    value: null
  }, {
    name: 'Alphabetical',
    value: 'name'
  }];
  $scope.listSortOrder = $cookieStore.get('listSortOrder') || $scope.listSortOptions[0];

  $scope.setListSortOption = function (option) {
    $cookieStore.put('listSortOrder', option);
    $scope.listSortOrder = option;
  };

  $scope.docSigningTemplates = [];
  $scope.docSigningTemplatesFilter = {};
  $scope.userTypes = $scope.shared.userTypes;
  $scope.createdTags = [];
  $scope.companyTags = [];
  $scope.selected = 0;
  $scope.search = {};
  $scope.admins = {};
  $scope.form = {};
  $scope.features = {
    multiple_pipeline: FeaturesService.getters.available('multiple_pipeline')
  };
  TaggingService.get($scope.shared.activeCompany.company._id).then(function (results) {
    $scope.companyTags = results;
  });

  $scope.selectTag = function () {
    var tag = angular.lowercase(this.tag) || $scope.filteredTags[$scope.selected];

    if (tag.deleting) {
      tag.deleting = false;
    } else {
      tag.deleting = true;
    }

    clearSearch();
    $scope.focusInput();
  };

  $scope.saveTags = function (tags) {
    var deleteTags = [];
    var addTags = $scope.companyTags.filter(function (tag) {
      if (tag.adding) {
        delete tag.adding;
        return tag;
      }
    });

    for (var i = $scope.companyTags.length - 1; i >= 0; i--) {
      var tag = $scope.companyTags[i];

      if (tag.deleting) {
        deleteTags.push($scope.companyTags.splice(i, 1)[0]);
      }
    }

    TaggingService.add($scope.shared.activeCompany.company._id, addTags).then(function (results) {//console.log(results);
    });
    TaggingService.delete($scope.shared.activeCompany.company._id, deleteTags).then(function (results) {//console.log(results);
    });
    $scope.updateSuccess = true;
    setTimeout(function () {
      $scope.updateSuccess = false;
    }, 2000);
  };

  $scope.createTag = function () {
    // already exists
    if ($scope.companyTags.find(function (tag) {
      return tag.tag === $scope.search.tag;
    })) return;
    var tag = {
      tag: $scope.search.tag
    }; //$scope.createdTags.push(tag);

    tag.adding = true;
    $scope.companyTags.push(tag);
    clearSearch();
  };

  $scope.removeTag = function () {
    var tag_id = this.tag.id;
    $scope.createdTags.splice(this.$index, 1);
  };

  $scope.focusInput = function () {
    document.querySelector('#tag').focus();
  };

  var clearSearch = function clearSearch() {
    if ($scope.search) $scope.search.tag = '';
  }; // Navigate user list with arrow keys and enter


  $scope.navigate = function (e) {
    //console.log(e.keyCode);
    //console.log($scope.filteredTags);
    var direction = null,
        index = $scope.selected,
        length = $scope.filteredTags.length - 1;

    if (e.keyCode == 27) {
      // escape
      $scope.search.tag = '';
      $scope.selected = 0;
    }

    if (e.keyCode == 8) {
      // delete
      if (!$scope.search || $scope.search.tag.length === 0) {
        $scope.createdTags.pop();
      }
    }

    if (e.keyCode == 13) {
      // enter
      e.stopPropagation();
      e.preventDefault(); //console.log($scope.filteredTags);

      if ($scope.filteredTags.length !== 0) {
        $scope.selectTag();
      } else {
        $scope.createTag();
      }
    }

    if (e.keyCode == 38) {
      direction = -1;
    } // up


    if (e.keyCode == 40) {
      direction = 1;
    } // down


    if (direction) {
      e.stopPropagation();
      index += direction;
      if (index < 0) index = length;
      if (index > length) index = 0;
      $scope.selected = index;
    }
  };

  $scope.pipelineUsage = {};
  $scope.appClient.getPipelines($scope.shared.activeCompany.company._id, function (error, result) {
    $scope.pipelineDefault = result.default;
    $scope.pipelineDefault._id = 'default';
    delete result.default;
    $scope.poolPipelineDefault = result.default_pool;
    $scope.poolPipelineDefault._id = 'default_pool';
    delete result.default_pool; //$scope.candidatePoolPipeline = angular.copy(result[$scope.shared.activeCompany.company._id]);

    delete result[$scope.shared.activeCompany.company._id];
    $scope.pipelines = result;
    $scope.pipelinesArray = [];
    Object.keys(result).forEach(function (key) {
      $scope.pipelinesArray.push(result[key]);
    });
    /*$scope.positionPipelines = $scope.pipelines.reduce(pipeline => {
        console.log(pipeline);
    }, []);*/

    var allPools = PositionsService.local.getAllPositions().filter(function (position) {
      return position.org_type === "pool";
    });
    var allPositions = PositionsService.local.getAllPositions().filter(function (position) {
      return position.org_type !== "pool";
    });
    var pipelineKeys = Object.keys($scope.pipelines);
    pipelineKeys.push($scope.poolPipelineDefault._id);
    pipelineKeys.push($scope.pipelineDefault._id); //console.log(JSON.stringify(pipelineKeys));

    for (var i in pipelineKeys) {
      var pipelineKey = pipelineKeys[i];
      $scope.pipelineUsage[pipelineKey] = allPools.filter(function (pool) {
        //console.log("Key: " + pipelineKey + " - Pool: " + pool.pipeline_id);
        if (pipelineKey === "default_pool" && !pool.pipeline_id) {
          return true;
        }

        if (pool.pipeline_id === pipelineKey) {
          return true;
        }
      });
      $scope.pipelineUsage[pipelineKey] = allPositions.filter(function (position) {
        //console.log("Key: " + pipelineKey + " - Position: " + position.pipeline_id);
        if (pipelineKey === "default" && !position.pipeline_id) {
          return true;
        }

        if (position.pipeline_id === pipelineKey) {
          return true;
        }
      });
    }

    ;
  });

  $scope.filterPipelines = function (pipelines, type) {
    var result = {};
    angular.forEach(pipelines, function (value, key) {
      if (value.type === type) {
        result[key] = value;
      }
    });
    return result;
  };

  var initializePlanState = function initializePlanState() {
    var plan = $scope.shared.activeCompany.company.plan;

    if (plan.id == "freebie") {
      $scope.trialPlan = true;
      var now = new Date();
      var trialEnds = new Date($scope.shared.activeCompany.company.trial_expiry_date);
      $scope.trialDaysLeft = Math.round((trialEnds.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

      if ($scope.trialDaysLeft < 0) {
        $scope.trialDaysLeft = 0;
      }

      console.log('Trial ends: ' + trialEnds);
      console.log('Trial days left: ' + $scope.trialDaysLeft);
    }
  };

  initializePlanState();
  $scope.invite = {
    'user_type': 'member',
    'invitees': []
  };
  $scope.dragControlListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.pipeline'
  };

  $scope.openAddSchedulingLinks = function (link) {
    if (FeaturesService.actions.block('scheduling_links')) return;
    ModalService.openAddSchedulingLinks(link).then(function (result) {
      if (result) {
        var index = $scope.schedulingLinks.findIndex(function (link) {
          return link._id === result._id;
        });

        if (index > -1) {
          $scope.schedulingLinks[index] = result;
        } else {
          $scope.schedulingLinks.push(result);
        }
      }
    });
  };

  $scope.openAddPoolPipeline = function (_pipeline) {
    if ((!_pipeline || ['default', 'default_pool'].indexOf(_pipeline._id) === -1) && FeaturesService.actions.block('multiple_pipeline')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_pipeline_modal.html',
      controller: 'AddPipelineModalInstanceCtrl',
      size: 'sm',
      resolve: {
        pipeline: function pipeline() {
          return _pipeline;
        },
        $parentScope: function $parentScope() {
          return $scope;
        },
        pipelineType: function pipelineType() {
          return "pool";
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (result._id === 'default') {
          $scope.pipelineDefault = result;
        } else if (result._id == 'default_pool') {
          $scope.poolPipelineDefault = result;
        } else {
          $scope.pipelines[result._id] = result;
          $scope.poolPipelineCount++;
        } // update shared service


        $scope.shared.activeCompany.pipelines[result._id] = result;
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddPoolPipeline");
  };

  $scope.openAddPipeline = function (_pipeline2) {
    if ((!_pipeline2 || ['default', 'default_pool'].indexOf(_pipeline2._id) === -1) && FeaturesService.actions.block('multiple_pipeline')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_pipeline_modal.html',
      controller: 'AddPipelineModalInstanceCtrl',
      size: 'sm',
      resolve: {
        pipeline: function pipeline() {
          return _pipeline2;
        },
        $parentScope: function $parentScope() {
          return $scope;
        },
        pipelineType: function pipelineType() {
          return "position";
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (result._id === 'default') {
          $scope.pipelineDefault = result;
        } else if (result._id == 'default_pool') {
          $scope.poolPipelineDefault = result;
        } else {
          $scope.pipelines[result._id] = result;
          $scope.positionPipelineCount++;
        } // update shared service


        $scope.shared.activeCompany.pipelines[result._id] = result;
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddPipeline");
  };

  $scope.updatePipeline = function () {
    var data = {
      pipeline: $scope.pipeline
    }; // sending pipelineId as undefined updates the default pipeline automagically

    $scope.appClient.updatePipeline($scope.shared.activeCompany.company._id, undefined, data, function (error, result) {
      if (result) {
        $scope.$apply(function () {
          $scope.shared.activeCompany.pipeline = $scope.pipeline;
        });
      }
    });
  };

  $scope.updateDefaultSubject = function () {
    $scope.appClient.updateDefaultSubject($scope.shared.activeCompany.company._id, $scope.subject_template.body, function (error) {
      if (!error) {
        $scope.subjectChanged = false;
        $scope.shared.activeCompany.messaging.subject_template = $scope.subject_template;
      }
    });
  };

  $scope.removePipeline = function (index, pipeline) {
    var positionsAffected = [];
    var position, positionId, i;

    for (i in $scope.shared.activeCompany.positions) {
      position = $scope.shared.activeCompany.positions[i];

      if (position.pipeline_id == pipeline._id) {
        positionsAffected.push(position._id);
      }
    }

    if (positionsAffected.length > 0) {
      dialog.confirm({
        title: 'Delete Pipeline?',
        message: "Deleting this pipeline will affect ".concat(positionsAffected.length, " position").concat(positionsAffected.length > 1 ? 's' : '', ".")
      }, function (result) {
        if (result === true) {
          $scope.appClient.deletePipeline($scope.shared.activeCompany.company._id, pipeline._id, function (error, result) {
            delete $scope.pipelines[pipeline._id];
            delete $scope.shared.activeCompany.pipelines[pipeline._id];
          });

          for (i in positionsAffected) {
            positionId = positionsAffected[i];
            $scope.appClient.setPositionPipeline('default', positionId, $scope.shared.activeCompany.company._id, function (error, result) {
              $scope.shared.activeCompany.positions[positionId].pipeline_id = 'default';
            });
          }
        }
      });
    } else {
      $scope.appClient.deletePipeline($scope.shared.activeCompany.company._id, pipeline._id, function (error, result) {
        delete $scope.pipelines[pipeline._id];
      });
    }
  };

  $scope.removeStage = function (index, stage) {
    if (stage.id === 'applied') {
      return;
    }

    $scope.pipeline.splice(index, 1);
  };

  $scope.insertDefaultSubjectVariable = function ($item, elem) {
    $rootScope.$broadcast('insertTemplateVariable:' + elem, $item.value);
  };

  $scope.insertDefaultQuestionnaireTemplateVariable = function ($item, $model) {
    $rootScope.$broadcast('insertTemplateVariable', $item.value);
  };

  $scope.openGreenhouseImport = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_import_greenhouse_modal.html',
      controller: 'ImportGreenhouseModalInstanceCtrl',
      size: 'sm',
      resolve: {
        greenhouse: function greenhouse() {
          return $scope.integrations.greenhouse;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.greenhouse = result;
        $scope.integrations.greenhouse.progress = 1;
      }
    }, function () {});
    $scope.gaEventTracker("OpenGreehouseImport");
  };

  $scope.openLeverImport = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_import_lever_modal.html',
      controller: 'ImportLeverModalInstanceCtrl',
      size: 'sm',
      resolve: {
        lever: function lever() {
          return $scope.integrations.lever;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.lever = result;
        $scope.integrations.lever.progress = 1;
      }
    }, function () {});
    $scope.gaEventTracker("OpenLeverImport");
  };

  $scope.openWorkableImport = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_import_workable_modal.html',
      controller: 'ImportWorkableModalInstanceCtrl',
      size: 'sm',
      resolve: {
        workable: function workable() {
          return $scope.integrations.workable;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.workable = result;
        $scope.integrations.workable.progress = 1;
      }
    }, function () {});
    $scope.gaEventTracker("OpenWorkableImport");
  };

  $scope.openEmbedOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_portal_embed_modal.html',
      controller: 'EmbedConfigModalInstanceCtrl',
      size: 'sm',
      resolve: {}
    });
    modalInstance.result.then(function (result) {
      if (result) {}
    }, function () {});
    $scope.gaEventTracker("OpenEmbedOptions");
  }; // $scope.openBambooHROptions = function () {
  //     if (FeaturesService.actions.block('hris', { specific: 'bamboo' })) return;
  //     var modalInstance = $uibModal.open({
  //         templateUrl: '/templates/v2/app/settings/_update_bamboohr_modal.html',
  //         controller: 'BambooHRConfigModalInstanceCtrl',
  //         size: 'md',
  //         resolve: {
  //             bamboohr: function () {
  //                 return $scope.integrations.bamboohr;
  //             }
  //         }
  //     });
  //     modalInstance.result.then(function (result) {
  //         if(result) {
  //             $scope.integrations.bamboohr = result;
  //         }
  //     }, function () { });
  // };


  $scope.openBambooHROptionsOpenId = function () {
    if (FeaturesService.actions.block('hris', {
      specific: 'bamboo'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_bamboohr_openid_modal.html',
      controller: 'BambooHROpenIdConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        bamboohr: function bamboohr() {
          return $scope.integrations.bamboohr;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.bamboohr = result;
      }
    }, function () {});
  };

  $scope.openNamelyOptions = function () {
    if (FeaturesService.actions.block('hris', {
      specific: 'namely'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_namely_modal.html',
      controller: 'NamelyConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        namely: function namely() {
          return $scope.integrations.namely;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.namely = result;
      }
    }, function () {});
  };

  $scope.openInovaPayrollOptions = function () {
    if (FeaturesService.actions.block('hris', {
      specific: 'inovapayroll'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_inovapayroll_modal.html',
      controller: 'InovaPayrollConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        inovapayroll: function inovapayroll() {
          return $scope.integrations.inovapayroll;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.saashr = result;
      }
    }, function () {});
  };

  $scope.openHackerRankOptions = function () {
    if (FeaturesService.actions.block('assessments', {
      specific: 'hackerrank'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_hackerrank_modal.html',
      controller: 'HackerRankConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        hackerrank: function hackerrank() {
          return $scope.integrations.hackerrank;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.hackerrank = result;
      }

      initializeAssessments();
    }, function () {});
  };

  $scope.openCriteriaCorpOptions = function () {
    if (FeaturesService.actions.block('assessments', {
      specific: 'criteriacorp'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_criteriacorp_modal.html',
      controller: 'CriteriaCorpConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        criteriacorp: function criteriacorp() {
          return $scope.integrations.criteriacorp;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.criteriacorp = result;
      }

      initializeAssessments();
    }, function () {});
  };

  $scope.openDeputyOptions = function () {
    if (FeaturesService.actions.block('assessments', {
      specific: 'deputy'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_deputy_modal.html',
      controller: 'DeputyConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        deputy: function deputy() {
          return $scope.integrations.deputy;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.deputy = result;
      }

      initializeAssessments();
    }, function () {});
  };

  $scope.openIndeedAssessmentsOptions = function () {
    if (FeaturesService.actions.block('assessments', {
      specific: 'indeed'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_indeedassessments_modal.html',
      controller: 'IndeedAssessmentsConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        indeedassessments: function indeedassessments() {
          return $scope.integrations.indeedassessments;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.indeedassessments = result;
      }

      initializeAssessments();
    }, function () {});
  };

  $scope.openTraitifyOptions = function () {
    if (FeaturesService.actions.block('assessments', {
      specific: 'traitify'
    })) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_traitify_modal.html',
      controller: 'TraitifyConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        traitify: function traitify() {
          return $scope.integrations.traitify;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.traitify = result;
      }

      initializeAssessments();
    }, function () {});
  };

  $scope.enableGoodhire = function () {
    if (FeaturesService.actions.block('background_checks', {
      specific: 'goodhire'
    })) return;
    var goodhireIntegration = $scope.integrations.goodhire;

    if (!goodhireIntegration) {
      // need info to create goodhire company
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/settings/_create_goodhire_modal.html',
        controller: 'GoodhireCreateModalInstanceCtrl',
        size: 'md',
        resolve: {}
      });
      modalInstance.result.then(function (result) {
        if (result) {
          $scope.integrations.goodhire = result;
          $scope.shared.activeCompany.company.has_goodhire = true;
        }
      }, function () {});
    } else {
      // goodhire company exists but is disabled
      $scope.appClient.enableGoodhireIntegration({
        companyId: $scope.shared.activeCompany.company._id
      }).then(function () {
        $scope.shared.activeCompany.company.has_goodhire = true;
        var hasGoodhireRequestorId = $scope.shared.activeCompany.user_settings.goodhire && $scope.shared.activeCompany.user_settings.goodhire.goodhire_id;

        if (!hasGoodhireRequestorId) {
          showGoodhireRequesterModal(false);
        }
      });
    }

    function showGoodhireRequesterModal(showEmailConflictError) {
      var modalInstance = $uibModal.open({
        templateUrl: '/templates/v2/app/settings/_create_goodhire_requestor_modal.html',
        controller: 'GoodhireCreateRequestorModalInstanceCtrl',
        size: 'sm',
        resolve: {
          emailConflict: function emailConflict() {
            return showEmailConflictError;
          },
          position: function position() {
            return false;
          },
          candidate: function candidate() {
            return false;
          }
        }
      });
      modalInstance.result.then(function (result) {}, function () {});
    }
  };

  $scope.disableGoodhire = function () {
    $scope.appClient.disableGoodhireIntegration({
      companyId: $scope.shared.activeCompany.company._id
    }).then(function () {
      $scope.shared.activeCompany.company.has_goodhire = false;
    });
  };

  $scope.openGoogleAuthSettings = function (settings) {
    ModalService.openGoogleAuthSettings($scope.company.settings.ats.enforceauth).then(function (result) {
      $scope.company.settings.ats.enforceauth = result;
    });
  };

  $scope.isGoogleAuthValid = function () {
    if (!$scope.company.settings.ats.enforceauth.domain || $scope.company.settings.ats.enforceauth.domains.length === 0) {
      ModalService.openGoogleAuthSettings($scope.company.settings.ats.enforceauth).then(function (result) {
        $scope.company.settings.ats.enforceauth = result;
      });
    }
  };

  $scope.selectSSOType = function (type) {
    var current = $scope.company.settings.ats.enforceauth.type;

    if (current === type) {
      $scope.company.settings.ats.enforceauth.type = null;
      return;
    } else {
      $scope.company.settings.ats.enforceauth.type = type;
    }

    if (type === 'google') {
      $scope.isGoogleAuthValid();
    } else if (type === 'okta' || type === 'saml') {
      if (!$scope.integrations.saml) {
        $scope.openSAMLOptions(type);
      }
    }
  };

  $scope.SAMLProvider = function () {
    if ($scope.integrations && $scope.integrations.saml) {
      if ($scope.integrations.saml.hasOwnProperty('provider')) {
        return $scope.integrations.saml.provider;
      } else {
        return 'okta';
      }
    }

    return null;
  };

  $scope.openSAMLOptions = function (_type) {
    if (FeaturesService.actions.block('sso', {
      specific: _type
    })) return;
    var templateUrl = '/templates/v2/app/settings/_update_okta_modal.html';

    if (_type === 'saml') {
      templateUrl = '/templates/v2/app/settings/_update_saml_modal.html';
    } else if (_type === 'google') {
      templateUrl = '/templates/v2/app/settings/_update_google_modal.html';
    } else if (_type === 'onelogin') {
      templateUrl = '/templates/v2/app/settings/_update_onelogin_modal.html';
    }

    var modalInstance = $uibModal.open({
      templateUrl: templateUrl,
      controller: 'OktaConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        saml: function saml() {
          return $scope.integrations.saml;
        },
        type: function type() {
          return _type;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.saml = result;
      }
    }, function () {});
  };

  $scope.openIndeedSponsoredOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_indeed_sponsored_modal.html',
      controller: 'IndeedSponsoredConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        indeedSponsored: function indeedSponsored() {
          return $scope.integrations.indeed_sponsored;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.indeed_sponsored = result;
      }
    }, function () {});
  };

  $scope.openXingOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_xing_modal.html',
      controller: 'XingConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        xing: function xing() {
          return $scope.integrations.xing;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.xing = result;
      }
    }, function () {});
  };

  $scope.openGoodhireOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_goodhire_modal.html',
      controller: 'GoodhireConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        goodhire: function goodhire() {
          return $scope.integrations.goodhire;
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.openAsurintOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_asurint_modal.html',
      controller: 'AsurintConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        asurint: function asurint() {
          return $scope.integrations.asurint;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.asurint = result;
      }
    }, function () {});
  };

  $scope.openCheckrOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_checkr_modal.html',
      controller: 'CheckrConfigModalInstanceCtrl',
      size: 'sm',
      resolve: {
        checkr: function checkr() {
          return $scope.integrations.checkr;
        }
      }
    });
    modalInstance.result.then(function (result) {
      $scope.integrations.checkr = result;
    }, function () {});
  };

  $scope.openFacebookFeedOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_facebook_feed_modal.html',
      controller: 'FacebookFeedConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        facebookFeed: function facebookFeed() {
          return $scope.integrations.facebook_feed;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.facebook_feed = result;
      }
    }, function () {});
  };

  $scope.openSeekOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_seek_modal.html',
      controller: 'SeekConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        seek: function seek() {
          return $scope.integrations.seek;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.seek = result;
      }
    }, function () {});
  };

  $scope.openCvlibraryOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_cvlibrary_modal.html',
      controller: 'CvlibraryConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        cvlibrary: function cvlibrary() {
          return $scope.integrations.cvlibrary;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.cvlibrary = result;
      }
    }, function () {});
  };

  $scope.openSlackOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_slack_modal.html',
      controller: 'SlackConfigModalInstanceCtrl',
      size: 'sm',
      resolve: {
        slack: function slack() {
          return $scope.integrations.slack;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.integrations.slack = result;
      }
    }, function () {});
    $scope.gaEventTracker("OpenSlackOptions");
  };

  $scope.enableZenefits = function () {
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/zenefits?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
    $scope.gaEventTracker("EnableZenefits");
  };

  $scope.enableDeputy = function () {
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/deputy?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
    $scope.gaEventTracker("EnableDeputy");
  };

  $scope.refreshZenefitsIntegration = function () {
    $scope.appClient.refreshZenefitsIntegration($scope.shared.activeCompany.company._id).then(function () {
      console.log('zenefits subscriptions refreshed');
    });
    $scope.gaEventTracker("RefreshZenefitsIntegration");
  };

  $scope.connectWithCheckr = function () {
    if (FeaturesService.actions.block('background_checks', {
      specific: 'checkr'
    })) return;
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/auth/checkr?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
    $scope.gaEventTracker("ConnectWithCheckr");
  };

  $scope.setFacebookJobsPage = function () {
    $scope.appClient.setFacebookJobsPage($scope.selectedFacebookPage.page, $scope.shared.activeCompany.company._id, function (error, result) {
      if (error) {
        return;
      }

      $scope.facebookPage = result;
      $scope.integrations.facebook_jobs_tab = result;
    });
  };

  $scope.enableFacebookJobsTab = function () {
    window.location.href = "/api/auth/facebook_jobs_tab?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
    $scope.gaEventTracker("EnableFacebookJobsTabPage");
  };

  $scope.disableFacebookJobsTab = function () {
    $scope.appClient.disableFacebookJobsPage($scope.shared.activeCompany.company._id, function (error, result) {
      if (error) {
        return;
      }

      $scope.facebookPage = result;
      $scope.integrations.facebook_jobs_tab = {};
    });
  };

  $scope.getFacebookPages = function () {
    $scope.appClient.getFacebookPages($scope.shared.activeCompany.company._id, function (error, results) {
      if (error) {
        return;
      }

      $scope.facebookPages = results;
    });
  };

  $scope.deleteInterviewGuide = function ($index, guide) {
    console.log('Deleting Interview Guide');
    var guideIndex = $scope.interview_guides.findIndex(function (item) {
      return item._id === guide._id;
    });
    if (guideIndex === -1) return;
    dialog.confirm({
      title: 'Delete Interview Guide?',
      message: "Are you sure you want to delete this Interview Guide?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteInterviewGuide($scope.shared.activeCompany.company._id, guide._id, function (error, result) {
          if (!error) {
            $scope.interview_guides.splice(guideIndex, 1);
          }
        });
      }
    });
  };

  $scope.deleteSchedulingLink = function ($index, schedulingLink) {
    var itemIndex = $scope.schedulingLinks.findIndex(function (item) {
      return item._id === schedulingLink._id;
    });
    if (itemIndex === -1) return;
    dialog.confirm({
      title: 'Delete Scheduling Link?',
      message: "Are you sure you want to delete this Scheduling Link?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCompanySchedulingLink($scope.shared.activeCompany.company._id, schedulingLink._id, function (error, result) {
          if (!error) {
            $scope.schedulingLinks.splice(itemIndex, 1);
          }
        });
      }
    });
  };

  $scope.deleteScorecard = function ($index, scorecard) {
    var itemIndex = $scope.scorecards.findIndex(function (item) {
      return item._id === scorecard._id;
    });
    if (itemIndex === -1) return;
    dialog.confirm({
      title: 'Delete Scorecard?',
      message: "Are you sure you want to delete this Scorecard?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteScorecard($scope.shared.activeCompany.company._id, scorecard._id, function (error, result) {
          if (!error) {
            $scope.scorecards.splice(itemIndex, 1);
          }
        });
      }
    });
  };

  $scope.deleteQuestionnaire = function ($index, questionaire) {
    var questionnaireIndex = $scope.questionnaires.findIndex(function (q) {
      return q._id === questionaire._id;
    });
    if (questionnaireIndex === -1) return;
    dialog.confirm({
      title: 'Delete Questionnaire?',
      message: "Are you sure you want to delete this Questionnaire?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteQuestionnaire($scope.shared.activeCompany.company._id, questionaire._id, function (error, result) {
          if (!error) {
            $scope.questionnaires.splice(questionnaireIndex, 1);
            $scope.questionnairesFilter.name = '';
          }
        });
      }
    });
  };

  $scope.openSetActionResponse = function ($index, _stage) {
    $scope.gaEventTracker("OpenSetActionResponse");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_set_response_action_modal.html',
      controller: 'SetActionResponseModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.pipeline[$index] = result;
        _stage = result;
      }
    }, function () {});
  };

  $scope.openSetAutoResponse = function ($index, _stage2) {
    $scope.gaEventTracker("OpenSetAutoResponse");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_set_autoresponse_modal.html',
      controller: 'SetAutoResponseModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage2;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.pipeline[$index] = result;
        _stage2 = result;
      }
    }, function () {});
  };

  $scope.openAddInterviewGuide = function ($index, guide) {
    if (FeaturesService.actions.block('interview_kits')) return;
    $scope.gaEventTracker("OpenAddInterviewGuide");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_interview_guide_modal.html',
      controller: 'AddInterviewGuideModalInstanceCtrl',
      size: 'sm',
      resolve: {
        interview_guide: function interview_guide() {
          return guide;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (guide) {
          $scope.shared.activeCompany.interview_guides[$index] = result;
        } else {
          $scope.shared.activeCompany.interview_guides.unshift(result);
        }
      }
    }, function () {});
  };

  $scope.copyInterviewGuide = function ($index, guide) {
    var interview_guide = angular.copy(this.guide);
    delete interview_guide._id;
    interview_guide.name = "".concat(guide.name, " (Copy)");
    $scope.appClient.addInterviewGuide($scope.shared.activeCompany.company._id, interview_guide, function (error, result) {
      $scope.shared.activeCompany.interview_guides.push(result);
    });
  };

  $scope.openAddScorecard = function (_scorecard) {
    //console.log("Scorecard: " + JSON.stringify(scorecard));
    if (FeaturesService.actions.block('custom_scorecards')) return;
    $scope.gaEventTracker("OpenAddScorecard");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_scorecard_modal.html',
      controller: 'AddScorecardModalInstanceCtrl',
      size: 'sm',
      resolve: {
        scorecard: function scorecard() {
          return _scorecard;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (!_scorecard) {// $scope.scorecards.unshift(result);
        }
      }
    }, function () {});
  };

  $scope.copyScorecard = function () {
    var scorecard = angular.copy(this.scorecard);
    delete scorecard._id;
    scorecard.name = "".concat(this.scorecard.name, " (Copy)");
    $scope.appClient.addScorecard($scope.shared.activeCompany.company._id, scorecard, function (error, result) {
      $scope.scorecards.push(result);
    });
  };

  $scope.openAddQuestionnaire = function (_questionnaire) {
    if (FeaturesService.actions.block('questionnaires')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_questionnaire_modal.html',
      controller: 'AddQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        questionnaire: function questionnaire() {
          return _questionnaire;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        var found;

        for (var i in $scope.questionnaires) {
          var t = $scope.questionnaires[i];

          if (t._id == result._id) {
            found = i;
            break;
          }
        }

        if (found) {
          $scope.questionnaires[found] = result;
        } else {
          $scope.questionnaires.push(result);
        }
      }
      /*if(result) {
          if(questionnaire) {
              console.log('change questionnaire value');
              questionnaire = result;
          } else {
              //$scope.questionnaires.push(result);
          }
      }*/

    }, function () {});
    $scope.gaEventTracker("OpenAddQuestionnaire");
  };

  $scope.copyPipeline = function (pipeline) {
    var pl = angular.copy(pipeline);
    delete pl._id;
    pl.name = "".concat(pipeline.name, " (Copy)");
    $scope.appClient.addPipeline($scope.shared.activeCompany.company._id, pl, function (error, result) {
      $scope.pipelines[result._id] = result;
    });
  };

  $scope.copyQuestionnaire = function () {
    var questionnaire = angular.copy(this.questionnaire);
    delete questionnaire._id;
    questionnaire.name = "".concat(this.questionnaire.name, " (Copy)");
    $scope.appClient.addQuestionnaire($scope.shared.activeCompany.company._id, questionnaire, function (error, result) {
      $scope.questionnaires.push(result);
    });
  };

  $scope.openAddStage = function ($index, _stage3) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_stage_modal.html',
      controller: 'AddStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        stage: function stage() {
          return _stage3;
        },
        pipeline: function pipeline() {
          return $scope.pipeline;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (!_stage3) {
          $scope.pipeline.push(result);
        } else {
          $scope.pipeline[$index] = result;
        }
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddStage");
  };

  $scope.deleteCampaign = function (campaign, $index) {
    dialog.confirm({
      title: 'Confirm Please',
      message: "Are you sure you want to delete this campaign?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCompanyCampaign(campaign._id, function () {
          $scope.campaigns.splice($index, 1);
        });
      }
    });
  };

  $scope.openAddCampaign = function (_campaign) {
    if (FeaturesService.actions.block('campaigns')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_campaign_modal.html',
      controller: 'AddCampaignModalInstanceCtrl',
      size: 'sm',
      resolve: {
        campaign: function campaign() {
          return _campaign;
        }
      }
    });
    modalInstance.result.then(function (campaign) {
      if (campaign) {
        var found;

        for (var i in $scope.campaigns) {
          var t = $scope.campaigns[i];

          if (t._id == campaign._id) {
            found = i;
            break;
          }
        }

        if (found) {
          $scope.campaigns[found] = campaign;
        } else {
          $scope.campaigns.push(campaign);
        }
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddCampaign");
  };

  $scope.openAddCustomField = function (_customField) {
    // if (FeaturesService.actions.block('campaigns')) return;
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_custom_field_modal.html',
      controller: 'AddCustomFieldModalInstanceCtrl',
      size: 'sm',
      resolve: {
        customField: function customField() {
          return _customField;
        }
      }
    });
    modalInstance.result.then(function (customField) {
      if (customField) {
        var found;

        for (var i in $scope.custom_fields) {
          var t = $scope.custom_fields[i];

          if (t._id == customField._id) {
            found = i;
            break;
          }
        }

        if (found) {
          $scope.custom_fields[found] = customField;
        } else {
          $scope.custom_fields.push(customField);
        }
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddCustomField");
  };

  $scope.deleteCustomField = function (customField, $index) {
    dialog.confirm({
      title: 'Confirm Please',
      message: "Are you sure you want to delete this custom field?"
    }, function (result) {
      if (result === true) {
        console.log('customField', customField, $index);
        $scope.appClient.deleteCompanyCustomField(customField._id, function () {
          $scope.custom_fields.splice($index, 1);
        });
      }
    });
  };

  $scope.deleteTemplate = function (template, $index) {
    var templateIndex = $scope.templates.findIndex(function (t) {
      return t._id === template._id;
    });
    if (templateIndex === -1) return;
    dialog.confirm({
      title: 'Confirm Please',
      message: "Are you sure you want to delete this message template?"
    }, function (result) {
      if (result === true) {
        $scope.appClient.deleteCompanyTemplate($scope.shared.activeCompany.company._id, template._id, function () {
          $scope.templates.splice(templateIndex, 1);
        });
      }
    });
  };

  $scope.openAddSMSTemplate = function (_template, eSig) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_template_sms_modal.html',
      controller: 'AddSMSTemplateModalInstanceCtrl',
      size: 'md',
      resolve: {
        template: function template() {
          return _template;
        }
      }
    });
    modalInstance.result.then(function (template) {
      if (template) {
        var found;

        for (var i in $scope.templates) {
          var t = $scope.templates[i];

          if (t._id == template._id) {
            found = i;
            break;
          }
        }

        if (found) {
          $scope.templates[found] = template;
        } else {
          $scope.templates.push(template);
        }

        setTemplatesAndFolders();
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddSMSTemplate");
  };

  $scope.openAddFolder = function (_folder) {
    console.log('openAddFolder: ', _folder);
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_folder_modal.html',
      controller: 'AddFolderController',
      size: 'sm',
      resolve: {
        type: function type() {
          return 'templates';
        },
        folder: function folder() {
          return _folder;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result && result.deleted) {
        if (_folder.templates) {
          _folder.templates.forEach(function (template) {
            delete template.folder_id;
            $scope.templatesNoFolders.push(template);
          });
        }
      }

      setTemplatesAndFolders();
    });
  };
  /* folder hover state */


  $scope.hovering = false;

  $scope.openAddTemplate = function (_template2, _eSig) {
    if (_eSig && FeaturesService.actions.block('esig')) return; //if (eSig && FeaturesService.actions.block('esig_limit')) return;

    if (_eSig && $scope.shared.activeCompany.company.features.esig_limit < $scope.docSigningTemplates.length + 1) {
      var message = "Your current plan is limited to " + $scope.shared.activeCompany.company.features.esig_limit + " Document Signing / eSignature template.";

      if ($scope.shared.activeCompany.company.features.esig_limit > 1) {
        message = "Your current plan is limited to " + $scope.shared.activeCompany.company.features.esig_limit + " Document Signing / eSignature templates.";
      }

      dialog.confirm({
        title: "Upgrade Required",
        message: message + " Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          $scope.activeTab = "plan";
        }
      });
      return;
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_template_modal.html',
      controller: 'AddTemplateModalInstanceCtrl',
      size: 'md',
      resolve: {
        template: function template() {
          return _template2;
        },
        eSig: function eSig() {
          return _eSig;
        }
      }
    });
    modalInstance.result.then(function (template) {
      if (template && template.type === 'e_sig') {
        return $scope.docSigningTemplates.push(template);
      }

      if (template) {
        var found;

        for (var i in $scope.templates) {
          var t = $scope.templates[i];

          if (t._id == template._id) {
            found = i;
            break;
          }
        }

        if (found) {
          $scope.templates[found] = template;
        } else {
          $scope.templates.push(template);
        }

        setTemplatesAndFolders();
      }
    }, function () {});
    $scope.gaEventTracker("OpenAddTemplate");
  };

  $scope.editDocSigningTemplate = function (template) {
    $scope.appClient.editDocSigningTemplate($scope.shared.activeCompany.company._id, template.hellosign_id).then(function (result) {
      HelloSign.init("abae36e43cb89fe9d96240093719b68d");
      result.edit_url = result.edit_url.replace('&force_signer_input=1', '');
      HelloSign.open({
        url: result.edit_url,
        // skipDomainVerification: true,
        messageListener: function messageListener(eventData) {
          if (eventData && eventData.event === "template_created") {
            $scope.appClient.updateDocSigningTemplate($scope.shared.activeCompany.company._id, template._id, eventData).then(function (result) {
              var existingTemplate = $scope.docSigningTemplates.find(function (t) {
                return t._id === template._id;
              });
              existingTemplate.subject = result.subject;
              existingTemplate.message = result.message;
            });
          }
        }
      });
    });
  };

  $scope.deleteDocSigningTemplate = function (templateId) {
    $scope.appClient.deleteDocSigningTemplate($scope.shared.activeCompany.company._id, templateId).then(function (result) {
      var templateIndex;
      $scope.docSigningTemplates.forEach(function (t, index) {
        if (t._id === templateId) templateIndex = index;
      });
      $scope.docSigningTemplates.splice(templateIndex, 1);
    });
  };

  $scope.setTabActive = function (tab) {
    if (!tab) {
      tab = "profile";
    }

    $scope.activeTab = tab;
    $state.transitionTo('company.section', {
      section: tab
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  };

  $scope.handleStripe = function (status, response) {
    $scope.billingError = undefined;
    $scope.billingErrorMessage = undefined;
    $scope.billingSuccess = undefined;

    if (response.error) {
      $scope.billingError = true;
      $scope.billingErrorMessage = response.error.message;
      return;
    }

    var token = response.id;
    $scope.appClient.updateCompanyCreditCard($scope.company._id, token, function (error, card) {
      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezy.hr.";
        $scope.gaEventTracker("BillingUpdateFailure");
        return;
      }

      $scope.card = card;
      $scope.billingSuccess = true;
      $scope.gaEventTracker("BillingUpdateSuccess");
    });
  };

  $scope.handleStripePlan = function (status, response) {
    $scope.billingError = undefined;
    $scope.billingErrorMessage = undefined;
    $scope.billingSuccess = undefined;

    if (response.error) {
      $scope.billingError = true;
      $scope.billingErrorMessage = response.error.message;
      return;
    }

    var token = response.id;
    $scope.appClient.updateCompanyCreditCard($scope.company._id, token, function (error, card) {
      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezy.hr.";
        $scope.gaEventTracker("PlanUpdateFailure");
        return;
      }

      $scope.card = card;
      $scope.activeTab = "planConfirm";
      ga('send', 'event', "PlanUpdateSuccess", 'upgrade', 1);
    });
  };

  $scope.dragAdminListeners = {
    accept: function accept(sourceItemHandleScope, destSortableScope) {
      return true;
    },
    itemMoved: function itemMoved(event) {},
    orderChanged: function orderChanged(event) {},
    containment: '.member-list'
  };

  $scope.openCompanyInvite = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_company_invite_modal.html',
      controller: 'CompanyInviteModalInstanceCtrl',
      size: 'sm',
      resolve: {}
    });
    modalInstance.result.then(function () {
      initializeInvitations();
    }, function () {});
  };

  $scope.cancelInvitation = function (idx, invite) {
    $scope.appClient.cancelInvitation($scope.shared.activeCompany.company._id, invite._id, function (error) {
      $scope.team_invited.splice(idx, 1);
    });
  };

  $scope.inviteCompanyMember = function (email, callback) {
    $scope.appClient.inviteCompanyMember($scope.shared.activeCompany.company._id, null, email, function (error, result) {
      callback();
    });
  };

  $scope.inviteCompanyAdmin = function (email, callback) {
    $scope.appClient.inviteCompanyAdmin($scope.shared.activeCompany.company._id, null, email, function (error, result) {
      callback();
    });
  };

  $scope.inviteUser = function () {
    $scope.invite.submitted = true;

    if (!$scope.invite.email_address || !$scope.invite.user_type) {
      return;
    }

    $scope.invite.sending = true;

    var cb = function cb(error, result) {
      $cookieStore.put("CompanyMemberInvited", true);
      $rootScope.$broadcast('companyMemberInvited', {});
      initializeInvitations();
      setTimeout(function () {
        $scope.invite.email_address = '';
        $scope.form.inviteForm.$setPristine();
        delete $scope.invite.submitted;
        delete $scope.invite.sending;
      }, 500);
    };

    if ($scope.invite.user_type === "company-admin") {
      $scope.inviteCompanyAdmin($scope.invite.email_address, cb);
    } else {
      $scope.inviteCompanyMember($scope.invite.email_address, cb);
    }
  };

  $scope.addCompanyAdmin = function (member) {
    $scope.appClient.addCompanyAdmin($scope.shared.activeCompany.company._id, member._id, function (error, result) {
      if (result && result._id) {
        console.log('Company admin added');
        $scope.shared.activeCompany.company = result;
        member.is_admin = true;
      }
    });
  };

  $scope.removeCompanyAdmin = function (member) {
    $scope.appClient.removeCompanyAdmin($scope.shared.activeCompany.company._id, member._id, function (error, result) {
      if (!error && result && result._id) {
        $scope.shared.activeCompany.company = result;
        member.is_admin = false;
      }
    });
  };

  $scope.removeCompanyMember = function ($index, member) {
    if (confirm("Are you sure you'd like to remove this user?")) {
      $scope.appClient.removeCompanyMember($scope.shared.activeCompany.company._id, member._id, function (error) {
        if (!error) {
          $scope.shared.activeCompany.members.splice($index, 1);
          $scope.team.splice($index, 1);
        }
      });
    }
  };

  $scope.removeTeam = function ($index, member) {
    if (confirm("Are you sure you'd like to team this user?")) {
      $scope.appClient.removeTeam($scope.shared.activeCompany.company._id, member._id, function (error) {
        if (!error) {
          $scope.shared.activeCompany.members.splice($index, 1);
          $scope.team.splice($index, 1);
        }
      });
    }
  };

  $scope.selectPlan = function (plan) {
    $scope.selectedPlan = plan.monthly;
    console.log('Plan: ' + plan.position_count);

    if ($scope.shared.positions.published && plan.position_count < $scope.shared.positions.published.length) {
      var diff = $scope.shared.positions.published.length - plan.position_count;
      return dialog.alert({
        message: "You currently have " + $scope.shared.positions.published.length + "  active positions/pools. You must move " + diff + ' to draft before you can update to this plan.'
      }, function (result) {});
    }

    if ($scope.card) {
      $scope.activeModalTab = "planConfirm";
      $scope.activeTab = "planConfirm";
    } else {
      $scope.activeModalTab = "planBilling";
      $scope.activeTab = "planBilling";
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company/trial.expired.billing.html',
      controller: 'CompanyBillingInformationViewCtrl',
      size: 'sm',
      resolve: {
        activeTab: function activeTab() {
          return $scope.activeModalTab;
        },
        selectedPlan: function selectedPlan() {
          return $scope.selectedPlan;
        }
      }
    });
  };

  $scope.changePlan = function () {
    $scope.changingPlan = true;
    $scope.appClient.updateCompanySubscriptionPlan($scope.shared.activeCompany.company._id, null, $scope.selectedPlan.id, false, function (error, result) {
      delete $scope.changingPlan;

      if (error) {
        $scope.billingError = true;
        $scope.billingErrorMessage = "Payment was declined. If this continues please email support@breezyhr.com";
        return;
      }

      var planIdWas = $scope.shared.activeCompany.company.plan.id;
      ga('send', 'event', "updateCompanySubscriptionPlan", 'update', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      $scope.trialDaysLeft = null;
      $scope.updateComplete = true;
      $rootScope.$broadcast('subscriptionPlanUpdated', $scope.selectedPlan);
      $scope.activeTab = "planConfirmComplete"; // $scope.gaEventTracker("PlanUpdateSuccess");
      // Track paid conversions

      if (planIdWas === "freebie") {
        ga('send', 'event', "TrialConversion", 'payment', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
        fbq('track', 'TrialConversion', {
          value: $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost,
          currency: 'USD'
        });
      } else {
        // track upgrades
        ga('send', 'event', "PlanUpdateSuccess", 'upgrade', $scope.selectedPlan.monthly_cost === 0 ? 1 : $scope.selectedPlan.monthly_cost);
      }
    });
  };

  $scope.requestQuote = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/company_settings/_request_quote.html',
      controller: 'RequestQuoteModalInstanceCtrl',
      size: 'sm',
      resolve: {
        details: function details() {
          return {
            quote_type: 'ATS'
          };
        }
      }
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.closeCompanyAccount = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_close_company_account.html',
      controller: 'CloseCompanyAccountModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.cancelSubscription = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_cancel_subscription.html',
      controller: 'CancelSubscriptionModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (result) {}, function () {});
  };

  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#image-attachment');
    chooser.addEventListener("change", function (e) {}, false);
    chooser.click();
  };

  $scope.onFileSelect = function ($files) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      if (data && data.url) {
        console.log('Upload complete: ' + data.url);
        $scope.company.logo_url = data.url;
        $scope.fileUploading = undefined;
      }
    };

    for (var i = 0; i < $files.length; i++) {
      var file = $files[i];
      console.log('Uploading....');
      $scope.fileUploading = true;
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.company._id + '/logo',
        method: 'POST',
        //, data: { myObj: $scope.somevar },
        file: file
      }).progress(onProgress).success(onSuccess);
    }
  };

  $scope.updateCompany = function () {
    $scope.updateSuccess = false;
    $scope.updateFailed = false;
    $scope.appClient.updateCompany($scope.shared.activeCompany.company._id, $scope.company, function (error, result) {
      if (!error) {
        $location.url("/app/c/" + result.friendly_id + "/home");

        if (result) {
          $scope.shared.activeCompany.company = result;
        }

        $scope.updateSuccess = true;
      } else {
        $scope.updateFailed = true;
      }

      setTimeout(function () {
        $scope.updateSuccess = false;
        $scope.updateFailed = false;
      }, 2000);
    });
  };

  $scope.$watch('questionnaire_template.body', function (text, prevText) {
    if (typeof $scope.questionnaireTemplateChanged !== 'undefined' && text != prevText) {
      $scope.questionnaireTemplateChanged = true;
    } else if (typeof $scope.questionnaireTemplateChanged === 'undefined') {
      $scope.questionnaireTemplateChanged = false;
    }
  });
  $scope.$watch('subject_template.body', function (text, prevText) {
    if (typeof $scope.subjectChanged !== 'undefined' && text != prevText) {
      $scope.subjectChanged = true;
    } else if (typeof $scope.subjectChanged === 'undefined') {
      $scope.subjectChanged = false;
    }
  });

  $scope.closeModal = function () {
    //$uibModalInstance.close();
    $uibModalInstance.dismiss('close');
  };

  $scope.showFileSelector = function (event) {
    var chooser = document.querySelector('#image-attachment');
    chooser.addEventListener("change", function (e) {}, false);
    $timeout(function () {
      chooser.click();
    });
  };

  $scope.disableIntegration = function (serviceId) {
    $scope.appClient.disableIntegration(serviceId, $scope.shared.activeCompany.company._id, function (error, result) {
      initializeIntegrations();
      $scope.shared.activeCompany.company['has_' + serviceId] = false;

      if (serviceId === 'hackerrank' || serviceId === 'criteriacorp' || serviceId === 'indeedassessments' || serviceId === 'traitify') {
        initializeAssessments();
      }
    });
  };

  $scope.enableSlack = function () {
    if (FeaturesService.actions.block('slack_integration')) return;
    window.location.href = "/api/company/" + $scope.shared.activeCompany.company._id + "/integrations/slack/auth?return_to=/app/c/" + $scope.shared.activeCompany.company.friendly_id + "/company/integrations";
    $scope.gaEventTracker("SlackIntegrationToggle");
  };

  $scope.showUpdateBillingDescription = false;

  $scope.toggleUpdateBillingDescription = function () {
    $scope.showUpdateBillingDescription = !$scope.showUpdateBillingDescription;
  };

  $scope.updateCompanyBillingDescription = function () {
    $scope.appClient.updateCompanyBillingDescription($scope.shared.activeCompany.company._id, $scope.billingDescription, function (error, result) {
      $scope.toggleUpdateBillingDescription();
    });
  };

  $scope.openInvoiceModal = function (_invoice, _card) {
    var _companyMeta = {
      'name': $scope.shared.activeCompany.company.name,
      'meta': ""
    };

    if ($scope.billingDescription) {
      _companyMeta = angular.copy($scope.billingDescription);
    }

    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_invoice_modal.html',
      controller: 'InvoiceModalInstanceCtrl',
      size: 'md',
      resolve: {
        card: function card() {
          return _card;
        },
        invoice: function invoice() {
          return _invoice;
        },
        companyMeta: function companyMeta() {
          return _companyMeta;
        }
      }
    });
    modalInstance.result.then(function () {}, function () {});
  };

  var initializeIntegrations = function initializeIntegrations() {
    $scope.appClient.getMessenger($scope.shared.activeCompany.company._id, function (error, result) {
      if ($scope.shared.activeCompany.company.features.hello_messenger === true && result.enabled === true) {
        $scope.messenger.enabled = true;
      }
    });
    $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
      //console.log($scope.integrations);
      $scope.integrations = result;
    });
  };

  var initializeCountries = function initializeCountries() {
    $http.get('/data/countries.json').success(function (data) {
      $scope.countries = data;
    }).error(function (error) {
      console.log('Error fetching countries JSON!: ' + error);
    });
  };

  var initializeProvinces = function initializeProvinces() {
    $http.get('/data/provinces.json').success(function (data) {
      $scope.provinces = data;
    }).error(function (error) {
      console.log('Error fetching provinces JSON!: ' + error);
    });
  };

  var initializeStates = function initializeStates() {
    $http.get('/data/states.json').success(function (data) {
      $scope.states = data;
    }).error(function (error) {
      console.log('Error fetching states JSON!: ' + error);
    });
  };

  var initializePlans = function initializePlans() {
    var planPath = '/data/plans_trial.json';

    if ($scope.shared.activeCompany.company.pricing === "v2") {
      planPath = '/data/plans_trial_v2.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v3") {
      planPath = '/data/plans_trial_v3.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v5") {
      planPath = '/data/plans_trial_v5.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v6") {
      planPath = '/data/plans_trial_v6.json';
    } else if ($scope.shared.activeCompany.company.pricing === "v7") {
      planPath = '/data/plans_trial_v7.json';
    }

    $http.get(planPath).success(function (data) {
      $scope.plans = data;
    }).error(function (error) {
      console.log('Error fetching plans JSON!: ' + error);
    });
  };

  var getDollarAmmount = function getDollarAmmount(amount) {
    return (amount / 100).toFixed(2);
  };

  var initializeBilling = function initializeBilling() {
    $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
      if (card) {
        $scope.card = card;
        $scope.showUpdateBilling = false;
      } else {
        $scope.showUpdateBilling = true;
      }
    });
    $scope.appClient.getCompanyInvoices($scope.shared.activeCompany.company._id, function (error, invoices) {
      if (invoices) {
        for (var i in invoices) {
          var invoice = invoices[i];
          invoice.amount_due = getDollarAmmount(invoice.amount_due);
        }

        $scope.invoices = invoices;
      }
    });
    $scope.appClient.getCompanyBillingDescription($scope.shared.activeCompany.company._id, function (error, billingDescription) {
      if (billingDescription) {
        $scope.billingDescription = billingDescription;
      } else {
        $scope.billingDescription = {
          'name': $scope.shared.activeCompany.company.name,
          'meta': ''
        };
      }
    });
  };

  var initializeInvitations = function initializeInvitations() {
    $scope.appClient.getInvitations($scope.shared.activeCompany.company._id, null, function (error, result) {
      $scope.team_invited = result;
    });
  };

  var initializeCompanyTeam = function initializeCompanyTeam() {
    $scope.appClient.getCompanyTeam($scope.shared.activeCompany.company._id, function (error, result) {
      $scope.team = result;
    });
  };

  var initializeDocSigningTemplates = function initializeDocSigningTemplates() {
    $scope.appClient.getDocSigningTemplates($scope.shared.activeCompany.company._id).then(function (result) {
      $scope.docSigningTemplates = result;
    });
  };

  $scope.openApprovalWorkflow = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_approval_workflow_modal.html',
      controller: 'ApprovalWorkflowModalInstanceCtrl',
      size: 'sm'
    });
    modalInstance.result.then(function (approval_workflow) {
      if (approval_workflow) {
        $scope.shared.activeCompany.company.approval_workflow = approval_workflow;
      }
    }, function () {});
  };

  var isEmail = function isEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  $scope.$watch('invite.searchTerm', function (text, prevText) {
    if (!$scope.invite.searchTerm) {
      $scope.invite.invitees = [];
      $scope.invite.email_invitees = [];
      return;
    }

    if (isEmail($scope.invite.searchTerm)) {
      $scope.invite.email_invitees = [];
      var member = {
        'id': $scope.invite.searchTerm,
        'initial': $scope.invite.searchTerm.substring(0, 1).toUpperCase(),
        'name': $scope.invite.searchTerm
      }; //$scope.invite.email_invitees.push(member);

      var isMember = _.find($scope.shared.activeCompany.members, function (m) {
        return m.email_address === $scope.invite.searchTerm;
      }),
          isInvited = _.find($scope.team_invited, function (m) {
        return m.invited_id === $scope.invite.searchTerm;
      });

      if (!isMember && !isInvited) {
        $scope.invite.email_invitees.push(member);
      }

      return;
    }
  });
  $scope.$watch('company.location.country', function (text, prevText) {
    if ($scope.position && $scope.position.location && $scope.position.location.country && $scope.position.location.country.id == "US") {
      $scope.statesEnabled = true;
      $scope.provincesEnabled = false;
    } else if ($scope.position && $scope.position.location && $scope.position.location.country && $scope.position.location.country.id == "CA") {
      $scope.provincesEnabled = true;
      $scope.statesEnabled = false;
    } else {
      $scope.statesEnabled = false;
      $scope.provincesEnabled = false;
    }
  });

  function initializeAssessments() {
    $scope.appClient.getCompanyAssessments({
      companyId: $scope.shared.activeCompany.company._id
    }, function (error, data) {
      if (error || !data) {
        $scope.shared.activeCompany.assessments = [];
        return;
      }

      $scope.shared.activeCompany.assessments = data;
    });
  }

  var initialize = function initialize() {
    $scope.company = $scope.shared.activeCompany.company;
    initializeBilling();
    initializePlans();
    initializeCountries();
    initializeStates();
    initializeProvinces();
    initializeIntegrations();
    initializeInvitations();
    initializeCompanyTeam();
    initializeDocSigningTemplates();
    initializeAssessments();

    if (!$scope.company.hasOwnProperty('tags')) {
      $scope.company.tags = true;
    }
  };

  $scope.setTabActive(defaultTab);
  initialize();
}]);
'use strict';

angular.module('appController').controller('ImportLeverModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'workable', function ($scope, $uibModalInstance, AppClient, SharedData, atsData) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.integrationError = false;

  if (!atsData) {
    atsData = {};
  }

  $scope.atsData = {
    'subdomain': atsData.subdomain,
    'access_token': atsData.access_token
  };

  $scope.update = function () {
    if (!$scope.atsData.access_token) {
      return;
    }

    $scope.integrationError = false;
    $scope.messageStatus = "Starting...";
    $scope.appClient.updateATSImportConfig($scope.data, function (error, result) {
      atsData.subdomain = $scope.atsData.subdomain;
      atsData.access_token = $scope.atsData.access_token;
      $scope.appClient.startATSImport($scope.data.service_id, function (error, result) {
        $scope.message = 'Import Started';
        $uibModalInstance.close(atsData);
      });
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('EditMemberRoleModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'PositionsService', 'member', '$timeout', '$uibModalInstance', function ($scope, AppClient, SharedData, PositionsService, member, $timeout, $uibModalInstance) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.positions = {
    published: [],
    draft: [],
    closed: [],
    archived: []
  };
  $scope.member = member;
  $scope.addMember = {
    "role_type": "member"
  };
  $scope.userTypes = $scope.shared.positionUserTypes;
  $scope.userPositions = [];
  $scope.availablePositions = [];
  var activePositions = [];
  var draftPositions = [];
  var closedPositions = [];

  for (var key in SharedData.activeCompany.positions) {
    var position = angular.copy(SharedData.activeCompany.positions[key]);

    if (position.state === "archived") {
      continue;
    }

    delete position.is_member;
    delete position.is_admin;
    delete position.role;

    if (position.users.indexOf($scope.member._id) > -1 || position.admins.indexOf($scope.member._id) > -1) {
      if (position.admins.indexOf($scope.member._id) > -1) {
        position.is_admin = true;
      }

      position.is_member = true;
      $scope.userPositions.push(position);
    } else {
      delete position.is_member;
      delete position.is_admin;
      delete position.role;

      if (position.state === "published") {
        activePositions.push(position);
      } else if (position.state === "draft") {
        draftPositions.push(position);
      } else if (position.state === "closed") {
        closedPositions.push(position);
      }

      $scope.availablePositions = activePositions.concat(draftPositions, closedPositions);
    }
  }

  $scope.setRoleAll = function (role) {
    for (var key in $scope.positions) {
      var stage = $scope.positions[key];

      for (var i = 0; i < stage.length; i++) {
        $scope.setRole(role, stage[i]);
      }
    }
  };

  $scope.clearAllAvailable = function () {
    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];
      delete position.checked;
    }
  };

  $scope.selectAllAvailable = function () {
    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];
      position.checked = true;
    }
  };

  $scope.selectAllActiveAvailable = function () {
    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];

      if (position.state === "published") {
        position.checked = true;
      } else {
        position.checked = false;
      }
    }
  };

  $scope.removeUserFromPosition = function (idx, position) {
    position = position || this.position;
    $scope.appClient.setPositionTeamMemberRole($scope.shared.activeCompany.company._id, position._id, $scope.member._id, "none", function (error, result) {
      $scope.userPositions.splice(idx, 1);
      $scope.availablePositions.unshift(position);
    });
  };

  $scope.setRole = function (roleType, position) {
    if (roleType === 'admin' && position.is_admin) {
      return;
    } else if (roleType === 'member' && !position.is_admin) {
      return;
    }

    $scope.appClient.setPositionTeamMemberRole($scope.shared.activeCompany.company._id, position._id, $scope.member._id, roleType, function (error, result) {
      if (roleType === 'admin') {
        position.is_admin = true;
        position.is_member = true;
      } else if (roleType === 'member') {
        delete position.is_admin;
        position.is_member = true;
      }
    });
  };

  $scope.addUserToPositions = function () {
    $scope.addMember.submitted = true;
    $scope.addMember.adding = true;
    var positionIds = [];
    var selectedPositions = [];

    for (var i in $scope.availablePositions) {
      if ($scope.availablePositions[i].checked) {
        positionIds.push($scope.availablePositions[i]._id);
        selectedPositions.push($scope.availablePositions[i]);
      }
    }

    if (positionIds.length === 0) {
      $scope.addUsersError = "You must select at least one position or pool.";
      setTimeout(function () {
        delete $scope.addUsersError;
        delete $scope.addMember.submitted;
        delete $scope.addMember.adding;
      }, 2000);
      return;
    }

    $scope.appClient.setPositionsTeamMemberRole($scope.shared.activeCompany.company._id, positionIds, $scope.member._id, $scope.addMember.role_type, function () {
      for (var i in selectedPositions) {
        var position = selectedPositions[i];

        if ($scope.addMember.role_type === 'admin') {
          position.is_admin = true;
          position.is_member = true;
        } else if ($scope.addMember.role_type === 'member') {
          delete position.is_admin;
          position.is_member = true;
        }

        var idx = $scope.availablePositions.indexOf(position);
        $scope.availablePositions.splice(idx, 1);
        $scope.userPositions.unshift(position);
      }

      setTimeout(function () {
        delete $scope.addMember.submitted;
        delete $scope.addMember.adding;
        setTimeout(function () {
          $scope.showAddMember = false;
        }, 100);
      }, 10);
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('SetActionResponseModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'stage', function ($scope, $uibModalInstance, AppClient, SharedData, stage) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.newStage = angular.copy(stage);

  if (!$scope.newStage.actions) {
    $scope.newStage.actions = {};
  }

  $scope.actions = {};
  $scope.campaigns = angular.copy($scope.shared.activeCompany.campaigns);

  if ($scope.campaigns && $scope.campaigns.length > 0) {
    $scope.campaigns.push({
      'name': "None"
    });
  }

  $scope.templates = angular.copy($scope.shared.activeCompany.templates);

  if ($scope.templates && $scope.templates.length > 0) {
    $scope.templates.push({
      'name': "None"
    });
  }

  $scope.questionnaires = angular.copy($scope.shared.activeCompany.questionnaires);

  if ($scope.questionnaires && $scope.questionnaires.length > 0) {
    $scope.questionnaires.push({
      'name': "None"
    });
  } // LEGACY ACTION


  $scope.selectedTemplate = {};
  var template; //console.log(JSON.stringify(stage));

  if ($scope.newStage.action_template_id) {
    for (var i in $scope.templates) {
      template = $scope.templates[i];

      if (template._id === $scope.newStage.action_template_id) {
        $scope.selectedTemplate.template = template;
      }
    }
  }

  if ($scope.newStage.actions.message_template_id) {
    for (var j in $scope.templates) {
      template = $scope.templates[j];

      if (template._id === $scope.newStage.actions.message_template_id) {
        $scope.actions.template = template;
      }
    }
  }

  if ($scope.newStage.actions.campaign_id) {
    for (var j in $scope.campaigns) {
      campaign = $scope.campaigns[j];

      if (campaign._id === $scope.newStage.actions.campaign_id) {
        $scope.actions.campaign = campaign;
      }
    }
  }

  if ($scope.newStage.actions.questionnaire_id) {
    for (var k in $scope.questionnaires) {
      var questionnaire = $scope.questionnaires[k];

      if (questionnaire._id === $scope.newStage.actions.questionnaire_id) {
        $scope.actions.questionnaire = questionnaire;
      }
    }
  }

  $scope.actions.request_feedback = $scope.newStage.actions.request_feedback;
  $scope.actions.request_scorecards = $scope.newStage.actions.request_scorecards;

  $scope.add = function () {
    // LEGACY ACTION
    if ($scope.selectedTemplate.template) {
      $scope.newStage.action_template_id = $scope.selectedTemplate.template._id;
    } else {
      delete $scope.newStage.action_template_id;
    }

    if ($scope.actions.template) {
      $scope.newStage.actions.message_template_id = $scope.actions.template._id;
    } else {
      delete $scope.newStage.actions.message_template_id;
    }

    if ($scope.actions.campaign) {
      $scope.newStage.actions.campaign_id = $scope.actions.campaign._id;
    } else {
      delete $scope.newStage.actions.campaign_id;
    }

    if ($scope.actions.request_feedback) {
      $scope.newStage.actions.request_feedback = true;
    } else {
      delete $scope.newStage.actions.request_feedback;
    }

    if ($scope.actions.request_scorecards) {
      $scope.newStage.actions.request_scorecards = true;
    } else {
      delete $scope.newStage.actions.request_scorecards;
    }

    if ($scope.actions.questionnaire && $scope.actions.questionnaire._id) {
      $scope.newStage.actions.questionnaire_id = $scope.actions.questionnaire._id;
    } else {
      delete $scope.newStage.actions.questionnaire_id;
    }

    if ($scope.actions.bamboohr_create_employee) {
      $scope.newStage.actions.bamboohr_create_employee = true;
    } else {
      delete $scope.newStage.actions.bamboohr_create_employee;
    }

    if ($scope.actions.namely_create_employee) {
      $scope.newStage.actions.namely_create_employee = true;
    } else {
      delete $scope.newStage.actions.namely_create_employee;
    }

    if ($scope.actions.zenefits_create_employee) {
      $scope.newStage.actions.zenefits_create_employee = true;
    } else {
      delete $scope.newStage.actions.zenefits_create_employee;
    }

    if ($scope.actions.deputy_create_employee) {
      $scope.newStage.actions.deputy_create_employee = true;
    } else {
      delete $scope.newStage.actions.deputy_create_employee;
    }

    $scope.messageStatus = "Updating...";
    setTimeout(function () {
      $uibModalInstance.close($scope.newStage);
    }, 1000);
  };

  var initializeHiringTeam = function initializeHiringTeam() {
    /*
    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.position._id, function (error, members) {
        for(var i in )
        $scope.members = members;
    });
    */
  };

  var initialize = function initialize() {};

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('SetAutoResponseModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'stage', function ($scope, $uibModalInstance, AppClient, SharedData, stage) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.newStage = angular.copy(stage);
  $scope.templates = angular.copy($scope.shared.activeCompany.templates);

  if ($scope.templates && $scope.templates.length > 0) {
    $scope.templates.push({
      'name': "None"
    });
  }

  $scope.questionnaires = angular.copy($scope.shared.activeCompany.questionnaires);

  if ($scope.questionnaires && $scope.questionnaires.length > 0) {
    $scope.questionnaires.push({
      'name': "None"
    });
  }

  $scope.campaigns = angular.copy($scope.shared.activeCompany.campaigns);

  if ($scope.campaigns && $scope.campaigns.length > 0) {
    $scope.campaigns.push({
      'name': "None"
    });
  }

  $scope.selectedTemplate = {};

  if ($scope.newStage.template_id) {
    for (var i in $scope.templates) {
      var template = $scope.templates[i];

      if (template._id === $scope.newStage.template_id) {
        $scope.selectedTemplate.template = template;
      }
    }
  }

  if ($scope.newStage.questionnaire_id) {
    for (var j in $scope.questionnaires) {
      var questionnaire = $scope.questionnaires[j];

      if (questionnaire._id === $scope.newStage.questionnaire_id) {
        $scope.selectedTemplate.questionnaire = questionnaire;
      }
    }
  }

  $scope.add = function () {
    if ($scope.selectedTemplate.template) {
      $scope.newStage.template_id = $scope.selectedTemplate.template._id;
    } else {
      delete $scope.newStage.template_id;
    }

    if ($scope.selectedTemplate.questionnaire) {
      $scope.newStage.questionnaire_id = $scope.selectedTemplate.questionnaire._id;
    } else {
      delete $scope.newStage.questionnaire_id;
    }

    $scope.messageStatus = "Saving...";
    setTimeout(function () {
      $uibModalInstance.close($scope.newStage);
    }, 1000);
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

angular.module('appController').controller('PositionPipelineModalInstanceCtrl', ['$scope', 'SharedData', '$uibModal', '$uibModalInstance', 'pipeline', 'stage_actions', 'email_sender', 'position_admins', 'dialog', function ($scope, SharedData, $uibModal, $uibModalInstance, pipeline, stage_actions, email_sender, _position_admins, dialog) {
  console.log('PositionPipelineModalInstanceCtrl init');
  $scope.shared = SharedData;
  $scope.pipeline = pipeline;
  $scope.email_sender = email_sender; //stage_actions = stage_actions; // {};

  var selected_stage = null;
  var availableStageActions = $scope.shared.stageActionTypes;

  var getStageActionCount = function getStageActionCount(positionOverrides, stage) {
    var actionCount = 0;
    var actionsMerged = {};

    if (positionOverrides) {
      actionsMerged = Object.assign({}, positionOverrides);
    } else {
      actionsMerged = Object.assign({}, stage.actions);
    }

    for (var a in availableStageActions) {
      var stageAction = availableStageActions[a];

      if (actionsMerged[stageAction.stage_action_id]) {
        actionCount++;
      }
    }

    return actionCount;
  };

  for (var i in $scope.pipeline.pipeline) {
    var stage = $scope.pipeline.pipeline[i];
    stage.action_count = getStageActionCount(stage_actions[stage.id], stage);
  }

  $scope.openAddStage = function (stage) {
    selected_stage = angular.copy(stage);
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/actions/position.pipeline.stage.html',
      controller: 'PositionStageModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position_admins: function position_admins() {
          return _position_admins;
        },
        overrides: function overrides() {
          //console.log(stage_actions[selected_stage.id] || {})
          return stage_actions[selected_stage.id] || null;
        },
        stage: function stage() {
          //console.log(selected_stage.actions);
          return selected_stage;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        stage_actions[selected_stage.id] = result;
        stage.action_count = getStageActionCount(result, stage);
      }
    }, function () {});
  };

  $scope.add = function () {
    $uibModalInstance.close({
      email_sender: email_sender,
      stage_actions: stage_actions
    });
  };

  $scope.showRestore = function () {
    return Object.keys(stage_actions).length > 0;
  };

  $scope.reset = function () {
    dialog.confirm({
      title: "Restore Defaults",
      message: "Restore stage actions to the default Pipeline settings?"
    }, function (result) {
      if (result === true) {
        $uibModalInstance.close({
          email_sender: email_sender,
          stage_actions: {}
        });
      }
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
angular.module('appController').controller('PositionStageModalInstanceCtrl', ['$scope', '$uibModalInstance', 'AppClient', 'SharedData', 'stage', 'pipeline', 'overrides', 'position_admins', 'DELAY_SEND_TIMES', 'FeaturesService', function ($scope, $uibModalInstance, AppClient, SharedData, stage, pipeline, overrides, position_admins, DELAY_SEND_TIMES, FeaturesService) {
  console.log('PositionStageModalInstanceCtrl init');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.stage = stage;
  $scope.pipeline = angular.copy(pipeline);
  $scope.pipeline.pipeline.push({
    'name': "None"
  });
  var actionsOriginal = angular.copy($scope.stage.actions || {});
  var actionsMerged = {
    backgroundcheck_result: {}
  };

  if (overrides) {
    actionsMerged = Object.assign({}, overrides);
  } else {
    actionsMerged = Object.assign({}, $scope.stage.actions);
  }

  $scope.actions = {};
  var stage_actions = {};
  $scope.campaigns = angular.copy($scope.shared.activeCompany.campaigns);

  if ($scope.campaigns && $scope.campaigns.length > 0) {
    $scope.campaigns.push({
      'name': "None"
    });
  }

  $scope.templates = angular.copy($scope.shared.activeCompany.templates);

  if ($scope.templates && $scope.templates.length > 0) {
    $scope.templates.push({
      'name': "None"
    });
  }

  $scope.templates = _.sortBy($scope.templates, 'folder_id');

  $scope.folderGroupingFn = function (item) {
    if (item && item.hasOwnProperty('folder_id')) {
      var folder = $scope.shared.activeCompany.folders['templates'].find(function (folder) {
        return folder._id === item.folder_id;
      });
      return folder.name;
    } else {
      return '';
    }
  };

  $scope.stageDelay = [{
    text: 'No Delay',
    delay: 0
  }];
  DELAY_SEND_TIMES.forEach(function (time) {
    $scope.stageDelay.push({
      text: "Delay ".concat(time.text),
      delay: time.delay
    });
  }); // NEW STUFF

  $scope.selectedActionType = {};
  $scope.requestedStageTypes = {};
  $scope.stageActionTypes = [];
  var availableStageActions = $scope.shared.stageActionTypes.filter(function (stageActionType) {
    if (!$scope.shared.activeCompany.company.has_inovapayroll && stageActionType.id == "inovapayroll_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_bamboohr && stageActionType.id == "bamboohr_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_namely && stageActionType.id == "namely_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_zenefits && stageActionType.id == "zenefits_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_deputy && stageActionType.id == "deputy_create_employee") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_goodhire && !$scope.shared.activeCompany.company.has_checkr && stageActionType.id == "backgroundcheck_result") {
      return false;
    }

    if (!$scope.shared.activeCompany.company.has_criteriacorp && !$scope.shared.activeCompany.company.has_hackerrank && !$scope.shared.activeCompany.company.has_traitify && !$scope.shared.activeCompany.company.has_indeedassessments && stageActionType.id == "send_assessment") {
      return false;
    }

    return true;
  });

  var initalizeStageActionTypes = function initalizeStageActionTypes() {
    $scope.stageActionTypes = availableStageActions.filter(function (stageActionType) {
      return !$scope.actions[stageActionType.id] && !$scope.requestedStageTypes[stageActionType.id];
    });
  };

  $scope.resetSelectedStageAction = function () {
    $scope.selectedActionType = {};
  };

  $scope.addSelectedStageAction = function () {
    if (FeaturesService.actions.block('stage_actions')) return;
    var selectedId = $scope.selectedActionType.selected.id;
    if (selectedId === 'campaign' && FeaturesService.actions.block('campaigns')) return;
    $scope.requestedStageTypes[$scope.selectedActionType.selected.id] = true;

    if (mapper[$scope.selectedActionType.selected.id].type === 'object') {
      $scope.actions[$scope.selectedActionType.selected.id] = {};
    } else if (mapper[$scope.selectedActionType.selected.id].type === 'string') {
      $scope.actions[$scope.selectedActionType.selected.id] = '';
    } else {
      $scope.actions[$scope.selectedActionType.selected.id] = true;
    }

    $scope.resetSelectedStageAction();
    initalizeStageActionTypes();
  };

  $scope.removeSelectedStageAction = function (type) {
    delete $scope.requestedStageTypes[type];
    delete $scope.actions[type];
    $scope.resetSelectedStageAction();
    initalizeStageActionTypes();
  };

  $scope.showStageAction = function (type) {
    if ($scope.requestedStageTypes[type] || $scope.actions[type]) {
      return true;
    }

    return false;
  };

  $scope.hasStageActions = function () {
    for (var i in availableStageActions) {
      var found = $scope.showStageAction(availableStageActions[i].id);

      if (found === true) {
        return true;
      }
    }

    return false;
  };

  $scope.toggleRoundRobinAssign = function () {
    if ($scope.actions.is_round_robin_assign) {
      $scope.actions.assign_to = {
        '_id': 'roundrobin',
        'name': "Assign by Round Robin"
      };
    } else {
      $scope.actions.assign_to = {};
    }
  }; // END NEW STUFF


  var init = function init() {
    var isPositionAdmin = function isPositionAdmin(member) {
      return position_admins.indexOf(member._id) > -1;
    };

    $scope.position_admin_users = position_admins ? $scope.shared.activeCompany.members.filter(isPositionAdmin) : [];

    if ($scope.position_admin_users && $scope.position_admin_users.length > 0) {
      /*
      $scope.position_admin_users.unshift({ 
          '_id':'roundrobin', 
          'name': "Assign by Round Robin", 
          'description': 'Rotate assignment evenly to all Hiring Managers on the team.' 
      });
      */
      $scope.position_admin_users.push({
        'name': "None"
      });
    }

    $scope.questionnaires = angular.copy($scope.shared.activeCompany.questionnaires);

    if ($scope.questionnaires && $scope.questionnaires.length > 0) {
      $scope.questionnaires.push({
        'name': "None"
      });
    }

    if ($scope.shared.activeCompany.company.has_indeedassessments || $scope.shared.activeCompany.company.has_traitify || $scope.shared.activeCompany.company.has_criteriacorp || $scope.shared.activeCompany.company.has_hackerrank) {
      initializeAssessments();
    }

    if (actionsMerged.assign_to) {
      if (actionsMerged.assign_to === 'roundrobin') {
        $scope.actions.assign_to = {
          '_id': 'roundrobin',
          'name': "Assign by Round Robin"
        };
        $scope.actions.is_round_robin_assign = true;
      } else {
        $scope.actions.assign_to = $scope.position_admin_users.find(function (admin) {
          return admin._id === actionsMerged.assign_to;
        });
      }
    }

    if (actionsMerged.message_template_id) {
      $scope.actions.template = $scope.templates.find(function (template) {
        return template._id === actionsMerged.message_template_id;
      });
    }

    if (actionsMerged.template_sender_name) {
      $scope.actions.template_sender_name = actionsMerged.template_sender_name;
    }

    if (actionsMerged.template_force_sender_name) {
      $scope.actions.template_force_sender_name = actionsMerged.template_force_sender_name;
    }

    if (actionsMerged.template_force_no_reply) {
      $scope.actions.template_force_no_reply = actionsMerged.template_force_no_reply;
    }

    if (actionsMerged.campaign_id) {
      $scope.actions.campaign = $scope.campaigns.find(function (campaign) {
        return campaign._id === actionsMerged.campaign_id;
      });
    }

    if (actionsMerged.questionnaire_id) {
      $scope.actions.questionnaire = $scope.questionnaires.find(function (questionnaire) {
        return questionnaire._id === actionsMerged.questionnaire_id;
      });
    }

    if (actionsMerged.send_assessment) {
      $scope.actions.send_assessment = actionsMerged.send_assessment;
    }

    if (actionsMerged.message_delay) {
      $scope.actions.message_delay = $scope.stageDelay.find(function (delay) {
        return delay.delay === actionsMerged.message_delay;
      });
    } else {
      $scope.actions.message_delay = $scope.stageDelay[0];
    }

    if (actionsMerged.questionnaire_delay) {
      $scope.actions.questionnaire_delay = $scope.stageDelay.find(function (delay) {
        return delay.delay === actionsMerged.questionnaire_delay;
      });
    } else {
      $scope.actions.questionnaire_delay = $scope.stageDelay[0];
    }

    if (actionsMerged.request_feedback) {
      $scope.actions.request_feedback = actionsMerged.request_feedback;
    }

    if (actionsMerged.request_scorecards) {
      $scope.actions.request_scorecards = actionsMerged.request_scorecards;
    }

    if (actionsMerged.inovapayroll_create_employee) {
      $scope.actions.inovapayroll_create_employee = actionsMerged.inovapayroll_create_employee;
    }

    if (actionsMerged.bamboohr_create_employee) {
      $scope.actions.bamboohr_create_employee = actionsMerged.bamboohr_create_employee;
    }

    if (actionsMerged.namely_create_employee) {
      $scope.actions.namely_create_employee = actionsMerged.namely_create_employee;
    }

    if (actionsMerged.zenefits_create_employee) {
      $scope.actions.zenefits_create_employee = actionsMerged.zenefits_create_employee;
    }

    if (actionsMerged.deputy_create_employee) {
      $scope.actions.deputy_create_employee = actionsMerged.deputy_create_employee;
    }

    if (actionsMerged.backgroundcheck_result) {
      $scope.actions.backgroundcheck_result = actionsMerged.backgroundcheck_result;
    }

    initalizeStageActionTypes();
  };

  var mapper = {
    assign_to: {
      key: '_id',
      save_as: 'assign_to'
    },
    questionnaire: {
      key: '_id',
      save_as: 'questionnaire_id'
    },
    send_assessment: {
      type: 'object',
      save_as: 'send_assessment'
    },
    template: {
      key: '_id',
      save_as: 'message_template_id'
    },
    template_sender_name: {
      type: 'string',
      save_as: 'template_sender_name'
    },
    template_force_sender_name: {
      save_as: 'template_force_sender_name'
    },
    template_force_no_reply: {
      save_as: 'template_force_no_reply'
    },
    is_round_robin_assign: {
      save_as: 'is_round_robin_assign'
    },
    campaign: {
      key: '_id',
      save_as: 'campaign_id'
    },
    message_delay: {
      key: 'delay',
      save_as: 'message_delay'
    },
    questionnaire_delay: {
      key: 'delay',
      save_as: 'questionnaire_delay'
    },
    request_feedback: {
      //key: null,
      save_as: 'request_feedback'
    },
    request_scorecards: {
      //key: null,
      save_as: 'request_scorecards'
    },
    inovapayroll_create_employee: {
      //key: null,
      save_as: 'inovapayroll_create_employee'
    },
    bamboohr_create_employee: {
      //key: null,
      save_as: 'bamboohr_create_employee'
    },
    namely_create_employee: {
      //key: null,
      save_as: 'namely_create_employee'
    },
    zenefits_create_employee: {
      //key: null,
      save_as: 'zenefits_create_employee'
    },
    deputy_create_employee: {
      //key: null,
      save_as: 'deputy_create_employee'
    },
    backgroundcheck_result: {
      type: 'object',
      save_as: 'backgroundcheck_result'
    }
  };

  $scope.resetActions = function () {
    $scope.actions = {};
    actionsMerged = angular.copy(actionsOriginal);
    init();
  };

  $scope.add = function () {
    if ($scope.form.$invalid) {
      return;
    }

    var keys = Object.keys($scope.actions);
    keys.forEach(function (key) {
      //console.log('key: ' + key)
      var field = mapper[key];
      if (!field) console.log('not mapping found for key: ' + key);

      if ($scope.actions[key] || $scope.showStageAction(key)) {
        if (field.type === "object") {
          stage_actions[field.save_as] = $scope.actions[key];
        } else if (field.type === "string") {
          stage_actions[field.save_as] = $scope.actions[key];
        } else if (field.key) {
          stage_actions[field.save_as] = $scope.actions[key][field.key];
        } else {
          // boolean
          if ($scope.showStageAction(key)) {
            stage_actions[key] = true;
          } else {
            delete stage_actions[key];
          }
        }
      }
    });

    if (!stage_actions.message_template_id && stage_actions.message_delay === 0) {
      delete stage_actions.message_delay;
    }

    if (!stage_actions.message_template_id && stage_actions.template_force_sender_name) {
      delete stage_actions.template_sender_name;
      delete stage_actions.template_force_sender_name;
    }

    if (!stage_actions.message_template_id && stage_actions.template_force_no_reply) {
      delete stage_actions.template_force_no_reply;
    }

    if (!stage_actions.questionnaire_id && stage_actions.questionnaire_delay === 0) {
      delete stage_actions.questionnaire_delay;
    } //console.log("STAGE ACTIONS: " + JSON.stringify(stage_actions));
    //return;


    $scope.messageStatus = "Updating..."; //console.log("STAGE ACTIONS: " + JSON.stringify(stage_actions));

    $uibModalInstance.close(stage_actions);
  };

  init();

  function initializeAssessments() {
    $scope.appClient.getCompanyAssessments({
      companyId: $scope.shared.activeCompany.company._id
    }, function (error, data) {
      if (error || !data) {
        $scope.shared.activeCompany.assessments = [];
        return;
      }

      $scope.shared.activeCompany.assessments = data;
      $scope.assessments = angular.copy($scope.shared.activeCompany.assessments);

      if ($scope.assessments && $scope.assessments.length > 0) {
        $scope.assessments.push({
          'name': "None"
        });
      }
    });
  }

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

angular.module('appController').controller('PositionNewModalInstanceCtrl', ['$scope', '$rootScope', '$state', '$http', '$uibModal', '$uibModalInstance', '$location', 'AppClient', 'SharedData', 'defaultTab', 'position', 'clonePosition', '$parentScope', '$cookieStore', 'orgType', 'dialog', 'CompanyService', 'PositionsService', 'ModalService', 'FeaturesService', 'PipelinesService', function ($scope, $rootScope, $state, $http, $uibModal, $uibModalInstance, $location, AppClient, SharedData, defaultTab, position, clonePosition, $parentScope, $cookieStore, orgType, dialog, CompanyService, PositionsService, ModalService, FeaturesService, PipelinesService) {
  var newPosition;
  $scope.gdprEnabled = CompanyService.getters.settings('gdpr.enabled');
  var redactorLoaded = false;
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.gaEventTracker = $parentScope.gaEventTracker;
  $scope.pipeline = $scope.shared.activeCompany.pipelines['default'];

  if (orgType === "pool") {
    $scope.pipeline = $scope.shared.activeCompany.pipelines.default_pool;
  }

  $scope.scorecard = undefined;
  $scope.questionnaire = undefined;
  $scope.formState = {
    submitted: false
  };
  $scope.inviteTab = 'team';
  $scope.team_invited = [];
  $scope.addTeam = {
    "role_type": "member"
  };
  $scope.addMember = {
    "role_type": "member",
    "user_type": "member"
  };
  $scope.form = {}; //$scope.selected.template = {};

  $scope.template = undefined;
  $scope.templates = [];
  $scope.allTeams = $scope.shared.activeCompany.teams;
  $scope.availableTeams = [];
  $scope.hiringManagerTeams = [];
  $scope.memberTeams = [];
  $scope.appClient.getPositionTemplates(function (error, result) {
    $scope.templates = result.reduce(function (acc, category) {
      var category_name = category.category;
      return acc.concat(category.templates.map(function (template) {
        return {
          id: template.id,
          name: template.name,
          category: category_name
        };
      }));
    }, []);
  });

  $scope.loadTemplate = function (template) {
    function fetchAndReplace() {
      $scope.appClient.getPositionTemplate(template.id, function (error, result) {
        $scope.position.description = result.template;
      });
    }

    if ($scope.position.description && $scope.position.description.length > 100) {
      dialog.confirm({
        title: "Replace Job Description",
        message: "Would you like to replace your current job description?"
      }, function (result) {
        if (result === true) {
          fetchAndReplace();
        }
      });
    } else {
      fetchAndReplace();
    }
  }; // convert to array because of the directive ui-select (old version)


  $scope.pipelines = [];
  $scope.positionPipelines = [];
  $scope.poolPipelines = [];
  var pipelines = $scope.shared.activeCompany.pipelines;

  for (var key in pipelines) {
    if (key === 'default') pipelines[key]._id = key;
    if (key === 'default_pool') pipelines[key]._id = key; //console.log(pipelines[key].name  +", " + pipelines[key].type);

    if (pipelines[key].type === "pool") {
      $scope.poolPipelines.push(pipelines[key]);
    } else {
      $scope.positionPipelines.push(pipelines[key]);
    }

    $scope.pipelines.push(pipelines[key]);
  }

  $scope.interview_guides = angular.copy($scope.shared.activeCompany.interview_guides);

  if ($scope.interview_guides && $scope.interview_guides.length > 0) {
    $scope.interview_guides.push({
      name: "None"
    });
  }

  $scope.scorecards = angular.copy($scope.shared.activeCompany.scorecards);

  if ($scope.scorecards && $scope.scorecards.length > 0) {
    $scope.scorecards.push({
      name: "None"
    });
  }

  $scope.questionnaires = angular.copy($scope.shared.activeCompany.questionnaires);

  if ($scope.questionnaires && $scope.questionnaires.length > 0) {
    $scope.questionnaires.push({
      _id: -1,
      name: "None"
    });
  }

  $scope.trialPlan = $parentScope.trialPlan;

  if ($scope.trialPlan) {
    $scope.trialDaysLeft = $parentScope.trialDaysLeft;
  }

  $scope.subjectChanged = undefined;
  $scope.positionName = 'New Position';
  $scope.category = "default";
  $scope.canPromoteOn = {};
  $scope.statesEnabled = false;
  $scope.provincesEnabled = false;
  $scope.predicate = '-name';
  $scope.newRecruiter = {};
  $scope.invite = {
    'user_type': 'member',
    'invitees': []
  };
  $scope.modalFunction = 'new';
  $scope.redactorConfig = {
    multipleUpload: false,
    imageUpload: "/api/company/".concat($scope.shared.activeCompany.company._id, "/portal/media/gallery/image"),
    buttons: ['format', 'bold', 'italic', 'underline', 'deleted', 'lists', 'image', 'link'],
    formatting: ['p', 'h1', 'h2', 'h3'],
    minHeight: '300px',
    maxHeight: '300px'
  };

  if (position) {
    $scope.originalPosition = position;
    $scope.modalFunction = 'edit';
    $scope.position = angular.copy(position);
    PositionsService.local.positionViewed($scope.position._id); //$scope.customAttributes = $scope.position.custom_attributes;

    $scope.team_invited = $scope.position.invited_members; //delete $scope.position.custom_attributes;

    delete $scope.position.invited_members;
  } else if (clonePosition) {
    var p = angular.copy(clonePosition);
    $scope.customAttributes = clonePosition.custom_attributes;
    delete clonePosition.invited_members;
    delete clonePosition.custom_attributes;
    delete p._id;
    p.state = "draft";
    p.is_admin = true;
    $scope.position = p;
  } else {
    $scope.position = {
      'is_admin': true,
      'location': {},
      candidate_type: 'all',
      members: []
    };

    if (orgType && orgType === "pool") {
      $scope.position.org_type = orgType;
    }
  }

  var initializeApplication = function initializeApplication() {
    if (typeof $scope.position.candidate_type === 'undefined') {
      $scope.position.candidate_type = 'all';
    }

    initializeCompliance();
  };

  var candidate_type_current = $scope.position.candidate_type;

  $scope.toggleCandidateType = function () {
    if ($scope.position.candidate_type === "internal") {
      if (FeaturesService.actions.block('referral_portal') || FeaturesService.actions.block('employee_portal')) {
        $scope.position.candidate_type = "all";
        return;
      }
    }

    $scope.candidate_type_current = $scope.position.candidate_type;
    var updatedState = {
      candidate_type: $scope.position.candidate_type
    };
    $scope.appClient.updatePosition($scope.position._id, updatedState, $scope.shared.activeCompany.company._id, function (error, result) {
      $scope.position.candidate_type = updatedState.candidate_type;
      $scope.originalPosition.candidate_type = updatedState.candidate_type;
      PositionsService.local.updatePositionByKeyValue($scope.position._id, 'candidate_type', updatedState.candidate_type);
    });
  };

  $scope.toggleUpgrade = function (featureId, state) {
    $scope.appClient.setPositionPromotionOption(featureId, state, $scope.position._id, $scope.shared.activeCompany.company._id, undefined, function (error, card) {
      $scope.position.promote_on[featureId] = state;
      $scope.originalPosition.promote_on[featureId] = state;
    });
  };

  $scope.openSeekOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_seek_modal.html',
      controller: 'SeekConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        seek: function seek() {
          return {};
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.shared.activeCompany.company.has_seek = true;
      }
    }, function () {});
  };

  $scope.enableSeekUpgrade = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/upgrades/seek/index.html',
      controller: 'SeekModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return $scope.position;
        },
        advertisement: function advertisement() {
          if (!$scope.position.seek) return false;
          return $scope.appClient.getSeekAdvertisement($scope.shared.activeCompany.company._id, $scope.position._id);
        }
      }
    });
    modalInstance.result.then(function (result) {// on finish
    }, function () {});
  };

  $scope.disableSeekUpgrade = function () {
    $scope.appClient.deleteSeekAdvertisment($scope.shared.activeCompany.company._id, $scope.position._id).then(function (result) {}).catch(function (e) {
      console.log('e', e);
    });
  };

  $scope.openCvlibraryOptions = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_update_cvlibrary_modal.html',
      controller: 'CvlibraryConfigModalInstanceCtrl',
      size: 'md',
      resolve: {
        cvlibrary: function cvlibrary() {
          return {};
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.shared.activeCompany.company.has_cvlibrary = true;
      }
    }, function () {});
  };

  $scope.promoteCvlibraryJob = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/upgrades/cvlibrary/index.html',
      controller: 'CvlibraryModalInstanceCtrl',
      size: 'sm',
      resolve: {
        position: function position() {
          return $scope.position;
        }
      }
    });
    modalInstance.result.then(function (result) {// on finish
    }, function () {});
  };

  $scope.deleteCvlibraryJob = function () {
    $scope.appClient.deleteCvlibraryJob($scope.shared.activeCompany.company._id, $scope.position._id).then(function (result) {
      $scope.position.has_cvlibrary = false;
      $scope.position.cvlibrary = false;
    }).catch(function (e) {
      console.log('e', e);
    });
  };

  $scope.enableUpgrade = function (_featureId) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/upgrades/' + _featureId + '/index.html',
      controller: 'UpgradeModalInstanceCtrl',
      size: 'sm',
      resolve: {
        featureId: function featureId() {
          return _featureId;
        },
        position: function position() {
          return $scope.position;
        },
        card: function card() {
          return $scope.card;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result && result.card) {
        $scope.card = result.card;
      }

      if (result.enabled) {
        $scope.position.promote_on[_featureId] = 'on';
        $scope.originalPosition.promote_on[_featureId] = 'on';
      }
    }, function () {});
  };

  $scope.enableIndeedSponsoredUpgrade = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/upgrades/indeed_sponsored/index.html',
      controller: 'IndeedSponsoredModalInstanceCtrl',
      size: 'md',
      resolve: {
        position: function position() {
          return $scope.position;
        },
        indeedSponsored: function indeedSponsored() {
          if (!$scope.shared.activeCompany.company.has_indeed_sponsored) return {};
          return $scope.appClient.getIntegration('indeed_sponsored', $scope.shared.activeCompany.company._id);
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        if (!$scope.position.promote_on) $scope.position.promote_on = {};
        if (!$scope.originalPosition.promote_on) $scope.originalPosition.promote_on = {};
        $scope.position.promote_on.indeed_sponsored_jobs = 'on';
        $scope.originalPosition.promote_on.indeed_sponsored_jobs = 'on';
      }
    }, function () {});
  };

  $scope.save = function () {
    $scope.formState.submitted = true;
  };

  $scope.saveAndClose = function () {
    $scope.formState.submitted = true;
    setTimeout(function () {
      $scope.closeModal();
    }, 200);
  };

  $scope.saveAndContinue = function (nextTab) {
    $scope.formState.submitted = true;
    setTimeout(function () {
      $scope.setTabActive(nextTab);
    }, 200);
  };

  $scope.isTabDisabled = function () {
    return !$scope.position._id;
  };
  /*$scope.$watch('applicationForm', function(newVal) {
      console.log(newVal);
      //if (newVal === oldVal) return;
      $scope.form = newVal;
  })*/


  $scope.openAddTags = function () {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/candidate_workflow/candidate_tagging_modal.html',
      controller: 'CandidateTaggingModalInstanceCtrl',
      size: 'sm',
      resolve: {
        objectType: function objectType() {
          return 'position';
        },
        companyTags: function companyTags(TaggingService) {
          return TaggingService.get($scope.shared.activeCompany.company._id);
        },
        objectTags: function objectTags() {
          return $scope.position.tags ? $scope.position.tags.map(function (tag) {
            return {
              tag: tag
            };
          }) : [];
        },
        bulk: function bulk() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (tags) {
      if (tags) {
        $scope.position.tags = tags.map(function (tag) {
          return tag.tag;
        });
      }
    }, function () {});
  };

  var availableStageActions = $scope.shared.stageActionTypes;

  var getStageActionCount = function getStageActionCount(positionOverrides, stage) {
    var actionCount = 0;
    var actionsMerged = {};

    if (positionOverrides) {
      actionsMerged = Object.assign({}, positionOverrides);
    } else {
      actionsMerged = Object.assign({}, stage.actions);
    }

    for (var a in availableStageActions) {
      var stageAction = availableStageActions[a];

      if (actionsMerged[stageAction.stage_action_id]) {
        actionCount++;
      }
    }

    return actionCount;
  };

  var initializeStageActionCount = function initializeStageActionCount() {
    for (var i in $scope.pipeline.pipeline) {
      var stage = $scope.pipeline.pipeline[i];
      var stage_actions = $scope.position.stage_actions || {};
      stage.action_count = getStageActionCount(stage_actions[stage.id], stage);
    }
  };
  /*
      $scope.openPositionStageActions = function() {
          var pipeline_id = (orgType === "pool") ? 'default_pool' : 'default';
          if ($scope.position.pipeline_id) {
              pipeline_id = $scope.position.pipeline_id;
          }
          var pipeline = $scope.shared.activeCompany.pipelines[pipeline_id];
          var modalInstance = $uibModal.open({
              templateUrl: '/templates/v2/app/position/actions/position.pipeline.html',
              controller: 'PositionPipelineModalInstanceCtrl',
              size: 'sm',
              resolve: {
                  position_admins: function() {
                      return $scope.position.admins;
                  },
                  email_sender: function() {
                      if (!$scope.position.email_sender && $scope.position.admins) {
                          var adminId = $scope.position.admins[0];
                          var email_sender = $scope.shared.activeCompany.members.find(member => (member._id === adminId));
                          var name = 'Hiring Team';
                          if (email_sender) {
                              name = email_sender.name;
                          }
                          $scope.position.email_sender = {
                              name: name
                          };
                      }
                      return $scope.position.email_sender;
                  },
                  stage_actions: function() {
                      return $scope.position.stage_actions || {};
                  },
                  pipeline: function () {
                      return pipeline;
  
                  },
                  $parentScope: function () {
                      return $scope;
                  }
              }
          });
          modalInstance.result.then(function ( payload ) {
              if(payload.email_sender) {
                  // update shared service
                  $scope.position.email_sender = payload.email_sender;
              }
              if (payload.stage_actions) {
                  //console.log(payload.stage_actions)
                  $scope.position.stage_actions = payload.stage_actions;
  
              }
          }, function () {
  
          });
  
      };
  */


  $scope.setCustomAttribute = function (item) {
    $scope.position.custom_attributes[this.$index] = item;
    setTimeout(function () {
      $scope.checkDuplicates();
    }, 1);
  };

  $scope.checkDuplicates = function () {
    var cas = $scope.position.custom_attributes.map(function (ca) {
      return ca.name.toLowerCase();
    });

    for (var i = 0; i < $scope.position.custom_attributes.length; i++) {
      var isDuplicate = cas.filter(function (ca) {
        return ca === cas[i];
      }).length > 1;
      $scope.form.description['item-name-' + i].$setValidity('duplicate', !isDuplicate);
    }
  };

  $scope.removeCustomField = function (index) {
    $scope.position.custom_attributes.splice(index, 1);
  };

  $scope.addCustomField = function () {
    if (FeaturesService.actions.block('custom_fields')) return;
    ($scope.position.custom_attributes = $scope.position.custom_attributes || []).push({});
  };

  $scope.removeTag = function (index) {
    $scope.position.tags.splice(index, 1);
  };

  var allow_close = true;
  $scope.$on('modal.closing', function (event, reason, closing) {
    if (allow_close) return;

    if ($scope.activeTab === 'description' && !$scope.formState.submitted && redactorLoaded && !$scope.form.description.$pristine) {
      event.preventDefault();
      dialog.confirm({
        title: "Unsaved Changes",
        message: "Are you sure you wish to close?"
      }, function (result) {
        if (result === true) {
          allow_close = true;
          $uibModalInstance.close();
        }
      });
    }
  });

  $scope.setTabActive = function (tab) {
    allow_close = true;
    $scope.updateFailed = undefined;
    $scope.updateSuccess = undefined;

    if (tab === "description" && $scope.position.org_type !== "pool") {
      allow_close = false;
    }

    if (tab === "team") {
      //initializeHiringTeam();
      initializeMembers();
    }

    if (tab === "application") {
      initializeApplication();
    }

    if (tab === "compliance") {
      initializePoolCompliance();
    }

    if (tab === "pipeline") {
      if (!$scope.position.stage_actions) {
        $scope.position.stage_actions = {};
      }

      initializeStageActionCount();
    } //console.log(`changing tabs ${$scope.formState.submitted} && ${(redactorLoaded && !$scope.form.description.$pristine)}`)


    if ($scope.activeTab === 'description' && $scope.position.org_type !== "pool" && !$scope.formState.submitted && redactorLoaded && !$scope.form.description.$pristine) {
      dialog.confirm({
        title: 'Unsaved Changes',
        message: 'Navigating away will discard changes. Continue?'
      }, function (result) {
        if (result === true) {
          $scope.activeTab = tab;
        }

        return;
      });
    } else {
      if ($scope.position) {}

      if (!tab && $scope.position.org_type !== "pool") {
        tab = "description";
      }

      if (!tab && $scope.position.org_type === "pool") {
        tab = "team";
      }

      if (!$scope.position.is_admin && !$scope.shared.activeCompany.company.is_admin) {
        tab = "team";
      }

      if ($scope.position._id) {
        $state.transitionTo('company.edit-position-section', {
          type: 'edit',
          positionId: $scope.position._id,
          section: tab
        }, {
          location: true,
          inherit: true,
          relative: $state.$current,
          notify: false
        });
      } else {
        $state.transitionTo('company.new-position-section', {
          type: 'new',
          section: tab
        }, {
          location: true,
          inherit: true,
          relative: $state.$current,
          notify: false
        });
      }

      $scope.activeTab = tab; // always scroll to top of window

      if (document.querySelector('#position-edit-frame')) {
        $('#position-edit-frame').scrollTop(0);
      }
    }
  };

  var selected_stage = null;

  $scope.openAddStage = function (stage) {
    selected_stage = angular.copy(stage);

    if (!$scope.position.stage_actions) {
      $scope.position.stage_actions = {};
    }

    var overrides = $scope.position.stage_actions[selected_stage.id] || null;
    ModalService.openAddPositionStageActions($scope.position.all_admins, overrides, selected_stage, $scope.pipeline).then(function (result) {
      if (result) {
        $scope.position.stage_actions[selected_stage.id] = result;
        stage.action_count = getStageActionCount(result, stage);
      }
    });
  };

  $scope.getApplicationOption = function (name) {
    var option = $scope.position.application_form[name];

    if (!option) {
      option = "optional";
    }

    return option;
  };

  $scope.setApplicationOption = function (name, value) {
    $scope.position.application_form[name] = value;
    $scope.appClient.setPositionApplicationOption(name, value, $scope.position._id, $scope.shared.activeCompany.company._id, function (error, result) {
      if (result) {//$scope.shared.activeCompany.positions[$scope.positionId].application_form[name] = value;
      }
    });
  };

  $scope.setPipeline = function (pipeline) {
    if (FeaturesService.actions.block('custom_pipeline')) {
      if (orgType === "pool") {
        $scope.pipeline = PipelinesService.local.getPositionPipelineById('default_pool');
      } else {
        $scope.pipeline = PipelinesService.local.getPositionPipelineById('default');
      }

      return;
    }

    $scope.pipeline = pipeline;
  };

  $scope.setQuestionnaire = function (questionaire) {
    $scope.questionnaire = questionaire;
  };

  $scope.setScorecard = function (scorecard) {
    $scope.scorecard = scorecard;
  };

  $scope.openAddQuestionnaire = function () {
    if (FeaturesService.actions.block('questionnaires')) return;
    $scope.gaEventTracker("OpenAddQuestionnaire");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_questionnaire_modal_new.html',
      controller: 'AddQuestionnaireModalInstanceCtrl',
      size: 'sm',
      resolve: {
        'questionnaire': function questionnaire() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.shared.activeCompany.questionnaires.unshift(result);
        $scope.questionnaires.unshift(result);
      }
    }, function () {});
  };

  $scope.openAddScorecard = function () {
    if (FeaturesService.actions.block('custom_scorecards')) return;
    $scope.gaEventTracker("OpenAddScorecard");
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/settings/_add_scorecard_modal.html',
      controller: 'AddScorecardModalInstanceCtrl',
      size: 'sm',
      resolve: {
        scorecard: function scorecard() {
          return null;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.scorecards.unshift(result);
      }
    }, function () {});
  };

  $scope.upgrade = function () {
    $scope.closeModal();
    $parentScope.companySettings("plan");
  };

  var hasEmail = function hasEmail(description) {
    var re = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/ig;
    return re.test(description);
  };

  $scope.addOrUpdatePosition = function () {
    if ($scope.position.org_type !== 'pool') {
      //$scope.position.description = $('#redactor').redactor('code.get');
      if (!$scope.position.description || $scope.position.description.length <= 0) {
        return;
      }
    }

    if (hasEmail($scope.position.description)) {
      dialog.alert({
        title: "Email Address Detected",
        message: 'It looks like your job description contains an email address. If you wouldn\'t mind, please remove it and click Save again.'
      });
      return false;
    }

    if ($scope.modalFunction == 'new' && !$scope.position._id) {
      if (!$scope.position.state) {
        $scope.position.state = "draft";
      }

      var description = $scope.position.description;
      var addFunc = $scope.appClient.addPosition;

      if ($scope.position.org_type && $scope.position.org_type === "pool") {
        addFunc = $scope.appClient.addPool;
      }

      addFunc($scope.position, $scope.shared.activeCompany.company._id, function (error, result) {
        if (error) {
          $scope.updateFailed = true;
        }

        $scope.shared.activeCompany.positions[result._id] = result;
        result.description = description;
        $scope.position = result;
        $scope.originalPosition = result;
        initializeEmailSender();

        if ($scope.position.org_type && $scope.position.org_type === "pool") {
          if ($scope.gdprEnabled) {
            $scope.setTabActive('compliance');
          } else {
            $scope.setTabActive('pipeline');
          }
        } else {
          $scope.setTabActive('application');
        } //initializeHiringTeam();


        initializeMembers();
        $rootScope.$broadcast('positionAdded', result);
        PositionsService.local.positionViewed(result._id);
      });
    } else {
      var updateFunc = $scope.appClient.updatePosition;

      if ($scope.position.org_type && $scope.position.org_type === "pool") {
        updateFunc = $scope.appClient.updatePool;
      }

      updateFunc($scope.position._id, $scope.position, $scope.shared.activeCompany.company._id, function (error, result) {
        if (error) {
          $scope.updateFailed = true;
          return;
        }

        $scope.shared.activeCompany.positions[result._id] = result;
        $scope.originalPosition = result;
        $scope.updateSuccess = true; //initializeHiringTeam();

        setTimeout(function () {
          $scope.updateSuccess = false;
        }, 2000);
        $rootScope.$broadcast('positionUpdated', result);
      });
    }
  };

  $scope.updateApplication = function () {
    if ($scope.questionnaire) {
      $scope.position.questionnaire_id = $scope.questionnaire._id;
    }

    $scope.appClient.updatePosition($scope.position._id, $scope.position, $scope.shared.activeCompany.company._id, function (error, result) {
      if (error) {
        $scope.updateFailed = true;
        return;
      }

      $scope.updateSuccess = true;
      $scope.shared.activeCompany.positions[result._id] = result;
      $scope.originalPosition = result; //initializeHiringTeam();

      setTimeout(function () {
        $scope.updateSuccess = false;
      }, 2000);
      $rootScope.$broadcast('positionUpdated', result);

      if ($scope.modalFunction == 'new') {
        $scope.setTabActive('pipeline');
      }
    });
  };

  $scope.updateScorecard = function () {
    if (!$scope.scorecard) {
      if (orgType === "pool") {
        if ($scope.modalFunction == 'new') {
          $scope.setTabActive('team');
        }
      } else {
        if ($scope.modalFunction == 'new') {
          $scope.setTabActive('promote');
        }
      }

      return;
    }

    $scope.appClient.setPositionScorecard($scope.scorecard._id, $scope.position._id, $scope.shared.activeCompany.company._id, function (error, result) {
      if (result) {
        //$scope.scorecard = scorecard;
        $scope.position.scorecard_id = $scope.scorecard._id;
        $scope.originalPosition.scorecard_id = $scope.scorecard._id;
        $scope.shared.activeCompany.positions[result._id] = result;
        $scope.updateSuccess = true;
        setTimeout(function () {
          $scope.updateSuccess = false;
        }, 2000);

        if (orgType === "pool") {
          if ($scope.modalFunction == 'new') {
            $scope.setTabActive('team');
          }
        } else {
          if ($scope.modalFunction == 'new') {
            $scope.setTabActive('promote');
          }
        }
      }
    });
  };

  $scope.updatePipeline = function () {
    var pipelineOptions = {};
    pipelineOptions.is_new = $scope.modalFunction === 'new';
    if ($scope.position.email_sender && $scope.position.email_sender.name.trim().length <= 0) return; // determine what has changed

    var pipelineChanged = !(!$scope.position.pipeline_id && $scope.pipeline._id == 'default' || $scope.position.pipeline_id == $scope.pipeline._id);
    var emailSenderChanged = true; // (!$scope.originalPosition.hasOwnProperty('email_sender')) || !angular.equals($scope.originalPosition.email_sender, $scope.position.email_sender); // object changed

    var updatePosition = function updatePosition() {
      var updateFunc = $scope.appClient.updatePosition;

      if ($scope.position.org_type && $scope.position.org_type === "pool") {
        updateFunc = $scope.appClient.updatePool;
      } // remove symbols from email_sender.name


      if ($scope.position.email_sender.name) {
        $scope.position.email_sender.name = $scope.position.email_sender.name.replace(/[\/~`\!@#\$%\^&\*\(\)_\+=\{\}\[\]\|;:"\<\>,\.\?\\]/g, '').trim();
      }

      console.log('updating position here');
      updateFunc($scope.position._id, {
        email_sender: $scope.position.email_sender,
        stage_actions: $scope.position.stage_actions
      }, $scope.shared.activeCompany.company._id, function (error, result) {
        if (error) {
          $scope.updateFailed = true;
          return;
        }

        if (pipelineChanged && $scope.modalFunction == 'new') {
          setPositionPipeline();
        } else if (pipelineChanged) {
          confirmSetPositionPipeline();
        } else if ($scope.modalFunction == 'new') {
          $scope.shared.activeCompany.positions[result._id] = result;
          $scope.originalPosition = result;
          $scope.setTabActive('scorecard');
        } else {
          $scope.shared.activeCompany.positions[result._id] = result;
          $scope.originalPosition = result;
          $scope.updateSuccess = true;
          setTimeout(function () {
            $scope.updateSuccess = false;
          }, 2000);
        }
      });
    }; //pipelineId, positionId, companyId


    var setPositionPipeline = function setPositionPipeline() {
      $scope.appClient.setPositionPipeline($scope.pipeline._id, $scope.position._id, $scope.shared.activeCompany.company._id, function (error, result) {
        if (result) {
          $scope.updateSuccess = true;
          $scope.position.pipeline_id = $scope.pipeline._id;
          $scope.originalPosition.pipeline_id = $scope.pipeline._id;
          $scope.shared.activeCompany.positions[result._id] = result; // go to next step if new

          if ($scope.modalFunction == 'new') {
            $scope.setTabActive('scorecard');
          }
        }
      });
    };

    var confirmSetPositionPipeline = function confirmSetPositionPipeline() {
      var message = 'Changing the pipeline will affect all candidates on this ';
      message += $scope.position.org_type && $scope.position.org_type === "pool" ? "candidate pool." : "position.";
      dialog.confirm({
        title: 'Confirm Pipeline',
        message: message
      }, function (result) {
        if (result === true) {
          setPositionPipeline();
        }

        return;
      });
    }; // determine which stuff to do


    if (emailSenderChanged) {
      updatePosition();
    } else if (pipelineChanged && $scope.modalFunction == 'new') {
      setPositionPipeline();
    } else if (pipelineChanged) {
      confirmSetPositionPipeline();
    } else {
      if ($scope.modalFunction == 'new') {
        $scope.setTabActive('scorecard');
      }
    }
  };

  $rootScope.$on('companyScorecardAdded', function (event, data) {
    var idx;

    for (var i in $scope.scorecards) {
      var scorecard = $scope.scorecards[i];

      if (scorecard._id === data._id) {
        idx = i;
      }
    }

    if (!idx) {
      $scope.scorecards.push(data);
    }
  });

  $scope.activate = function () {
    if ($scope.shared.activeCompany.company.features.trial_expired === true) {
      dialog.confirm({
        title: "Trial Expired",
        message: "Sorry, your trial plan has expired. Let's upgrade!"
      }, function (result) {
        if (result === true) {
          $parentScope.companySettings("plan");
        }
      });
      return;
    }

    if ($scope.shared.positions.published && $scope.shared.positions.published.length >= $scope.shared.activeCompany.company.features.position_limit) {
      dialog.confirm({
        title: "Limit Reached",
        message: "You've reached your active position/pool limit. Would you like to review upgrade options?"
      }, function (result) {
        if (result === true) {
          $parentScope.companySettings("plan");
        }
      });
      return;
    }

    if (orgType !== "pool" && FeaturesService.getters.available('job_approvals') && CompanyService.local.postingRequiresApproval()) {
      $scope.requestPublishApproval($scope.position);
      return false;
    }

    var message = "Are you ready to activate this position?";

    if (orgType === "pool") {
      message = "Are you ready to activate this candidate pool? ";
    }

    dialog.confirm({
      title: "Activate",
      message: message
    }, function (result) {
      if (result === true) {
        var state = "published";
        $scope.appClient.setPositionState(state, $scope.position._id, $scope.shared.activeCompany.company._id, function (error) {
          $scope.position.state = state;
          $scope.position.updated_date = new Date();
          $scope.position.isPublished = true;
          $scope.shared.activeCompany.positions[$scope.position._id].state = state;
          setTimeout(function () {
            $scope.closeModal();
          }, 500);
          setTimeout(function () {
            if ($scope.position.org_type) {
              return;
            }

            $parentScope.publishedModal($scope.position);
          }, 1000);
        });
      }
    });
  };

  $scope.requestPublishApproval = function (_position) {
    var modalInstance = $uibModal.open({
      templateUrl: '/templates/v2/app/position/published/request_approval.html',
      controller: 'RequestPublishApprovalInstanceCtrl',
      size: 'sm',
      resolve: {
        $parentScope: function $parentScope() {
          return $scope;
        },
        position: function position() {
          return _position;
        }
      }
    });
    modalInstance.result.then(function (result) {
      if (result) {
        $scope.closeModal();
      }
    }, function () {});
  };

  $scope.closeModal = function () {
    //$uibModalInstance.close($scope.position);
    $uibModalInstance.dismiss($scope.position);
  };

  $scope.getPositionCategory = function () {
    if (!$scope.position.category) {
      return "default";
    }

    if ($scope.position.category.id === "software" || $scope.position.category.id === "product" || $scope.position.category.id == "sysadmin" || $scope.position.category.id == "devops") {
      return "tech";
    } else if ($scope.position.category.id === "design") {
      return "design";
    } else if ($scope.position.category.id === "sales" || $scope.position.category.id === "marketing") {
      return "sales";
    }

    return "default";
  };

  var initializeCountries = function initializeCountries() {
    $http.get('/data/countries.json').success(function (data) {
      $scope.countries = data;
      $scope.countries.push({
        'id': 'worldwide',
        'name': "Worldwide"
      });
    }).error(function (error) {
      console.log('Error fetching countries JSON!: ' + error);
    });
  };

  var initializeBilling = function initializeBilling() {
    $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
      if (card) {
        $scope.card = card;
      }
    });
  };

  var initializeProvinces = function initializeProvinces() {
    $http.get('/data/provinces.json').success(function (data) {
      $scope.provinces = data;
    }).error(function (error) {
      console.log('Error fetching provinces JSON!: ' + error);
    });
  };

  var initializeStates = function initializeStates() {
    $http.get('/data/states.json').success(function (data) {
      $scope.states = data;
    }).error(function (error) {
      console.log('Error fetching states JSON!: ' + error);
    });
  };

  var initializePositionEducation = function initializePositionEducation() {
    $http.get('/data/positionEducation.json').success(function (data) {
      $scope.positionEducation = data;
    }).error(function (error) {
      console.log('Error fetching position categories JSON!: ' + error);
    });
  };

  var initializePositionIndustries = function initializePositionIndustries() {
    $http.get('/data/positionIndustries.json').success(function (data) {
      $scope.positionIndustries = data;
    }).error(function (error) {
      console.log('Error fetching position categories JSON!: ' + error);
    });
  };

  var initializePositionCategories = function initializePositionCategories() {
    $http.get('/data/positionCategories.json').success(function (data) {
      $scope.positionCategories = data;
    }).error(function (error) {
      console.log('Error fetching position categories JSON!: ' + error);
    });
  };

  var initializePositionTypes = function initializePositionTypes() {
    $http.get('/data/positionTypes.json').success(function (data) {
      $scope.positionTypes = data;
    }).error(function (error) {
      console.log('Error fetching position types JSON!: ' + error);
    });
  };

  var initializeExperienceLevels = function initializeExperienceLevels() {
    $http.get('/data/experienceLevels.json').success(function (data) {
      $scope.experienceLevels = data;
    }).error(function (error) {
      console.log('Error fetching experience levels JSON!: ' + error);
    });
  };

  var initializeJobboards = function initializeJobboards() {
    if (!$scope.position.promote_on) {
      $scope.position.promote_on = {};
    }

    for (var i = 0; i < $scope.shared.job_boards.length; i++) {
      var jobboard = angular.copy($scope.shared.job_boards[i]);

      if ($scope.modalFunction == 'edit') {
        //jobboard.state = $scope.position.promote_on[jobboard._id];
        jobboard.view_count = $scope.position.sources[jobboard._id + '-view'];

        if (!jobboard.view_count) {
          jobboard.view_count = 0;
        }

        jobboard.applicant_count = $scope.position.sources[jobboard._id + '-applicant'];

        if (!jobboard.applicant_count) {
          jobboard.applicant_count = 0;
        }
      } else {
        jobboard.view_count = 0;
        jobboard.applicant_count = 0;
      }

      $scope.canPromoteOn[jobboard._id] = jobboard;
    }
  };

  $scope.availableUsers = [];

  var initializeHiringTeam = function initializeHiringTeam() {
    $scope.availableUsers = [];

    if ($scope.availableUsers.length === 0) {
      for (var i in $scope.shared.activeCompany.members) {
        var member = $scope.shared.activeCompany.members[i];
        member.type = 'Users';

        if ($scope.position.users.indexOf(member._id) === -1) {
          $scope.availableUsers.push(member);
        }
      }
    } //console.log('users: ' + $scope.position.users);
    //console.log('members: ' + $scope.position.members);


    if ($scope.position.members && $scope.position.members.length > 0) {
      var newMembers = [];
      $scope.position.members.forEach(function (member) {
        if ($scope.position.users.indexOf(member._id) > -1) newMembers.push(member);
        $scope.position.members = newMembers;
      });
      return;
    }

    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.position._id, function (error, results) {
      if (!results) results = [];
      $scope.position.members = [];
      results.forEach(function (result) {
        if ($scope.position.users.indexOf(result._id) > -1) $scope.position.members.push(result);
      });
    });
    /*
    $scope.appClient.getInvitations($scope.shared.activeCompany.company._id, $scope.position._id, function (error, members) {
        $scope.team_invited = members;
     });
    $scope.appClient.getPositionTeam($scope.shared.activeCompany.company._id, $scope.position._id, function (error, members) {
        $scope.position.members = members;
        for(var i in members) {
         }
    });
    $scope.appClient.getPositionRecruiters($scope.shared.activeCompany.company._id, $scope.position._id, function (error, recruiters) {
        $scope.position.recruiters = recruiters;
    });
    */
  };

  var initializeInvitations = function initializeInvitations() {
    $scope.appClient.getInvitations($scope.shared.activeCompany.company._id, $scope.position._id, function (error, result) {
      $scope.team_invited = result;
    });
  };

  var initializeEmailSender = function initializeEmailSender() {
    if (!$scope.position.email_sender && $scope.position.admins) {
      var adminId = $scope.position.admins[0];
      var email_sender = $scope.shared.activeCompany.members.find(function (member) {
        return member._id === adminId;
      });
      var name = 'Hiring Team';

      if (email_sender) {
        name = email_sender.name;
      }

      $scope.position.email_sender = {
        name: name
      };
    }
  };

  var initializeCustomAttributes = function initializeCustomAttributes() {
    $scope.appClient.getCustomAttributes($scope.shared.activeCompany.company._id, 'position', function (error, results) {
      $scope.customAttributes = results;
    });
  };

  var initializeCompliance = function initializeCompliance() {
    var countryId = $scope.position.location ? $scope.position.location.country.id : null;
    $scope.eeocEnabled = CompanyService.getters.settings('eeoc.enable_eeoc');

    if ($scope.gdprEnabled) {
      $scope.gdprAppliedEnabled = CompanyService.getters.settings('gdpr.consent.applied.enabled');
    }

    if ($scope.eeocEnabled) {
      if (!$scope.position.application_form.hasOwnProperty('eeoc') && $scope.modalFunction === 'new') {
        if (countryId && countryId !== 'US') {
          $scope.position.application_form.eeoc = 'hidden';
        } else {
          $scope.position.application_form.eeoc = 'optional';
        }
      } else if (!$scope.position.application_form.hasOwnProperty('eeoc')) {
        $scope.position.application_form.eeoc = 'optional';
      }
    }

    if ($scope.gdprEnabled) {
      if (!$scope.position.application_form.hasOwnProperty('gdpr') && $scope.modalFunction === 'new') {
        if (countryId && countryId === 'US') {
          $scope.position.application_form.gdpr = 'hidden';
        } else {
          $scope.position.application_form.gdpr = 'required';
        }
      } else if (!$scope.position.application_form.hasOwnProperty('gdpr')) {
        $scope.position.application_form.gdpr = 'hidden';
      }
    } //console.log(eeocEnabled, gdprEnabled);
    //if (eeo enabled)
    //    if (position.)

  };

  var initializePoolCompliance = function initializePoolCompliance() {
    if (!$scope.position.hasOwnProperty('application_form')) {
      $scope.position.application_form = {};
    }

    if (!$scope.position.application_form.hasOwnProperty('gdpr') && $scope.modalFunction === 'new') {
      $scope.position.application_form.gdpr = 'required';
    } else if (!$scope.position.application_form.hasOwnProperty('gdpr')) {
      $scope.position.application_form.gdpr = 'hidden';
    }
  };

  $scope.removeHiringManagerTeam = function ($index, team) {
    $scope.hiringManagerTeams.splice($index, 1);
    $scope.availableMembersList.push(mapTeam(team));
    $scope.appClient.setPositionTeamRole($scope.shared.activeCompany.company._id, $scope.position._id, team._id, "none", function () {});
  };

  $scope.removeMemberTeam = function ($index, team) {
    $scope.memberTeams.splice($index, 1);
    $scope.availableMembersList.push(mapTeam(team));
    $scope.appClient.setPositionTeamRole($scope.shared.activeCompany.company._id, $scope.position._id, team._id, "none", function () {});
  };

  $scope.addTeamToPosition = function () {
    $scope.addTeam.submitted = true;
    $scope.addTeam.adding = true;
    var member_type = $scope.addTeam.team.member_type;
    var member = null;

    if (member_type === 'Teams') {
      member = $scope.availableTeams.find(function (x) {
        return x._id == $scope.addTeam.team._id;
      });

      var cb = function cb(error, result) {
        var position = $scope.position;

        if ($scope.addTeam.role_type === 'admin') {
          $scope.hiringManagerTeams.unshift(member);
          $scope.position.teams.admin.unshift(member._id);
        } else if ($scope.addTeam.role_type === 'member') {
          $scope.memberTeams.unshift(member);
          $scope.position.teams.member.unshift(member._id);
        }

        $scope.availableMembersList.splice($scope.availableMembersList.findIndex(function (x) {
          return x._id == member._id;
        }), 1);
        $scope.addTeam = {
          "role_type": "member"
        };
        $scope.form.formAddTeam.$setPristine();
        delete $scope.addTeam.submitted;
        delete $scope.addTeam.adding;
      };

      $scope.appClient.setPositionTeamRole($scope.shared.activeCompany.company._id, $scope.position._id, $scope.addTeam.team._id, $scope.addTeam.role_type, cb);
    } else if (member_type === 'Users') {
      member = $scope.availableUsers.find(function (x) {
        return x._id == $scope.addTeam.team._id;
      });

      var cb = function cb(error, result) {
        setTimeout(function () {
          var position = $scope.position;
          delete member.is_admin;

          if ($scope.addTeam.role_type === 'admin') {
            member.is_admin = true;
          } else if ($scope.addTeam.role_type === 'member') {}

          $scope.position.members.unshift(member);
          $scope.availableMembersList.splice($scope.availableMembersList.findIndex(function (x) {
            return x._id == member._id;
          }), 1);
          $scope.addTeam = {
            "role_type": "member"
          };
          $scope.form.formAddTeam.$setPristine();
          delete $scope.addTeam.submitted;
          delete $scope.addTeam.adding;
        }, 200);
      };

      $scope.appClient.setPositionTeamMemberRole($scope.shared.activeCompany.company._id, $scope.position._id, $scope.addTeam.team._id, $scope.addTeam.role_type, cb);
    }
  };

  $scope.addUserToPosition = function () {
    $scope.addMember.submitted = true;
    $scope.addMember.adding = true;

    var cb = function cb(error, result) {
      setTimeout(function () {
        var position = $scope.position;
        delete $scope.addMember.user.is_admin;

        if ($scope.addMember.user_type === 'admin') {
          $scope.addMember.user.is_admin = true;
        } else if ($scope.addMember.user_type === 'member') {}

        $scope.position.members.unshift($scope.addMember.user);
        $scope.addMember = {
          "role_type": "member"
        };
        $scope.form.formAddMember.$setPristine();
        delete $scope.addMember.submitted;
        delete $scope.addMember.adding;
      }, 200);
    };

    $scope.appClient.setPositionTeamMemberRole($scope.shared.activeCompany.company._id, $scope.position._id, $scope.addMember.user._id, $scope.addMember.user_type, cb);
  };

  $scope.addToPosition = function (m) {
    var member = JSON.parse(JSON.stringify(m));
    delete member.is_admin;
    member.addedToPosition = true;
    $scope.appClient.addPositionTeamMember($scope.shared.activeCompany.company._id, $scope.position._id, member._id, function (error, result) {
      member.postPageLoad = true;
      $scope.position.members.unshift(member);
      $scope.originalPosition.users.push(member._id);
      $scope.originalPosition.all_users.push(member._id);
    });
  };

  $scope.removeTeamMember = function ($index) {
    var member = $scope.position.members[$index];
    $scope.appClient.removePositionTeamMember(member._id, $scope.shared.activeCompany.company._id, $scope.position._id, function (error) {
      if (!error) {
        if (!$scope.position.members) {
          $scope.position.members = [];
        }

        $scope.position.members.splice($index, 1);
        var idx = $scope.originalPosition.users.indexOf(member._id);
        $scope.originalPosition.users.splice(idx, 1);
        idx = $scope.originalPosition.all_users.indexOf(member._id);
        $scope.originalPosition.all_users.splice(idx, 1);
        $scope.availableMembersList.push(mapUser(member));
        $scope.availableUsers.push(mapUser(member));
      }
    });
  };

  $scope.addRecruiter = function (recruiter) {
    $scope.appClient.addPositionRecruiter(recruiter, $scope.shared.activeCompany.company._id, $scope.position._id, function (error, recruiter) {
      if (!error) {
        if (!$scope.position.recruiters) {
          $scope.position.recruiters = [];
        }

        $scope.position.recruiters.push(recruiter);
      }

      $scope.newRecruiter = {};
    });
  };

  $scope.addPositionAdmin = function ($index) {
    var member = $scope.position.members[$index];
    member.is_admin = true;
    $scope.appClient.addPositionAdmin($scope.shared.activeCompany.company._id, $scope.position._id, member._id, function (error, result) {
      $scope.position.admins.unshift(member._id);
    });
  };

  $scope.removePositionAdmin = function ($index) {
    var member = $scope.position.members[$index];
    member.is_admin = false;
    $scope.appClient.removePositionAdmin($scope.shared.activeCompany.company._id, $scope.position._id, member._id, function (error) {
      if (!error) {
        $scope.position.admins.splice($index, 1);
      }
    });
  };

  $scope.removeRecruiter = function ($index) {
    var recruiter = $scope.position.recruiters[$index];
    $scope.appClient.removePositionRecruiter(recruiter._id, $scope.shared.activeCompany.company._id, $scope.position._id, function (error) {
      if (!error) {
        if (!$scope.position.recruiters) {
          $scope.position.recruiters = [];
        }

        $scope.position.recruiters.splice($index, 1);
      }
    });
  };

  $scope.inviteCompanyMember = function (member) {
    member.invitedToPosition = true;
    $cookieStore.put("CompanyMemberInvited", true);
    $rootScope.$broadcast('companyMemberInvited', {});
    $scope.appClient.inviteCompanyMember($scope.shared.activeCompany.company._id, $scope.position._id, member.id, function (error, result) {
      initializeInvitations();

      if (!error) {
        setTimeout(function () {
          $scope.invite.searchTerm = '';
        }, 1000);
      }
    });
  };

  var isEmail = function isEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  $scope.$watch('invite.searchTerm', function (text, prevText) {
    if (!$scope.invite.searchTerm) {
      $scope.invite.invitees = [];
      $scope.invite.email_invitees = [];
      return;
    }

    if (isEmail($scope.invite.searchTerm)) {
      $scope.invite.email_invitees = [];
      var member = {
        'id': $scope.invite.searchTerm,
        'initial': $scope.invite.searchTerm.substring(0, 1).toUpperCase(),
        'name': $scope.invite.searchTerm
      }; //$scope.invite.email_invitees.push(member);

      var isMember = _.find($scope.position.members, function (m) {
        return m.email_address === $scope.invite.searchTerm;
      }),
          isInvited = _.find($scope.team_invited, function (m) {
        return m.invited_id === $scope.invite.searchTerm;
      });

      if (!isMember && !isInvited) {
        $scope.invite.email_invitees.push(member);
      }

      return;
    }

    $scope.invite.invitees = [];
    angular.forEach($scope.shared.activeCompany.members, function (member) {
      for (var i = 0; i < $scope.position.members.length; i++) {
        var positionMember = $scope.position.members[i];

        if (positionMember._id === member._id) {
          return;
        }
      }

      if (member.name && (member.name.toLowerCase().indexOf($scope.invite.searchTerm.toLowerCase()) != -1 || member.username.toLowerCase().indexOf($scope.invite.searchTerm.toLowerCase()) != -1) || member.email_address.toLowerCase().indexOf($scope.invite.searchTerm.toLowerCase()) != -1) {
        $scope.invite.invitees.push(member);
      }
    });
  });

  $scope.resetState = function () {
    delete $scope.position.location.state;
  };

  $scope.$watch('position.name', function (text, prevText) {
    if (!$scope.position.name) {
      if (orgType === "pool") {
        $scope.positionName = 'New Pool';
      } else {
        $scope.positionName = 'New Position';
      }
    } else {
      $scope.positionName = $scope.position.name;
    }
  });
  $scope.$watch('position.location.country', function (text, prevText) {
    if ($scope.position.location && $scope.position.location.country && $scope.position.location.country.id == "US") {
      $scope.statesEnabled = true;
      $scope.provincesEnabled = false;
    } else if ($scope.position.location && $scope.position.location.country && $scope.position.location.country.id == "CA") {
      $scope.provincesEnabled = true;
      $scope.statesEnabled = false;
    } else {
      $scope.statesEnabled = false;
      $scope.provincesEnabled = false;
    }
  });
  $scope.$on('positionUpdated', function (e, data) {
    if ($scope.position._id !== data._id) return;
    data.is_admin = $scope.position.is_admin;
    data.is_member = $scope.position.is_member;
    $scope.position = data;
  });

  function initializeAssessments() {
    $scope.appClient.getCompanyAssessments({
      companyId: $scope.shared.activeCompany.company._id,
      positionId: $scope.position._id
    }, function (error, data) {
      if (error || !data) {
        $scope.shared.activeCompany.assessments = [];
        return;
      }

      $scope.shared.activeCompany.assessments = data;
    });
  }

  var allTeamMembers = [];

  var initializeTeams = function initializeTeams() {
    $scope.availableTeams = [];
    $scope.hiringManagerTeams = [];
    $scope.memberTeams = [];

    for (var i in $scope.shared.activeCompany.teams) {
      var team = $scope.shared.activeCompany.teams[i];
      allTeamMembers.push(team.member_ids);
      team.type = 'Teams';

      if ($scope.position.teams.admin.indexOf(team._id) > -1) {
        $scope.hiringManagerTeams.push(team);
      } else if ($scope.position.teams.member.indexOf(team._id) > -1) {
        $scope.memberTeams.push(team);
      } else {
        $scope.availableTeams.push(team);
      }
    }
  };

  var mapTeam = function mapTeam(team) {
    return {
      _id: team._id,
      name: team.name,
      member_type: 'Teams',
      members: team.member_ids.length > 0 ? team.member_ids.reduce(function (acc, id, index) {
        if (index < 3) {
          var member = CompanyService.getters.memberById(id);

          if (member) {
            acc.push({
              initial: member.initial,
              hex_color: member.hex_color,
              profile_photo_url: member.profile_photo_url
            });
          }
        }

        return acc;
      }, []) : [{
        hex_color: 'grey'
      }],
      count: team.member_ids.length
    };
  };

  var mapUser = function mapUser(user) {
    return {
      _id: user._id,
      name: user.name,
      email_address: user.email_address,
      member_type: 'Users',
      initial: user.initial,
      hex_color: user.hex_color,
      profile_photo_url: user.profile_photo_url
    };
  };

  var initializeMembers = function initializeMembers() {
    initializeHiringTeam();
    initializeTeams(); // create master list

    $scope.availableMembersList = _toConsumableArray($scope.availableTeams.map(mapTeam)).concat(_toConsumableArray($scope.availableUsers.map(mapUser))); //console.log($scope.availableMembersList);
  };

  var initializeDeputy = function initializeDeputy() {
    AppClient.getDeputyLocations($scope.shared.activeCompany.company._id).then(function (results) {
      $scope.deputyLocations = results;
    });
  };

  var initialize = function initialize() {
    if ($scope.modalFunction === 'edit') {
      initializeMembers();
    }

    initializePositionCategories();
    initializeExperienceLevels();
    initializeCustomAttributes();
    initializeEmailSender();
    initializeAssessments();

    if ($scope.position.org_type === "pool") {} else {
      initializeBilling();
      initializePositionTypes();
      initializePositionEducation();
      initializeCountries();
      initializeStates();
      initializeProvinces();
      initializeExperienceLevels();
      initializeJobboards();
    }

    if ($scope.shared.activeCompany.company.has_deputy) {
      initializeDeputy();
    }

    if ($scope.position.pipeline_id && $scope.pipelines) {
      if (FeaturesService.getters.available('multiple_pipeline')) {
        for (var k in $scope.pipelines) {
          var pipeline = $scope.pipelines[k];

          if ($scope.position.pipeline_id === pipeline._id) {
            $scope.pipeline = pipeline;
          }
        }
      } else {
        if (orgType === "pool") {
          $scope.pipeline = PipelinesService.local.getPositionPipelineById('default_pool');
        } else {
          $scope.pipeline = PipelinesService.local.getPositionPipelineById('default');
        }
      }
    }

    if ($scope.position.questionnaire_id && $scope.questionnaires) {
      for (var i in $scope.questionnaires) {
        var questionnaire = $scope.questionnaires[i];

        if ($scope.position.questionnaire_id === questionnaire._id) {
          $scope.questionnaire = questionnaire;
        }
      }
    }

    if ($scope.position.scorecard_id && $scope.scorecards) {
      for (var j in $scope.scorecards) {
        var scorecard = $scope.scorecards[j];

        if ($scope.position.scorecard_id === scorecard._id) {
          $scope.scorecard = scorecard;
        }
      }
    }

    setTimeout(function () {
      redactorLoaded = true;

      if ($scope.form && $scope.form.description) {
        $scope.form.description.$setPristine(true);
      }
    }, 5000);
  };

  $scope.setTabActive(defaultTab);
  initialize();
}]);
'use strict';

angular.module('appController').controller('RequestPublishApprovalInstanceCtrl', ['$rootScope', '$scope', '$uibModalInstance', '$upload', 'AppClient', 'SharedData', 'position', function ($rootScope, $scope, $uibModalInstance, $upload, AppClient, SharedData, position) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.request = {
    attachments: []
  };

  var upload = function upload($files, callback) {
    var onProgress = function onProgress(e) {
      console.log('Percent: ' + parseInt(100.0 * e.loaded / e.total));
    },
        onSuccess = function onSuccess(data, status, headers, config) {
      return callback(null, data);
    },
        onError = function onError() {
      return callback(true);
    };

    for (var i in $files) {
      console.log('File: ' + i);
      var file = $files[i];
      console.log('Uploading....');
      $scope.upload = $upload.upload({
        url: '/api/company/' + $scope.shared.activeCompany._id + '/upload',
        method: 'POST',
        file: file
      }).progress(onProgress).success(onSuccess).error(onError);
    }
  };

  $scope.removeFileAttachment = function (idx) {
    $scope.request.attachments.splice(idx, 1);
  };

  $scope.uploadAttachment = function ($files) {
    var attachment = {
      'status': 'uploading'
    };
    $scope.request.attachments.push(attachment);
    upload($files, function (error, data) {
      if (data) {
        attachment.status = 'attached';
        attachment.file_name = data.file_name;
        attachment.url = data.url;
        attachment.content_type = data.content_type;
      } else {
        attachment.status = 'error';
      }
    });
  };

  $scope.approvalSentSuccess = false;

  $scope.submit = function () {
    $scope.appClient.requestPublishApproval($scope.shared.activeCompany.company._id, $scope.position._id, $scope.request, function (error, result) {
      $scope.approvalSentSuccess = true;
      $rootScope.$broadcast('approvalRequestSent');
      setTimeout(function () {
        $scope.closeModal('submit');
      }, 1000);
    });
  };

  $scope.closeModal = function (str) {
    $uibModalInstance.close(str);
  };
}]);
'use strict';

angular.module('appController').controller('ReviewPublishRequestInstanceCtrl', ['$scope', '$parentScope', '$uibModalInstance', '$state', 'AppClient', 'SharedData', 'sharedDataUtils', 'position', 'approval', function ($scope, $parentScope, $uibModalInstance, $state, AppClient, SharedData, sharedDataUtils, position, approval) {
  console.log('ReviewPublishRequestInstanceCtrl');
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.disabled = false;
  $scope.canceled = false;
  if (approval) $scope.position.pending_approval = approval;
  position = $scope.position;

  if (position.is_pending && position.pending_approval && position.pending_approval.approvers) {
    var token = position.pending_approval.approvers.find(function (approver) {
      return approver._id === $scope.shared.user._id;
    }).token;
    $state.transitionTo('company.position-approval', {
      positionId: position._id,
      token: token
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  } else {
    $state.transitionTo('company.approve-position', {
      positionId: position._id
    }, {
      location: true,
      inherit: true,
      relative: $state.$current,
      notify: false
    });
  }

  if (!position.is_pending || !position.is_reviewable) {
    $scope.disabled = true;
  }

  if (position.pending_approval.type && position.pending_approval.type === 'chain') {
    $scope.response = position.pending_approval.approvers.find(function (approver) {
      return approver._id === $scope.shared.user._id;
    }).approved || null;
  }

  if (position.pending_approval.approval_status === 'canceled') {
    $scope.canceled = true;
  }

  if (position.pending_approval.acting_user) {
    $scope.requestedBy = position.pending_approval.acting_user;
  } else {
    $scope.requestedBy = sharedDataUtils.getTeamMemberById(position.pending_approval.requestedBy);
  }

  $scope.editPosition = $parentScope.editPosition;

  $scope.approve = function () {
    $scope.appClient.approvePublishApproval($scope.shared.activeCompany.company._id, position._id, function (error, result) {
      if (error) {
        $scope.error = true;
        return;
      }

      $scope.closeModal();
    });
  };

  $scope.reject = function () {
    $scope.appClient.rejectPublishApproval($scope.shared.activeCompany.company._id, position._id, function (error, result) {
      if (error) {
        $scope.error = true;
        return;
      }

      $scope.closeModal();
    });
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };
}]);
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

angular.module('appController').controller('CvlibraryModalInstanceCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'AppClient', 'SharedData', 'position', '$stateParams', '$sce', function ($scope, $uibModalInstance, $uibModal, AppClient, SharedData, position, $stateParams, $sce) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.regions = [{
    name: 'Standard job posting (not regional)',
    id: 0
  }, {
    name: 'East Midlands',
    id: 77
  }, {
    name: 'London',
    id: 127
  }, {
    name: 'North East',
    id: 90
  }, {
    name: 'North West',
    id: 95
  }, {
    name: 'Northern Island',
    id: 100
  }, {
    name: 'Scotland',
    id: 107
  }, {
    name: 'South East',
    id: 117
  }, {
    name: 'South West',
    id: 132
  }, {
    name: 'Wales',
    id: 140
  }, {
    name: 'West Midlands',
    id: 149
  }, {
    name: 'UK (Nationwide)',
    id: 411
  }, {
    name: 'Non UK',
    id: 68
  }];
  $scope.salaryPeriods = [{
    name: 'Per Annum',
    id: 403
  }, {
    name: 'Per Month',
    id: 404
  }, {
    name: 'Per Week',
    id: 405
  }, {
    name: 'Per Day',
    id: 406
  }, {
    name: 'Per Hour',
    id: 407
  }];
  $scope.job = {
    id: position.cvlibrary ? position.cvlibrary.id : undefined,
    region: position.cvlibrary ? position.cvlibrary.region : undefined,
    relocateFromEu: position.cvlibrary && position.cvlibrary.relocate_from_eu ? true : undefined,
    salaryMin: position.cvlibrary ? position.cvlibrary.salary_min : undefined,
    salaryMax: position.cvlibrary ? position.cvlibrary.salary_max : undefined,
    salaryPeriod: position.cvlibrary ? position.cvlibrary.salary_period : undefined
  };

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.submitJob = function () {
    if (typeof $scope.job.region === 'undefined' || typeof $scope.job.salaryMin === 'undefined' || typeof $scope.job.salaryMax === 'undefined' || !$scope.job.salaryPeriod) {
      return;
    }

    $scope.error = '';
    $scope.errors = '';
    $scope.success = 'Submitting...';
    var companyId = $scope.shared.activeCompany.company._id;

    if ($scope.job.relocateFromEu) {
      $scope.job.relocateFromEu = 1;
    } else {
      $scope.job.relocateFromEu = 0;
    }

    AppClient.postCvlibraryJob(companyId, $scope.position._id, $scope.job).then(function (results) {
      $scope.success = '';
      position.has_cvlibrary = true;
      position.cvlibrary = results;
      closeModal();
    }).catch(function (e) {
      console.log('postCvlibraryJob ERROR', e);

      if (_typeof(e) === 'object') {
        $scope.errors = e;
      } else {
        $scope.error = 'There was an error posting your job to CV Library';
      }

      $scope.success = '';
    });
  };
}]);
'use strict';

angular.module('appController').controller('IndeedSponsoredModalInstanceCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'AppClient', 'SharedData', 'position', 'indeedSponsored', function ($scope, $uibModalInstance, $uibModal, AppClient, SharedData, position, indeedSponsored) {
  console.log('position', position);
  console.log('indeedSponsored', indeedSponsored);
  var promotionId,
      saved = false;
  $scope.indeedSponsored = indeedSponsored;
  $scope.steps = [{
    name: 'accountEmail'
  }, {
    name: 'selectBudget'
  }, {
    name: 'optionalPhone'
  }];
  $scope.currentStep = $scope.steps[0];

  $scope.prevStep = function () {
    var currentStep = $scope.steps.indexOf($scope.currentStep);
    $scope.currentStep = $scope.steps[currentStep - 1];
  };

  $scope.nextStep = function () {
    var currentStep = $scope.steps.indexOf($scope.currentStep);
    currentStep++;

    if (currentStep < $scope.steps.length) {
      $scope.currentStep = $scope.steps[currentStep];
    }
  };

  $scope.promoteJob = function () {
    if (!$scope.indeedSponsored.budget) {
      $scope.error = {
        message: 'Please select a budget below.'
      };
      return;
    }

    delete $scope.error;
    var companyId = SharedData.activeCompany.company._id;
    AppClient.setPositionPromotionOption('indeed_sponsored_jobs', 'on', position._id, companyId, $scope.indeedSponsored, function (err, result) {
      if (err) {
        $scope.error = {
          message: 'Please verify the information provided below.'
        };
        console.log('sponsor position indeed', err);
        return;
      }

      console.log('promotionId', result);
      promotionId = result._id;
      $scope.nextStep();
    });
  };

  $scope.submitPhone = function () {
    if (!$scope.indeedSponsored.phone) {
      $scope.error = {
        message: 'Please enter a phone number.'
      };
      return;
    }

    delete $scope.error;
    var companyId = SharedData.activeCompany.company._id,
        promotionUpdates = {
      'object': $scope.indeedSponsored
    };

    if (promotionId) {
      AppClient.updatePositionPromotion(companyId, position._id, promotionId, promotionUpdates, function (err, result) {
        if (err) {
          $scope.error = {
            message: 'Please verify the information provided below.'
          };
          console.log('sponsor position indeed', err);
          return;
        }

        $uibModalInstance.close();
      });
    } else {
      AppClient.setPositionPromotionOption('indeed_sponsored_jobs', 'on', position._id, companyId, $scope.indeedSponsored, function (err, result) {
        if (err) {
          $scope.error = {
            message: 'Please verify the information provided below.'
          };
          console.log('sponsor position indeed', err);
          return;
        }

        promotionId = result._id;
        $uibModalInstance.close();
      });
    }
  };

  $scope.closeModal = function () {
    //$uibModalInstance.close($scope.position);
    $uibModalInstance.dismiss($scope.position);
  }; // convoluted way to make sure modal close event sends correct state info to parent when closing


  $scope.$on('modal.closing', function (event, reason, closing) {
    if (promotionId && !saved) {
      event.preventDefault();
      saved = true;
      $uibModalInstance.close({
        promotionId: promotionId
      });
    }
  });
}]);
'use strict';

angular.module('appController').controller('MassPromoteModalInstanceCtrl', ['$scope', 'AppClient', 'SharedData', 'PositionsService', '$timeout', '$rootScope', '$cookieStore', '$uibModalInstance', function ($scope, AppClient, SharedData, PositionsService, $timeout, $rootScope, $cookieStore, $uibModalInstance) {
  $scope.shared = SharedData;
  $scope.appClient = AppClient;
  $scope.billingError = undefined;
  $scope.billingErrorMessage = undefined;
  $scope.billingSuccess = undefined;
  $scope.availablePositions = [];
  $scope.position_count = 0;
  $scope.step = 1;

  for (var key in SharedData.activeCompany.positions) {
    var position = angular.copy(SharedData.activeCompany.positions[key]);

    if (position.state === "published" && position.org_type !== "pool" && (position.is_admin || $scope.shared.activeCompany.company.is_admin)) {
      $scope.availablePositions.push(position);
    }
  }

  $scope.isPositionPromoted = function (position) {
    var linkedin = $scope.appClient.isPositionPromotedOnService(position, "linkedin");
    ;
    var linkedin_discount = $scope.appClient.isPositionPromotedOnService(position, "linkedin_discount");

    if (linkedin === true || linkedin_discount === true) {
      return true;
    }

    return false;
  };

  $scope.clearAllAvailable = function () {
    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];
      delete position.checked;

      if (!$scope.appClient.isPositionPromoted(position)) {
        $scope.position_count--;
      }
    }
  };

  $scope.selectAllAvailable = function () {
    $scope.position_count = 0;

    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];
      position.checked = true;

      if (!$scope.isPositionPromoted(position)) {
        $scope.position_count++;
      }
    }
  };

  $scope.updateCount = function ($event) {
    var checkbox = $event.target;

    if (checkbox.checked) {
      $scope.position_count++;
    } else {
      $scope.position_count--;
    }
  };

  $scope.confirmTransaction = function () {
    $scope.step = 2;
  };

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  var promotePositions = function promotePositions() {
    var selectedPositions = [];

    for (var i in $scope.availablePositions) {
      var position = $scope.availablePositions[i];

      if (position.checked === true) {
        selectedPositions.push(position);
      }
    }

    $scope.processing = true;
    var billingErrorCount = 0;
    var completedCount = 0;

    for (var i in selectedPositions) {
      $scope.appClient.setPositionPromotionOption("linkedin_discount", 'on', selectedPositions[i]._id, $scope.shared.activeCompany.company._id, undefined, function (error, card) {
        if (error) {
          $scope.billingError = true;
          billingErrorCount++;
        }

        completedCount++;

        if (completedCount === totalCount) {
          if (billingErrorCount > 0) {
            $scope.billingErrorMessage = "We had a problem processing payment on " + billingErrorCount + " position(s). Please email support@breezyhr.com for assistance.";
          } else {
            setTimeout(function () {
              $scope.processing = false;
              location.reload();
            }, 1500);
          }
        }
      });
    }
  };

  $scope.no = function () {
    closeModal();
  };

  $scope.yes = function () {
    $scope.processing = true;
    promotePositions();
  };

  $scope.handleStripe = function (status, response) {
    $scope.processing = true;
    $scope.billingError = undefined;
    $scope.billingErrorMessage = undefined;
    $scope.billingSuccess = undefined;

    if (response.error) {
      $scope.processing = false;
      $scope.billingError = true;
      $scope.billingErrorMessage = response.error.message;
      return;
    } // got stripe token, now charge it or smt


    var token = response.id;

    if ($scope.billingRequired) {
      $scope.appClient.updateCompanyCreditCard($scope.shared.activeCompany.company._id, token, function (error, card) {
        if (error) {
          $scope.processing = false;
          $scope.billingError = true;
          $scope.billingErrorMessage = "We had a problem updating your billing information. If this continues please email support@breezyhr.com.";
          return;
        }

        console.log('Credit card updated');
        promotePositions();
      });
    }
  };

  $scope.closeModal = function () {
    $uibModalInstance.close();
  };

  $scope.appClient.getCompanyCreditCard($scope.shared.activeCompany.company._id, function (error, card) {
    if (card) {
      $scope.card = card;
      $scope.showUpdateBilling = false;
    } else {
      $scope.billingRequired = true;
    }
  });
}]);
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

angular.module('appController').controller('SeekModalInstanceCtrl', ['$scope', '$uibModalInstance', '$uibModal', 'AppClient', 'SharedData', 'position', '$stateParams', 'advertisement', '$sce', function ($scope, $uibModalInstance, $uibModal, AppClient, SharedData, position, $stateParams, advertisement, $sce) {
  $scope.appClient = AppClient;
  $scope.shared = SharedData;
  $scope.position = position;
  $scope.advertisementTypes = ['Classic', 'StandOut'];
  $scope.locations = [{
    "name": "ACT",
    "id": "locACT"
  }, {
    "name": "Adelaide",
    "id": "Adelaide"
  }, {
    "name": "Adelaide Hills & Barossa",
    "id": "AdelaideHillsBarossa"
  }, {
    "name": "Albany & Great Southern",
    "id": "AlbanyGreatSouthern"
  }, {
    "name": "Albury Wodonga & Murray",
    "id": "AlburyWodongaMurray"
  }, {
    "name": "Alice Springs & Central Australia",
    "id": "AliceSpringsCentralAustralia"
  }, {
    "name": "Americas",
    "id": "Americas"
  }, {
    "name": "Asia Pacific",
    "id": "AsiaPacific"
  }, {
    "name": "Auckland",
    "id": "Auckland"
  }, {
    "name": "Bairnsdale & Gippsland",
    "id": "BairnsdaleGippsland"
  }, {
    "name": "Ballarat & Central Highlands",
    "id": "BallaratCentralHighlands"
  }, {
    "name": "Bay of Plenty",
    "id": "BayofPlenty"
  }, {
    "name": "Bendigo, Goldfields & Macedon Ranges",
    "id": "BendigoGoldfieldsMacedonRanges"
  }, {
    "name": "Blue Mountains & Central West",
    "id": "BlueMountainsCentralWest"
  }, {
    "name": "Brisbane",
    "id": "Brisbane"
  }, {
    "name": "Broome & Kimberley",
    "id": "BroomeKimberley"
  }, {
    "name": "Bunbury & South West",
    "id": "BunburySouthWest"
  }, {
    "name": "Bundaberg & Wide Bay Burnett",
    "id": "BundabergWideBayBurnett"
  }, {
    "name": "Cairns & Far North",
    "id": "CairnsFarNorth"
  }, {
    "name": "Canterbury",
    "id": "Canterbury"
  }, {
    "name": "Central & South East",
    "id": "CentralSouthEast"
  }, {
    "name": "Coffs Harbour & North Coast",
    "id": "CoffsHarbourNorthCoast"
  }, {
    "name": "Coober Pedy & Outback SA",
    "id": "CooberPedyOutbackSA"
  }, {
    "name": "Darwin",
    "id": "Darwin"
  }, {
    "name": "Devonport & North West",
    "id": "DevonportNorthWest"
  }, {
    "name": "Dubbo & Central NSW",
    "id": "DubboCentralNSW"
  }, {
    "name": "Europe & Russia",
    "id": "EuropeRussia"
  }, {
    "name": "Far West & North Central NSW",
    "id": "FarWestNorthCentralNSW"
  }, {
    "name": "Fleurieu Peninsula & Kangaroo Island",
    "id": "FleurieuPeninsulaKangarooIsland"
  }, {
    "name": "Geelong & Great Ocean Road",
    "id": "GeelongGreatOceanRoad"
  }, {
    "name": "Geraldton, Gascoyne & Midwest",
    "id": "GeraldtonGascoyneMidwest"
  }, {
    "name": "Gisborne",
    "id": "GisborneRegion"
  }, {
    "name": "Gladstone & Central QLD",
    "id": "GladstoneCentralQLD"
  }, {
    "name": "Gold Coast",
    "id": "GoldCoast"
  }, {
    "name": "Gosford & Central Coast",
    "id": "GosfordCentralCoast"
  }, {
    "name": "Goulburn & Southern Tablelands",
    "id": "GoulburnSouthernTablelands"
  }, {
    "name": "Hawkes Bay",
    "id": "HawkesBay"
  }, {
    "name": "Hervey Bay & Fraser Coast",
    "id": "HerveyBayFraserCoast"
  }, {
    "name": "Hobart",
    "id": "Hobart"
  }, {
    "name": "Horsham & Grampians",
    "id": "HorshamGrampians"
  }, {
    "name": "Ireland",
    "id": "Ireland"
  }, {
    "name": "Kalgoorlie, Goldfields & Esperance",
    "id": "KalgoorlieGoldfieldsEsperance"
  }, {
    "name": "Katherine & Northern Australia",
    "id": "KatherineNorthernAustralia"
  }, {
    "name": "Launceston & North East",
    "id": "LauncestonNorthEast"
  }, {
    "name": "Lismore & Far North Coast",
    "id": "LismoreFarNorthCoast"
  }, {
    "name": "London",
    "id": "London"
  }, {
    "name": "Mackay & Coalfields",
    "id": "MackayCoalfields"
  }, {
    "name": "Manawatu",
    "id": "Manawatu"
  }, {
    "name": "Mandurah & Peel",
    "id": "MandurahPeel"
  }, {
    "name": "Marlborough",
    "id": "Marlborough"
  }, {
    "name": "Melbourne",
    "id": "Melbourne"
  }, {
    "name": "Middle East & Africa",
    "id": "MiddleEastAfrica"
  }, {
    "name": "Mildura & Murray",
    "id": "MilduraMurray"
  }, {
    "name": "Mornington Peninsula & Bass Coast",
    "id": "MorningtonPeninsulaBassCoast"
  }, {
    "name": "Mt Gambier & Limestone Coast",
    "id": "MtGambierLimestoneCoast"
  }, {
    "name": "Mt Isa & Western QLD",
    "id": "MtIsaWesternQLD"
  }, {
    "name": "Newcastle, Maitland & Hunter",
    "id": "NewcastleMaitlandHunter"
  }, {
    "name": "Northam & Wheatbelt",
    "id": "NorthamWheatbelt"
  }, {
    "name": "Northland",
    "id": "Northland"
  }, {
    "name": "Otago",
    "id": "Otago"
  }, {
    "name": "Perth",
    "id": "Perth"
  }, {
    "name": "Port Hedland, Karratha & Pilbara",
    "id": "PortHedlandKarrathaPilbara"
  }, {
    "name": "Port Macquarie & Mid North Coast",
    "id": "PortMacquarieMidNorthCoast"
  }, {
    "name": "Rest of the UK",
    "id": "RestoftheUK"
  }, {
    "name": "Richmond & Hawkesbury",
    "id": "RichmondHawkesbury"
  }, {
    "name": "Riverland & Murray Mallee",
    "id": "RiverlandMurrayMallee"
  }, {
    "name": "Rockhampton & Capricorn Coast",
    "id": "RockhamptonCapricornCoast"
  }, {
    "name": "Shepparton & Goulburn Valley",
    "id": "SheppartonGoulburnValley"
  }, {
    "name": "Somerset & Lockyer",
    "id": "SomersetLockyer"
  }, {
    "name": "Southland",
    "id": "Southland"
  }, {
    "name": "Sunshine Coast",
    "id": "SunshineCoast"
  }, {
    "name": "Sydney",
    "id": "Sydney"
  }, {
    "name": "Tamworth & North West NSW",
    "id": "TamworthNorthWestNSW"
  }, {
    "name": "Taranaki",
    "id": "Taranaki"
  }, {
    "name": "Tasman",
    "id": "Tasman"
  }, {
    "name": "Toowoomba & Darling Downs",
    "id": "ToowoombaDarlingDowns"
  }, {
    "name": "Townsville & Northern QLD",
    "id": "TownsvilleNorthernQLD"
  }, {
    "name": "Traralgon & La Trobe Valley",
    "id": "TraralgonLaTrobeValley"
  }, {
    "name": "Tumut, Southern Highlands & Snowy",
    "id": "TumutSouthernHighlandsSnowy"
  }, {
    "name": "Wagga Wagga & Riverina",
    "id": "WaggaWaggaRiverina"
  }, {
    "name": "Waikato",
    "id": "Waikato"
  }, {
    "name": "Wellington",
    "id": "Wellington"
  }, {
    "name": "West Coast",
    "id": "WestCoast"
  }, {
    "name": "Whyalla & Eyre Peninsula",
    "id": "WhyallaEyrePeninsula"
  }, {
    "name": "Wollongong, Illawarra & South Coast",
    "id": "WollongongIllawarraSouthCoast"
  }, {
    "name": "Yarra Valley & High Country",
    "id": "YarraValleyHighCountry"
  }, {
    "name": "York Peninsula & Clare Valley",
    "id": "YorkPeninsulaClareValley"
  }];
  $scope.areas = [{
    "name": "Auckland Central",
    "id": "AucklandCentral",
    "locationId": "Auckland"
  }, {
    "name": "Bayside & Eastern Suburbs",
    "id": "BaysideEasternSuburbs",
    "locationId": "Brisbane"
  }, {
    "name": "Bayside & South Eastern Suburbs",
    "id": "BaysideSouthEasternSuburbs",
    "locationId": "Melbourne"
  }, {
    "name": "Blenheim",
    "id": "Blenheim",
    "locationId": "Marlborough"
  }, {
    "name": "Caribbean, Central & South America",
    "id": "CaribbeanCentralSouthAmerica",
    "locationId": "Americas"
  }, {
    "name": "CBD & Inner Suburbs",
    "id": "MelbourneCBDInnerSuburbs",
    "locationId": "Melbourne"
  }, {
    "name": "CBD & Inner Suburbs",
    "id": "BrisbaneCBDInnerSuburbs",
    "locationId": "Brisbane"
  }, {
    "name": "CBD, Inner & Western Suburbs",
    "id": "CBDInnerWesternSuburbs",
    "locationId": "Perth"
  }, {
    "name": "CBD, Inner West & Eastern Suburbs",
    "id": "CBDInnerWestEasternSuburbs",
    "locationId": "Sydney"
  }, {
    "name": "Central Asia",
    "id": "CentralAsia",
    "locationId": "AsiaPacific"
  }, {
    "name": "Channel Islands",
    "id": "ChannelIslands",
    "locationId": "RestoftheUK"
  }, {
    "name": "China, Hong Kong & Taiwan",
    "id": "ChinaHongKongTaiwan",
    "locationId": "AsiaPacific"
  }, {
    "name": "Christchurch",
    "id": "Christchurch",
    "locationId": "Canterbury"
  }, {
    "name": "Dunedin",
    "id": "Dunedin",
    "locationId": "Otago"
  }, {
    "name": "Eastern Suburbs",
    "id": "PerthEasternSuburbs",
    "locationId": "Perth"
  }, {
    "name": "Eastern Suburbs",
    "id": "MelbourneEasternSuburbs",
    "locationId": "Melbourne"
  }, {
    "name": "Fremantle & Southern Suburbs",
    "id": "FremantleSouthernSuburbs",
    "locationId": "Perth"
  }, {
    "name": "Gisborne",
    "id": "Gisborne",
    "locationId": "GisborneRegion"
  }, {
    "name": "Greymouth",
    "id": "Greymouth",
    "locationId": "WestCoast"
  }, {
    "name": "Hamilton",
    "id": "Hamilton",
    "locationId": "Waikato"
  }, {
    "name": "Hastings",
    "id": "Hastings",
    "locationId": "HawkesBay"
  }, {
    "name": "Hutt Valley",
    "id": "HuttValley",
    "locationId": "Wellington"
  }, {
    "name": "India & South Asia",
    "id": "IndiaSouthAsia",
    "locationId": "AsiaPacific"
  }, {
    "name": "Invercargill",
    "id": "Invercargill",
    "locationId": "Southland"
  }, {
    "name": "Japan & Korea",
    "id": "JapanKorea",
    "locationId": "AsiaPacific"
  }, {
    "name": "Manukau & East Auckland",
    "id": "ManukauEastAuckland",
    "locationId": "Auckland"
  }, {
    "name": "Middle East & North Africa",
    "id": "MiddleEastNorthAfrica",
    "locationId": "MiddleEastAfrica"
  }, {
    "name": "Midlands",
    "id": "Midlands",
    "locationId": "RestoftheUK"
  }, {
    "name": "Napier",
    "id": "Napier",
    "locationId": "HawkesBay"
  }, {
    "name": "Nelson",
    "id": "Nelson",
    "locationId": "Tasman"
  }, {
    "name": "New Plymouth",
    "id": "NewPlymouth",
    "locationId": "Taranaki"
  }, {
    "name": "North Canterbury",
    "id": "NorthCanterbury",
    "locationId": "Canterbury"
  }, {
    "name": "North Shore & Northern Beaches",
    "id": "NorthShoreNorthernBeaches",
    "locationId": "Sydney"
  }, {
    "name": "North West & Hills District",
    "id": "NorthWestHillsDistrict",
    "locationId": "Sydney"
  }, {
    "name": "North West England",
    "id": "NorthWestEngland",
    "locationId": "RestoftheUK"
  }, {
    "name": "Northern England",
    "id": "NorthernEngland",
    "locationId": "RestoftheUK"
  }, {
    "name": "Northern Ireland",
    "id": "NorthernIreland",
    "locationId": "RestoftheUK"
  }, {
    "name": "Northern Suburbs",
    "id": "BrisbaneNorthernSuburbs",
    "locationId": "Brisbane"
  }, {
    "name": "Northern Suburbs",
    "id": "MelbourneNorthernSuburbs",
    "locationId": "Melbourne"
  }, {
    "name": "Northern Suburbs & Joondalup",
    "id": "NorthernSuburbsJoondalup",
    "locationId": "Perth"
  }, {
    "name": "Palmerston North",
    "id": "PalmerstonNorth",
    "locationId": "Manawatu"
  }, {
    "name": "Papakura & Franklin",
    "id": "PapakuraFranklin",
    "locationId": "Auckland"
  }, {
    "name": "Parramatta & Western Suburbs",
    "id": "ParramattaWesternSuburbs",
    "locationId": "Sydney"
  }, {
    "name": "PNG & Pacific Islands",
    "id": "PNGPacificIslands",
    "locationId": "AsiaPacific"
  }, {
    "name": "Porirua & Kapiti Coast",
    "id": "PoriruaKapitiCoast",
    "locationId": "Wellington"
  }, {
    "name": "Queenstown & Wanaka",
    "id": "QueenstownWanaka",
    "locationId": "Otago"
  }, {
    "name": "Rest of Bay of Plenty",
    "id": "RestofBayofPlenty",
    "locationId": "BayofPlenty"
  }, {
    "name": "Rest of Canterbury",
    "id": "RestofCanterbury",
    "locationId": "Canterbury"
  }, {
    "name": "Rest of Gisborne",
    "id": "RestofGisborne",
    "locationId": "GisborneRegion"
  }, {
    "name": "Rest of Hawkes Bay",
    "id": "RestofHawkesBay",
    "locationId": "HawkesBay"
  }, {
    "name": "Rest of Manawatu",
    "id": "RestofManawatu",
    "locationId": "Manawatu"
  }, {
    "name": "Rest of Marlborough",
    "id": "RestofMarlborough",
    "locationId": "Marlborough"
  }, {
    "name": "Rest of Northland",
    "id": "RestofNorthland",
    "locationId": "Northland"
  }, {
    "name": "Rest of Otago",
    "id": "RestofOtago",
    "locationId": "Otago"
  }, {
    "name": "Rest of Southland",
    "id": "RestofSouthland",
    "locationId": "Southland"
  }, {
    "name": "Rest of Taranaki",
    "id": "RestofTaranaki",
    "locationId": "Taranaki"
  }, {
    "name": "Rest of Tasman",
    "id": "RestofTasman",
    "locationId": "Tasman"
  }, {
    "name": "Rest of Waikato",
    "id": "RestofWaikato",
    "locationId": "Waikato"
  }, {
    "name": "Rest of Wellington Region",
    "id": "RestofWellingtonRegion",
    "locationId": "Wellington"
  }, {
    "name": "Rest of West Coast",
    "id": "RestofWestCoast",
    "locationId": "WestCoast"
  }, {
    "name": "Rockingham & Kwinana",
    "id": "RockinghamKwinana",
    "locationId": "Perth"
  }, {
    "name": "Rodney & North Shore",
    "id": "RodneyNorthShore",
    "locationId": "Auckland"
  }, {
    "name": "Rotorua",
    "id": "Rotorua",
    "locationId": "BayofPlenty"
  }, {
    "name": "Russia & Eastern Europe",
    "id": "RussiaEasternEurope",
    "locationId": "EuropeRussia"
  }, {
    "name": "Ryde & Macquarie Park",
    "id": "RydeMacquariePark",
    "locationId": "Sydney"
  }, {
    "name": "Scotland",
    "id": "Scotland",
    "locationId": "RestoftheUK"
  }, {
    "name": "South East & Home Counties",
    "id": "SouthEastHomeCounties",
    "locationId": "RestoftheUK"
  }, {
    "name": "South West & M5 Corridor",
    "id": "SouthWestM5Corridor",
    "locationId": "Sydney"
  }, {
    "name": "South West England",
    "id": "SouthWestEngland",
    "locationId": "RestoftheUK"
  }, {
    "name": "South-East Asia",
    "id": "SouthEastAsia",
    "locationId": "AsiaPacific"
  }, {
    "name": "Southern Suburbs & Logan",
    "id": "SouthernSuburbsLogan",
    "locationId": "Brisbane"
  }, {
    "name": "Southern Suburbs & Sutherland Shire",
    "id": "SouthernSuburbsSutherlandShire",
    "locationId": "Sydney"
  }, {
    "name": "Sub-Saharan Africa",
    "id": "SubSaharanAfrica",
    "locationId": "MiddleEastAfrica"
  }, {
    "name": "Taupo",
    "id": "Taupo",
    "locationId": "Waikato"
  }, {
    "name": "Tauranga",
    "id": "Tauranga",
    "locationId": "BayofPlenty"
  }, {
    "name": "Thames & Coromandel",
    "id": "ThamesCoromandel",
    "locationId": "Waikato"
  }, {
    "name": "Thames Valley & Oxford",
    "id": "ThamesValleyOxford",
    "locationId": "RestoftheUK"
  }, {
    "name": "Timaru & South Canterbury",
    "id": "TimaruSouthCanterbury",
    "locationId": "Canterbury"
  }, {
    "name": "USA & Canada",
    "id": "USACanada",
    "locationId": "Americas"
  }, {
    "name": "Waitakere & West Auckland",
    "id": "WaitakereWestAuckland",
    "locationId": "Auckland"
  }, {
    "name": "Wales",
    "id": "Wales",
    "locationId": "RestoftheUK"
  }, {
    "name": "Wanganui",
    "id": "Wanganui",
    "locationId": "Manawatu"
  }, {
    "name": "Wellington Central",
    "id": "WellingtonCentral",
    "locationId": "Wellington"
  }, {
    "name": "Western Europe",
    "id": "WesternEurope",
    "locationId": "EuropeRussia"
  }, {
    "name": "Western Suburbs",
    "id": "WesternSuburbs",
    "locationId": "Melbourne"
  }, {
    "name": "Western Suburbs & Ipswich",
    "id": "WesternSuburbsIpswich",
    "locationId": "Brisbane"
  }, {
    "name": "Whangarei",
    "id": "Whangarei",
    "locationId": "Northland"
  }];
  $scope.locationAreas = [];

  $scope.updateLocationAreas = function (_model) {
    $scope.locationAreas = $scope.areas.filter(function (area) {
      return area.locationId === _model;
    });
  };

  $scope.classifications = [{
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "classificationName": "Self Employment",
    "classificationId": "SelfEmploymentAll"
  }, {
    "classificationName": "Sport & Recreation",
    "classificationId": "SportRecreation"
  }, {
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }];
  var subclassifications = [{
    "subclassificationName": "Account & Relationship Management",
    "subclassificationId": "BankingFinancialServicesAccountRelationshipManagem",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Account & Relationship Management",
    "subclassificationId": "SalesAccountRelationshipManagement",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Accounts Officers/Clerks",
    "subclassificationId": "AccountsOfficersClerks",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Accounts Payable",
    "subclassificationId": "AccountsPayable",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Accounts Receivable/Credit Control",
    "subclassificationId": "AccountsReceivableCreditControl",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Actuarial",
    "subclassificationId": "Actuarial",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Administrative Assistants",
    "subclassificationId": "AdministrativeAssistants",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Aerospace Engineering",
    "subclassificationId": "AerospaceEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Aged & Disability Support",
    "subclassificationId": "AgedDisabilitySupport",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Agency Account Management",
    "subclassificationId": "AgencyAccountManagement",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Agronomy & Farm Services",
    "subclassificationId": "AgronomyFarmServices",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Air Conditioning & Refrigeration",
    "subclassificationId": "AirConditioningRefrigeration",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Air Force",
    "subclassificationId": "AirForce",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Airlines",
    "subclassificationId": "Airlines",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Ambulance/Paramedics",
    "subclassificationId": "AmbulanceParamedics",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Analysis & Reporting",
    "subclassificationId": "SalesAnalysisReporting",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Analysis & Reporting",
    "subclassificationId": "BankingFinancialServicesAnalysisReporting",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Analysis & Reporting",
    "subclassificationId": "AccountingAnalysisReporting",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Analysis & Reporting",
    "subclassificationId": "MiningResourcesEnergyAnalysisReporting",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Analysis & Reporting",
    "subclassificationId": "ManufacturingTransportLogisticsAnalysisReporting",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Analysts",
    "subclassificationId": "ConsultingStrategyAnalysts",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Analysts",
    "subclassificationId": "RealEstatePropertyAnalysts",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Architects",
    "subclassificationId": "Architects",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Architectural Drafting",
    "subclassificationId": "ArchitecturalDrafting",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Architecture",
    "subclassificationId": "Architecture",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Army",
    "subclassificationId": "Army",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Art Direction",
    "subclassificationId": "ArtDirection",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Assembly & Process Work",
    "subclassificationId": "AssemblyProcessWork",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Assessment",
    "subclassificationId": "Assessment",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Assistant Accountants",
    "subclassificationId": "AssistantAccountants",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Audit - External",
    "subclassificationId": "AuditExternal",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Audit - Internal",
    "subclassificationId": "AuditInternal",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Automotive Engineering",
    "subclassificationId": "AutomotiveEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Automotive Trades",
    "subclassificationId": "AutomotiveTrades",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Aviation Services",
    "subclassificationId": "AviationServices",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Bakers & Pastry Chefs",
    "subclassificationId": "BakersPastryChefs",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Banking - Business",
    "subclassificationId": "BankingBusiness",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Banking - Corporate & Institutional",
    "subclassificationId": "BankingCorporateInstitutional",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Banking - Retail/Branch",
    "subclassificationId": "BankingRetailBranch",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Banking & Finance Law",
    "subclassificationId": "BankingFinanceLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Bar & Beverage Staff",
    "subclassificationId": "BarBeverageStaff",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Biological & Biomedical Sciences",
    "subclassificationId": "BiologicalBiomedicalSciences",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Biotechnology & Genetics",
    "subclassificationId": "BiotechnologyGenetics",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Board Appointments",
    "subclassificationId": "BoardAppointments",
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "subclassificationName": "Body Corporate & Facilities Management",
    "subclassificationId": "BodyCorporateFacilitiesManagement",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Bookkeeping & Small Practice Accounting",
    "subclassificationId": "BookkeepingSmallPracticeAccounting",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Brand Management",
    "subclassificationId": "BrandManagement",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Brokerage",
    "subclassificationId": "Brokerage",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Building Services Engineering",
    "subclassificationId": "BuildingServicesEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Building Trades",
    "subclassificationId": "BuildingTrades",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Business Services & Corporate Advisory",
    "subclassificationId": "BusinessServicesCorporateAdvisory",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Business/Systems Analysts",
    "subclassificationId": "BusinessSystemsAnalysts",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Butchers",
    "subclassificationId": "Butchers",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Buying",
    "subclassificationId": "Buying",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Carpentry & Cabinet Making",
    "subclassificationId": "CarpentryCabinetMaking",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "CEO",
    "subclassificationId": "Ceo",
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "subclassificationName": "Chefs/Cooks",
    "subclassificationId": "ChefsCooks",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Chemical Engineering",
    "subclassificationId": "ChemicalEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Chemistry & Physics",
    "subclassificationId": "ChemistryPhysics",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Child Welfare, Youth & Family Services",
    "subclassificationId": "ChildWelfareYouthFamilyServices",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Childcare & Outside School Hours Care",
    "subclassificationId": "ChildcareOutsideSchoolHoursCare",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Chiropractic & Osteopathic",
    "subclassificationId": "ChiropracticOsteopathic",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Civil/Structural Engineering",
    "subclassificationId": "CivilStructuralEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Claims",
    "subclassificationId": "Claims",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Cleaning Services",
    "subclassificationId": "CleaningServices",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Client & Sales Administration",
    "subclassificationId": "ClientSalesAdministration",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Client Services",
    "subclassificationId": "ClientServices",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Clinical/Medical Research",
    "subclassificationId": "ClinicalMedicalResearch",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Coaching & Instruction",
    "subclassificationId": "CoachingInstruction",
    "classificationName": "Sport & Recreation",
    "classificationId": "SportRecreation"
  }, {
    "subclassificationName": "Collections",
    "subclassificationId": "Collections",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Commercial Sales, Leasing & Property Mgmt",
    "subclassificationId": "CommercialSalesLeasingPropertyMgmt",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Community Development",
    "subclassificationId": "CommunityDevelopment",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Company Secretaries",
    "subclassificationId": "CompanySecretaries",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Compliance & Risk",
    "subclassificationId": "AccountingComplianceRisk",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Compliance & Risk",
    "subclassificationId": "BankingFinancialServicesComplianceRisk",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Computer Operators",
    "subclassificationId": "ComputerOperators",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Conservation, Parks & Wildlife",
    "subclassificationId": "ConservationParksWildlife",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Construction Law",
    "subclassificationId": "ConstructionLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Consultants",
    "subclassificationId": "Consultants",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Consulting & Generalist HR",
    "subclassificationId": "ConsultingGeneralistHR",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Contracts Administration",
    "subclassificationId": "ContractsAdministration",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Contracts Management",
    "subclassificationId": "ContractsManagement",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "COO & MD",
    "subclassificationId": "CooMd",
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "subclassificationName": "Corporate & Commercial Law",
    "subclassificationId": "CorporateCommercialLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Corporate Development",
    "subclassificationId": "CorporateDevelopment",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Corporate Finance & Investment Banking",
    "subclassificationId": "CorporateFinanceInvestmentBanking",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Cost Accounting",
    "subclassificationId": "CostAccounting",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Courier, Drivers & Postal Services",
    "subclassificationId": "CouriersDriversPostalServices",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Credit",
    "subclassificationId": "Credit",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Criminal & Civil Law",
    "subclassificationId": "CriminalCivilLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Customer Service - Call Centre",
    "subclassificationId": "CustomerServiceCallCentre",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Customer Service - Customer Facing",
    "subclassificationId": "CustomerServiceCustomerFacing",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Data Entry & Word Processing",
    "subclassificationId": "DataEntryWordProcessing",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Database Development & Administration",
    "subclassificationId": "DatabaseDevelopmentAdministration",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Dental",
    "subclassificationId": "Dental",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Developers/Programmers",
    "subclassificationId": "DevelopersProgrammers",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Dieticians",
    "subclassificationId": "Dieticians",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Digital & Search Marketing",
    "subclassificationId": "DigitalSearchMarketing",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Direct Marketing & CRM",
    "subclassificationId": "DirectMarketingCRM",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Editing & Publishing",
    "subclassificationId": "EditingPublishing",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Electrical/Electronic Engineering",
    "subclassificationId": "ElectricalElectronicEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Electricians",
    "subclassificationId": "Electricians",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Emergency Services",
    "subclassificationId": "EmergencyServices",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Employment Services",
    "subclassificationId": "EmploymentServices",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Engineering - Hardware",
    "subclassificationId": "EngineeringHardware",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Engineering - Network",
    "subclassificationId": "EngineeringNetwork",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Engineering - Software",
    "subclassificationId": "EngineeringSoftware",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Engineering Drafting",
    "subclassificationId": "EngineeringDrafting",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Environment & Planning Law",
    "subclassificationId": "EnvironmentPlanningLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Environment & Sustainability Consulting",
    "subclassificationId": "EnvironmentSustainabilityConsulting",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Environmental Engineering",
    "subclassificationId": "EnvironmentalEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Environmental Services",
    "subclassificationId": "EnvironmentalServices",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Environmental, Earth & Geosciences",
    "subclassificationId": "EnvironmentalEarthGeosciences",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Estimating",
    "subclassificationId": "Estimating",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Event Management",
    "subclassificationId": "MarketingCommunicationsEventManagement",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Event Management",
    "subclassificationId": "AdvertisingArtsMediaEventManagement",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Family Law",
    "subclassificationId": "FamilyLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Farm Labour",
    "subclassificationId": "FarmLabour",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Farm Management",
    "subclassificationId": "FarmManagement",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Fashion & Textile Design",
    "subclassificationId": "FashionTextileDesign",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Field Engineering",
    "subclassificationId": "FieldEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Financial Accounting & Reporting",
    "subclassificationId": "FinancialAccountingReporting",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Financial Managers & Controllers",
    "subclassificationId": "FinancialManagersControllers",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Financial Planning",
    "subclassificationId": "FinancialPlanning",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Fishing & Aquaculture",
    "subclassificationId": "FishingAquaculture",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Fitness & Personal Training",
    "subclassificationId": "FitnessPersonalTraining",
    "classificationName": "Sport & Recreation",
    "classificationId": "SportRecreation"
  }, {
    "subclassificationName": "Fitters, Turners & Machinists",
    "subclassificationId": "FittersTurnersMachinists",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Fleet Management",
    "subclassificationId": "FleetManagement",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Floristry",
    "subclassificationId": "Floristry",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Food Technology & Safety",
    "subclassificationId": "FoodTechnologySafety",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Forensic Accounting & Investigation",
    "subclassificationId": "ForensicAccountingInvestigation",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Foreperson/Supervisors",
    "subclassificationId": "ForepersonSupervisors",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Freight/Cargo Forwarding",
    "subclassificationId": "FreightCargoForwarding",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Front Office & Guest Services",
    "subclassificationId": "FrontOfficeGuestServices",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Fund Administration",
    "subclassificationId": "FundAdministration",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Fundraising",
    "subclassificationId": "Fundraising",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Funds Management",
    "subclassificationId": "FundsManagement",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Gaming",
    "subclassificationId": "Gaming",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Gardening & Landscaping",
    "subclassificationId": "GardeningLandscaping",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "General Practitioners",
    "subclassificationId": "GeneralPractitioners",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "General/Business Unit Manager",
    "subclassificationId": "GeneralBusinessUnitManager",
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "subclassificationName": "Generalists - In-house",
    "subclassificationId": "GeneralistsInhouse",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Generalists - Law Firm",
    "subclassificationId": "GeneralistsLawFirm",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Government",
    "subclassificationId": "Government",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Government - Federal",
    "subclassificationId": "GovernmentFederal",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Government - Local",
    "subclassificationId": "GovernmentLocal",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Government - State",
    "subclassificationId": "GovernmentState",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Graphic Design",
    "subclassificationId": "GraphicDesign",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Hair & Beauty Services",
    "subclassificationId": "HairBeautyServices",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Health, Safety & Environment",
    "subclassificationId": "MiningResourcesEnergyHealthSafetyEnvironment",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Health, Safety & Environment",
    "subclassificationId": "ConstructionHealthSafetyEnvironment",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Help Desk & IT Support",
    "subclassificationId": "HelpDeskITSupport",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Horticulture",
    "subclassificationId": "Horticulture",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Housekeeping",
    "subclassificationId": "Housekeeping",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Housing & Homelessness Services",
    "subclassificationId": "HousingHomelessnessServices",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Illustration & Animation",
    "subclassificationId": "IllustrationAnimation",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Import/Export & Customs",
    "subclassificationId": "ImportExportCustoms",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Indigenous & Multicultural Services",
    "subclassificationId": "IndigenousMulticulturalServices",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Industrial & Employee Relations",
    "subclassificationId": "IndustrialEmployeeRelations",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Industrial Design",
    "subclassificationId": "IndustrialDesign",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Industrial Engineering",
    "subclassificationId": "IndustrialEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Industrial Relations & Employment Law",
    "subclassificationId": "IndustrialRelationsEmploymentLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Insolvency & Corporate Recovery",
    "subclassificationId": "InsolvencyCorporateRecovery",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Insurance & Superannuation Law",
    "subclassificationId": "InsuranceSuperannuationLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Intellectual Property Law",
    "subclassificationId": "IntellectualPropertyLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Interior Design",
    "subclassificationId": "InteriorDesign",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Internal Communications",
    "subclassificationId": "InternalCommunications",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Inventory & Fixed Assets",
    "subclassificationId": "InventoryFixedAssets",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Journalism & Writing",
    "subclassificationId": "JournalismWriting",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Kitchen & Sandwich Hands",
    "subclassificationId": "KitchenSandwichHands",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Laboratory & Technical Services",
    "subclassificationId": "LaboratoryTechnicalServices",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Labourers",
    "subclassificationId": "Labourers",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Landscape Architecture",
    "subclassificationId": "LandscapeArchitecture",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Law Clerks & Paralegals",
    "subclassificationId": "LawClerksParalegals",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Legal Practice Management",
    "subclassificationId": "LegalPracticeManagement",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Legal Secretaries",
    "subclassificationId": "LegalSecretaries",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Library Services & Information Management",
    "subclassificationId": "LibraryServicesInformationManagement",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Litigation & Dispute Resolution",
    "subclassificationId": "LitigationDisputeResolution",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Local Government",
    "subclassificationId": "LocalGovernment",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Locksmiths",
    "subclassificationId": "Locksmiths",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Machine Operators",
    "subclassificationId": "MachineOperators",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Maintenance",
    "subclassificationId": "EngineeringMaintenance",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Maintenance & Handyperson Services",
    "subclassificationId": "MaintenanceHandypersonServices",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "InformationCommunicationTechnologyManagement",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "SportRecreationManagement",
    "classificationName": "Sport & Recreation",
    "classificationId": "SportRecreation"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "BankingFinancialServicesManagement",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "CommunityServicesDevelopmentManagement",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "AccountingManagement",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "EngineeringManagement",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "MarketingCommunicationsManagement",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "ManufacturingTransportLogisticsManagement",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "ConstructionManagement",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "HospitalTourismManagement",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "MiningResourcesEnergyManagement",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "SalesManagement",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "HealthcareMedicalManagement",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "InsuranceSuperannuationManagement",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Management",
    "subclassificationId": "AdvertisingArtsMediaManagement",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Management - Agency",
    "subclassificationId": "ManagementAgency",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Management - Area/Multi-site",
    "subclassificationId": "ManagementAreaMultisite",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Management - Department/Assistant",
    "subclassificationId": "ManagementDepartmentAssistant",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Management - Internal",
    "subclassificationId": "ManagementInternal",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Management - Schools",
    "subclassificationId": "ManagementSchools",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Management - Store",
    "subclassificationId": "ManagementStore",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Management - Universities",
    "subclassificationId": "ManagementUniversities",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Management - Vocational",
    "subclassificationId": "ManagementVocational",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Management & Change Consulting",
    "subclassificationId": "ManagementChangeConsulting",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Management & Support",
    "subclassificationId": "ManagementSupport",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Management Accounting & Budgeting",
    "subclassificationId": "ManagementAccountingBudgeting",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Market Research & Analysis",
    "subclassificationId": "MarketResearchAnalysis",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Marketing Assistants/Coordinators",
    "subclassificationId": "MarketingAssistantsCoordinators",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Marketing Communications",
    "subclassificationId": "MarketingCommunications",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Materials Handling Engineering",
    "subclassificationId": "MaterialsHandlingEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Materials Sciences",
    "subclassificationId": "MaterialsSciences",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Mathematics, Statistics & Information Sciences",
    "subclassificationId": "MathematicsStatisticsInformationSciences",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Mechanical Engineering",
    "subclassificationId": "MechanicalEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Media Strategy, Planning & Buying",
    "subclassificationId": "MediaStrategyPlanningBuying",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Medical Administration",
    "subclassificationId": "MedicalAdministration",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Medical Imaging",
    "subclassificationId": "MedicalImaging",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Medical Specialists",
    "subclassificationId": "MedicalSpecialists",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Merchandisers",
    "subclassificationId": "Merchandisers",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Mining - Drill & Blast",
    "subclassificationId": "MiningDrillBlast",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Mining - Engineering & Maintenance",
    "subclassificationId": "MiningEngineeringMaintenance",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Mining - Exploration & Geoscience",
    "subclassificationId": "MiningExplorationGeoscience",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Mining - Operations",
    "subclassificationId": "MiningOperations",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Mining - Processing",
    "subclassificationId": "MiningProcessing",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Modelling & Simulation",
    "subclassificationId": "ModellingSimulation",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Mortgages",
    "subclassificationId": "Mortgages",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Nannies & Babysitters",
    "subclassificationId": "NanniesBabysitters",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Natural Resources & Water",
    "subclassificationId": "NaturalResourcesWater",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Natural Therapies & Alternative Medicine",
    "subclassificationId": "NaturalTherapiesAlternativeMedicine",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Navy",
    "subclassificationId": "Navy",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Networks & Systems Administration",
    "subclassificationId": "NetworksSystemsAdministration",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "New Business Development",
    "subclassificationId": "NewBusinessDevelopment",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Nursing - A&E, Critical Care & ICU",
    "subclassificationId": "NursingAECriticalCareICU",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Aged Care",
    "subclassificationId": "NursingAgedCare",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Community, Maternal & Child Health",
    "subclassificationId": "NursingCommunityMaternalChildHealth",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Educators & Facilitators",
    "subclassificationId": "NursingEducatorsFacilitators",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - General Medical & Surgical",
    "subclassificationId": "NursingGeneralMedicalSurgical",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - High Acuity",
    "subclassificationId": "NursingHighAcuity",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Management",
    "subclassificationId": "NursingManagement",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Midwifery, Neo-Natal, SCN & NICU",
    "subclassificationId": "NursingMidwiferyNeoNatalSCNNICU",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Paediatric & PICU",
    "subclassificationId": "NursingPaediatricPICU",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Psych, Forensic & Correctional Health",
    "subclassificationId": "NursingPsychForensicCorrectionalHealth",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Nursing - Theatre & Recovery",
    "subclassificationId": "NursingTheatreRecovery",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Occupational Health & Safety",
    "subclassificationId": "OccupationalHealthSafety",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Office Management",
    "subclassificationId": "OfficeManagement",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Oil & Gas - Drilling",
    "subclassificationId": "OilGasDrilling",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Oil & Gas - Engineering & Maintenance",
    "subclassificationId": "OilGasEngineeringMaintenance",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Oil & Gas - Exploration & Geoscience",
    "subclassificationId": "OilGasExplorationGeoscience",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Oil & Gas - Operations",
    "subclassificationId": "OilGasOperations",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Oil & Gas - Production & Refinement",
    "subclassificationId": "OilGasProductionRefinement",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Optical",
    "subclassificationId": "Optical",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Organisational Development",
    "subclassificationId": "OrganisationalDevelopment",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "InsuranceSuperannuationOther",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "DesignArchitectureOther",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "InformationCommunicationTechnologyOther",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "HealthcareMedicalOther",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "GovernmentDefenceOther",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "AdvertisingArtsMediaOther",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "HumanResourcesRecruitmentOther",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "SalesOther",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "RetailConsumerProductsOther",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "HospitalTourismOther",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "RealEstatePropertyOther",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "MarketingCommunicationsOther",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "EngineeringOther",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "MiningResourcesEnergyOther",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "ConsultingStrategyOther",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "SportRecreationOther",
    "classificationName": "Sport & Recreation",
    "classificationId": "SportRecreation"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "FarmingAnimalsConservationOther",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "ScienceTechnologyOther",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "TradesServicesOther",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "AdministrationOfficeSupportOther",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "BankingFinancialServicesOther",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "LegalOther",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "AccountingOther",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "CommunityServicesDevelopmentOther",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "ConstructionOther",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "EducationTrainingOther",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "CallCentreCustomerServiceOther",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "ManufacturingTransportLogisticsOther",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Other",
    "subclassificationId": "OtherCeoGeneralManagement",
    "classificationName": "CEO & General Management",
    "classificationId": "CeoGeneralManagement"
  }, {
    "subclassificationName": "PA, EA & Secretarial",
    "subclassificationId": "PAEASecretarial",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Painters & Sign Writers",
    "subclassificationId": "PaintersSignWriters",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Pathology",
    "subclassificationId": "Pathology",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Pattern Makers & Garment Technicians",
    "subclassificationId": "PatternMakersGarmentTechnicians",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Payroll",
    "subclassificationId": "Payroll",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Performing Arts",
    "subclassificationId": "PerformingArts",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Personal Injury Law",
    "subclassificationId": "PersonalInjuryLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Pharmaceuticals & Medical Devices",
    "subclassificationId": "PharmaceuticalsMedicalDevices",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Pharmacy",
    "subclassificationId": "Pharmacy",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Photography",
    "subclassificationId": "Photography",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Physiotherapy, OT & Rehabilitation",
    "subclassificationId": "PhysiotherapyOTRehabilitation",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Pickers & Packers",
    "subclassificationId": "PickersPackers",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Planning",
    "subclassificationId": "Planning",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Planning & Scheduling",
    "subclassificationId": "PlanningScheduling",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Plant & Machinery Operators",
    "subclassificationId": "PlantMachineryOperators",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Plumbers",
    "subclassificationId": "Plumbers",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Police & Corrections",
    "subclassificationId": "PoliceCorrections",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Policy",
    "subclassificationId": "Policy",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Policy, Planning & Regulation",
    "subclassificationId": "PolicyPlanningRegulation",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Power Generation & Distribution",
    "subclassificationId": "PowerGenerationDistribution",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Printing & Publishing Services",
    "subclassificationId": "PrintingPublishingServices",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Process Engineering",
    "subclassificationId": "ProcessEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Purchasing, Procurement & Inventory",
    "subclassificationId": "PurchasingProcurementInventory",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Product Management & Development",
    "subclassificationId": "InformationCommunicationTechnologyProductManagemen",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Product Management & Development",
    "subclassificationId": "MarketingCommunicationsProductManagementDevelopmen",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Production, Planning & Scheduling",
    "subclassificationId": "ProductionPlanningScheduling",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Programme & Project Management",
    "subclassificationId": "ProgrammeProjectManagement",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Programming & Production",
    "subclassificationId": "ProgrammingProduction",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Project Engineering",
    "subclassificationId": "ProjectEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Project Management",
    "subclassificationId": "EngineeringProjectManagement",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Project Management",
    "subclassificationId": "ConstructionProjectManagement",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Promotions",
    "subclassificationId": "Promotions",
    "classificationName": "Advertising, Arts & Media",
    "classificationId": "AdvertisingArtsMedia"
  }, {
    "subclassificationName": "Property Law",
    "subclassificationId": "PropertyLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Psychology, Counselling & Social Work",
    "subclassificationId": "PsychologyCounsellingSocialWork",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Public Relations & Corporate Affairs",
    "subclassificationId": "PublicRelationsCorporateAffairs",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Public Transport & Taxi Services",
    "subclassificationId": "PublicTransportTaxiServices",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Quality Assurance & Control",
    "subclassificationId": "ConstructionQualityAssuranceControl",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Quality Assurance & Control",
    "subclassificationId": "ManufacturingTransportLogisticsQualityAssurance",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Quality Assurance & Control",
    "subclassificationId": "ScienceTechnologyQualityAssuranceControl",
    "classificationName": "Science & Technology",
    "classificationId": "ScienceTechnology"
  }, {
    "subclassificationName": "Rail & Maritime Transport",
    "subclassificationId": "RailMaritimeTransport",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Receptionists",
    "subclassificationId": "Receptionists",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Records Management & Document Control",
    "subclassificationId": "RecordsManagementDocumentControl",
    "classificationName": "Administration & Office Support",
    "classificationId": "AdministrationOfficeSupport"
  }, {
    "subclassificationName": "Recruitment - Agency",
    "subclassificationId": "RecruitmentAgency",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Recruitment - Internal",
    "subclassificationId": "RecruitmentInternal",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Regional Council",
    "subclassificationId": "RegionalCouncil",
    "classificationName": "Government & Defence",
    "classificationId": "GovernmentDefence"
  }, {
    "subclassificationName": "Remuneration & Benefits",
    "subclassificationId": "RemunerationBenefits",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Research & Fellowships",
    "subclassificationId": "ResearchFellowships",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Reservations",
    "subclassificationId": "Reservations",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Residential Leasing & Property Management",
    "subclassificationId": "ResidentialLeasingPropertyManagement",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Residential Sales",
    "subclassificationId": "ResidentialSales",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Retail & Property Development",
    "subclassificationId": "RetailPropertyDevelopment",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Retail Assistants",
    "subclassificationId": "RetailAssistants",
    "classificationName": "Retail & Consumer Products",
    "classificationId": "RetailConsumerProducts"
  }, {
    "subclassificationName": "Risk Consulting",
    "subclassificationId": "RiskConsulting",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Road Transport",
    "subclassificationId": "RoadTransport",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Sales",
    "subclassificationId": "HealthcareMedicalSales",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Sales - Inbound",
    "subclassificationId": "SalesInbound",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Sales - Outbound",
    "subclassificationId": "SalesOutbound",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Sales - Pre & Post",
    "subclassificationId": "SalesPrePost",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Sales Coordinators",
    "subclassificationId": "SalesCoordinators",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Sales Representatives/Consultants",
    "subclassificationId": "SalesRepresentativesConsultants",
    "classificationName": "Sales",
    "classificationId": "Sales"
  }, {
    "subclassificationName": "Security",
    "subclassificationId": "Security",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Security Services",
    "subclassificationId": "SecurityServices",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Self Employment",
    "subclassificationId": "SelfEmployment",
    "classificationName": "Self Employment",
    "classificationId": "SelfEmploymentAll"
  }, {
    "subclassificationName": "Settlements",
    "subclassificationId": "Settlements",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Speech Therapy",
    "subclassificationId": "SpeechTherapy",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }, {
    "subclassificationName": "Stockbroking & Trading",
    "subclassificationId": "StockbrokingTrading",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Strategy & Planning",
    "subclassificationId": "AccountingStrategyPlanning",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Strategy & Planning",
    "subclassificationId": "ConsultingStrategyStrategyPlanning",
    "classificationName": "Consulting & Strategy",
    "classificationId": "ConsultingStrategy"
  }, {
    "subclassificationName": "Student Services",
    "subclassificationId": "StudentServices",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Superannuation",
    "subclassificationId": "Superannuation",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Supervisors",
    "subclassificationId": "Supervisors",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Supervisors/Team Leaders",
    "subclassificationId": "SupervisorsTeamLeaders",
    "classificationName": "Call Centre & Customer Service",
    "classificationId": "CallCentreCustomerService"
  }, {
    "subclassificationName": "Surveying",
    "subclassificationId": "MiningResourcesEnergySurveying",
    "classificationName": "Mining, Resources & Energy",
    "classificationId": "MiningResourcesEnergy"
  }, {
    "subclassificationName": "Surveying",
    "subclassificationId": "ConstructionSurveying",
    "classificationName": "Construction",
    "classificationId": "Construction"
  }, {
    "subclassificationName": "Systems Accounting & IT Audit",
    "subclassificationId": "SystemsAccountingITAudit",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Systems Engineering",
    "subclassificationId": "SystemsEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Tailors & Dressmakers",
    "subclassificationId": "TailorsDressmakers",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Tax Law",
    "subclassificationId": "TaxLaw",
    "classificationName": "Legal",
    "classificationId": "Legal"
  }, {
    "subclassificationName": "Taxation",
    "subclassificationId": "Taxation",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Teaching - Early Childhood",
    "subclassificationId": "TeachingEarlyChildhood",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Teaching - Primary",
    "subclassificationId": "TeachingPrimary",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Teaching - Secondary",
    "subclassificationId": "TeachingSecondary",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Teaching - Tertiary",
    "subclassificationId": "TeachingTertiary",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Teaching - Vocational",
    "subclassificationId": "TeachingVocational",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Teaching Aides & Special Needs",
    "subclassificationId": "TeachingAidesSpecialNeeds",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Team Leaders",
    "subclassificationId": "TeamLeaders",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Team Leaders/Supervisors",
    "subclassificationId": "TeamLeadersSupervisors",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Technical Writing",
    "subclassificationId": "TechnicalWriting",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Technicians",
    "subclassificationId": "Technicians",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Telecommunications",
    "subclassificationId": "Telecommunications",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Testing & Quality Assurance",
    "subclassificationId": "TestingQualityAssurance",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Tour Guides",
    "subclassificationId": "TourGuides",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Trade Marketing",
    "subclassificationId": "TradeMarketing",
    "classificationName": "Marketing & Communications",
    "classificationId": "MarketingAndCommunications"
  }, {
    "subclassificationName": "Training & Development",
    "subclassificationId": "TrainingDevelopment",
    "classificationName": "Human Resources & Recruitment",
    "classificationId": "HumanResourcesRecruitment"
  }, {
    "subclassificationName": "Travel Agents/Consultants",
    "subclassificationId": "TravelAgentsConsultants",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Treasury",
    "subclassificationId": "AccountingTreasury",
    "classificationName": "Accounting",
    "classificationId": "Accounting"
  }, {
    "subclassificationName": "Treasury",
    "subclassificationId": "BankingFinancialServicesTreasury",
    "classificationName": "Banking & Financial Services",
    "classificationId": "BankingFinancialServices"
  }, {
    "subclassificationName": "Tutoring",
    "subclassificationId": "Tutoring",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Underwriting",
    "subclassificationId": "Underwriting",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Urban Design & Planning",
    "subclassificationId": "UrbanDesignPlanning",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Valuation",
    "subclassificationId": "Valuation",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Veterinary Services & Animal Welfare",
    "subclassificationId": "VeterinaryServicesAnimalWelfare",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Volunteer Coordination & Support",
    "subclassificationId": "VolunteerCoordinationSupport",
    "classificationName": "Community Services & Development",
    "classificationId": "CommunityServicesDevelopment"
  }, {
    "subclassificationName": "Waiting Staff",
    "subclassificationId": "WaitingStaff",
    "classificationName": "Hospitality & Tourism",
    "classificationId": "HospitalityTourism"
  }, {
    "subclassificationName": "Warehousing, Storage & Distribution",
    "subclassificationId": "WarehousingStorageDistribution",
    "classificationName": "Manufacturing, Transport & Logistics",
    "classificationId": "ManufacturingTransportLogistics"
  }, {
    "subclassificationName": "Water & Waste Engineering",
    "subclassificationId": "WaterWasteEngineering",
    "classificationName": "Engineering",
    "classificationId": "Engineering"
  }, {
    "subclassificationName": "Web & Interaction Design",
    "subclassificationId": "WebInteractionDesign",
    "classificationName": "Design & Architecture",
    "classificationId": "DesignArchitecture"
  }, {
    "subclassificationName": "Web Development & Production",
    "subclassificationId": "WebDevelopmentProduction",
    "classificationName": "Information & Communication Technology",
    "classificationId": "InformationCommunicationTechnology"
  }, {
    "subclassificationName": "Welders & Boilermakers",
    "subclassificationId": "WeldersBoilermakers",
    "classificationName": "Trades & Services",
    "classificationId": "TradesServices"
  }, {
    "subclassificationName": "Winery & Viticulture",
    "subclassificationId": "WineryViticulture",
    "classificationName": "Farming, Animals & Conservation",
    "classificationId": "FarmingAnimalsConservation"
  }, {
    "subclassificationName": "Workers' Compensation",
    "subclassificationId": "WorkersCompensation",
    "classificationName": "Insurance & Superannuation",
    "classificationId": "InsuranceSuperannuation"
  }, {
    "subclassificationName": "Workplace Training & Assessment",
    "subclassificationId": "WorkplaceTrainingAssessment",
    "classificationName": "Education & Training",
    "classificationId": "EducationTraining"
  }, {
    "subclassificationName": "Administration",
    "subclassificationId": "RealEstatePropertyAdministration",
    "classificationName": "Real Estate & Property",
    "classificationId": "RealEstateProperty"
  }, {
    "subclassificationName": "Residents & Registrars",
    "subclassificationId": "ResidentsRegistrars",
    "classificationName": "Healthcare & Medical",
    "classificationId": "HealthcareMedical"
  }];
  $scope.subclassifications = [];

  $scope.setSubclassifications = function (classificationId) {
    var filtered = _.filter(subclassifications, function (p) {
      return classificationId === p.classificationId;
    });

    $scope.subclassifications = _.sortBy(filtered, function (p) {
      return p.subclassifcationName;
    });
  };

  $scope.salaryTypes = [{
    "name": "Annual Package",
    "id": "AnnualPackage"
  }, {
    "name": "Annual Commission",
    "id": "AnnualCommission"
  }, {
    "name": "Commission Only",
    "id": "CommissionOnly"
  }, {
    "name": "Hourly Rate",
    "id": "HourlyRate"
  }];
  var salaryAnnualMinBands = [['0', '5,000', '10,000', '15,000', '20,000', '25,000'], ['30,000', '35,000'], ['40,000', '45,000'], ['50,000', '55,000'], ['60,000', '65,000'], ['70,000', '75,000'], ['80,000', '85,000', '90,000', '95,000'], ['100,000', '110,000'], ['120,000', '130,000', '140,000'], ['150,000', '160,000', '170,000', '180,000', '190,000'], ['200,000']];
  var salaryAnnualMaxBands = [['19,999', '24,999', '29,999'], ['34,999', '39,999'], ['44,999', '49,999'], ['54,999', '59,999'], ['64,999', '69,999'], ['74,999', '79,999'], ['84,999', '89,999', '94,999', '99,999'], ['109,999', '119,999'], ['129,999', '139,999', '149,999'], ['159,999', '169,999', '179,999', '189,999', '199,999'], ['999,999']];
  var salaryHourlyMinBands = [['0.00', '5.00', '10.00'], ['15.00'], ['20.00'], ['25.00'], ['30.00'], ['35.00'], ['40.00', '45.00'], ['50.00', '55.00'], ['60.00', '65.00', '70.00'], ['75.00', '80.00', '85.00', '90.00', '95.00'], ['100']];
  var salaryHourlyMaxBands = [['9.99', '14.99'], ['19.99'], ['24.99'], ['29.99'], ['34.99'], ['39.99'], ['44.99', '49.99'], ['54.99', '59.99'], ['64.99', '69.99', '74.99'], ['79.99', '84.99', '89.99', '94.99', '99.99'], ['999999']];
  $scope.minSalaries = [];
  $scope.maxSalaries = [];
  $scope.templates = [];
  $scope.logos = [];

  $scope.setMinSalaries = function (type, isInit) {
    if (!isInit) {
      $scope.advertisement.salary.minimum = undefined;
      $scope.advertisement.salary.maximum = undefined;
    }

    var isAnnual = type !== 'HourlyRate' ? true : false,
        salaryBands = isAnnual ? salaryAnnualMinBands : salaryHourlyMinBands;
    $scope.minSalaries = salaryBands.reduce(function (acc, val) {
      return acc.concat(val);
    });
  };

  $scope.setMaxSalaries = function (salary, isInit) {
    if (!isInit) {
      $scope.advertisement.salary.maximum = undefined;
    }

    var isAnnual = $scope.advertisement.salary.type !== 'HourlyRate' ? true : false,
        minSalaryBandIndex = getSalaryBandIndex(true, isAnnual, salary),
        maxSalariesBands = isAnnual ? salaryAnnualMaxBands : salaryHourlyMaxBands,
        maxSalaries = maxSalariesBands[minSalaryBandIndex];
    if (!maxSalaries) return; // append next band salaries

    if (minSalaryBandIndex < maxSalariesBands.length - 1) {
      maxSalaries = maxSalaries.concat(maxSalariesBands[minSalaryBandIndex + 1]);
    }

    $scope.maxSalaries = maxSalaries.filter(function (maxSalary) {
      return parseFloat(maxSalary.replace(',', '')) >= parseFloat(salary.replace(',', ''));
    });
  };

  $scope.videoPosition = ['Above', 'Below'];

  function stripHtml(str) {
    return str.replace(/<(?:.|\n)*?>/gm, '');
  }

  $scope.appClient.getIntegrations($scope.shared.activeCompany.company._id, function (error, result) {
    $scope.advertisement.thirdParties.advertiserId = result.seek.advertiser_ids[0];
    $scope.advertiserIds = result.seek.advertiser_ids;

    if (result.seek.mandatory_standout) {
      $scope.advertisement.advertisementType = 'StandOut';
    }

    if (result.seek.logos) {
      $scope.logos = result.seek.logos;
    }

    if (result.seek.templates) {
      $scope.templates = result.seek.templates;
    }
  });

  $scope.setTemplate = function (templateId) {
    var template = _.find($scope.templates, function (t) {
      return templateId === t.id;
    });

    if (!template) return;
    $scope.template = template;
    $scope.advertisement.template.items = template.fields;
  };

  $scope.advertisement = {
    jobTitle: $scope.position.name,
    thirdParties: {},
    standout: {
      bullets: []
    },
    jobSummary: '',
    location: {},
    salary: {},
    template: {
      items: []
    },
    recruiter: {
      fullName: $scope.shared.user.name,
      email: $scope.shared.user.email_address
    },
    video: {},
    contact: {}
  };
  $scope.form = {
    classificationId: ''
  }; // jobSummary formatting - remove tags and convert HTML entities

  var div = document.createElement('div');
  var desc = $scope.position.description.substring(0, 147);
  if ($scope.position.description.length > 147) desc += '...';
  div.innerHTML = stripHtml(desc);
  $scope.advertisement.jobSummary = div.textContent; // overwrite defaults with existing advertisement

  if (advertisement) {
    Object.assign($scope.advertisement, advertisement);

    if ($scope.advertisement.location.id) {
      $scope.updateLocationAreas($scope.advertisement.location.id);
    }

    if ($scope.advertisement.salary.type) {
      $scope.setMinSalaries($scope.advertisement.salary.type, true);
    }

    if ($scope.advertisement.salary.minimum) {
      $scope.setMaxSalaries($scope.advertisement.salary.minimum, true);
    }

    if ($scope.advertisement.subclassificationId) {
      var selectedSubclassification = _.find(subclassifications, function (p) {
        return p.subclassificationId === $scope.advertisement.subclassificationId;
      });

      $scope.form.classificationId = selectedSubclassification.classificationId;
      $scope.setSubclassifications($scope.form.classificationId);
    }
  }

  var closeModal = function closeModal() {
    $uibModalInstance.close();
  };

  $scope.submitAdvertisement = function () {
    var createOrUpdate = $scope.advertisement.id ? AppClient.updateSeekAdvertisement : AppClient.createSeekAdvertisement,
        companyId = $scope.shared.activeCompany.company._id;
    $scope.error = '';
    $scope.success = 'Submitting...';
    createOrUpdate(companyId, $stateParams.positionId, $scope.advertisement).then(function (results) {
      // console.log('createOrUpdate', results);
      Object.assign($scope.advertisement, results);
      $scope.success = '';
      closeModal();
    }).catch(function (e) {
      console.log('createOrUpdate ERROR', e);

      if (_typeof(e) === 'object') {
        $scope.errors = e;
      } else {
        $scope.error = e;
      }

      $scope.success = '';
    });
  };

  function getSalaryBandIndex(isMin, isAnnual, salary) {
    var salaries = [],
        bandIndex;

    if (isMin) {
      salaries = isAnnual ? salaryAnnualMinBands : salaryHourlyMinBands;
    } else {
      salaries = isAnnual ? salaryAnnualMaxBands : salaryHourlyMaxBands;
    }

    salaries.forEach(function (band, index) {
      if (band.indexOf(salary) > -1) bandIndex = index;
    });
    return bandIndex;
  }
}]);
'use strict';

angular.module('BaseApp').directive('loadStreamTemplate', [function () {
  var getTemplate = function getTemplate(type) {
    var baseUrl = '/templates/v2/app/stream/';
    var template = '';

    switch (type) {
      case 'companyNotePosted':
        template = '_activity.note.html';
        break;

      case 'candidateDeleted':
        template = '_activity.candidate.deleted.html';
        break;

      case 'candidateAdded':
        template = '_activity.candidate.added.html';
        break;

      case 'candidateStatusUpdated':
        template = '_activity.candidate.status.update.html';
        break;

      case 'companyPositionStateUpdated':
        template = '_activity.position.state.update.html';
        break;

      case 'messageFromExternalUserPosted':
        template = '_activity.message.external-user.html';
        break;

      case 'messageFromCandidatePosted':
        template = '_activity.message.candidate.html';
        break;

      case 'pending_messageToCandidatePosted':
        template = '_activity.pending.message.company.html';
        break;

      case 'candidateConsentRequested':
        template = '_activity.candidate.gdpr.consent_request.html';
        break;

      case 'candidateConsentUpdated':
        template = '_activity.candidate.gdpr.consent.html';
        break;

      case 'messageToCandidatePosted':
        template = '_activity.message.company.html';
        break;

      case 'messageToCandidateSent':
        template = '_activity.message.company.html';
        break;

      case 'candidateDocumentAdded':
        template = '_activity.candidate.document.added.html';
        break;

      case 'candidateDocumentDeleted':
        template = '_activity.candidate.document.deleted.html';
        break;

      case 'candidateInterviewCancel':
        template = '_activity.candidate.interview.canceled.html';
        break;

      case 'candidateInterviewAdded':
        template = '_activity.candidate.interview.added.html';
        break;

      case 'candidatePanelInterviewAdded':
        template = '_activity.candidate.interview.multi.added.html';
        break;

      case 'candidateMeetingTimesProposed':
        template = '_activity.candidate.interview.proposed.html';
        break;

      case 'candidateAssignedPosted':
        template = '_activity.candidate.assigned.html';
        break;

      case 'companyPositionAdded':
        template = '_activity.position.added.html';
        break;

      case 'companyPositionUpdated':
        template = '_activity.position.update.html';
        break;

      case 'candidateDocumentSignatureViewed':
        template = '_activity.candidate.document-signature.viewed.html';
        break;

      case 'candidateDocumentSignatureSigned':
        template = '_activity.candidate.document-signature.signed.html';
        break;

      case 'candidateDocumentSignatureCompleted':
        template = '_activity.candidate.document-signature.completed.html';
        break;

      case 'candidateBackgroundCheckMissingInput':
        template = '_activity.candidate.background-check.missing-input.html';
        break;

      case 'candidateBackgroundCheckProcessing':
        template = '_activity.candidate.background-check.processing.html';
        break;

      case 'candidateBackgroundCheckCompletedClear':
        template = '_activity.candidate.background-check.completed-clear.html';
        break;

      case 'candidateBackgroundCheckCompletedAlert':
        template = '_activity.candidate.background-check.completed-alert.html';
        break;

      case 'candidateAssessmentSent':
        template = '_activity.candidate.assessment.sent.html';
        break;

      case 'candidateAssessmentCompleted':
        template = '_activity.candidate.assessment.completed.html';
        break;

      case 'candidateReminder':
        template = '_activity.meeting-reminder.sent.html';
        break;

      default:
        //console.log('template not found for ' + type);
        template = 'blank.html';
        break;
    }

    return baseUrl + template;
  };

  return {
    restrict: 'E',
    replace: true,
    template: '<ng-include src="getTemplate()"/>',
    link: function link(scope, element, attrs) {
      scope.getTemplate = function () {
        return getTemplate(scope.activity.type);
      };

      scope.openPopup = function (url) {
        // Open in center
        var w = 1000;
        var h = 750;
        var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
        var left = width / 2 - w / 2 + dualScreenLeft;
        var top = height / 2 - h / 2 + dualScreenTop;
        var goodhireWindow = window.open(url, 'streamPopup', 'top=' + top + ', left=' + left + ', width=' + w + ', height=' + h + ', resizable=yes, location=no');
      };
    }
  };
}]);
angular.module('BaseApp').directive('loadNotificationTemplate', [function () {
  var getTemplate = function getTemplate(type) {
    var baseUrl = '/templates/v2/app/notifications/';
    var template = '';

    switch (type) {
      case 'mentionPosted':
        template = '_mention.posted.html';
        break;

      case 'candidateAdded':
        template = '_candidate.applied.html';
        break;

      case 'companyPositionAdded':
        template = '_position.added.html';
        break;

      case 'companyPositionUpdated':
        template = '_position.update.html';
        break;

      case 'companyPositionStateUpdated':
        template = '_position.state.update.html';
        break;

      case 'candidateStatusUpdated':
        template = '_candidate.status.update.html';
        break;

      case 'messageFromCandidatePosted':
        template = '_candidate.message.html';
        break;

      case 'companyMemberAdded':
        template = '_member.added.html';
        break;

      case 'candidateAssignedPosted':
        template = '_candidate.assigned.html';
        break;

      case 'questionnaireResponsePosted':
        template = '_candidate.questionnaire_response.html';
        break;

      case 'candidateAssessmentCompleted':
        template = '_candidate.assessment_response.html';
        break;

      default:
        template = 'blank.html';
        break;
    } //if (template.length <= 0) console.log('not found = ' + type);


    return baseUrl + template;
  };

  return {
    restrict: 'E',
    replace: true,
    template: '<ng-include src="getTemplate()"/>',
    link: function link(scope, element, attrs) {
      scope.getTemplate = function () {
        return getTemplate(scope.notification.type);
      };
    }
  };
}]);
angular.module('BaseApp').directive('uibModalWindow', [function () {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      if (angular.element('body').hasClass('modal-minimized')) {
        angular.element('.modal-backdrop').removeClass('minimizable');
      }

      scope.$on('modal.closing', function () {
        if (angular.element('body').hasClass('modal-minimized')) {
          angular.element('.modal-backdrop').addClass('minimizable');
        }
      });
      return;
    }
  };
}]);
angular.module('BaseApp').directive('scrollAttach', [function () {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      var parent = element[0].parentNode;
      var scroll = parent.querySelector('.filters-container');
      scope.$watch(function () {
        if (scroll.clientHeight < scroll.scrollHeight && !angular.element(parent).hasClass('attach')) {
          //console.log('attach');
          //console.log(scroll.clientHeight + ' < ' + scroll.scrollHeight);
          angular.element(parent).addClass('attach');
        } else if (scroll.clientHeight === scroll.scrollHeight && angular.element(parent).hasClass('attach')) {
          //console.log('unattach');
          angular.element(parent).removeClass('attach');
        } //console.log(element[0].getBoundingClientRect().bottom);

      });
    }
  };
}]);
angular.module('BaseApp').directive('scrollFixed', [function () {
  return {
    restrict: 'A',
    scope: {
      sticky: '@scrollFixed'
    },
    link: function link(scope, element, attrs) {
      var scroller = document.querySelector('[scroll-fixed]');
      var sticky = document.querySelector(scope.sticky);
      var parent = scroller.getBoundingClientRect();
      var child = sticky.getBoundingClientRect();
      var distance = child.top - parent.top - 10;

      var scroll = function scroll(e) {
        var top = element.scrollTop();

        if (top > distance) {
          element.addClass('attached');
        } else if (element.hasClass('attached')) {
          element.removeClass('attached');
        } //console.log(scroller.scrollTop());

      };

      element.bind('scroll', scroll);
    }
  };
}]);
angular.module('BaseApp').directive('flexHeightFix', ['$timeout', function ($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      var child = element.children()[0];
      var height = 0;

      function init() {
        $timeout(function () {
          height = child.clientHeight + 10;
          height = height < 127 ? 127 : height;
          element.css('height', height + 'px');
        }, 100);
      }

      scope.$watch(attrs.flexHeightWatch, function (newVal) {
        init();
      });
    }
  };
}]);
angular.module('BaseApp').directive('addthisToolbox', function () {
  return {
    restrict: 'AE',
    transclude: true,
    replace: true,
    template: '<div ng-transclude></div>',
    scope: {
      position: '=position',
      company: '=company'
    },
    link: function link($scope, element, attrs) {
      addthis.init();
      var url = "https://" + $scope.company.friendly_id + ".breezy.hr/p/" + $scope.position.friendly_id;
      var title = "We're hiring! Check out our " + $scope.position.name + " position at: ";
      addthis.toolbox($(element).get(), {}, {
        url: url,
        title: title
      });
    }
  };
});
angular.module('BaseApp').directive('addthisReferralToolbox', function () {
  return {
    restrict: 'AE',
    transclude: true,
    replace: true,
    template: '<div ng-transclude></div>',
    scope: {
      user: '=user'
    },
    link: function link($scope, element, attrs) {
      addthis.init();
      var title = "If you hire people & want to simplify the process, try Breezy HR. I love these guys. Here's a link for 50% off:  ";
      addthis.toolbox($(element).get(), {}, {
        url: $scope.user.referral_url,
        title: title
      });
    }
  };
});
/*angular.module('BaseApp').filter('showPending', function() {
    return function(activities) {
        return activities.filter(activity => activity.object.hasOwnProperty('state') && activity.object.state === 'pending' );
    };
});*/

angular.module('BaseApp').directive('jumpToTime', function () {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      //console.log(element)
      var closestTime = null;
      var diff = 0;
      scope.$watch('$select.open', function (newVal, oldVal) {
        if (newVal == true) {
          var time, hour, minutes;

          if (scope.$select.selected) {
            time = scope.$select.selected.id.split(':');
            hour = time[0];
            minutes = time[1];
          } else {
            time = new Date();
            hour = time.getHours();
            hour = hour < 10 ? '0' + hour : hour;
            minutes = time.getMinutes();
          }

          diff = minutes % 15;
          minutes = minutes - diff;
          minutes = minutes < 10 ? '0' + minutes : minutes;
          var id = "#t_".concat(attrs.jumpToTime, "_").concat(hour, "\\:").concat(minutes, "\\:00");
          window.setTimeout(function () {
            closestTime = document.querySelectorAll(id)[0];
            angular.element(closestTime).addClass("current-time-line current-time-line-".concat(diff));
            closestTime.scrollIntoView();
          }, 10);
        } else {
          if (closestTime) {
            angular.element(closestTime).removeClass("current-time-line current-time-line-".concat(diff));
            closestTime = null;
          }
        }
      });
    }
  };
});
angular.module('BaseApp').filter('removePending', function () {
  return function (activities) {
    if (!activities || !Array.isArray(activities)) {
      return [];
    }

    ;
    return activities.filter(function (activity) {
      return !activity.object.hasOwnProperty('state') || ['sent', 'error'].indexOf(activity.object.state) > -1;
    });
  };
});
angular.module('BaseApp').filter('sanitize', function () {
  return function (str) {
    return str.replace(/[&\/\\#+()$~%:*?<>{}]/g, '');
  };
});
angular.module('BaseApp').directive('candidatePendingActivities', ['$rootScope', 'CandidatesService', function ($rootScope, CandidatesService) {
  return {
    restrict: 'E',
    templateUrl: '/templates/v2/app/partials/candidate_pending_activities.html',
    replace: true,
    scope: {
      activities: '='
    },
    link: function link(scope, element, attrs) {
      scope.pending = {
        show: false,
        activities: []
      };

      var init = function init() {
        scope.pending.activities = CandidatesService.local.getPendingActivities(scope.activities) || [];
        scope.pending.message = "".concat(scope.pending.activities.length, " email").concat(scope.pending.activities.length === 1 ? ' is' : 's are', " queued. Click to display.");
      };

      scope.togglePendingShow = function () {
        scope.pending.show = !scope.pending.show;
        var pendingCount = scope.pending.activities.length;

        if (scope.pending.show) {
          scope.pending.message = "Click to hide queued email".concat(pendingCount === 1 ? '' : 's', ".");
        } else {
          scope.pending.message = "".concat(pendingCount, " email").concat(pendingCount === 1 ? ' is' : 's are', " queued. Click to display.");
        }
      };

      scope.forceDelayMessage = function () {
        var activity = this.activity;
        CandidatesService.remote.forceDelayMessage(activity.object.company_id, activity.object.position_id, activity._id).then(function (result) {
          console.log('forcing this to send');
        });
      };

      scope.cancelDelayMessage = function () {
        var activity = this.activity;
        CandidatesService.remote.cancelDelayMessage(activity.object.company_id, activity.object.position_id, activity._id).then(function (result) {
          activity.object.state = 'cancel';
        });
      };

      $rootScope.$on('messageToCandidateSent', function (e, data) {
        var activity = scope.activities.find(function (activity) {
          return activity._id === data._id;
        });

        if (activity) {
          activity.object.state = data.object.state;
          activity.type = data.type;
          init();
        }
      });
      /*$rootScope.$on('messageToCandidatePosted', function(e, data) {
          console.log('here');
      });*/

      scope.$watch('activities', function (newVal, oldVal) {
        init();
      }, true);
    }
  };
}]);
angular.module('BaseApp').directive('candidateMessageCompose', ['$rootScope', '$upload', '$timeout', 'utils', 'dialog', 'DELAY_SEND_TIMES', 'ModalService', 'FeaturesService', function ($rootScope, $upload, $timeout, utils, dialog, DELAY_SEND_TIMES, ModalService, FeaturesService) {
  return {
    restrict: 'E',
    templateUrl: '/templates/v2/app/partials/candidate_message.html',
    link: function link(scope, element, attrs) {
      //console.log('candidateMessage directive');
      var attachmentsSize = 0;
      scope.insertTab = 'templates';

      scope.selectInsertTab = function (tab) {
        scope.insertTab = tab;
      };

      scope.schedulingLinks = scope.shared.activeCompany.scheduling_links;
      scope.localSchedulingLinks = JSON.parse(window.localStorage.getItem('localSchedulingLinks')) || [];
      var cursorPosition = 0;

      scope.saveTextareaCursorPosition = function (event) {
        //console.log(event);
        cursorPosition = event.target.selectionStart || 0;
      };
      /* Folders stuff */


      scope.folderSelected = false;
      scope.selectedFolder = {};
      scope.folders = {};
      Object.keys(scope.shared.activeCompany.folders).forEach(function (key) {
        scope.folders[key] = scope.shared.activeCompany.folders[key].map(function (folder) {
          folder.templates = scope.shared.activeCompany.templates.filter(function (template) {
            return template.folder_id === folder._id;
          });
          folder.show = false;
          return folder;
        });
      });
      scope.templatesNoFolders = scope.shared.activeCompany.templates.filter(function (template) {
        return !template.folder_id;
      });

      scope.selectFolder = function (index, folder) {
        scope.folderSelected = true;
        scope.selectedFolder = scope.folders[folder.type][index];
      };

      scope.deselectFolder = function () {
        scope.folderSelected = false;
        scope.selectedFolder = {};
      };
      /* End Folders */


      scope.createSchedulingLink = function (internalId) {
        if (FeaturesService.actions.block('scheduling_links')) return;
        ModalService.openAddSchedulingLinks(null, 'single-use').then(function (result) {
          if (result) {
            if (result.name.trim().length > 0) {
              result.id = new Date().getTime(), scope.localSchedulingLinks.push(result);
              window.localStorage.setItem('localSchedulingLinks', JSON.stringify(scope.localSchedulingLinks));
            }

            scope.insertSchedulingLink(result, internalId);
          }
        });
      };

      scope.deleteLocalSchedulingLinks = function (e, localSchedulingLink) {
        var localSchedulingLinks = JSON.parse(window.localStorage.getItem('localSchedulingLinks'));
        var index = localSchedulingLinks.findIndex(function (_sl) {
          return _sl.id === localSchedulingLink.id;
        });

        if (index > -1) {
          localSchedulingLinks.splice(index, 1);
          scope.localSchedulingLinks = localSchedulingLinks;
          window.localStorage.setItem('localSchedulingLinks', JSON.stringify(localSchedulingLinks));
        }

        e.stopPropagation();
        e.preventDefault();
      };

      scope.setQuestionnaire = function (questionnaire) {
        if (FeaturesService.actions.block('questionnaires')) return; //console.log(questionnaire);

        scope.appClient.addCandidateQuestionnaire(scope.shared.activeCompany.company._id, scope.candidate.position_id, scope.candidate._id, questionnaire._id, function (error, result) {
          scope.message.body = scope.appClient.processTemplate(result.body, {
            'candidate': scope.candidate,
            'position': scope.position,
            'company': scope.shared.activeCompany.company,
            'sender': scope.shared.user
          }); //scope.message.body = utils.markdownToHTML(scope.message.body);

          scope.message.meta.push({
            generated_id: result.generated_id,
            resource_id: result.resource_id,
            type: result.type
          });

          if (scope.showComposer.type !== 'sms-composer') {
            scope.message.body = utils.markdownToHTML(scope.message.body);
          }
        });
        closeTemplateDropdown();
      };

      scope.insertSchedulingLink = function (link, internalId) {
        if (FeaturesService.actions.block('scheduling_links')) return;

        if (scope.candidate) {
          var position = scope.shared.activeCompany.positions[scope.candidate.position_id];
          var schedulingLinkFriendlyId = link.friendly_id;
          var data = null;

          if (!link.friendly_id) {
            data = link;
          }

          scope.appClient.addCandidateSchedulingLink(scope.shared.activeCompany.company._id, scope.candidate.position_id, scope.candidate._id, schedulingLinkFriendlyId, data, function (error, result) {
            if (error) {
              console.log('error happened');
              console.log(error);
            }

            var link = "https://".concat(scope.shared.activeCompany.company.friendly_id, ".breezy.hr/pick-time/").concat(result._id);

            if (scope.showComposer.type === 'sms-composer') {
              scope.message.body = scope.message.body.splice(cursorPosition, 0, link);
            } else {
              $rootScope.$broadcast('insertElement:' + internalId, {
                type: 'link',
                url: link
              });
            } //console.log(result);

          });
        } else {
          if (scope.showComposer.type === 'sms-composer') {
            scope.message.body = scope.message.body.splice(cursorPosition, 0, "[[scheduling_link(".concat(link.friendly_id, ")]]"));
          } else {
            $rootScope.$broadcast('insertElement:' + internalId, {
              type: 'text',
              text: "[[scheduling_link(".concat(link.friendly_id, ")]]")
            });
          }
        }

        closeTemplateDropdown();
      };

      scope.editQuestionnaires = function () {
        ModalService.accountSettings('questionnaires').then(function () {});
      };

      scope.editSchedulingLinks = function () {
        ModalService.accountSettings('scheduling').then(function () {});
      };

      var cleanSavedMessagesFromStorage = function cleanSavedMessagesFromStorage() {
        if (window.localStorage && scope.candidate && localStorage.getItem("breezy".concat(scope.candidate._id))) {
          localStorage.removeItem("breezy".concat(scope.candidate._id));
        }
      };

      var saveEmailToLocalStorage = function saveEmailToLocalStorage(candidate) {
        // console.log('Saving email...', candidate)
        if (window.localStorage && candidate && scope.message.body && scope.message.body.length > 0) {
          localStorage.setItem("breezy".concat(candidate._id), JSON.stringify({
            emailSubject: scope.message.subject,
            emailBody: scope.message.body
          }));
        }
      };

      var getEmailFromLocalStorageIfThere = function getEmailFromLocalStorageIfThere(candidate) {
        // console.log('Getting email...', candidate)
        if (window.localStorage && window.localStorage.getItem("breezy".concat(candidate._id))) {
          var email = JSON.parse(window.localStorage.getItem("breezy".concat(candidate._id)));
          scope.message.body = email.emailBody;
          scope.message.subject = email.emailSubject;
        }
      };

      scope.candidateHasNotRecEmail = function () {
        if (scope.candidate && !scope.candidate['last_message_to_date'] && (!scope.conversation || scope.conversation.length == 0) && !scope.campaign && !scope.initializingCandidateMeta) {
          return true;
        } else {
          return false;
        }
      };

      scope.templateSelected = false;

      scope.isTextDisabled = function () {
        /*
        if(scope.candidate.position && scope.candidate.position.org_type == "pool" && scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
            console.log("Candidate selected but pool messaging disabled");
            return "pool";
        }
        */
        if (!scope.position) {
          return false;
        }

        if (scope.position.state != "published") {
          return "state";
        }

        if (scope.position.state == "published" && scope.candidate && !scope.candidate.phone_number) {
          return "email";
        }

        return false;
      };

      scope.isEmailDisabled = function () {
        /*
        if(scope.candidate.position && scope.candidate.position.org_type == "pool" && scope.shared.activeCompany.company.features.candidate_pool_messaging === false) {
            console.log("Candidate selected but pool messaging disabled");
            return "pool";
        }
        */
        if (!scope.position) {
          return false;
        }

        if (scope.position.state != "published") {
          return "state";
        }

        if (scope.position.state == "published" && scope.candidate && !scope.candidate.email_address) {
          return "email";
        }

        return false;
      };

      scope.sendMessageButtonText = "Send Email"; //console.log(scope.subject.body);

      scope.staged = {};
      scope.message = {
        subject: scope.subject.body,
        body: '',
        bcc: '',
        cc: '',
        attachment: undefined,
        attachments: [],
        meta: []
      };
      scope.templateOptions = {
        search: '',
        isopensms: false,
        isopenemail: false
      };

      var closeTemplateDropdown = function closeTemplateDropdown() {
        scope.templateOptions = {
          search: '',
          isopensms: false,
          isopenemail: false
        };
      };

      scope.status = {
        isopensms: false,
        isopenemail: false
      };
      scope.messageDelay = [];
      DELAY_SEND_TIMES.forEach(function (time) {
        if (time.delay !== 259200000) {
          scope.messageDelay.push({
            text: "Send in ".concat(time.text),
            delay: time.delay
          });
        }
      });
      scope.$watch('showComposer.type', function (newValue) {
        scope.message.body = '';
        scope.insertTab = 'templates';
      });
      scope.$watch('subject.body', function (newVal) {
        scope.message.subject = newVal;
      });

      scope.toggleCC = function () {
        if (!scope.updateCCVisible && scope.messageType == 'DOC_SIGNING') {
          dialog.alert({
            message: 'You cannot use CC with Document Signing'
          });
          return;
        }

        scope.updateCCVisible = !scope.updateCCVisible;
      };

      scope.toggleBCC = function () {
        if (!scope.updateBCCVisible && scope.messageType == 'DOC_SIGNING') {
          dialog.alert({
            message: 'You cannot use BCC with Document Signing'
          });
          return;
        }

        scope.updateBCCVisible = !scope.updateBCCVisible;
      };

      scope.toggleUpdateSubject = function () {
        scope.updateSubjectVisible = !scope.updateSubjectVisible;
      };

      scope.setTemplate = function (template) {
        scope.messageType = 'EMAIL';
        var wait = false;

        if (scope.candidate) {
          if (template.subject) {
            scope.message.subject = scope.appClient.processTemplate(template.subject, {
              'candidate': scope.candidate,
              'position': scope.position,
              'company': scope.shared.activeCompany.company,
              'sender': scope.shared.user
            });
          } else {
            scope.message.subject = scope.appClient.processTemplate(scope.shared.activeCompany.messaging.subject_template.body, {
              'candidate': scope.candidate,
              'position': scope.candidate.position,
              'company': scope.shared.activeCompany.company,
              'sender': scope.shared.user
            });
          }

          scope.message.body = scope.appClient.processTemplate(template.body, {
            'candidate': scope.candidate,
            'position': scope.position,
            'company': scope.shared.activeCompany.company,
            'sender': scope.shared.user
          });
          var regexScheduleLink = /\[\[scheduling_link\([\w-]+\)\]\]/g;
          var schedulingVars = scope.message.body.match(regexScheduleLink); //console.log(schedulingVars)

          if (schedulingVars) {
            wait = true;
            var schedulingVarCount = schedulingVars.length;
            schedulingVars.forEach(function (schedulingVar) {
              var friendly_id = schedulingVar.match(/\(([^\)]+)\)/); //console.log(friendly_id)

              scope.appClient.addCandidateSchedulingLink(scope.shared.activeCompany.company._id, scope.candidate.position_id, scope.candidate._id, friendly_id[1], null, function (error, result) {
                if (error) {}

                var position = scope.shared.activeCompany.positions[scope.candidate.position_id];
                var link = "https://".concat(scope.shared.activeCompany.company.friendly_id, ".breezy.hr/pick-time/").concat(result._id);
                scope.message.body = scope.message.body.replace(schedulingVar, "[".concat(link, "](").concat(link, ")"));
                schedulingVarCount--;

                if (schedulingVarCount === 0) {
                  //console.log('all resolved');
                  convertMessageBody();
                } else {//console.log('NOT all resolved');
                }
              });
            });
          }
        } else {
          if (template.subject) {
            scope.message.subject = template.subject;
          } else {
            scope.message.subject = scope.shared.activeCompany.messaging.subject_template.body;
          }

          scope.message.body = template.body;
        }

        function convertMessageBody() {
          if (template.delivery_method === 'sms') {
            scope.message.body = scope.message.body;
          } else {
            scope.message.body = utils.markdownToHTML(scope.message.body);
          }
        }

        if (!wait) convertMessageBody();
        scope.message.attachments = angular.copy(template.attachments);

        if (!scope.message.attachments) {
          scope.message.attachments = [];
        }

        scope.templateSelected = true;
        closeTemplateDropdown();
      };

      scope.setDocSigningTemplate = function (template) {
        if (scope.updateBCCVisible) {
          dialog.alert({
            message: 'You cannot use BCC with Document Signing'
          });
          return;
        }

        if (scope.updateCCVisible) {
          dialog.alert({
            message: 'You cannot use CC with Document Signing'
          });
          return;
        }

        scope.messageType = 'DOC_SIGNING';
        scope.selectedDocSigningTemplate = template; //scope.docSigningTemplates[$index];

        if (scope.selectedDocSigningTemplate.subject) {
          scope.message.subject = scope.appClient.processTemplate(scope.selectedDocSigningTemplate.subject, {
            'candidate': scope.candidate,
            'position': scope.position,
            'company': scope.shared.activeCompany.company,
            'sender': scope.shared.user
          });
        } else {
          scope.message.subject = scope.appClient.processTemplate(scope.shared.activeCompany.messaging.subject_template.body, {
            'candidate': scope.candidate,
            'position': scope.candidate.position,
            'company': scope.shared.activeCompany.company,
            'sender': scope.shared.user
          });
        }

        scope.message.body = scope.appClient.processTemplate(scope.selectedDocSigningTemplate.message, {
          'candidate': scope.candidate,
          'position': scope.position,
          'company': scope.shared.activeCompany.company,
          'sender': scope.shared.user
        });
        scope.message.body = utils.markdownToHTML(scope.message.body);
        scope.message.attachments = scope.selectedDocSigningTemplate.documents.map(function (d) {
          return {
            file_name: d.name,
            status: 'locked'
          };
        });

        if (scope.selectedDocSigningTemplate.signer_roles) {
          scope.additionalSigners = scope.selectedDocSigningTemplate.signer_roles.slice(1);
        }

        closeTemplateDropdown();
      };

      scope.message.attachments = [];

      scope.uploadAttachment = function ($files) {
        var attachment = {
          'status': 'uploading'
        };
        scope.message.attachments.push(attachment);
        upload($files, function (error, data) {
          scope.message.attachment.uploading = false;

          if (data) {
            attachment.status = 'attached';
            attachment.file_name = data.file_name;
            attachment.url = data.url;
            attachment.content_type = data.content_type;
            attachment.size = data.file_size; //scope.message.attachment = data;
            //scope.message.attachment.status = undefined;
          } else {
            attachment.status = 'error'; //scope.message.attachment.status = "Problem uploading.";
          }
        });
      };

      var upload = function upload($files, callback) {
        var onProgress = function onProgress(e) {
          console.log('candidateMessageCompose Percent: ' + parseInt(100.0 * e.loaded / e.total));
        },
            onSuccess = function onSuccess(data, status, headers, config) {
          return callback(null, data);
        },
            onError = function onError() {
          return callback(true);
        }; // NOTE: ES6 for of loop


        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = $files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var file = _step.value;
            var upload_url = '/api/company/' + scope.shared.activeCompany.company._id + '/upload';

            if (scope.candidate) {
              upload_url = '/api/company/' + scope.candidate.company_id + '/position/' + scope.position._id + '/candidate/' + scope.candidate._id + '/stream/upload';
            }

            scope.upload = $upload.upload({
              url: upload_url,
              method: 'POST',
              file: file
            }).progress(onProgress).success(onSuccess).error(onError);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };

      scope.removeFileAttachment = function (idx) {
        scope.message.attachments.splice(idx, 1);
      };

      var isEmail = function isEmail(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
      };

      scope.sendMessage = function (delay) {
        if (scope.messageType === 'DOC_SIGNING') return scope.sendDocSigningTemplate();
        var message = {};
        var body = '';
        body = utils.HTMLtoMarkdown(scope.message.body);

        if (body.length <= 0) {
          return;
        }

        message.body = body;
        if (scope.showComposer.type === 'sms-composer') message.delivery_method = 'sms';else message.delivery_method = 'email';
        var cancel = false;
        attachmentsSize = 0;
        scope.message.attachments.forEach(function (attachment) {
          attachmentsSize += attachment.size;

          if (attachment.status === 'uploading') {
            cancel = true;
          }
        });

        if (cancel) {
          dialog.alert({
            message: 'File upload not complete. Please try again in a moment.'
          });
          return;
        }

        var user = scope.shared.user;

        if (!user.google_calendar && !user.outlook_calendar && attachmentsSize > 10485760) {
          dialog.alert({
            message: 'Attached files cannot exceed 10MB.'
          });
          return;
        } else if ((user.google_calendar || user.outlook_calendar) && attachmentsSize > 20971520) {
          dialog.alert({
            message: 'Attached files cannot exceed 20MB.'
          });
          return;
        }

        if (scope.staged.bcc && scope.staged.bcc.length > 0) {
          var bccEmails = scope.staged.bcc.split(',');
          var valid = true;

          for (var i in bccEmails) {
            if (isEmail(bccEmails[i].trim()) === false) {
              valid = false;
            }
          }

          if (valid === false) {
            dialog.alert({
              message: 'BCC must contain valid email addresses.'
            });
            return;
          }

          scope.message.bcc = bccEmails;
        }

        if (scope.staged.cc && scope.staged.cc.length > 0) {
          var ccEmails = scope.staged.cc.split(',');
          var valid = true;

          for (var i in ccEmails) {
            if (isEmail(ccEmails[i].trim()) === false) {
              valid = false;
            }
          }

          if (valid === false) {
            dialog.alert({
              message: 'CC must contain valid email addresses.'
            });
            return;
          }

          scope.message.cc = ccEmails;
        }

        if (scope.message.attachments.length > 0) {
          scope.message.attachments.forEach(function (attachment) {
            delete attachment.size;
          });
        }

        message.attachments = scope.message.attachments;
        message.subject = scope.message.subject ? scope.message.subject.trim() : scope.position ? 'Re: ' + scope.position.name : null;
        message.bcc = scope.message.bcc;
        message.cc = scope.message.cc;

        if (scope.message.meta.length > 0) {
          message.meta = scope.message.meta;
        }

        if (delay) {
          message.delay = delay;
        }

        scope.sendingMessage = true;
        scope.errorStatus = "";
        scope.messageStatus = "Sending...";
        scope.status = {
          isopensms: false,
          isopenemail: false
        };

        var messageCallback = function messageCallback(error, result) {
          if (error) {
            // SMS limit error
            if (error.limit && error.limit.current_remaining === 0) {
              var dialog_text = {
                title: 'SMS Limit Hit',
                message: "You've reached the default SMS limit of 10 per month. Ask your company admin to select an SMS plan to increase this for you."
              };
              var dialog_type = 'alert';

              if (scope.shared.activeCompany.company.user_role.id === 'company_admin') {
                dialog_text.title = 'Select an SMS plan', dialog_text.message = "You've reached the default SMS limit of 10 per month. Would you like to see SMS messaging plans?";
                dialog_type = 'confirm';
              }

              dialog[dialog_type](dialog_text, function (result) {
                if (result) {
                  //(company.user_role.id !== 'company_admin')
                  ModalService.openSMSSubscription().then(function (result) {});
                }
              });
            }

            scope.sendingMessage = false;
            scope.errorStatus = error.error;
            return;
          }

          if (scope.conversation && scope.updateCandidateConversation) {
            //console.log('we have a conversation stream')
            //console.log(result)
            scope.updateCandidateConversation(result);
          }

          if (scope.isModal) {
            // in a modal
            $timeout(function () {
              scope.closeModal();
            }, 2000);
          } else {
            // inline version
            scope.message.body = '';
            scope.staged.bcc = '';
            scope.staged.cc = '';
            delete message.bcc;
            delete scope.message.bcc;
            delete message.cc;
            delete scope.message.cc;
            scope.message.attachments = [];
            scope.messageStatus = "Message sent!";
            scope.sendingMessage = false;
            cleanSavedMessagesFromStorage();
          }
        };

        if (scope.candidate) {
          scope.appClient.postMessageToCandidate(message, scope.shared.activeCompany.company._id, scope.candidate.position_id, scope.candidate._id, messageCallback);
        } else if (scope.candidates) {
          var candidateIDs = scope.candidates.map(function (c) {
            return c._id;
          });
          scope.appClient.bulkMessageCandidates(message, scope.shared.activeCompany.company._id, candidateIDs, messageCallback); // for(i in scope.candidates) {
          //     var candidate = scope.candidates[i];
          //     scope.appClient.postMessageToCandidate(message, scope.shared.activeCompany.company._id, candidate.position._id, candidate._id, messageCallback);
          // }
        } else {
          if (scope.candidateIds) {
            scope.appClient.bulkMessageCandidates(message, scope.shared.activeCompany.company._id, scope.candidateIds, messageCallback);
          } // for(i in scope.candidateIds) {
          //     var candidateId = scope.candidateIds[i];
          //     scope.appClient.postMessageToCandidate(message, scope.shared.activeCompany.company._id, scope.positionId, candidateId, messageCallback);
          // }

        }
      }; // initialize hellosign templates


      if (scope.candidate) {
        scope.appClient.getDocSigningTemplates(scope.shared.activeCompany.company._id).then(function (result) {
          if (result && result.length) {
            scope.docSigningTemplates = result;
          }
        });
      }

      scope.sendDocSigningTemplate = function () {
        var validSigners = true;

        if (scope.additionalSigners && scope.additionalSigners.length) {
          scope.additionalSigners.forEach(function (signer, index) {
            if (validSigners && !signer.email_address) {
              dialog.alert({
                message: 'Signer ' + signer.name + ' must contain a valid email address.'
              });
              validSigners = false;
              return;
            }
          });
        }

        if (!validSigners) return;
        var messageBody = utils.HTMLtoMarkdown(scope.message.body);
        var sendData = {
          companyId: scope.shared.activeCompany.company._id,
          positionId: scope.position._id,
          candidateId: scope.candidate._id,
          templateId: scope.selectedDocSigningTemplate.hellosign_id,
          title: scope.selectedDocSigningTemplate.title,
          subject: scope.message.subject.trim(),
          message: utils.stripMarkdown(messageBody),
          additionalSigners: scope.additionalSigners
        };
        var newAttachments = scope.message.attachments.filter(function (a) {
          return a.status !== 'locked';
        });

        if (newAttachments.length) {
          sendData.fileUrls = newAttachments.map(function (a) {
            return a.url;
          });
        }

        return scope.appClient.sendDocSigningTemplate(sendData).then(function (result) {
          HelloSign.init("abae36e43cb89fe9d96240093719b68d");
          HelloSign.open({
            url: result.claim_url,
            // skipDomainVerification: true,
            messageListener: function messageListener(eventData) {
              if (eventData && eventData.event === "signature_request_sent") {
                scope.appClient.recordSignatureRequestToCandidate(messageBody, scope.message.subject, scope.message.attachments, scope.shared.activeCompany.company._id, scope.candidate.position_id, scope.candidate._id, function (error, result) {});
                scope.messageStatus = "Document Sent!";
                scope.message.body = '';
                scope.message.attachments = [];
              }
            }
          });
          scope.messageType = '';
        });
      };

      var resetFields = function resetFields() {
        scope.message.subject = '';
        scope.message.body = '';
        scope.staged.bcc = '';
        scope.staged.cc = '';
        delete scope.message.bcc;
        delete scope.message.bcc;
        delete scope.message.cc;
        delete scope.message.cc;
        scope.message.attachments = [];
      };

      element.on('$destroy', function () {
        saveEmailToLocalStorage(scope.candidate);
      });

      if (scope.$parent.candidate) {
        scope.$parent.$watchCollection('candidate', function (newVal, oldVal) {
          saveEmailToLocalStorage(oldVal);
          resetFields();
          scope.candidate = newVal;
          getEmailFromLocalStorageIfThere(newVal);
        });
      }
    }
  };
}]);
angular.module('BaseApp').directive('contenteditable', ['$sce', function ($sce) {
  return {
    restrict: 'A',
    // only activate on element attribute
    require: 'ngModel',
    // get a hold of NgModelController
    link: function link(scope, element, attrs, ngModel) {
      if (!ngModel) return; // do nothing if no ng-model
      // Specify how UI should be updated

      ngModel.$render = function () {
        if (!ngModel.$viewValue) {
          // if model value is blank make sure the view reflects that
          element.html($sce.getTrustedHtml(''));
          return;
        } // var html = '';
        // ngModel.$viewValue.split('\n').forEach(function(val){
        //     html += '<p>';
        //     html += val || '<br>';
        //     html += '</p>';
        // });


        element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
        element[0].focus();
      }; // Listen for change events to enable binding


      element.on('blur keyup change', function () {
        scope.$evalAsync(read);
      }); // LOL do I need this?!
      //read(); // initialize
      // Write data to the model

      function read() {
        var html = element.html(); // When we clear the content editable the browser leaves a <br> behind
        // If strip-br attribute is provided then we strip this out

        if (attrs.stripBr && html == '<br>') {
          html = '';
        }

        ngModel.$setViewValue(html);
      }
    }
  };
}]);
angular.module('BaseApp').directive('inputDropdown', ['$templateRequest', '$compile', '$document', function ($templateRequest, $compile, $document) {
  return {
    restrict: 'A',
    require: 'ngModel',
    scope: {
      data: '=inputDropdownData',
      template: '=inputDropdownTemplate',
      optionClick: '&inputDropdownClick'
    },
    link: function link(scope, element, attrs, ngModel) {
      // init
      //scope.filter = 'name';
      scope.search = {};
      scope.search.name = '';

      var findAncestor = function findAncestor(el, sel) {
        while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {
          ;
        }

        return el;
      };

      var checkToClose = function checkToClose(event) {
        if (!findAncestor(event.target, '.input-dropdown')) {
          element[0].parentNode.classList.remove('open');
          scope.search.name = '';
        } else {//console.log(event.target);
          //$document.unbind('click', checkToClose);
        }
      };

      $templateRequest(scope.template).then(function (template) {
        var wrp = '<div class="dropdown input-dropdown"><label for="' + attrs.id + '"></label></div>';
        element.wrap(wrp);
        var el = $compile(template)(scope);
        element.after(el);
      });

      var filterData = function filterData(value) {
        scope.search.name = value;
      };

      scope.click = function (option) {
        option = angular.copy(option);
        element[0].parentNode.classList.remove('open');
        scope.search.name = '';
        scope.optionClick({
          option: option
        });
      };

      scope.$watch(function () {
        return ngModel.$modelValue;
      }, function (newValue, oldValue) {
        if (typeof newValue === 'undefined') return;
        if (newValue === oldValue) return;
        filterData(newValue);
      }, true);
      $document.bind('click', checkToClose);
      element.bind('focus', function (event) {
        var opened = document.querySelector('.input-dropdown.open');

        if (opened) {
          opened.classList.remove('open');
        }

        event.target.parentNode.classList.add('open');
      });
      element.bind('blur', function (event) {//event.target.parentNode.classList.remove('open');
      });
    }
  };
}]);
angular.module('BaseApp').directive('addTeamMember', ['$compile', '$timeout', '$parse', function ($compile, $timeout, $parse) {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function link(scope, element, attrs, ngModel) {
      //console.log(attrs);
      //console.log(scope);
      scope.autoCompleteSelectedIndex = -1;
      var wrp = '<div style="position:relative;"></div>';
      element.wrap(wrp);
      var tpl = '<div ng-include="\'/templates/v2/app/partials/mention_team_members.html\'"></div>';
      var el = $compile(tpl)(scope);
      element.after(el);
      var model = $parse(attrs.ngModel);
      var members = []; // update the position of the dropdown if needed

      scope.$watch(function () {
        scope.textareaHeight = element[0].offsetHeight + 3;
      }); // make sure active company is loaded (video interview)

      scope.$watch('members', function (newVal, oldVal) {
        if (!newVal) return; //console.log(newVal);

        members = angular.copy(newVal);
      });

      scope.addSuggestedMention = function (suggestion) {
        model.assign(scope, '');
        scope.suggestions = [];
        var fn = $parse(attrs.addTeamMember);
        fn(scope, {
          suggestion: suggestion
        });
      };

      function mentionAutocomplete(event) {
        scope.suggestions = [];

        if (!model(scope)) {
          return;
        }

        scope.autoCompleteSelectedIndex = -1;
        var mention = model(scope).toLowerCase().trim();
        angular.forEach(members, function (member) {
          if (member.name.toLowerCase().indexOf(mention) != -1 || member.username.toLowerCase().indexOf(mention) != -1 || member.email_address.indexOf(mention) != -1) {
            scope.suggestions.push(member);
          }
        });

        if (scope.suggestions.length <= 0 && isEmail(mention)) {
          scope.suggestions.push({
            id: mention,
            initial: mention.substring(0, 1).toUpperCase(),
            name: mention,
            hex_color: 'color2',
            email_address: mention
          });
        }
      } // onchange event


      ngModel.$viewChangeListeners.push(mentionAutocomplete);

      var isEmail = function isEmail(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
      }; // key down event bind


      element.bind('keydown', function (event) {
        var suggestion;

        if (event.keyCode == 13 && !event.shiftKey) {
          if (scope.autoCompleteSelectedIndex == -1) {
            var value = model(scope);

            if (scope.suggestions.length === 1) {
              scope.addSuggestedMention(scope.suggestions[0]);
            } else if (isEmail(value)) {
              var member = {
                id: value,
                initial: value.substring(0, 1).toUpperCase(),
                name: value,
                hex_color: 'color2',
                email_address: value
              };
              scope.addSuggestedMention(member);
            }
          } else {
            suggestion = scope.suggestions[scope.autoCompleteSelectedIndex];
            scope.addSuggestedMention(suggestion);
            scope.autoCompleteSelectedIndex = -1;
          }

          event.preventDefault();
          event.stopPropagation();
        }

        if (!scope.suggestions || scope.suggestions.length === 0) {
          return;
        }
        /*if(event.keyCode == 9) {
            suggestion = scope.suggestions[scope.autoCompleteSelectedIndex];
            scope.addSuggestedMention(suggestion);
            scope.autoCompleteSelectedIndex = -1;
            event.preventDefault();
        }*/


        if (event.keyCode == 40) {
          if (scope.suggestions.length > 0 && scope.autoCompleteSelectedIndex < scope.suggestions.length - 1) {
            scope.autoCompleteSelectedIndex++;
          }

          event.preventDefault();
        }

        if (event.keyCode == 38) {
          if (scope.suggestions.length > 0 && scope.autoCompleteSelectedIndex > 0) {
            scope.autoCompleteSelectedIndex--;
          }

          event.preventDefault();
        }

        if (event.keyCode == 27) {
          model.assign(scope, '');
          scope.suggestions = [];
          event.preventDefault();
          event.stopPropagation();
        }
      });
    }
  };
}]);
angular.module('BaseApp').directive('insertTemplateVariable', ['$rootScope', '$timeout', function ($rootScope, $timeout) {
  return {
    link: function link(scope, element, attrs) {
      if (attrs.mediumEditor) {
        element.bind('blur', function () {
          MediumEditor.getEditorFromElement(element[0]).saveSelection();
        });
      }

      $rootScope.$on('insertTemplateVariable:' + attrs.insertTemplateVariable, function (e, val) {
        //console.log('here trying to insert');
        var domElement = element[0],
            sel,
            range;

        if (domElement.tagName == 'DIV') {
          var editor = MediumEditor.getEditorFromElement(domElement);

          if (editor) {
            editor.restoreSelection();
          } else {
            domElement.focus();
          }

          if (window.getSelection) {
            sel = window.getSelection();

            if (sel.getRangeAt && sel.rangeCount) {
              range = sel.getRangeAt(0);
              range.deleteContents();
              range.insertNode(document.createTextNode(val));
            }
          } else if (document.selection && document.selection.createRange) {
            document.selection.createRange().text = val;
          }
          /*$timeout(function() {
              // We must reevaluate the value in case it was changed by a subsequent
              // watch handler in the digest.
              angular.element(domElement).triggerHandler('change');
              //$rootScope.$apply();
           }, 1000, false);*/

        } else {
          if (document.selection) {
            domElement.focus();
            sel = document.selection.createRange();
            sel.text = val + ' ';
            domElement.focus();
            domElement.select();
          } else if (domElement.selectionStart || domElement.selectionStart === 0) {
            var startPos = domElement.selectionStart;
            var endPos = domElement.selectionEnd;
            var scrollTop = domElement.scrollTop;
            domElement.value = domElement.value.substring(0, startPos) + val + ' ' + domElement.value.substring(endPos, domElement.value.length);
            domElement.focus();
            domElement.select();
            domElement.selectionStart = startPos + val.length;
            domElement.selectionEnd = startPos + val.length;
            domElement.scrollTop = scrollTop;
          } else {
            domElement.value += val + ' ';
            domElement.focus();
            domElement.select();
          }
          /** trigger the parent model to update its value */


          angular.element(domElement).triggerHandler('input');
        }
      });
    }
  };
}]);
angular.module('BaseApp').directive('scrollOnDrag', function () {
  return {
    restrict: 'A',
    link: function compile(scope, element, attrs, controller) {
      var amount = 0;
      var moveWidth = 40;
      var scrolling = false;

      var scroll = function scroll(val) {
        amount = amount + val;
        $('#lists-container').animate({
          scrollLeft: amount
        }, 100, 'linear', function () {
          if (scrolling && amount < window.innerWidth + moveWidth && amount > moveWidth * -1) {
            scroll(val);
          }
        });
      };

      $("#lists-container").off();
      $("#lists-container").on("scroll", function (event) {
        amount = $("#lists-container").scrollLeft();
      });
      $("#lists-container").on("mousemove touchmove", function (event) {
        var sidebarWidth = document.querySelector('.sidebar-minimized') ? 60 : 230;
        var winWidth = window.innerWidth;
        var winHeight = window.innerHeight;
        var left = event.pageX;
        var top = event.pageY; //console.log(`${winWidth - left} < ${sidebarWidth + 100}`);

        if (winWidth - left < 100 && top > 120 && top < winHeight - 100) {
          if (scrolling) {
            return;
          }

          scrolling = true;
          scroll(moveWidth);
        } else if (left > 0 && left < sidebarWidth + 100 && top > 120 && top < winHeight - 100) {
          if (scrolling) {
            return;
          }

          scrolling = true;
          scroll(moveWidth * -1);
        } else {
          scrolling = false;
        }
      });
    }
  };
});
angular.module('BaseApp').directive('formatBody', function () {
  return {
    restrict: 'A',
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatBody',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (value) {
        if (!value) {
          return;
        }

        value = value.replace(/\</g, "&lt;");
        value = value.replace(/\>/g, "&gt;"); // Emoticons

        value = value.replace(/\(heart\)/g, "<i class='fa fa-heart'></i>");
        value = value.replace(/\(love\)/g, "<i class='fa fa-heart'></i>");
        value = value.replace(/\(happy\)/g, "<i class='fa fa-smile-o'></i>");
        value = value.replace(/\(sad\)/g, "<i class='fa fa-frown-o'></i>");
        value = value.replace(/\(meh\)/g, "<i class='fa fa-meh-o'></i>");
        value = value.replace(/\(y\)/g, "<i class='fa fa-thumbs-up'></i>");
        value = value.replace(/\(n\)/g, "<i class='fa fa-thumbs-down'></i>");
        value = value.replace(/:love:/g, "<i class='fa fa-heart'></i>");
        value = value.replace(/:heart:/g, "<i class='fa fa-heart'></i>");
        value = value.replace(/:thumbsup:/g, "<i class='fa fa-thumbs-up'></i>");
        value = value.replace(/:thumbsdown:/g, "<i class='fa fa-thumbs-down'></i>");
        value = value.replace(/:grin:/g, "<i class='fa fa-smile-o'></i>");
        value = value.replace(/:smile:/g, "<i class='fa fa-smile-o'></i>");
        value = value.replace(/:grinning:/g, "<i class='fa fa-smile-o'></i>");
        value = value.replace(/:sad:/g, "<i class='fa fa-frown-o'></i>");
        value = value.replace(/:frown:/g, "<i class='fa fa-frown-o'></i>");
        value = value.replace(/\:pensive:/g, "<i class='fa fa-meh-o'></i>"); // Keep newlines

        value = value.replace(/\n/g, '<br />'); // Usernames

        value = value.replace(/^(@\w+)/ig, "<span class='username'>$1</span>");
        value = value.replace(/\s(@\w+)/ig, "<span class='username'> $1</span>"); // URLs

        var rgx = /(\(.*?)?\b((?:https?|ftp|file):\/\/[-a-z0-9+&@#\/%?=~_()|!:,.;]*[-a-z0-9+&@#\/%=~_()|])/ig;
        value = value.replace(rgx, function (match, lParens, url) {
          var rParens = '';
          lParens = lParens || '';
          var lParenCounter = /\(/g;

          while (lParenCounter.exec(lParens)) {
            var m;

            if (!!(m = /(.*)(\.\).*)/.exec(url)) || /(.*)(\).*)/.exec(url)) {
              if (m) {
                url = m[1];
                rParens = m[2] + rParens;
              }
            }
          }

          var displayUrl = url;

          if (displayUrl.length > 60) {
            displayUrl = displayUrl.substring(0, 40) + '...' + displayUrl.substring(displayUrl.length - 16, displayUrl.length);
          }

          displayUrl = displayUrl.replace('http://', '');
          displayUrl = displayUrl.replace('https://', '');
          displayUrl = displayUrl.replace(/\/$/, '');
          return lParens + "<a href='" + url + "' target='_blank'>" + displayUrl + "</a>" + rParens;
        });
        element.html(value);

        var toggleTruncate = function toggleTruncate(e) {
          if (element.hasClass('fader')) {
            element.removeClass('fader');
            element.css('height', 'auto');
          }
          /* else {
             element.addClass('fader');
             element.css('height', attrs.truncateHeightTo+'px');
          }*/

        };

        if (element[0].clientHeight > attrs.truncateHeightTo) {
          element.css('height', attrs.truncateHeightTo + 'px');
          element.addClass('truncate-height-to fader');
          element.bind('click', toggleTruncate);
        }
      });
    }
  };
});
angular.module('BaseApp').directive('formatAreaOfStudy', function () {
  return {
    restrict: "EAC",
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatAreaOfStudy',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (data) {
        var value = '';

        try {
          if (data.field_of_study && data.degree) {
            value = data.degree + ', ' + data.field_of_study;
          } else if (data.degree) {
            value = data.degree;
          } else if (data.field_of_study) {
            value = data.field_of_study;
          }

          value.replace('"', '');
        } catch (e) {
          console.log(e);
        }

        value = value.replace("<", "");
        value = value.replace(">", "");
        return element.html(value);
      });
    }
  };
});
angular.module('BaseApp').directive('formatEducationTime', function () {
  return {
    restrict: "EAC",
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatEducationTime',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (data) {
        var value;

        try {
          if (data.start_date && data.start_date.year && data.is_current) {
            value = data.start_date.year + ' - Present';
          } else if (data.start_date && data.start_date.year && data.end_date && data.end_date.year) {
            value = data.start_date.year + ' - ' + data.end_date.year;
          } else if (data.end_date && data.end_date.year) {
            value = data.end_date.year;
          } else if (data.is_current) {
            value = 'Present';
          }
        } catch (e) {}

        return element.html(value);
      });
    }
  };
});
angular.module('BaseApp').directive('formatEmploymentTime', function () {
  return {
    restrict: "EAC",
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatEmploymentTime',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (data) {
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        var getMonth = function getMonth(idx) {
          var m = monthNames[idx - 1];

          if (!m) {
            m = '';
          }

          return m;
        };

        var getYear = function getYear(val) {
          if (val && val !== null) return val;else return '';
        };

        var value, startMonth;

        try {
          if (getMonth(data.start_date.month - 1) && data.start_date && data.is_current) {
            value = getMonth(data.start_date.month - 1) + ' ' + getYear(data.start_date.year) + ' - Present';
          } else if (getYear(data.start_date.year) && data.start_date && data.is_current) {
            value = getYear(data.start_date.year) + ' - Present';
          } else if (data.start_date && !data.end_date) {
            startMonth = getMonth(data.start_date.month);

            if (startMonth) {
              value = getMonth(data.start_date.month) + ' ' + getYear(data.start_date.year);
            } else {
              value = getYear(data.start_date.year);
            }
          } else if (data.start_date && data.end_date) {
            startMonth = getMonth(data.start_date.month);

            if (startMonth) {
              value = getMonth(data.start_date.month) + ' ' + getYear(data.start_date.year) + ' - ' + getMonth(data.end_date.month) + ' ' + getYear(data.end_date.year);
            } else {
              value = getYear(data.start_date.year) + ' - ' + getYear(data.end_date.year);
            }
          }
        } catch (e) {}

        return element.html(value);
      });
    }
  };
});
angular.module('BaseApp').directive('formatFileSize', function () {
  return {
    restrict: "EAC",
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatFileSize',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (data) {
        if (!data) {
          return element.html('');
        }

        var value;

        if (data > 1000000) {
          value = Math.round(data / 1000000) + " MB";
        } else if (data > 1000) {
          value = Math.round(data / 1000) + " KB";
        } else {
          value = data + " B";
        }

        return element.html(value);
      });
    }
  };
});
angular.module('BaseApp').directive('ensureEmailAvailable', ['$http', function ($http) {
  return {
    require: 'ngModel',
    link: function link(scope, ele, attrs, c) {
      scope.$watch(attrs.ngModel, function () {
        $http({
          method: 'POST',
          url: '/api/check/' + attrs.ensureEmailAvailable,
          data: {
            'field': attrs.ensureEmailAvailable
          }
        }).success(function (data, status, headers, cfg) {
          c.$setValidity('unique', data.isAvailable);
        }).error(function (data, status, headers, cfg) {
          c.$setValidity('unique', false);
        });
      });
    }
  };
}]);
angular.module('BaseApp').directive('focusInput', function ($timeout) {
  return {
    link: function link(scope, element, attrs) {
      element.bind('click', function () {
        $timeout(function () {
          element.parent().parent().parent().parent().parent().parent().find('input')[0].focus();
        });
      });
    }
  };
});
angular.module('BaseApp').directive('stopEvent', function () {
  return {
    restrict: 'A',
    link: function link(scope, element, attr) {
      element.bind('click', function (e) {
        e.stopPropagation();
      });
    }
  };
});
angular.module('BaseApp').directive('formatPositionMeta', function () {
  return {
    restrict: "A",
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=formatPositionMeta',
      ngModel: '=ngModel'
    },
    link: function compile(scope, element, attrs, controller) {
      scope.$watch('ngModel', function (position, oldData) {
        if (!position) {
          return;
        }

        var value = '';
        value += '<span class="' + position.type.id + '">';
        value += position.type.name;
        value += '</span>';

        if (position.location.name) {
          value += '<span> in </span>';
          value += '<i class="fa fa-map-marker" />';
          value += '<span>';
          value += position.location.name;
          value += '</span>';
        }

        if (position.location.is_remote) {
          value += '<span> - </span>';
          value += '<i class="fa fa-wifi" />';
          value += '<span>Remote OK</span>';
        }

        if (position.experience) {
          value += '<span> - </span>';
          value += '<i class="fa fa-graduation-cap" />';
          value += '<span>';
          value += position.experience.name;
          value += '</span>';
        }

        if (position.department) {
          value += '<span> - </span>';
          value += '<i class="fa fa-sitemap" />';
          value += '<span>';
          value += position.department;
          value += '</span>';
        }

        element.html(value);
      });
    }
  };
});
angular.module('BaseApp').directive('avatar', function () {
  return {
    restrict: 'E',
    scope: {
      person: '=person'
    },
    link: function link(scope, element, attrs) {
      scope.$watch('person', function (person, old) {
        if (person === old) return;
        if (old) element.removeClass(old.hex_color);
        element.removeClass('good');
        element.removeClass('poor');
        element.removeClass('neutral');
        element.removeAttr('initial');
        element.removeAttr('score');
        element.removeAttr('score-sm');
        init();
      }, true);

      if (attrs.size) {
        element.addClass(attrs.size);
      }

      if (attrs.admin && attrs.admin == 'true') {
        element.attr('admin');
      }

      var init = function init() {
        if (scope.person) {
          element.addClass('avatar');
          element.addClass(scope.person.hex_color);
          element.attr('initial', scope.person.initial);
          var this_image = scope.person.profile_photo_url;

          if (scope.person.headshot_url) {
            this_image = scope.person.headshot_url;
          }

          if (this_image) {
            var img = new Image();

            if (this_image.indexOf("avatar-cdn.breezy.hr") > -1) {
              img.src = this_image.replace("avatar-cdn.breezy.hr", "breezy-avatars.imgix.net") + "?w=200&h=200&crop=faces&fit=crop";
            } else {
              img.src = this_image;
            }

            img.onload = function () {
              element.empty();
              element.append(img);
            };
          } else {
            element.empty();
          }

          if ((attrs.showScore || attrs.showScoreSm) && scope.person.overall_score && scope.person.overall_score.hasOwnProperty("score")) {
            if (attrs.showScore) {
              element.attr('score', scope.person.overall_score.score);
            } else if (attrs.showScoreSm) {
              element.attr('score-sm', scope.person.overall_score.score);
            }

            if (scope.person.overall_score.score > 0) {
              element.addClass('good');
            } else if (scope.person.overall_score.score < 0) {
              element.addClass('poor');
            } else if (scope.person.overall_score.score === 0) {
              element.addClass('neutral');
            }
          }
        }
      };

      init();
    }
  };
});
angular.module('BaseApp').filter('teamMembers', function () {
  return function (members, userIds) {
    return members.filter(function (member) {
      return userIds.indexOf(member._id) > -1;
    });
  };
});
angular.module('BaseApp').filter('positionMembers', function () {
  return function (members, userIds) {
    userIds = userIds || [];
    return members.filter(function (member) {
      return userIds.indexOf(member._id) > -1;
    });
  };
});
angular.module('BaseApp').filter('keyToLabel', function () {
  return function (key) {
    key = key.replace(/([A-Z])/g, ' $1');
    key = key.replace(/^./, function (str) {
      return str.toUpperCase();
    });
    return key;
  };
});
angular.module('BaseApp').filter('keyToString', function () {
  return function (key) {
    key = key.replace(/([ ])/g, ' ');
    return key;
  };
});
angular.module('BaseApp').filter('groupBy', function ($parse) {
  return _.memoize(function (items, field) {
    var getter = $parse(field);
    return _.groupBy(items, function (item) {
      return getter(item);
    });
  });
});
angular.module('BaseApp').filter('candidatesGridSort', function () {
  return function (candidates, key, reverse) {
    candidates = candidates.sort(function (a, b) {
      return a[key] > b[key];
    });
    if (reverse) candidates = candidates.reverse();
    return candidates;
  };
});
angular.module('BaseApp').filter('ellipsis', function () {
  return function (str, limit) {
    str = str || '';
    limit = limit || 50;

    if (str.length > limit) {
      str = str.substring(0, limit).trim() + '...';
    }

    return str;
  };
});
angular.module('BaseApp').filter('newLinesToBrs', function () {
  return function (str) {
    str = str || '';
    str = str.replace(/\n/g, '<br />');
    return str;
  };
});
angular.module('BaseApp').filter('unsafe', function ($sce) {
  return $sce.trustAsHtml;
});
angular.module('BaseApp').filter("emptyToEnd", function () {
  return function (array, key) {
    var keys = key.split(".");
    if (!angular.isArray(array)) return;
    var present = array.filter(function (item) {
      if (keys.length > 1) {
        return item[keys[0]][keys[1]];
      } else {
        return item[keys[0]];
      }
    });
    var empty = array.filter(function (item) {
      if (keys.length > 1) {
        return !item[keys[0]][keys[1]];
      } else {
        return !item[keys[0]];
      }
    });
    return present.concat(empty);
  };
});
//# sourceMappingURL=breezy.js.map
